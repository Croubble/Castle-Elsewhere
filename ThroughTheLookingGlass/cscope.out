cscope 15 $HOME\source\repos\ThroughTheLookingGlass\ThroughTheLookingGlass"               0001881084
	@AABB.cpp

1 
	~"M©h.h
"

4 
	$m©h_AABB_bªak_öto_b‹dîs
(
AABB
 
box
, AABB* 
ouçut
, 
b‹dî_size
)

7 
ouçut
[0] = 
	`m©h_AABB_¸óã
(
box
.
x
, box.
y
, box.
w
, 
b‹dî_size
);

9 
ouçut
[1] = 
	`m©h_AABB_¸óã
(
box
.
x
, box.
y
 + box.
h
 - 
b‹dî_size
, box.
w
, border_size);

11 
ouçut
[2] = 
	`m©h_AABB_¸óã
(
box
.
x
,box.
y
,
b‹dî_size
,box.
h
);

13 
ouçut
[3] = 
	`m©h_AABB_¸óã
(
box
.
x
 + box.
w
 - 
b‹dî_size
,box.
y
,b‹dî_size, box.
h
);

14 
	}
}

15 
AABB
 
	$m©h_AABB_¸óã
(
x
, 
y
, 
width
, 
height
)

17 
AABB
 
ªsu…
;

18 
ªsu…
.
x
 = x;

19 
ªsu…
.
y
 = y;

20 
ªsu…
.
w
 = 
width
;

21 
ªsu…
.
h
 = 
height
;

22  
ªsu…
;

23 
	}
}

24 
AABB
 
	$m©h_AABB_¸óã_öt
(
x
, 
y
, 
width
, 
height
)

26 
AABB
 
ªsu…
;

27 
ªsu…
.
x
 = () x;

28 
ªsu…
.
y
 = () y;

29 
ªsu…
.
w
 = (Ë
width
;

30 
ªsu…
.
h
 = (Ë
height
;

31  
ªsu…
;

32 
	}
}

34 
boﬁ
 
	$m©h_AABB_is_cﬁlidög
(
AABB
 
ã°
, AABB* 
agaö°_¨øy
, 
Àngth
)

36 
i
 = 0; i < 
Àngth
; i++)

38 
AABB
 
agaö°
 = 
agaö°_¨øy
[
i
];

39 i‡(
ã°
.
x
 < 
agaö°
.x +ágaö°.
w
 &&

40 
ã°
.
x
 +Åe°.
w
 > 
agaö°
.x &&

41 
ã°
.
y
 < 
agaö°
.y +ágaö°.
h
 &&

42 
ã°
.
y
 +Åe°.
h
 > 
agaö°
.y)

44  
åue
;

47  
Ál£
;

48 
	}
}

49 
boﬁ
 
	$m©h_AABB_is_cﬁlidög
(
AABB
 
ã°
, AABB* 
agaö°_¨øy
, 
Àngth
, * 
cﬁlisi⁄_ödex_out
)

51 
i
 = 0; i < 
Àngth
; i++)

53 
AABB
 
agaö°
 = 
agaö°_¨øy
[
i
];

54 i‡(
ã°
.
x
 < 
agaö°
.x +ágaö°.
w
 &&

55 
ã°
.
x
 +Åe°.
w
 > 
agaö°
.x &&

56 
ã°
.
y
 < 
agaö°
.y +ágaö°.
h
 &&

57 
ã°
.
y
 +Åe°.
h
 > 
agaö°
.y)

59  
i
;

62  
Ál£
;

63 
	}
}

64 
boﬁ
 
	$m©h_AABB_is_cﬁlidög
(
AABB
 
ã°
, AABB* 
agaö°_¨øy
, 
Àngth
, * 
cﬁlisi⁄_ödexes_out
, 
max_cﬁlisi⁄s_to_föd
)

66 
cuºít_numbî_of_cﬁlisi⁄s
 = 0;

67 
i
 = 0; i < 
Àngth
; i++)

69 
AABB
 
agaö°
 = 
agaö°_¨øy
[
i
];

70 i‡(
ã°
.
x
 < 
agaö°
.x +ágaö°.
w
 &&

71 
ã°
.
x
 +Åe°.
w
 > 
agaö°
.x &&

72 
ã°
.
y
 < 
agaö°
.y +ágaö°.
h
 &&

73 
ã°
.
y
 +Åe°.
h
 > 
agaö°
.y)

75 
cﬁlisi⁄_ödexes_out
[
cuºít_numbî_of_cﬁlisi⁄s
] = 
i
;

76 
cuºít_numbî_of_cﬁlisi⁄s
++;

77 i‡(
cuºít_numbî_of_cﬁlisi⁄s
 >
max_cﬁlisi⁄s_to_föd
)

78  
åue
;

81  
Ál£
;

82 
	}
}

84 
	$m©h_˛ick_is_öside_AABB_li°
(
˛ickX
, 
˛ickY
, 
AABB
* 
boxes
, 
tŸÆ_boxes
)

86 
i
 = 0; i < 
tŸÆ_boxes
; i++)

88 i‡(
	`m©h_˛ick_is_öside_AABB
(
˛ickX
, 
˛ickY
, 
boxes
[
i
]))

89  
i
;

92 
	}
}

	@Animation.cpp

1 
	~"Anim©i⁄.h
"

	@Animation.h

1 #¥agm®
⁄˚


2 
	~"GameSèã.h
"

3 
	~"M©h.h
"

4 
	~"Mem‹y.h
"

5 c⁄° 
	gZ_POSITION_STARTING_LAYER
 = 2;

6 c⁄° 
	gMAX_CRATE_ANIMATIONS
 = 4;

	@Camera.cpp

1 
	~"M©h.h
"

3 
	~"glm/glm.hµ
"

4 
	~"glm/gtc/m©rix_å™sf‹m.hµ
"

5 
	~"GameSèã.h
"

7 
	gglm
::
m©4
 
	$ˇmîa_make_m©rix
(
GameS∑˚Camîa
 
ˇmîa
)

9  
glm
::
	`‹tho
(
ˇmîa
.
À·
, camîa.
right
, camîa.
down
, camîa.
up
, camîa.
˛o£Poöt
, camîa.
ÁrPoöt
);

10 
	}
}

11 
	$ˇmîa_øtio
(
VõwP‹tCamîa
 
võwp‹t
)

13 
height
 = 
võwp‹t
.
up
 - võwp‹t.
down
;

14 
width
 = 
võwp‹t
.
right
 - võwp‹t.
À·
;

15  (Ë
width
 / (Ë
height
;

16 
	}
}

17 
	$move_ˇµed_di°™˚
(
pos
, 
gﬂl
, 
ˇp
)

19 
di°
 = 
gﬂl
 - 
pos
;

20 i‡(
di°
 < 0)

22 i‡(
di°
 >-
ˇp
)

23  
gﬂl
;

24  
pos
 - 
ˇp
;

26 i‡(
di°
 > 0)

28 i‡(
di°
 <
ˇp
)

29  
gﬂl
;

30  
pos
 + 
ˇp
;

32  
pos
;

33 
	}
}

34 
GameS∑˚Camîa
 
	$m©h_ˇmîa_ªposôi⁄_tow¨ds_öã∫Æ
(
GameS∑˚Camîa
 
movög
, GameS∑˚Camî®
gﬂl
, 
max_di°™˚
)

36 
GameS∑˚Camîa
 
ªsu…
;

37 
À·_move_ªque°
 = 
gﬂl
.
À·
 - 
movög
.left;

38 
right_move_ªque°
 = 
gﬂl
.
right
 - 
movög
.right;

39 
up_move_ªque°
 = 
gﬂl
.
up
 - 
movög
.up;

40 
down_move_ªque°
 = 
gﬂl
.
down
 - 
movög
.down;

41 
x_move
 = (
À·_move_ªque°
 + 
right_move_ªque°
) / 2.0f;

42 
y_move
 = (
up_move_ªque°
 + 
down_move_ªque°
) / 2.0f;

43 i‡(
x_move
 > 0)

44 
x_move
 = 
	`möf
(x_move, 
max_di°™˚
);

45 i‡(
y_move
 > 0)

46 
y_move
 = 
	`möf
(y_move, 
max_di°™˚
);

47 i‡(
x_move
 < 0)

48 
x_move
 = 
	`maxf
(x_move, -
max_di°™˚
);

49 i‡(
y_move
 < 0)

50 
y_move
 = 
	`maxf
(y_move, -
max_di°™˚
);

52 i‡(
x_move
 =0 && 
y_move
 == 0)

53  
movög
;

55 
ªsu…
.
À·
 = 
movög
.À· + 
x_move
;

56 
ªsu…
.
right
 = 
movög
.righà+ 
x_move
;

57 
ªsu…
.
up
 = 
movög
.u∞+ 
y_move
;

58 
ªsu…
.
down
 = 
movög
.dow¿+ 
y_move
;

59 
ªsu…
.
˛o£Poöt
 = 
movög
.closePoint;

60 
ªsu…
.
ÁrPoöt
 = 
movög
.farPoint;

61  
ªsu…
;

62 
	}
}

63 
GameS∑˚Camîa
 
	$m©h_ˇmîa_zoom_tow¨ds_öã∫Æ
(
GameS∑˚Camîa
 
movög
, GameS∑˚Camî®
gﬂl
, 
max_di°™˚
)

65 
GameS∑˚Camîa
 
ªsu…
;

66 
cuºít_height
 = 
movög
.
up
 - movög.
down
;

67 
gﬂl_height_jump
 = 
gﬂl
.
up
 - gﬂl.
down
;

68 
gﬂl_height
;

69 i‡(
gﬂl_height_jump
 - 
cuºít_height
 > 0)

71 
gﬂl_height
 = 
	`möf
(
gﬂl_height_jump
, 
cuºít_height
 + 
max_di°™˚
);

73 i‡(
gﬂl_height_jump
 - 
cuºít_height
 < 0)

75 
gﬂl_height
 = 
	`maxf
(
gﬂl_height_jump
, 
cuºít_height
 - 
max_di°™˚
);

78 
gﬂl_height
 = 
cuºít_height
;

80 
øtio
 = 
gﬂl_height
 / 
cuºít_height
;

81 
ˇmîa_˚¡î_x
 = (
movög
.
À·
 + movög.
right
) / 2.0f;

82 
ˇmîa_˚¡î_y
 = (
movög
.
up
 + movög.
down
) / 2.0f;

83 
ˇmîa_width
 = (
movög
.
right
 - movög.
À·
);

84 
ˇmîa_height
 = (
movög
.
up
 - movög.
down
);

85 
√w_ˇmîa_hÆf_width
 = (
ˇmîa_width
 / 2.0fË* 
øtio
;

86 
√w_ˇmîa_hÆf_height
 = (
ˇmîa_height
 / 2.0fË* 
øtio
;

88 
ªsu…
.
À·
 = 
ˇmîa_˚¡î_x
 - 
√w_ˇmîa_hÆf_width
;

89 
ªsu…
.
right
 = 
ˇmîa_˚¡î_x
 + 
√w_ˇmîa_hÆf_width
;

90 
ªsu…
.
down
 = 
ˇmîa_˚¡î_y
 - 
√w_ˇmîa_hÆf_height
;

91 
ªsu…
.
up
 = 
ˇmîa_˚¡î_y
 + 
√w_ˇmîa_hÆf_height
;

92 
ªsu…
.
˛o£Poöt
 = 
movög
.closePoint;

93 
ªsu…
.
ÁrPoöt
 = 
movög
.farPoint;

94  
ªsu…
;

95 
	}
}

98 
	$smoŸh_°¨t3
(
t
)

100  
t
 *Å *Å;

101 
	}
}

102 
	$smoŸh_°›3
(
t
)

104  1 - (1 - 
t
) * (1 -Å) * (1 -Å);

105 
	}
}

106 
	$mix
(
a
, 
b
, 
weight
, 
t
)

108  
a
 * (1 - 
weight
Ë+ 
b
 * weight;

109 
	}
}

110 
	$smoŸh_°ï3
(
t
)

112  
	`mix
(
	`smoŸh_°¨t3
(
t
), 
	`smoŸh_°›3
(t),Å,Å);

113 
	}
}

115 
GameS∑˚Camîa
 
	$m©h_ˇmîa_move_tow¨ds_ÀΩ
(
GameS∑˚Camîa
 
movög
, GameS∑˚Camî®
gﬂl
, 
cuºít_time
,
gﬂl_time
)

117 
t
 = 
cuºít_time
 / 
gﬂl_time
;

118 
t
 = 
	`möf
(t, 1);

119 
t
 = 
	`maxf
(t, 0);

120 
t
 = 
	`smoŸh_°ï3
(t);

121 
GameS∑˚Camîa
 
ªsu…
;

123 
x_˚¡î_ﬁd
 = (
movög
.
right
 + movög.
À·
) / 2.0f;

124 
y_˚¡î_ﬁd
 = (
movög
.
up
 + movög.
down
 )/ 2.0f;

125 
x_˚¡î_√xt
 = (
gﬂl
.
right
 + gﬂl.
À·
) / 2.0f;

126 
y_˚¡î_√xt
 = (
gﬂl
.
up
 + gﬂl.
down
) / 2.0f;

128 
x_˚¡î_now
 = 
x_˚¡î_ﬁd
 * (1 - 
t
Ë+ 
x_˚¡î_√xt
 *Å;

129 
y_˚¡î_now
 = 
y_˚¡î_ﬁd
 * (1 - 
t
Ë+ 
y_˚¡î_√xt
 *Å;

131 
zoom_ﬁd
 = 
movög
.
up
 - movög.
down
;

132 
zoom_√xt
 = 
gﬂl
.
up
 - gﬂl.
down
;

133 
zoom_now
 = 
zoom_ﬁd
 * (1 - 
t
Ë+ 
zoom_√xt
 *Å;

135 
øtio
 = (
movög
.
right
 - movög.
À·
Ë/ (movög.
up
 - movög.
down
);

136 
ªsu…
.
À·
 = 
x_˚¡î_now
 - (
zoom_now
 * 
øtio
) / 2.0f;

137 
ªsu…
.
right
 = 
x_˚¡î_now
 + (
zoom_now
 * 
øtio
) / 2.0f;

138 
ªsu…
.
up
 = 
y_˚¡î_now
 + 
zoom_now
 / 2.0f;

139 
ªsu…
.
down
 = 
y_˚¡î_now
 - 
zoom_now
 / 2.0f;

140 
ªsu…
.
˛o£Poöt
 = 
movög
.closePoint;

141 
ªsu…
.
ÁrPoöt
 = 
movög
.farPoint;

142  
ªsu…
;

143 
	}
}

144 
GameS∑˚Camîa
 
	$m©h_ˇmîa_buûd
(
ˇmîa_height
, 
s¸ìn_˚¡î_x
, 
s¸ìn_˚¡î_y
, 
VõwP‹tCamîa
 
võwp‹t
)

146 
GameS∑˚Camîa
 
ªsu…
;

148 
ˇmîa_À·_x
;

149 
ˇmîa_bŸtom_y
;

150 
ˇmîa_right_x
;

151 
ˇmîa_t›_y
;

154 
ˇmîa_võw_width
 = 
võwp‹t
.
right
 - võwp‹t.
À·
;

155 
ˇmîa_võw_height
 = 
võwp‹t
.
up
 - võwp‹t.
down
;

156 
øtio
 = ()
ˇmîa_võw_width
 / ()
ˇmîa_võw_height
;

157 
ˇmîa_À·_x
 = 
s¸ìn_˚¡î_x
 - (
ˇmîa_height
 * 
øtio
) / 2.0f;

158 
ˇmîa_bŸtom_y
 = 
s¸ìn_˚¡î_y
 - (
ˇmîa_height
) / 2.0f;

159 
ˇmîa_right_x
 = 
ˇmîa_À·_x
 + 
ˇmîa_height
 * 
øtio
;

160 
ˇmîa_t›_y
 = 
ˇmîa_bŸtom_y
 + 
ˇmîa_height
;

163 
ªsu…
.
À·
 = 
ˇmîa_À·_x
;

164 
ªsu…
.
right
 = 
ˇmîa_right_x
;

165 
ªsu…
.
up
 = 
ˇmîa_t›_y
;

166 
ªsu…
.
down
 = 
ˇmîa_bŸtom_y
;

167 
ªsu…
.
˛o£Poöt
 = -20;

168 
ªsu…
.
ÁrPoöt
 = 20.0f;

169  
ªsu…
;

170 
	}
}

171 
	gglm
::
vec2
 
	$m©h_s¸ìn•a˚_to_pixñ•a˚
(
I¡Paú
 
s¸ìnS∑˚Posôi⁄
, 
GameS∑˚Camîa
 
ˇmîa
, 
VõwP‹tCamîa
 
võw
, 
gameHeight
)

173 
glm
::
vec2
 
ªsu…
;

174 
ªsu…
.
x
 = 
s¸ìnS∑˚Posôi⁄
.x + 
ˇmîa
.
À·
 * 
võw
.
up
 / 
gameHeight
;

175 
ªsu…
.
y
 = 
s¸ìnS∑˚Posôi⁄
.y + 
ˇmîa
.
down
 * 
võw
.
up
 / 
gameHeight
;

176  
ªsu…
;

177 
	}
}

178 
	gglm
::
vec2
 
	$m©h_pixñ•a˚_to_s¸ìn•a˚
(
I¡Paú
 
pixñS∑˚Posôi⁄
, 
GameS∑˚Camîa
 
ˇmîa
, 
VõwP‹tCamîa
 
võw
, 
gameHeight
)

180 
glm
::
vec2
 
ªsu…
;

181 
ªsu…
.
x
 = 
pixñS∑˚Posôi⁄
.x - 
ˇmîa
.
À·
 * 
võw
.
up
 / 
gameHeight
;

182 
ªsu…
.
y
 = 
pixñS∑˚Posôi⁄
.y - 
ˇmîa
.
down
 * 
võw
.
up
 / 
gameHeight
;

183  
ªsu…
;

184 
	}
}

185 
	gglm
::
vec2
 
	$m©h_s¸ìn•a˚_to_game•a˚
(
I¡Paú
 
s¸ìnS∑˚Posôi⁄
, 
GameS∑˚Camîa
 
ˇmîa
, 
VõwP‹tCamîa
 
võw
, 
gameHeight
)

188 
glm
::
vec2
 
pixñ•a˚
 = 
	`m©h_s¸ìn•a˚_to_pixñ•a˚
(
s¸ìnS∑˚Posôi⁄
, 
ˇmîa
, 
võw
, 
gameHeight
);

190 
glm
::
vec2
 
ªsu…
;

191 
divide
 = 
	`m©h_game•a˚_to_pixñ•a˚_mu…ùlõr
(
võw
, 
gameHeight
);

192 
ªsu…
.
x
 = 
pixñ•a˚
.x / 
divide
;

193 
ªsu…
.
y
 = 
pixñ•a˚
.y / 
divide
;

195  
ªsu…
;

196 
	}
}

199 
	gglm
::
m©4
 
	$m©h_å™¶©ed_m©rix
(
glm
::
vec3
 
å™¶©e
)

201 
glm
::
m©4
 
ªsu…
 = glm::
	`m©4
(1.0);

202  
glm
::
	`å™¶©e
(
ªsu…
, 
å™¶©e
);

203 
	}
}

204 
	gglm
::
m©4
 
	$m©h_å™¶©ed_sˇÀd_m©rix
(
glm
::
vec3
 
å™¶©e
, glm::vec3 
sˇÀ
)

206 
glm
::
m©4
 
ªsu…
 = glm::
	`m©4
(1.0f);

207 
ªsu…
 = 
glm
::
	`å™¶©e
‘esu…, 
å™¶©e
);

208 
ªsu…
 = 
glm
::
	`sˇÀ
‘esu…, 
sˇÀ
);

209  
ªsu…
;

210 
	}
}

211 
	$m©h_game•a˚_to_pixñ•a˚_mu…ùlõr
(
VõwP‹tCamîa
 
võw
, 
gameHeight
)

213 
yDi°
 = (Ë
võw
.
up
 - (Ëvõw.
down
;

214 
ªsu…
 = 
yDi°
 / 
gameHeight
;

215  
ªsu…
;

216 
	}
}

217 
	$m©h_pixñ•a˚_to_game•a˚_mu…ùlõr
(
VõwP‹tCamîa
 
võw
, 
gameHeight
)

219  1 / 
	`m©h_game•a˚_to_pixñ•a˚_mu…ùlõr
(
võw
, 
gameHeight
);

220 
	}
}

	@Click.cpp

1 
	~"Click.h
"

5 
M≠pögSèã
 
	$˛ick_make_deÁu…_m≠pög_°©e
()

7 
M≠pögSèã
 
ªsu…
;

8 
i
 = 0; i < 
G_LENGTH
; i++)

10 
ªsu…
.
¥im¨y_m≠pög
[
i
] = 
SDLK_UNKNOWN
;

11 
ªsu…
.
£c⁄d¨y_m≠pög
[
i
] = 
SDLK_UNKNOWN
;

13 
ªsu…
.
¥im¨y_m≠pög
[
G_UP
] = 
SDLK_UP
;

14 
ªsu…
.
¥im¨y_m≠pög
[
G_DOWN
] = 
SDLK_DOWN
;

15 
ªsu…
.
¥im¨y_m≠pög
[
G_LEFT
] = 
SDLK_LEFT
;

16 
ªsu…
.
¥im¨y_m≠pög
[
G_RIGHT
] = 
SDLK_RIGHT
;

17 
ªsu…
.
¥im¨y_m≠pög
[
G_UNDO
] = 
SDLK_z
;

18 
ªsu…
.
¥im¨y_m≠pög
[
G_RESET
] = 
SDLK_r
;

19 
ªsu…
.
¥im¨y_m≠pög
[
G_EXIT_LEVEL
] = 
SDLK_q
;

20 
ªsu…
.
¥im¨y_m≠pög
[
G_BACK_MENU
] = 
SDLK_BACKSPACE
;

21 
ªsu…
.
¥im¨y_m≠pög
[
G_MENU_UP
] = 
SDLK_w
;

22 
ªsu…
.
¥im¨y_m≠pög
[
G_MENU_DOWN
] = 
SDLK_s
;

23 
ªsu…
.
¥im¨y_m≠pög
[
G_MENU_ENTER
] = 
SDLK_KP_ENTER
;

25 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_UP
] = 
SDLK_w
;

26 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_DOWN
] = 
SDLK_s
;

27 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_LEFT
] = 
SDLK_a
;

28 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_RIGHT
] = 
SDLK_d
;

29 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_UNDO
] = 
SDLK_UNKNOWN
;

30 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_RESET
] = 
SDLK_UNKNOWN
;

31 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_EXIT_LEVEL
] = 
SDLK_UNKNOWN
;

32 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_BACK_MENU
] = 
SDLK_UNKNOWN
;

33 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_MENU_UP
] = 
SDLK_UP
;

34 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_MENU_DOWN
] = 
SDLK_DOWN
;

35 
ªsu…
.
£c⁄d¨y_m≠pög
[
G_MENU_ENTER
] = 
SDLK_UNKNOWN
;

37  
ªsu…
;

38 
	}
}

39 
	$buâ⁄_˛ick_°©e_£t_Æl_Ál£
(
buâ⁄_˛ick_°©e
* 
°©e
)

41 
°©e
->
¥es£d
 = 
Ál£
;

42 
°©e
->
¥es£d_this_‰ame
 = 
Ál£
;

43 
°©e
->
ªÀa£d_this_‰ame
 = 
Ál£
;

44 
°©e
->
ªÀa£d_sö˚_¥es£d_œ°
 = 
åue
;

45 
°©e
->
time_¥es£d
 = 0;

46 
	}
}

48 
Edô‹UISèã
 
	$˛ick_ui_öô
(
Mem‹y
* 
≥rm™ít_mem‹y
)

50 
Edô‹UISèã
 
ªsu…
;

52 
ªsu…
.
time_sö˚_s˚√_°¨ãd
 = 0;

53 
ªsu…
.
time_tûl_∂ayî_ˇn_move
 = 0;

54 
ªsu…
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

56 
ªsu…
.
mo°_ª˚¡ly_¥es£d_dúe˘i⁄
 = ' ';

57 
ªsu…
.
Àâîs
 = (
buâ⁄_˛ick_°©e
*)
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (buâ⁄_˛ick_°©eË* 
NUM_LETTERS_ON_KEYBOARD
);

58 
i
 = 0; i < 
NUM_LETTERS_ON_KEYBOARD
; i++)

60 
ªsu…
.
Àâîs
[
i
].
¥es£d
 = 
Ál£
;

61 
ªsu…
.
Àâîs
[
i
].
¥es£d_this_‰ame
 = 
Ál£
;

62 
ªsu…
.
Àâîs
[
i
].
ªÀa£d_this_‰ame
 = 
Ál£
;

63 
ªsu…
.
Àâîs
[
i
].
ªÀa£d_sö˚_¥es£d_œ°
 = 
åue
;

64 
ªsu…
.
Àâîs
[
i
].
time_¥es£d
 = 0;

66 
	`buâ⁄_˛ick_°©e_£t_Æl_Ál£
(&
ªsu…
.
À·
);

67 
	`buâ⁄_˛ick_°©e_£t_Æl_Ál£
(&
ªsu…
.
right
);

68 
	`buâ⁄_˛ick_°©e_£t_Æl_Ál£
(&
ªsu…
.
down
);

69 
	`buâ⁄_˛ick_°©e_£t_Æl_Ál£
(&
ªsu…
.
up
);

70 
	`buâ⁄_˛ick_°©e_£t_Æl_Ál£
(&
ªsu…
.
•a˚b¨
);

71 
	`buâ⁄_˛ick_°©e_£t_Æl_Ál£
(&
ªsu…
.
íãr
);

72 
x
 = 
SDLK_UNDERSCORE
;

73 
z
 = 
SDLK_RIGHTPAREN
;

74 
ªsu…
.
game_height_cuºít
 = 
GAME_HEIGHT_START
;

75 
ªsu…
.
ty≥
 = 
ECS_NEUTRAL
;

76 
ªsu…
.
mou£GamePos
 = 
glm
::
	`vec2
(0, 0);

77 
ªsu…
.
mou£_œ°_pos
 = 
	`m©h_öçaú_¸óã
(0, 0);

78 
ªsu…
.
mou£Pos
 = 
	`m©h_öçaú_¸óã
(0, 0);

79 
ªsu…
.
tŸÆMove
 = 
	`m©h_öçaú_¸óã
(0, 0);

80 
ªsu…
.
mou£_À·_˛ick_down
 = 
Ál£
;

81 
ªsu…
.
mou£_right_˛ick_down
 = 
Ál£
;

82 
ªsu…
.
un
.
√uåÆ
.
x
 = 0;

83 
ªsu…
.
shi·_key_down_this_‰ame
 = 
Ál£
;

84 
ªsu…
.
shi·_key_up_this_‰ame
 = 
Ál£
;

85 
ªsu…
.
shi·_key_down
 = 
Ál£
;

86 
ªsu…
.
c⁄åﬁ_key_down
 = 
Ál£
;

87 
ªsu…
.
Æt_key_down
 = 
Ál£
;

88 
ªsu…
.
z_key_down_this_‰ame
 = 
Ál£
;

89 
ªsu…
.
back•a˚_key_down_this_‰ame
 = 
Ál£
;

91  
ªsu…
;

92 
	}
}

	@Click.h

1 #¥agm®
⁄˚


2 
	~"M©h.h
"

3 
	~<SDL.h
>

4 c⁄° 
	gGAME_HEIGHT_START
 = 12;

5 c⁄° 
	gNUM_LETTERS_ON_KEYBOARD
 = 
SDLK_z
 - 
SDLK_a
 + 1;

6 c⁄° 
	gMAX_NUM_KEYCODES
 = 256;

8 c⁄° 
	gNUM_KEYS_TO_TEST
 = 5;

10 
	eEdô‹ClickSèãTy≥


12 
	mECS_NEUTRAL
,

13 
	mECS_BRUSH
,

14 
	mECS_RESIZE_GAMESTATE
,

15 
	mECS_MOVE_GAMESTATE
,

16 
	mECS_CREATE_GAMESTATE
,

17 
	mECS_EDIT_NAME
,

18 
	mECS_COUNT


21 
	eGAME_ACTION


23 
	mG_UP
,

24 
	mG_DOWN
,

25 
	mG_LEFT
,

26 
	mG_RIGHT
,

27 
	mG_UNDO
,

28 
	mG_RESET
,

29 
	mG_EXIT_LEVEL
,

30 
	mG_BACK_MENU
,

31 
	mG_MENU_UP
,

32 
	mG_MENU_DOWN
,

33 
	mG_MENU_ENTER
,

34 
	mG_LENGTH
,

35 
	mG_ERROR


37 
	sNeuåÆClickSèã


39 
	mx
;

41 
	sBrushClickSèã


43 
	my
;

45 
	sResizeClickSèã


47 
boﬁ
 
	mdøggög_À·
;

48 
boﬁ
 
	mdøggög_right
;

49 
boﬁ
 
	mdøggög_up
;

50 
boﬁ
 
	mdøggög_down
;

51 
	mdøggög_game°©e_ödex
;

53 
	sMoveClickSèã


55 
	mmovög_game°©e_ödex
;

56 
	mglm
::
vec2
 
move_°¨t_posôi⁄
;

58 
	sCª©eGame°©eClickSèã


60 
I¡Paú
 
	mgamew‹ld_°¨t_pos
;

63 
	sbuâ⁄_˛ick_°©e


66 
boﬁ
 
	m¥es£d_this_‰ame
;

67 
boﬁ
 
	mªÀa£d_this_‰ame
;

68 
boﬁ
 
	m¥es£d
;

69 
boﬁ
 
	mªÀa£d_sö˚_¥es£d_œ°
;

70 
	mtime_¥es£d
;

73 
	sM≠pögSèã


75 
SDL_KeyCode
 
	m¥im¨y_m≠pög
[
G_LENGTH
];

76 
SDL_KeyCode
 
	m£c⁄d¨y_m≠pög
[
G_LENGTH
];

79 
	sEdô‹UISèã


81 
boﬁ
 
	mupd©e_a˘uÆ_s¸ìn_size
;

82 
	mglm
::
ivec2
 
√xt_ˇmîa_size
;

83 
	mtime_sö˚_s˚√_°¨ãd
;

84 
	mtime_tûl_∂ayî_ˇn_move
;

85 
	mtime_sö˚_œ°_∂ayî_a˘i⁄
;

86 
	mtŸÆ_time_∑s£d
;

87 
	mgame_height_cuºít
;

89 
	mmo°_ª˚¡ly_¥es£d_dúe˘i⁄
;

90 
buâ⁄_˛ick_°©e
* 
	mÀâîs
;

92 
buâ⁄_˛ick_°©e
 
	mÀ·
;

93 
buâ⁄_˛ick_°©e
 
	mright
;

94 
buâ⁄_˛ick_°©e
 
	mup
;

95 
buâ⁄_˛ick_°©e
 
	mdown
;

97 
buâ⁄_˛ick_°©e
 
	m•a˚b¨
;

98 
buâ⁄_˛ick_°©e
 
	míãr
;

99 
Edô‹ClickSèãTy≥
 
	mty≥
;

101 
boﬁ
 
	m˛ick_À·_down_this_‰ame
;

102 
boﬁ
 
	m˛ick_À·_up_this_‰ame
;

103 
boﬁ
 
	mmou£_À·_˛ick_down
;

104 
boﬁ
 
	mmou£_right_˛ick_down
;

105 
boﬁ
 
	mshi·_key_down_this_‰ame
;

106 
boﬁ
 
	mshi·_key_up_this_‰ame
;

107 
boﬁ
 
	mshi·_key_down
;

108 
boﬁ
 
	mc⁄åﬁ_key_down
;

109 
boﬁ
 
	mÆt_key_down
;

110 
boﬁ
 
	mz_key_down_this_‰ame
;

111 
	mwhìl_move
;

112 
boﬁ
 
	mback•a˚_key_down_this_‰ame
;

115 
	mglm
::
vec2
 
mou£GamePos
;

116 
I¡Paú
 
	mmou£_œ°_pos
;

117 
I¡Paú
 
	mmou£Pos
;

118 
I¡Paú
 
	mtŸÆMove
;

120 
NeuåÆClickSèã
 
	m√uåÆ
;

121 
BrushClickSèã
 
	mbrush
;

122 
ResizeClickSèã
 
	mªsize
;

123 
MoveClickSèã
 
	mmove
;

124 
Cª©eGame°©eClickSèã
 
	m¸óã
;

125 } 
	mun
;

128 
SDL_KeyCode
* 
˛ick_gë_Æl_keycodes
();

129 
M≠pögSèã
 
˛ick_make_deÁu…_m≠pög_°©e
();

130 
buâ⁄_˛ick_°©e_£t_Æl_Ál£
(
buâ⁄_˛ick_°©e
* 
°©e
);

131 
Edô‹UISèã
 
˛ick_ui_öô
(
Mem‹y
* 
≥rm™ít_mem‹y
);

133 c⁄° 
	gÆl_sdl_keycodes
[] = {

134 
SDLK_0
,

135 
SDLK_1
,

136 
SDLK_2
,

137 
SDLK_3
,

138 
SDLK_4
,

139 
SDLK_5
,

140 
SDLK_6
,

141 
SDLK_7
,

142 
SDLK_8
,

143 
SDLK_9
,

144 
SDLK_a
,

145 
SDLK_AC_BACK
,

146 
SDLK_AC_BOOKMARKS
,

147 
SDLK_AC_FORWARD
,

148 
SDLK_AC_HOME
,

149 
SDLK_AC_REFRESH
,

150 
SDLK_AC_SEARCH
,

151 
SDLK_AC_STOP
,

152 
SDLK_AGAIN
,

153 
SDLK_ALTERASE
,

154 
SDLK_QUOTE
,

155 
SDLK_APPLICATION
,

156 
SDLK_AUDIOMUTE
,

157 
SDLK_AUDIONEXT
,

158 
SDLK_AUDIOPLAY
,

159 
SDLK_AUDIOPREV
,

160 
SDLK_AUDIOSTOP
,

161 
SDLK_b
,

162 
SDLK_BACKSLASH
,

163 
SDLK_BACKSPACE
,

164 
SDLK_BRIGHTNESSDOWN
,

165 
SDLK_BRIGHTNESSUP
,

166 
SDLK_c
,

167 
SDLK_CALCULATOR
,

168 
SDLK_CANCEL
,

169 
SDLK_CAPSLOCK
,

170 
SDLK_CLEAR
,

171 
SDLK_CLEARAGAIN
,

172 
SDLK_COMMA
,

173 
SDLK_COMPUTER
,

174 
SDLK_COPY
,

175 
SDLK_CRSEL
,

176 
SDLK_CURRENCYSUBUNIT
,

177 
SDLK_CURRENCYUNIT
,

178 
SDLK_CUT
,

179 
SDLK_d
,

180 
SDLK_DECIMALSEPARATOR
,

181 
SDLK_DELETE
,

182 
SDLK_DISPLAYSWITCH
,

183 
SDLK_DOWN
,

184 
SDLK_e
,

185 
SDLK_EJECT
,

186 
SDLK_END
,

187 
SDLK_EQUALS
,

188 
SDLK_ESCAPE
,

189 
SDLK_EXECUTE
,

190 
SDLK_EXSEL
,

191 
SDLK_f
,

192 
SDLK_F1
,

193 
SDLK_F10
,

194 
SDLK_F11
,

195 
SDLK_F12
,

196 
SDLK_F13
,

197 
SDLK_F14
,

198 
SDLK_F15
,

199 
SDLK_F16
,

200 
SDLK_F17
,

201 
SDLK_F18
,

202 
SDLK_F19
,

203 
SDLK_F2
,

204 
SDLK_F20
,

205 
SDLK_F21
,

206 
SDLK_F22
,

207 
SDLK_F23
,

208 
SDLK_F24
,

209 
SDLK_F3
,

210 
SDLK_F4
,

211 
SDLK_F5
,

212 
SDLK_F6
,

213 
SDLK_F7
,

214 
SDLK_F8
,

215 
SDLK_F9
,

216 
SDLK_FIND
,

217 
SDLK_g
,

218 
SDLK_BACKQUOTE
,

219 
SDLK_h
,

220 
SDLK_HELP
,

221 
SDLK_HOME
,

222 
SDLK_i
,

223 
SDLK_INSERT
,

224 
SDLK_j
,

225 
SDLK_k
,

226 
SDLK_KBDILLUMDOWN
,

227 
SDLK_KBDILLUMTOGGLE
,

228 
SDLK_KBDILLUMUP
,

229 
SDLK_KP_0
,

230 
SDLK_KP_00
,

231 
SDLK_KP_000
,

232 
SDLK_KP_1
,

233 
SDLK_KP_2
,

234 
SDLK_KP_3
,

235 
SDLK_KP_4
,

236 
SDLK_KP_5
,

237 
SDLK_KP_6
,

238 
SDLK_KP_7
,

239 
SDLK_KP_8
,

240 
SDLK_KP_9
,

241 
SDLK_KP_A
,

242 
SDLK_KP_AMPERSAND
,

243 
SDLK_KP_AT
,

244 
SDLK_KP_B
,

245 
SDLK_KP_BACKSPACE
,

246 
SDLK_KP_BINARY
,

247 
SDLK_KP_C
,

248 
SDLK_KP_CLEAR
,

249 
SDLK_KP_CLEARENTRY
,

250 
SDLK_KP_COLON
,

251 
SDLK_KP_COMMA
,

252 
SDLK_KP_D
,

253 
SDLK_KP_DBLAMPERSAND
,

254 
SDLK_KP_DECIMAL
,

255 
SDLK_KP_DIVIDE
,

256 
SDLK_KP_E
,

257 
SDLK_KP_ENTER
,

258 
SDLK_KP_EQUALS
,

259 
SDLK_KP_EQUALSAS400
,

260 
SDLK_KP_EXCLAM
,

261 
SDLK_KP_F
,

262 
SDLK_KP_GREATER
,

263 
SDLK_KP_HASH
,

264 
SDLK_KP_HEXADECIMAL
,

265 
SDLK_KP_LEFTBRACE
,

266 
SDLK_KP_LEFTPAREN
,

267 
SDLK_KP_LESS
,

268 
SDLK_KP_MEMADD
,

269 
SDLK_KP_MEMCLEAR
,

270 
SDLK_KP_MEMDIVIDE
,

271 
SDLK_KP_MEMMULTIPLY
,

272 
SDLK_KP_MEMRECALL
,

273 
SDLK_KP_MEMSTORE
,

274 
SDLK_KP_MEMSUBTRACT
,

275 
SDLK_KP_MINUS
,

276 
SDLK_KP_MULTIPLY
,

277 
SDLK_KP_OCTAL
,

278 
SDLK_KP_PERCENT
,

279 
SDLK_KP_PERIOD
,

280 
SDLK_KP_PLUS
,

281 
SDLK_KP_PLUSMINUS
,

282 
SDLK_KP_POWER
,

283 
SDLK_KP_RIGHTBRACE
,

284 
SDLK_KP_RIGHTPAREN
,

285 
SDLK_KP_SPACE
,

286 
SDLK_KP_TAB
,

287 
SDLK_KP_VERTICALBAR
,

288 
SDLK_KP_XOR
,

289 
SDLK_l
,

290 
SDLK_LALT
,

291 
SDLK_LCTRL
,

292 
SDLK_LEFT
,

293 
SDLK_LEFTBRACKET
,

294 
SDLK_LGUI
,

295 
SDLK_LSHIFT
,

296 
SDLK_m
,

297 
SDLK_MAIL
,

298 
SDLK_MEDIASELECT
,

299 
SDLK_MENU
,

300 
SDLK_MINUS
,

301 
SDLK_MODE
,

302 
SDLK_MUTE
,

303 
SDLK_n
,

304 
SDLK_NUMLOCKCLEAR
,

305 
SDLK_o
,

306 
SDLK_OPER
,

307 
SDLK_OUT
,

308 
SDLK_p
,

309 
SDLK_PAGEDOWN
,

310 
SDLK_PAGEUP
,

311 
SDLK_PASTE
,

312 
SDLK_PAUSE
,

313 
SDLK_PERIOD
,

314 
SDLK_POWER
,

315 
SDLK_PRINTSCREEN
,

316 
SDLK_PRIOR
,

317 
SDLK_q
,

318 
SDLK_r
,

319 
SDLK_RALT
,

320 
SDLK_RCTRL
,

321 
SDLK_RETURN
,

322 
SDLK_RETURN2
,

323 
SDLK_RGUI
,

324 
SDLK_RIGHT
,

325 
SDLK_RIGHTBRACKET
,

326 
SDLK_RSHIFT
,

327 
SDLK_s
,

328 
SDLK_SCROLLLOCK
,

329 
SDLK_SELECT
,

330 
SDLK_SEMICOLON
,

331 
SDLK_SEPARATOR
,

332 
SDLK_SLASH
,

333 
SDLK_SLEEP
,

334 
SDLK_SPACE
,

335 
SDLK_STOP
,

336 
SDLK_SYSREQ
,

337 
SDLK_t
,

338 
SDLK_TAB
,

339 
SDLK_THOUSANDSSEPARATOR
,

340 
SDLK_u
,

341 
SDLK_UNDO
,

342 
SDLK_UNKNOWN
,

343 
SDLK_UP
,

344 
SDLK_v
,

345 
SDLK_VOLUMEDOWN
,

346 
SDLK_VOLUMEUP
,

347 
SDLK_w
,

348 
SDLK_WWW
,

349 
SDLK_x
,

350 
SDLK_y
,

351 
SDLK_z
,

352 
SDL_SCANCODE_INTERNATIONAL1
,

353 
SDL_SCANCODE_INTERNATIONAL2
,

354 
SDL_SCANCODE_INTERNATIONAL3
,

355 
SDL_SCANCODE_INTERNATIONAL4
,

356 
SDL_SCANCODE_INTERNATIONAL5
,

357 
SDL_SCANCODE_INTERNATIONAL6
,

358 
SDL_SCANCODE_INTERNATIONAL7
,

359 
SDL_SCANCODE_INTERNATIONAL8
,

360 
SDL_SCANCODE_INTERNATIONAL9
,

361 
SDL_SCANCODE_LANG1
,

362 
SDL_SCANCODE_LANG2
,

363 
SDL_SCANCODE_LANG3
,

364 
SDL_SCANCODE_LANG4
,

365 
SDL_SCANCODE_LANG5
,

366 
SDL_SCANCODE_LANG6
,

367 
SDL_SCANCODE_LANG7
,

368 
SDL_SCANCODE_LANG8
,

369 
SDL_SCANCODE_LANG9
,

370 
SDL_SCANCODE_NONUSBACKSLASH
,

371 
SDL_SCANCODE_NONUSHASH
,

372 
SDLK_AMPERSAND
,

373 
SDLK_ASTERISK
,

374 
SDLK_AT
,

375 
SDLK_CARET
,

376 
SDLK_COLON
,

377 
SDLK_DOLLAR
,

378 
SDLK_EXCLAIM
,

379 
SDLK_GREATER
,

380 
SDLK_HASH
,

381 
SDLK_LEFTPAREN
,

382 
SDLK_LESS
,

383 
SDLK_PERCENT
,

384 
SDLK_PLUS
,

385 
SDLK_QUESTION
,

386 
SDLK_QUOTEDBL
,

387 
SDLK_RIGHTPAREN
,

388 
SDLK_UNDERSCORE


	@Clock.h

1 #¥agm®
⁄˚


2 
	~<Wödows.h
>

3 
	~<io°ªam
>

4 
	~"Mem‹y.h
"

5 
	sClock


7 
LARGE_INTEGER
 
	m˛ockFªquícy
;

8 
LARGE_INTEGER
 
	mpos
;

9 
LARGE_INTEGER
 
	míd
;

12 
ölöe
 
Clock
* 
	$˛ock_¸óã
(
Mem‹y
* 
mem‹y
)

14 
Clock
* 
˛ock
 = (Clock*Ë
	`mem‹y_Æloc
(
mem‹y
, (Clock));

15  
˛ock
;

16 
	}
}

17 
ölöe
 
	$˛ock_°¨t
(
Clock
* 
˛ock
)

19 
	`QuîyPîf‹m™˚Fªquícy
(&(
˛ock
->
˛ockFªquícy
));

20 
	`QuîyPîf‹m™˚Cou¡î
(&(
˛ock
->
pos
));

21 
	}
}

23 
ölöe
 
	$˛ock_íd
(
Clock
* 
˛ock
)

25 
	`QuîyPîf‹m™˚Cou¡î
(&(
˛ock
->
íd
));

26 
timeC⁄sumed
 = (Ë(
˛ock
->
íd
.
QuadP¨t
 - clock->
pos
.QuadPart);

27 
time_ö_mûl£c⁄ds
 = ((Ë(1000 * 
timeC⁄sumed
Ë/ (Ë
˛ock
->
˛ockFªquícy
.
QuadP¨t
);

28 
°d
::
cout
 << "Timêc⁄sumed i¿mûli£c⁄ds" << 
time_ö_mûl£c⁄ds
 << std::
ídl
;

29 
	}
}

	@Constants.cpp

1 
	~"C⁄°™ts.h
"

3 
	$fuŒ_¸ash_îr
(c⁄° * 
ãxt
, c⁄° * 
fûe
, 
löe
)

5 
°d
::
cout
 << "FATAL CRASH" << std::
ídl
;

6 
°d
::
cout
 << 
ãxt
 << "öÜöe:" << 
löe
 << ", i¿fûe:" << 
fûe
 << std::
ídl
;

7 
	`ab‹t
();

8 
	}
}

	@Constants.h

1 #¥agm®
⁄˚


2 
	~<io°ªam
>

6 c⁄° 
	gGAME_LEVEL_NAME_MAX_SIZE
 = 64;

8 c⁄° 
	gMAX_EDITOR_ACTIONS
 = 100000;

9 c⁄° 
	gMAX_NUMBER_GAMESTATES
 = 1000;

10 c⁄° 
	gTIME_TO_DISPLAY_LEVEL_NAME
 = 1.5f;

12 
	eSCENE_TYPE


14 
	mST_EDITOR
,

15 
	mST_EDIT_LEVEL
,

16 
	mST_PLAY_WORLD
,

17 
	mST_PLAY_LEVEL
,

18 
	mST_SHOW_TEXT
,

19 
	mST_MENU
,

20 
	mST_COUNT


23 
	eUI_SPRITE_NAME


25 
	mBUTTON_LEFT
,

26 
	mBUTTON_RIGHT
,

27 
	mBUTTON_CENTER
,

28 
	mUP_ARROW
,

29 
	mDOWN_ARROW
,

30 
	mRIGHT_ARROW
,

31 
	mLEFT_ARROW


35 c⁄° 
	gSCREEN_STARTING_WIDTH
 = 800;

36 c⁄° 
	gSCREEN_STARTING_HEIGHT
 = 600;

37 c⁄° 
	gSCREEN_RATIO
 = (()
SCREEN_STARTING_WIDTH
 / ()
SCREEN_STARTING_HEIGHT
);

38 c⁄° 
	gMAX_NUM_FLOOR_SPRITES
 = 5000;

41 c⁄° 
	gCAMERA_LERP_TIME
 = 0.8f;

42 c⁄° 
	gCAMERA_ZOOM_SPEED
 = 3.0f;

43 c⁄° 
	gCAMERA_MOVE_MULT
 = 0.02f;

45 c⁄° 
	gMAX_ZOOM
 = 2.0f;

46 c⁄° 
	gMAX_ZOOM_OUT_TO_STILL_DISPLAY_OUTLINES
 = 22.0f;

47 c⁄° 
	gMAX_NUM_DOTTED_SPRITES
 = 200;

48 c⁄° 
	gMAX_NUM_CHARACTERS
 = 200;

49 c⁄° 
	gOUTLINE_DRAW_SIZE
 = 0.3f;

53 c⁄° 
	gmax_a˘i⁄s_ö_puzzÀ
 = 1024;

55 c⁄° 
	gWAIT_BETWEEN_PLAYER_MOVE_REPEAT
 = 0.13f;

56 c⁄° 
	gDRAW_TITLE_TIME
 = 2.0f;

61 
	#¸ash_îr
(...Ëdÿ{
	`fuŒ_¸ash_îr
(
__VA_ARGS__
, 
__FILE__
, 
__LINE__
);} 0)

	)

62 
fuŒ_¸ash_îr
(c⁄° * 
ãxt
, c⁄° * 
fûe
, 
löe
);

	@Editor.h

1 #¥agm®
⁄˚


2 
	~"M©h.h
"

3 
	~"GameSèã.h
"

4 
	~"C⁄°™ts.h
"

6 
	eTimeMachöeEdô‹A˘i⁄Name


8 
	mTM_APPLY_BRUSH
,

9 
	mTM_MOVE_GAMESTATE
,

10 
	mTM_MERGE_GAMESTATES
,

11 
	mTM_RESIZE_GAMESTATE
,

12 
	mTM_CREATE_GAMESTATE
,

13 
	mTM_DELETE_GAMESTATE
,

14 
	mTM_REPLACE_GAMESTATE
,

15 
	mTM_UPDATE_GAMESTATE
,

16 
	mTM_UNDO
,

17 
	mTM_CHANGE_LEVEL_MODE
,

18 
	mTM_LEVEL_LINKS
,

19 
	mTM_COUNT


21 
	eLevñMode


23 
	mCrumbÀ
,

24 
	mRïót
,

25 
	mOvîw‹ld


28 
	sW‹ldPosôi⁄


30 
	mÀvñ_ödex
;

31 
I¡Paú
 
	mÀvñ_posôi⁄
;

32 
	mÀvñ_posôi⁄_1d
;

35 
	sS∂ôGame°©e


37 
	mèrgë_game°©e_ödex
;

38 
	mèrgë_x
;

39 
	mèrgë_y
;

40 
boﬁ
 
	m•lô_row_nŸ_cﬁumn
;

42 
	sSuºoundWôhWÆls


44 
	mèrgë_game°©e_ödex
;

46 
	sResizeGame°©e


48 
	mèrgë_game°©e_ödex
;

49 
I¡Paú
 
	m√xt_°¨tög_posôi⁄
;

50 
I¡Paú
 
	m√xt_size
;

51 
I¡Paú
 
	mdi•œ˚mít_‰om_öput_to_√xt
;

53 
	sAµlyBrush


55 
	mèrgë_game°©e_ödex
;

56 
I¡Paú
 
	mèrgë_squ¨e
;

57 
Game°©eBrush
 
	mbrush
;

59 
	sMoveGame°©e


61 
	mèrgë_game°©e_ödex
;

62 
I¡Paú
 
	mmoveDi°™˚
;

64 
	sMîgeGame°©e


66 
	mgame°©e_ödex_À·
;

67 
	mgame°©e_ödex_right
;

68 
I¡Paú
 
	mw‹ld•a˚_À·
;

69 
I¡Paú
 
	mw‹ld•a˚_right
;

71 
	sRemoveGame°©e


73 
	mgame°©e_ödex
;

75 
	sCª©eGameSèã
 {

76 
	mx
;

77 
	my
;

78 
	mw
;

79 
	mh
;

81 
	sRïœ˚Game°©e


83 
GameSèã
* 
	mª∂a˚_°©e
;

84 
	mödex_to_ª∂a˚
;

85 
	m«me
[
GAME_LEVEL_NAME_MAX_SIZE
];

87 
	sCh™geLevñMode


89 
	mödex_to_ª∂a˚
;

90 
LevñMode
 
	mª∂a˚_vÆue
;

92 
	sUpd©eGame°©e


94 
GameSèã
* 
	mª∂a˚_°©e
;

95 
	mödex_to_ª∂a˚
;

97 
	sLevñLöks


99 
W‹ldPosôi⁄
 
	mlök_a
;

100 
W‹ldPosôi⁄
 
	mlök_b
;

104 
	sTimeMachöeEdô‹A˘i⁄


106 
TimeMachöeEdô‹A˘i⁄Name
 
	ma˘i⁄
;

108 
RemoveGame°©e
 
	mªmove
;

109 
MoveGame°©e
 
	mmove
;

110 
MîgeGame°©e
 
	mmîge
;

111 
AµlyBrush
 
	mbrush
;

112 
ResizeGame°©e
 
	mªsize
;

113 
Cª©eGameSèã
 
	m¸óã
;

114 
Rïœ˚Game°©e
 
	mª∂a˚
;

115 
Upd©eGame°©e
 
	mupd©e
;

116 
Ch™geLevñMode
 
	mÀvñ
;

117 } 
	mu
;

120 
	sLevñName


122 
	m«me
[
GAME_LEVEL_NAME_MAX_SIZE
];

125 
	sW‹ldSèã


127 
	mnum_Àvñ
;

128 
I¡Paú
 
	mÀvñ_posôi⁄
[
MAX_NUMBER_GAMESTATES
];

129 
GameSèã
* 
	mÀvñ_°©e
[
MAX_NUMBER_GAMESTATES
];

130 
LevñName
 
	mÀvñ_«mes
[
MAX_NUMBER_GAMESTATES
];

131 
LevñMode
 
	mÀvñ_modes
[
MAX_NUMBER_GAMESTATES
];

132 
boﬁ
 
	mÀvñ_sﬁved
[
MAX_NUMBER_GAMESTATES
];

134 
	sTimeMachöeEdô‹


136 
Mem‹y
* 
	mgame°©e_mem‹y
;

137 
	mcuºít_numbî_of_a˘i⁄s
;

138 
TimeMachöeEdô‹A˘i⁄
 
	ma˘i⁄Li°
[
MAX_EDITOR_ACTIONS
];

140 
W‹ldSèã
 
	mw‹ld_°©e
;

142 
W‹ldPosôi⁄
 
game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_fuŒ
(
TimeMachöeEdô‹
* 
timeMachöe
, 
mou£_game_pos_x
, 
mou£_game_pos_y
);

143 
game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
TimeMachöeEdô‹
* 
timeMachöe
, 
mou£_game_pos_x
, 
mou£_game_pos_y
);

144 
TimeMachöeEdô‹
* 
game°©e_timemachöe_edô‹_¸óã
(
Mem‹y
* 
mem‹y
, Mem‹y* 
Game°©eMem‹y
);

145 
game°©e_timemachöe_edô‹_öôüli£_‰om_°¨t
(
TimeMachöeEdô‹
* 
edô‹
, 
W‹ldSèã
* 
pos
);

146 
game°©e_timemachöe_°¨t°©e_em±y_öô
(
W‹ldSèã
* 
°¨t_°©e
);

147 
game°©e_timemachöe_edô‹_èke_a˘i⁄
(
TimeMachöeEdô‹
* 
edô‹
, 
W‹ldSèã
* 
maybe_°¨t_°©e
, 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
);

151 
W‹ldPosôi⁄
 
w‹ld_make_w‹ld_posôi⁄_övÆid
();

152 
W‹ldPosôi⁄
 
w‹ld_make_w‹ld_posôi⁄
(
Àvñ_ödex
, 
I¡Paú
 
pos_2d
, 
pos_1d
);

158 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_undo_a˘i⁄
();

159 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_¸óã_a˘i⁄
(
xSèπ
, 
ySèπ
, 
w
, 
h
);

160 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_≠∂y_brush
(
Game°©eBrush
 
brush
, 
èrgë_game°©e
, 
I¡Paú
 
èrgë_squ¨e
);

161 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_ªsize_gam£°©e
(
èrgë_game°©e
,

162 
AABB
 
√xtPosôi⁄
,

163 
I¡Paú
 
di•œ˚mít_‰om_öput_to_√xt
);

164 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_move_game°©e
(
èrgë_game°©e
, 
I¡Paú
 
movemít
);

165 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_dñëe_game°©e
(
èrgë_game°©e
);

166 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_ª∂a˚_game°©e
(
GameSèã
* 
ª∂a˚mít
, 
to_ª∂a˚
, c⁄° * 
«me
);

167 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_upd©e_game°©e
(
GameSèã
* 
ª∂a˚mít
, 
to_ª∂a˚
, 
LevñName
 
«me
);

168 
TimeMachöeEdô‹A˘i⁄
 
game°©e_timemachöó˘i⁄_¸óã_ch™ge_Àvñ_mode
(
èrgë_game°©e
, 
LevñMode
 
√xt_mode
);

	@EditorScene.h

1 #¥agm®
⁄˚


2 
	~"GameSèã.h
"

3 
	~"Edô‹.h
"

5 c⁄° 
	g∑Àã_Àngth
 = 21;

6 
	sEdô‹S˚√


8 
TimeMachöeEdô‹
* 
	mtimeMachöe
;

9 
W‹ldSèã
* 
	mtime_machöe_°¨t_°©e
;

10 
	mcuºítBrush
 = 0;

11 
Game°©eBrush
* 
	m∑Àã
;

12 
I¡Paú
 
	m∑Àã_s¸ìn_°¨t
;

16 
Edô‹S˚√
* 
	$edô‹s˚√_£tup_wôh_°¨t_°©e
(
Mem‹y
* 
edô‹_mem‹y
, 
VõwP‹tCamîa
 
ˇmîa_võwp‹t
, 
W‹ldSèã
* 
°¨t_°©e
)

18 
Edô‹S˚√
* 
ªsu…
 = (Edô‹S˚√*)
	`mem‹y_Æloc
(
edô‹_mem‹y
, (EditorScene));

19 
ªsu…
->
timeMachöe
 = 
	`game°©e_timemachöe_edô‹_¸óã
(
edô‹_mem‹y
, 
	`mem‹y_¸óã
(50000000));

20 
ªsu…
->
time_machöe_°¨t_°©e
 = 
°¨t_°©e
;

21 
	`game°©e_timemachöe_edô‹_öôüli£_‰om_°¨t
(
ªsu…
->
timeMachöe
,Ñesu…->
time_machöe_°¨t_°©e
);

23 
ªsu…
->
∑Àã
 = (
Game°©eBrush
*)
	`mem‹y_Æloc
(
edô‹_mem‹y
, (Game°©eBrushË* 
∑Àã_Àngth
);

24 
ªsu…
->
cuºítBrush
 = 0;

25 
ªsu…
->
∑Àã_s¸ìn_°¨t
 = 
	`m©h_öçaú_¸óã
(
ˇmîa_võwp‹t
.
À·
, camîa_võwp‹t.
up
 - 120);

27 
i
 = 0;

28 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_NONE
,Årue, 
P_NONE
, 
Ál£
, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

29 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_TARGET
, 
Ál£
, 
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

30 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_START
, 
Ál£
, 
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

31 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_LURKING_WALL
, 
Ál£
, 
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

32 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
Põ˚
::
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

33 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_WALL
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

34 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_GRILL_COLD
,Årue, 
P_NONE
,Årue, 
	`game°©e_põ˚d©a_make
(),
Ál£
,
	`game°©e_Êo‹d©a_make
());

35 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_GRILL_HOT
,Årue, 
P_NONE
,Årue, 
	`game°©e_põ˚d©a_make
(),
Ál£
,
	`game°©e_Êo‹d©a_make
());

36 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_WALL_ALT
, fÆ£,
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

37 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRUMBLE
, fÆ£,
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

38 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_PUSH
),Ál£,
	`game°©e_Êo‹d©a_make
());

39 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_PULL
),Ál£,
	`game°©e_Êo‹d©a_make
());

40 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_PARALLEL
),Ál£,
	`game°©e_Êo‹d©a_make
());

41 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_MERGE
),Ál£,
	`game°©e_Êo‹d©a_make
());

42 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_PUSH
,
CP_MERGE
),Ál£,
	`game°©e_Êo‹d©a_make
());

43 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_PUSH
,
CP_PULL
),Ál£,
	`game°©e_Êo‹d©a_make
());

44 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_CRATE
,Årue,
	`game°©e_põ˚d©a_make
(
CP_PUSH
,
CP_PARALLEL
),Ál£,
	`game°©e_Êo‹d©a_make
());

45 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
Ál£
, 
F_NONE
, 
åue
, 
P_PLAYER
, fÆ£,
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

46 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_EXIT
, 
Ál£
, 
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

47 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_STAIRCASE
, 
Ál£
, 
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

48 
ªsu…
->
∑Àã
[
i
++] = 
	`game°©e_brush_¸óã
(
åue
, 
F_STAIRCASE_LEVELSTART
, 
Ál£
, 
P_NONE
, fÆ£, 
	`game°©e_põ˚d©a_make
(),Ál£,
	`game°©e_Êo‹d©a_make
());

49 i‡(
i
 !
∑Àã_Àngth
)

51 
°d
::
cout
 << 
i
 << std::
ídl
;

52 
°d
::
cout
 << 
∑Àã_Àngth
 << std::
ídl
;

53 
	`¸ash_îr
("youÇeedÅheÇumber ofÉlements inÅheÖaleteÅo beÅeh sameásÅheÜength ofÅheÖalete.");

56  
ªsu…
;

58 
	}
}

59 
Edô‹S˚√
* 
	$edô‹s˚√_£tup
(
Mem‹y
* 
edô‹_mem‹y
, 
VõwP‹tCamîa
 
ˇmîa_võwp‹t
)

61 
	`mem‹y_˛ór
(
edô‹_mem‹y
);

62 
W‹ldSèã
* 
∑ss
 = (W‹ldSèã*)
	`mem‹y_Æloc
(
edô‹_mem‹y
, (WorldState));

63 
	`game°©e_timemachöe_°¨t°©e_em±y_öô
(
∑ss
);

64  
	`edô‹s˚√_£tup_wôh_°¨t_°©e
(
edô‹_mem‹y
, 
ˇmîa_võwp‹t
, 
∑ss
);

65 
	}
}

	@EditorThree.h

	@EditorTimeMachine.cpp

1 
	~"Edô‹.h
"

2 
	~<io°ªam
>

5 
	$dñëe_game°©e_‰om_li°_öã∫Æ
(
TimeMachöeEdô‹
* 
edô‹
, 
ödex_to_dñëe
)

7 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_to_dñëe
] = 
NULL
;

8 
cuºít_numbî_of_game°©es
 = 
edô‹
->
w‹ld_°©e
.
num_Àvñ
;

10 
i
 = 0; i < 
cuºít_numbî_of_game°©es
; i++)

12 i‡(
i
 =
ödex_to_dñëe
)

15 
z
 = 0; z < 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
w
 *Édô‹->w‹ld_°©e.Àvñ_°©e[i]->
h
;z++)

18 i‡(
	`is_°aúˇ£
(
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
Êo‹
[
z
]))

20 
ãÀ_lök
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
Êo‹_d©a
[
z
].
ãÀp‹ãr_id
;

22 i‡(
ãÀ_lök
 =
ödex_to_dñëe
)

24 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
Êo‹_d©a
[
z
].
ãÀp‹ãr_id
 = 0;

25 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
Êo‹_d©a
[
z
].
ãÀp‹ãr_èrgë_squ¨e
 = 
	`m©h_öçaú_¸óã
(0, 0);

26 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
Êo‹
[
z
] = 
Flo‹
::
F_NONE
;

32 if(
ãÀ_lök
 > 
ödex_to_dñëe
)

33 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
Êo‹_d©a
[
z
].
ãÀp‹ãr_id
 -= 1;

39 
i
 = 
ödex_to_dñëe
; i < 
cuºít_numbî_of_game°©es
; i++)

41 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
] =Éditor->world_state.level_state[i + 1];

43 
i
 = 
ödex_to_dñëe
; i < 
cuºít_numbî_of_game°©es
; i++)

45 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
] =Éditor->world_state.level_position[i + 1];

47 
i
 = 
ödex_to_dñëe
; i < 
cuºít_numbî_of_game°©es
; i++)

49 
edô‹
->
w‹ld_°©e
.
Àvñ_«mes
[
i
] =Éditor->world_state.level_names[i + 1];

51 
i
 = 
ödex_to_dñëe
; i < 
cuºít_numbî_of_game°©es
; i++)

53 
edô‹
->
w‹ld_°©e
.
Àvñ_modes
[
i
] =Éditor->world_state.level_modes[i + 1];

55 
i
 = 
ödex_to_dñëe
; i < 
cuºít_numbî_of_game°©es
; i++)

57 
edô‹
->
w‹ld_°©e
.
Àvñ_sﬁved
[
i
] =Éditor->world_state.level_solved[i + 1];

59 
edô‹
->
w‹ld_°©e
.
num_Àvñ
--;

60 
	}
}

62 
TimeMachöeEdô‹
* 
	$game°©e_timemachöe_edô‹_¸óã
(
Mem‹y
* 
mem‹y
, Mem‹y* 
game°©e_mem‹y
)

64 
°d
::
cout
 << (
TimeMachöeEdô‹
Ë<< std::
ídl
;

65 
TimeMachöeEdô‹
* 
ªsu…
 = (TimeMachöeEdô‹*Ë
	`mem‹y_Æloc
(
mem‹y
, (TimeMachineEditor));

66 
ªsu…
->
game°©e_mem‹y
 = gamestate_memory;

67 
ªsu…
->
w‹ld_°©e
.
num_Àvñ
 = 0;

68 
ªsu…
->
cuºít_numbî_of_a˘i⁄s
 = 0;

69 
ªsu…
->
w‹ld_°©e
.
Àvñ_°©e
[0] = (
GameSèã
*Ë
	`mem‹y_Æloc
(
game°©e_mem‹y
, (GameSèã*Ë* 
MAX_NUMBER_GAMESTATES
);

70 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
 ; i++)

71 
j
 = 0; j < 
GAME_LEVEL_NAME_MAX_SIZE
;j++)

72 
ªsu…
->
w‹ld_°©e
.
Àvñ_«mes
[
i
].
«me
[
j
] = '\0';

73 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
;i++)

74 
ªsu…
->
w‹ld_°©e
.
Àvñ_sﬁved
[
i
] = 
Ál£
;

75 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
;i++)

76 
ªsu…
->
w‹ld_°©e
.
Àvñ_modes
[
i
] = 
LevñMode
::
CrumbÀ
;

77 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
;i++)

78 
ªsu…
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
] = 
	`m©h_öçaú_¸óã
(0,0);

79  
ªsu…
;

80 
	}
}

81 
	$game°©e_timemachöe_°¨t°©e_em±y_öô
(
W‹ldSèã
* 
°¨t_°©e
)

83 
°¨t_°©e
->
num_Àvñ
 = 0;

84 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

85 
j
 = 0; j < 
GAME_LEVEL_NAME_MAX_SIZE
;j++)

86 
°¨t_°©e
->
Àvñ_«mes
[
i
].
«me
[
j
] = '\0';

87 
	}
}

88 
	$game°©e_timemachöe_edô‹_öôüli£_‰om_°¨t
(
TimeMachöeEdô‹
* 
edô‹
, 
W‹ldSèã
* 
pos
)

90 
	`mem‹y_˛ór
(
edô‹
->
game°©e_mem‹y
);

92 
edô‹
->
w‹ld_°©e
.
num_Àvñ
 = 
pos
->num_level;

93 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

94 
edô‹
->
w‹ld_°©e
.
Àvñ_«mes
[
i
] = 
pos
->level_names[i];

95 
i
 = 0; i < 
pos
->
num_Àvñ
; i++)

97 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
i
] = 
	`game°©e_˛⁄e
(
pos
->Àvñ_°©e[i],Édô‹->
game°©e_mem‹y
);

99 
i
 = 0; i < 
pos
->
num_Àvñ
; i++)

101 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
 = 
pos
->level_position[i].x;

102 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
 = 
pos
->level_position[i].y;

104 
i
 = 0; i < 
pos
->
num_Àvñ
; i++)

106 
edô‹
->
w‹ld_°©e
.
Àvñ_modes
[
i
] = 
pos
->level_modes[i];

108 
i
 = 0; i < 
pos
->
num_Àvñ
; i++)

110 
edô‹
->
w‹ld_°©e
.
Àvñ_sﬁved
[
i
] = 
pos
->level_solved[i];

112 
	}
}

113 
boﬁ
 
	$èke_u∆ogged_a˘i⁄
(
TimeMachöeEdô‹
* 
edô‹
, 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
)

115 i‡(
a˘i⁄
.a˘i⁄ =
TM_DELETE_GAMESTATE
)

117 
ödex_to_dñëe
 = 
a˘i⁄
.
u
.
ªmove
.
game°©e_ödex
;

118 
	`dñëe_game°©e_‰om_li°_öã∫Æ
(
edô‹
, 
ödex_to_dñëe
);

120 i‡(
a˘i⁄
.a˘i⁄ =
TM_APPLY_BRUSH
)

122 
èrgë_game°©e_ödex
 = 
a˘i⁄
.
u
.
brush
.target_gamestate_index;

123 
GameSèã
* 
game°©e
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_game°©e_ödex
];

124 
I¡Paú
 
èrgë_brush_squ¨e
 = 
a˘i⁄
.
u
.
brush
.
èrgë_squ¨e
;

125 
x
 = 
èrgë_brush_squ¨e
.x;

126 
y
 = 
èrgë_brush_squ¨e
.y;

127 
èrgë_brush_squ¨e_1d
 = 
	`f2D
(
x
, 
y
, 
game°©e
->
w
, game°©e->
h
);

128 
Game°©eBrush
 
game°©e_brush
 = 
a˘i⁄
.
u
.
brush
.brush;

130 
boﬁ
 
a˘i⁄_ac˚±ed
 = 
	`game°©e_≠∂y_brush
(
game°©e
, 
game°©e_brush
, 
x
, 
y
);

131 i‡(!
a˘i⁄_ac˚±ed
)

133  
Ál£
;

137 
num_a˘i⁄s
 = 
edô‹
->
cuºít_numbî_of_a˘i⁄s
;

138 
TimeMachöeEdô‹A˘i⁄
 
œ°A˘i⁄
 = 
edô‹
->
a˘i⁄Li°
[
num_a˘i⁄s
 - 1];

139 i‡(
num_a˘i⁄s
 >= 1 &&

140 
œ°A˘i⁄
.
a˘i⁄
 =
TM_APPLY_BRUSH
)

142 
I¡Paú
 
œ°_èrgë_squ¨e
 = 
œ°A˘i⁄
.
u
.
brush
.
èrgë_squ¨e
;

143 
œ°_èrgë_Àvñ
 = 
œ°A˘i⁄
.
u
.
brush
.
èrgë_game°©e_ödex
;

144 
œ°_w
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
œ°_èrgë_Àvñ
]->
w
;

145 
œ°_h
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
œ°_èrgë_Àvñ
]->
h
;

146 
œ°_èrgë_squ¨e_1d
 = 
	`f2D
(
œ°_èrgë_squ¨e
.
x
,Üa°_èrgë_squ¨e.
y
, 
œ°_w
, 
œ°_h
);

147 i‡(
	`is_°aúˇ£
(
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
œ°_èrgë_Àvñ
]->
Êo‹
[
œ°_èrgë_squ¨e_1d
]) &&

148 
	`is_°aúˇ£
(
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_game°©e_ödex
]->
Êo‹
[
èrgë_brush_squ¨e_1d
]) &&

149 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
œ°_èrgë_Àvñ
]->
Êo‹_d©a
[
œ°_èrgë_squ¨e_1d
].
ãÀp‹ãr_id
 == -1

152 
èrgë_Àvñ
 = 
a˘i⁄
.
u
.
brush
.
èrgë_game°©e_ödex
;

153 
I¡Paú
 
èrgë_squ¨e
 = 
a˘i⁄
.
u
.
brush
.target_square;

154 
èrgë_w
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_Àvñ
]->
w
;

155 
èrgë_h
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_Àvñ
]->
h
;

156 
èrgë_squ¨e_1d
 = 
	`f2D
(
èrgë_squ¨e
.
x
,Å¨gë_squ¨e.
y
, 
èrgë_w
, 
èrgë_h
);

157 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
œ°_èrgë_Àvñ
]->
Êo‹_d©a
[
œ°_èrgë_squ¨e_1d
].
ãÀp‹ãr_id
 = 
èrgë_Àvñ
;

159 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
œ°_èrgë_Àvñ
]->
Êo‹_d©a
[
œ°_èrgë_squ¨e_1d
].
ãÀp‹ãr_èrgë_squ¨e
 = 
èrgë_squ¨e
;

160 
°d
::
cout
 << "fú°Åñï‹ã∏id" << 
èrgë_Àvñ
 << ",Å¨gë_Àvñ" <<Å¨gë_Àvñ << std::
ídl
;

161 
°d
::
cout
 << "£c⁄dÅñï‹ã∏id" << 
œ°_èrgë_Àvñ
 << ",œ°Å¨gëÜevñ" <<Üa°_èrgë_Àvñ << std::
ídl
;

162 
°d
::
cout
 << "èrgë squ¨ê1d" << 
èrgë_squ¨e_1d
 << std::
ídl
;

163 
°d
::
cout
 << "œ°Å¨gë squ¨ê1d" << 
œ°_èrgë_squ¨e_1d
 << std::
ídl
;

164 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_Àvñ
]->
Êo‹_d©a
[
èrgë_squ¨e_1d
].
ãÀp‹ãr_id
 = 
œ°_èrgë_Àvñ
;

165 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_Àvñ
]->
Êo‹_d©a
[
èrgë_squ¨e_1d
].
ãÀp‹ãr_èrgë_squ¨e
 = 
œ°_èrgë_squ¨e
;

166 
edô‹
->
w‹ld_°©e
.
Àvñ_modes
[
èrgë_Àvñ
] = 
LevñMode
::
Rïót
;

172 i‡(
a˘i⁄
.a˘i⁄ =
TM_MERGE_GAMESTATES
)

174 
ödex_À·
 = 
a˘i⁄
.
u
.
mîge
.
game°©e_ödex_À·
;

175 
ödex_right
 = 
a˘i⁄
.
u
.
mîge
.
game°©e_ödex_right
;

176 
GameSèã
* 
À·
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_À·
];

177 
GameSèã
* 
right
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_right
];

178 
I¡Paú
 
w‹ld•a˚_À·
 = 
a˘i⁄
.
u
.
mîge
.worldspace_left;

179 
I¡Paú
 
w‹ld•a˚_right
 = 
a˘i⁄
.
u
.
mîge
.worldspace_right;

181 
xSèπ
 = 
	`möi
(
w‹ld•a˚_À·
.
x
, 
w‹ld•a˚_right
.x);

182 
ySèπ
 = 
	`möi
(
w‹ld•a˚_À·
.
y
, 
w‹ld•a˚_right
.y);

183 
I¡Paú
 
À·Off£t
 = 
	`m©h_öçaú_¸óã
(
w‹ld•a˚_À·
.
x
 - 
xSèπ
, w‹ld•a˚_À·.
y
 - 
ySèπ
);

184 
I¡Paú
 
rightOff£t
 = 
	`m©h_öçaú_¸óã
(
w‹ld•a˚_right
.
x
 - 
xSèπ
, w‹ld•a˚_right.
y
 - 
ySèπ
);

186 
ouçut_Àngth_x
 = 
	`maxi
(
À·Off£t
.
x
 + 
À·
->
w
, 
rightOff£t
.x + 
right
->w);

187 
ouçut_Àngth_y
 = 
	`maxi
(
À·Off£t
.
y
 + 
À·
->
h
, 
rightOff£t
.y + 
right
->h);

188 
I¡Paú
 
ouçut_Àngth
 = 
	`m©h_öçaú_¸óã
(
ouçut_Àngth_x
, 
ouçut_Àngth_y
);

189 
GameSèã
* 
√xt
 = 
	`game°©e_mîge_wôh_Æloˇã
(
À·
, 
right
, 
ouçut_Àngth
, 
edô‹
->
game°©e_mem‹y
, 
À·Off£t
, 
rightOff£t
);

191 
	`dñëe_game°©e_‰om_li°_öã∫Æ
(
edô‹
, 
ödex_right
);

192 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_À·
] = 
√xt
;

193 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
ödex_À·
] = 
	`m©h_öçaú_¸óã
(
xSèπ
, 
ySèπ
);

196 i‡(
a˘i⁄
.a˘i⁄ =
TM_MOVE_GAMESTATE
)

198 
èrgë_game°©e_ödex
 = 
a˘i⁄
.
u
.
move
.target_gamestate_index;

199 
I¡Paú
 
di°™˚
 = 
a˘i⁄
.
u
.
move
.
moveDi°™˚
;

201 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
èrgë_game°©e_ödex
] = 
	`m©h_öçaú_add
”dô‹->w‹ld_°©e.Àvñ_posôi⁄[èrgë_game°©e_ödex], 
di°™˚
);

203 i‡(
a˘i⁄
.a˘i⁄ =
TM_RESIZE_GAMESTATE
)

206 
w
 = 
a˘i⁄
.
u
.
ªsize
.
√xt_size
.
x
;

207 
h
 = 
a˘i⁄
.
u
.
ªsize
.
√xt_size
.
y
;

208 
I¡Paú
 
di•œ˚mít
 = 
a˘i⁄
.
u
.
ªsize
.
di•œ˚mít_‰om_öput_to_√xt
;

211 
èrgë_game°©e
 = 
a˘i⁄
.
u
.
ªsize
.
èrgë_game°©e_ödex
;

212 
GameSèã
* 
ﬁd
 = 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_game°©e
];

213 
GameSèã
* 
√xt
 = 
	`game°©e_¸óã
(
edô‹
->
game°©e_mem‹y
, 
w
, 
h
);

216 
	`game°©e_ªsize
(
ﬁd
, 
√xt
, 
di•œ˚mít
);

219 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
èrgë_game°©e
] = 
√xt
;

220 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
èrgë_game°©e
] = 
a˘i⁄
.
u
.
ªsize
.
√xt_°¨tög_posôi⁄
;

225 i‡(
a˘i⁄
.a˘i⁄ =
TM_CREATE_GAMESTATE
)

228 
x
 = 
a˘i⁄
.
u
.
¸óã
.x;

229 
y
 = 
a˘i⁄
.
u
.
¸óã
.y;

230 
I¡Paú
 
bŸtom_À·
 = 
	`m©h_öçaú_¸óã
(
x
, 
y
);

231 
w
 = 
a˘i⁄
.
u
.
¸óã
.w;

232 
h
 = 
a˘i⁄
.
u
.
¸óã
.h;

234 
GameSèã
* 
√xt
 = 
	`game°©e_¸óã
(
edô‹
->
game°©e_mem‹y
, 
w
, 
h
);

238 i‡(
edô‹
->
w‹ld_°©e
.
num_Àvñ
 > 
MAX_NUMBER_GAMESTATES
)

240 
	`¸ash_îr
("we have overflowed ourÜevelÉditor gamestate memory. Rats! This means you should implement someÖroper memoryÅechniquesÅoÜikeÇot haveÅhis happen. ");

243 
	`ab‹t
();

245 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[edô‹->w‹ld_°©e.
num_Àvñ
] = 
√xt
;

246 
edô‹
->
w‹ld_°©e
.
Àvñ_posôi⁄
[edô‹->w‹ld_°©e.
num_Àvñ
] = 
bŸtom_À·
;

247 
edô‹
->
w‹ld_°©e
.
num_Àvñ
++;

249 i‡(
a˘i⁄
.a˘i⁄ =
TM_REPLACE_GAMESTATE
)

251 
pos
 = 
a˘i⁄
.
u
.
ª∂a˚
.
ödex_to_ª∂a˚
;

252 
GameSèã
* 
°©e
 = 
a˘i⁄
.
u
.
ª∂a˚
.
ª∂a˚_°©e
;

253 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
pos
] = 
°©e
;

254 
i
 = 0; i < 
GAME_LEVEL_NAME_MAX_SIZE
; i++)

256 
edô‹
->
w‹ld_°©e
.
Àvñ_«mes
[
pos
].
«me
[
i
] = 
a˘i⁄
.
u
.
ª∂a˚
.name[i];

259 i‡(
a˘i⁄
.a˘i⁄ =
TM_UPDATE_GAMESTATE
)

261 
pos
 = 
a˘i⁄
.
u
.
upd©e
.
ödex_to_ª∂a˚
;

262 
GameSèã
* 
°©e
 = 
a˘i⁄
.
u
.
upd©e
.
ª∂a˚_°©e
;

263 
edô‹
->
w‹ld_°©e
.
Àvñ_°©e
[
pos
] = 
°©e
;

265 i‡(
a˘i⁄
.a˘i⁄ =
TM_CHANGE_LEVEL_MODE
)

267 
edô‹
->
w‹ld_°©e
.
Àvñ_modes
[
a˘i⁄
.
u
.
Àvñ
.
ödex_to_ª∂a˚
] =á˘i⁄.u.Àvñ.
ª∂a˚_vÆue
;

269  
åue
;

270 
	}
}

271 
	$game°©e_timemachöe_edô‹_èke_a˘i⁄
(
TimeMachöeEdô‹
* 
edô‹
, 
W‹ldSèã
* 
maybe_°¨t_°©e
, 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
)

274 i‡(
a˘i⁄
.a˘i⁄ =
TM_UNDO
 && 
edô‹
->
cuºít_numbî_of_a˘i⁄s
 > 0)

276 
edô‹
->
cuºít_numbî_of_a˘i⁄s
--;

279 i‡(!
maybe_°¨t_°©e
)

280 
	`¸ash_îr
("hmm, when doingán undoáction, weÖassed,á NULL when we should have givenáÖos state. Fix it!");

281 
	`game°©e_timemachöe_edô‹_öôüli£_‰om_°¨t
(
edô‹
, 
maybe_°¨t_°©e
);

282 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

283 
j
 = 0; j < 
GAME_LEVEL_NAME_MAX_SIZE
;j++)

284 
edô‹
->
w‹ld_°©e
.
Àvñ_«mes
[
i
].
«me
[
j
] = '\0';

285 
i
 = 0; i < 
edô‹
->
cuºít_numbî_of_a˘i⁄s
; i++)

287 
	`èke_u∆ogged_a˘i⁄
(
edô‹
,Édô‹->
a˘i⁄Li°
[
i
]);

290 if(
a˘i⁄
.a˘i⁄ !
TM_UNDO
)

292 
boﬁ
 
ac˚±ed_a˘i⁄
 = 
	`èke_u∆ogged_a˘i⁄
(
edô‹
, 
a˘i⁄
);

293 i‡(
ac˚±ed_a˘i⁄
)

295 
edô‹
->
a˘i⁄Li°
[edô‹->
cuºít_numbî_of_a˘i⁄s
] = 
a˘i⁄
;

296 
edô‹
->
cuºít_numbî_of_a˘i⁄s
++;

300 
	}
}

302 
W‹ldPosôi⁄
 
	$w‹ld_make_w‹ld_posôi⁄
(
Àvñ_ödex
, 
I¡Paú
 
pos_2d
, 
pos_1d
)

304 
W‹ldPosôi⁄
 
ªsu…
;

305 
ªsu…
.
Àvñ_ödex
 =Üevel_index;

306 
ªsu…
.
Àvñ_posôi⁄
 = 
pos_2d
;

307 
ªsu…
.
Àvñ_posôi⁄_1d
 = 
pos_1d
;

308  
ªsu…
;

309 
	}
}

311 
W‹ldPosôi⁄
 
	$w‹ld_make_w‹ld_posôi⁄_övÆid
()

313  
	`w‹ld_make_w‹ld_posôi⁄
(-1, 
	`m©h_öçaú_¸óã
(-1, -1), -1);

314 
	}
}

316 
W‹ldPosôi⁄
 
	$game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_fuŒ
(
TimeMachöeEdô‹
* 
timeMachöe
, 
mou£_game_pos_x
, 
mou£_game_pos_y
)

318 
glm
::
vec2
 
mou£GamePos
 = glm::
	`vec2
(
mou£_game_pos_x
, 
mou£_game_pos_y
);

319 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
timeMachöe
, 
mou£_game_pos_x
, 
mou£_game_pos_y
);

320 
GameSèã
* 
°©e
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_˛icked
];

321 
I¡Paú
 
°©e_°¨t
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
ödex_˛icked
];

322 
I¡Paú
 
grid_˛icked
;

324 
À·
 = (Ë
°©e_°¨t
.
x
;

325 
right
 = (Ë(
°©e_°¨t
.
x
 + 
°©e
->
w
);

326 
down
 = (Ë
°©e_°¨t
.
y
;

327 
up
 = (Ë(
°©e_°¨t
.
y
 + 
°©e
->
h
);

329 
≥r˚¡ageX
 = 
	`≥r˚¡_bëwìn_two_poöts
(
mou£GamePos
.
x
, 
À·
, 
right
);

330 
≥r˚¡ageY
 = 
	`≥r˚¡_bëwìn_two_poöts
(
mou£GamePos
.
y
, 
down
, 
up
);

331 
x_Êo‹_˚Œ_˛icked
 = ()(
≥r˚¡ageX
 * 
°©e
->
w
);

332 
y_Êo‹_˚Œ_˛icked
 = ()(
≥r˚¡ageY
 * 
°©e
->
h
);

334 
grid_˛icked
 = 
	`m©h_öçaú_¸óã
(
x_Êo‹_˚Œ_˛icked
, 
y_Êo‹_˚Œ_˛icked
);

336 
grid_˛icked_1d
 = 
	`f2D
(
grid_˛icked
.
x
, grid_˛icked.
y
, 
°©e
->
w
, sèã->
h
);

337 
W‹ldPosôi⁄
 
ªsu…
 = 
	`w‹ld_make_w‹ld_posôi⁄
(
ödex_˛icked
, 
grid_˛icked
, 
grid_˛icked_1d
);

338  
ªsu…
;

339 
	}
}

340 
	$game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
TimeMachöeEdô‹
* 
timeMachöe
, 
mou£_game_pos_x
,
mou£_game_pos_y
)

342 
i
 = 0; i < 
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
; i++)

344 
GameSèã
* 
cuºítSèã
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
i
];

345 
À·
 = (Ë
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
;

346 
right
 = (Ë
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
 + 
cuºítSèã
->
w
;

347 
down
 = (Ë
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
;

348 
up
 = (Ë
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
 + 
cuºítSèã
->
h
;

349 
boﬁ
 
˛ickedFlo‹
 = 
	`m©h_˛ick_is_öside_AABB
(
À·
, 
down
, 
right
, 
up
, 
mou£_game_pos_x
, 
mou£_game_pos_y
);

350 if(
˛ickedFlo‹
)

351  
i
;

354 
	}
}

356 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_undo_a˘i⁄
()

358 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

359 
a˘i⁄
.a˘i⁄ = 
TM_UNDO
;

360  
a˘i⁄
;

361 
	}
}

362 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_¸óã_a˘i⁄
(
x
, 
y
, 
w
, 
h
)

364 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

365 
a˘i⁄
.a˘i⁄ = 
TM_CREATE_GAMESTATE
;

366 
a˘i⁄
.
u
.
¸óã
.
x
 = x;

367 
a˘i⁄
.
u
.
¸óã
.
y
 = y;

368 
a˘i⁄
.
u
.
¸óã
.
w
 = w;

369 
a˘i⁄
.
u
.
¸óã
.
h
 = h;

370  
a˘i⁄
;

371 
	}
}

372 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_≠∂y_brush
(
Game°©eBrush
 
brush
, 
èrgë_game°©e
, 
I¡Paú
 
èrgë_squ¨e
)

374 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

375 
a˘i⁄
.a˘i⁄ = 
TM_APPLY_BRUSH
;

376 
a˘i⁄
.
u
.
brush
.brush = brush;

377 
a˘i⁄
.
u
.
brush
.
èrgë_game°©e_ödex
 = 
èrgë_game°©e
;

378 
a˘i⁄
.
u
.
brush
.
èrgë_squ¨e
 =Åarget_square;

379  
a˘i⁄
;

380 
	}
}

381 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_ªsize_gam£°©e
(
èrgë_game°©e
,

382 
AABB
 
√xtPosôi⁄
,

383 
I¡Paú
 
di•œ˚mít_‰om_öput_to_√xt
)

385 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

386 
a˘i⁄
.a˘i⁄ = 
TM_RESIZE_GAMESTATE
;

387 
a˘i⁄
.
u
.
ªsize
.
√xt_°¨tög_posôi⁄
.
x
 = (Ë
√xtPosôi⁄
.x;

388 
a˘i⁄
.
u
.
ªsize
.
√xt_°¨tög_posôi⁄
.
y
 = (Ë
√xtPosôi⁄
.y;

389 
a˘i⁄
.
u
.
ªsize
.
èrgë_game°©e_ödex
 = 
èrgë_game°©e
;

390 
a˘i⁄
.
u
.
ªsize
.
di•œ˚mít_‰om_öput_to_√xt
 = displacement_from_input_to_next;

391 
a˘i⁄
.
u
.
ªsize
.
√xt_size
.
x
 = (Ë
√xtPosôi⁄
.
w
;

392 
a˘i⁄
.
u
.
ªsize
.
√xt_size
.
y
 = (Ë
√xtPosôi⁄
.
h
;

393  
a˘i⁄
;

394 
	}
}

395 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_move_game°©e
(
èrgë_game°©e
, 
I¡Paú
 
movemít
)

397 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

398 
a˘i⁄
.a˘i⁄ = 
TM_MOVE_GAMESTATE
;

399 
a˘i⁄
.
u
.
move
.
moveDi°™˚
 = 
movemít
;

400 
a˘i⁄
.
u
.
move
.
èrgë_game°©e_ödex
 = 
èrgë_game°©e
;

401  
a˘i⁄
;

402 
	}
}

403 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_dñëe_game°©e
(
èrgë_game°©e
)

405 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

406 
a˘i⁄
.a˘i⁄ = 
TM_DELETE_GAMESTATE
;

407 
a˘i⁄
.
u
.
ªmove
.
game°©e_ödex
 = 
èrgë_game°©e
;

408  
a˘i⁄
;

409 
	}
}

411 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_ª∂a˚_game°©e
(
GameSèã
* 
ª∂a˚mít
, 
to_ª∂a˚
, c⁄° * 
«me
)

413 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

414 
a˘i⁄
.a˘i⁄ = 
TM_REPLACE_GAMESTATE
;

415 
a˘i⁄
.
u
.
ª∂a˚
.
ª∂a˚_°©e
 = 
ª∂a˚mít
;

416 
a˘i⁄
.
u
.
ª∂a˚
.
ödex_to_ª∂a˚
 = 
to_ª∂a˚
;

417 
i
 = 0; i < 
GAME_LEVEL_NAME_MAX_SIZE
; i++)

419 
a˘i⁄
.
u
.
ª∂a˚
.
«me
[
i
] =Çame[i];

421  
a˘i⁄
;

422 
	}
}

423 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_upd©e_game°©e
(
GameSèã
* 
ª∂a˚mít
, 
to_ª∂a˚
, 
LevñName
 
«me
)

425 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

426 
a˘i⁄
.a˘i⁄ = 
TM_UPDATE_GAMESTATE
;

427 
a˘i⁄
.
u
.
upd©e
.
ª∂a˚_°©e
 = 
ª∂a˚mít
;

428 
a˘i⁄
.
u
.
upd©e
.
ödex_to_ª∂a˚
 = 
to_ª∂a˚
;

429 
i
 = 0; i < 
GAME_LEVEL_NAME_MAX_SIZE
; i++)

431 
a˘i⁄
.
u
.
ª∂a˚
.
«me
[
i
] =Çame.name[i];

433  
a˘i⁄
;

434 
	}
}

435 
TimeMachöeEdô‹A˘i⁄
 
	$game°©e_timemachöó˘i⁄_¸óã_ch™ge_Àvñ_mode
(
èrgë_game°©e
, 
LevñMode
 
√xt_mode
)

437 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

438 
a˘i⁄
.a˘i⁄ = 
TM_CHANGE_LEVEL_MODE
;

439 
a˘i⁄
.
u
.
Àvñ
.
ödex_to_ª∂a˚
 = 
èrgë_game°©e
;

440 
a˘i⁄
.
u
.
Àvñ
.
ª∂a˚_vÆue
 = 
√xt_mode
;

441  
a˘i⁄
;

442 
	}
}

	@Fonts.h

1 #¥agm®
⁄˚


	@GameState.cpp

1 
	~"GameSèã.h
"

2 
	~"Mem‹y.h
"

3 
	~<io°ªam
>

4 
	~"M©h.h
"

7 
game°©e_Æloˇã_œyîs
(
GameSèã
* 
ªsu…
, 
Mem‹y
* 
mem‹y
, 
w
, 
h
);

10 
ölöe
 
I¡Paú
 
	$move_pos_wøµed_2d_up
(
I¡Paú
 
pos
, 
w
, 
h
)

12 
pos
.
y
 += 1;

13 
pos
.
y
 -’os.y >
h
) * h;

14  
pos
;

15 
	}
}

16 
ölöe
 
I¡Paú
 
	$move_pos_wøµed_2d_right
(
I¡Paú
 
pos
, 
w
, 
h
) {

17 
pos
.
x
 += 1;

18 
pos
.
x
 -’os.x >
w
) * w;

19  
pos
;

20 
	}
}

21 
ölöe
 
I¡Paú
 
	$move_pos_wøµed_2d_down
(
I¡Paú
 
pos
, 
w
, 
h
) {

22 
pos
.
y
 -= 1;

23 
pos
.
y
 +’os.y < 0Ë* 
h
;

24  
pos
;

25 
	}
}

26 
ölöe
 
I¡Paú
 
	$move_pos_wøµed_2d_À·
(
I¡Paú
 
pos
, 
w
, 
h
) {

27 
pos
.
x
 -= 1;

28 
pos
.
x
 +’os.x < 0Ë* 
w
;

29  
pos
;

30 
	}
}

31 
ölöe
 
I¡Paú
 
	$move_pos_wøµed_2d
(
I¡Paú
 
pos
, 
Dúe˘i⁄
 
dúe˘i⁄
, 
w
, 
h
)

33 
dúe˘i⁄
) {

34 
U
:

35 
pos
.
y
 += 1;

36 
pos
.
y
 -’os.y >
h
) * h;

37  
pos
;

38 
R
:

39 
pos
.
x
 += 1;

40 
pos
.
x
 -’os.x >
w
) * w;

41  
pos
;

42 
D
:

43 
pos
.
y
 -= 1;

44 
pos
.
y
 +’os.y < 0Ë* 
h
;

45  
pos
;

46 
L
:

47 
pos
.
x
 -= 1;

48 
pos
.
x
 +’os.x < 0Ë* 
w
;

49  
pos
;

51  
pos
;

52 
	}
}

54 
	gãm∂©e
 <
˛ass
 
	gT
>

55 
	$≠∂y_moves_to_œyî_SLOW
(
Mem‹y
* 
ãmp_mem‹y
, 
boﬁ
* 
is_movög
, 
T
* 
œyî
, 
w
, 
h
, 
Dúe˘i⁄
 
a˘i⁄
, T 
em±y_vÆ
)

58 
Àngth
 = 
w
 * 
h
;

59 
T
* 
√xt_œyî
 = (T*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (TË* 
Àngth
);

60 * 
shÆl_dñëe
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* 
Àngth
);

61 
z
 = 0; z < 
Àngth
; z++)

63 
shÆl_dñëe
[
z
] = 0;

65 
z
 = 0; z < 
Àngth
; z++)

67 
√xt_œyî
[
z
] = 
œyî
[z];

69 
z
 = 0; z < 
Àngth
; z++)

71 
I¡Paú
 
p
 = 
	`t2D
(
z
, 
w
, 
h
);

72 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d
(
p
, 
a˘i⁄
, 
w
, 
h
);

73 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

74 i‡(
is_movög
[
z
])

76 
√xt_œyî
[
√xt_1d
] = 
œyî
[
z
];

77 
shÆl_dñëe
[
z
]++;

78 
shÆl_dñëe
[
√xt_1d
]--;

82 
z
 = 0; z < 
Àngth
; z++)

84 i‡(
shÆl_dñëe
[
z
] > 0)

85 
√xt_œyî
[
z
] = 
em±y_vÆ
;

87 
z
 = 0; z < 
Àngth
; z++)

89 
œyî
[
z
] = 
√xt_œyî
[z];

91 
	}
}

92 
	$≠∂y_À·_moves_to_œyî
(
Mem‹y
* 
mem‹y
, 
boﬁ
* 
is_movög
, * 
œyî
, 
w
, 
h
)

94 
Àngth
 = 
w
 * 
h
;

95 
j
 = 0; j < 
h
; j++)

97 
föÆ_i
 = 
	`f2D
(
w
 - 1, 
j
, w, 
h
);

98 
°‹ed_vÆue
 = 
œyî
[
föÆ_i
];

100 
i
 = 0; i < 
w
 - 1; i++)

102 
pos
 = 
	`f2D
(
i
, 
j
, 
w
, 
h
);

103 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d_À·
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
w
, 
h
);

104 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

105 
œyî
[
√xt_1d
] = (œyî[
pos
] * 
is_movög
[pos]) + (layer[next_1d] * (1 - is_moving[pos]));

107 
I¡Paú
 
√xt_föÆ_2d
 = 
	`move_pos_wøµed_2d_À·
(
	`m©h_öçaú_¸óã
(
w
 - 1, 
j
), w, 
h
);

108 
√xt_föÆ_1d
 = 
	`f2D
(
√xt_föÆ_2d
.
x
,Çext_föÆ_2d.
y
, 
w
, 
h
);

109 
œyî
[
√xt_föÆ_1d
] = (
°‹ed_vÆue
 * 
is_movög
[
föÆ_i
]) + (layer[next_final_1d] * (1 - is_moving[final_i]));

111 
	}
}

112 
	$≠∂y_right_moves_to_œyî
(
Mem‹y
* 
mem‹y
, 
boﬁ
* 
is_movög
, * 
œyî
, 
w
, 
h
)

114 
Àngth
 = 
w
 * 
h
;

115 
z
 = 0;

116 
j
 = 0; j < 
h
; j++)

118 
föÆ_i
 = 
	`f2D
(0, 
j
, 
w
, 
h
);

119 
°‹ed_vÆue
 = 
œyî
[
föÆ_i
];

121 
i
 = 
w
 - 1; i >= 0; i--)

123 
pos
 = 
	`f2D
(
i
, 
j
, 
w
, 
h
);

124 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d_right
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
w
, 
h
);

125 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

126 
œyî
[
√xt_1d
] = (œyî[
pos
] * 
is_movög
[pos]) + (layer[next_1d] * (1 - is_moving[pos]));

129 
I¡Paú
 
√xt_föÆ_2d
 = 
	`move_pos_wøµed_2d_right
(
	`m©h_öçaú_¸óã
(0, 
j
), 
w
, 
h
);

130 
√xt_föÆ_1d
 = 
	`f2D
(
√xt_föÆ_2d
.
x
,Çext_föÆ_2d.
y
, 
w
, 
h
);

131 
œyî
[
√xt_föÆ_1d
] = (
°‹ed_vÆue
 * 
is_movög
[
föÆ_i
]) + (layer[next_final_1d] * (1 - is_moving[final_i]));

133 
	}
}

134 
	$≠∂y_up_moves_to_œyî
(
Mem‹y
* 
mem‹y
, 
boﬁ
* 
is_movög
, * 
œyî
, 
w
, 
h
)

136 
Àngth
 = 
w
 * 
h
;

137 
i
 = 0; i < 
w
; i++)

139 
föÆ_i
 = 
	`f2D
(
i
, 
h
 - 1, 
w
, h);

140 
°‹ed_vÆue
 = 
œyî
[
föÆ_i
];

142 
j
 = 1; j < 
h
; j++)

144 
pos
 = 
	`f2D
(
i
, 
j
, 
w
, 
h
);

145 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d_up
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
w
, 
h
);

146 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

147 
œyî
[
√xt_1d
] = (œyî[
pos
] * 
is_movög
[pos]) + (layer[next_1d] * (1 - is_moving[pos]));

150 
I¡Paú
 
√xt_föÆ_2d
 = 
	`move_pos_wøµed_2d_up
(
	`m©h_öçaú_¸óã
(
i
, 
h
 - 1), 
w
, h);

151 
√xt_föÆ_1d
 = 
	`f2D
(
√xt_föÆ_2d
.
x
,Çext_föÆ_2d.
y
, 
w
, 
h
);

152 
œyî
[
√xt_föÆ_1d
] = (
°‹ed_vÆue
 * 
is_movög
[
föÆ_i
]) + (layer[next_final_1d] * (1 - is_moving[final_i]));

154 
	}
}

155 
	$≠∂y_down_moves_to_œyî
(
Mem‹y
* 
mem‹y
, 
boﬁ
* 
is_movög
, * 
œyî
, 
w
, 
h
)

157 
Àngth
 = 
w
 * 
h
;

158 
i
 = 0; i < 
w
; i++)

160 
föÆ_i
 = 
	`f2D
(
i
, 
h
 - 1, 
w
, h);

161 
°‹ed_vÆue
 = 
œyî
[
föÆ_i
];

162 
j
 = 0; j < 
h
 - 1; j++)

164 
pos
 = 
	`f2D
(
i
, 
j
, 
w
, 
h
);

165 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d_down
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
w
, 
h
);

166 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

167 
œyî
[
√xt_1d
] = (œyî[
pos
] * 
is_movög
[pos]) + (layer[next_1d] * (1 - is_moving[pos]));

170 
I¡Paú
 
√xt_föÆ_2d
 = 
	`move_pos_wøµed_2d_down
(
	`m©h_öçaú_¸óã
(
i
, 
h
 - 1), 
w
, h);

171 
√xt_föÆ_1d
 = 
	`f2D
(
√xt_föÆ_2d
.
x
,Çext_föÆ_2d.
y
, 
w
, 
h
);

172 
œyî
[
√xt_föÆ_1d
] = (
°‹ed_vÆue
 * 
is_movög
[
föÆ_i
]) + (layer[next_final_1d] * (1 - is_moving[final_i]));

174 
	}
}

177 
I¡Paú
 
	$dúe˘i⁄_to_öçaú
(
Dúe˘i⁄
 
a˘i⁄
)

179 i‡(
a˘i⁄
 =
U
)

181  
	`m©h_öçaú_¸óã
(0, 1);

183 i‡(
a˘i⁄
 =
R
)

185  
	`m©h_öçaú_¸óã
(1, 0);

187 i‡(
a˘i⁄
 =
D
)

189  
	`m©h_öçaú_¸óã
(0, -1);

191 i‡(
a˘i⁄
 =
L
)

193  
	`m©h_öçaú_¸óã
(-1, 0);

195  
	`m©h_öçaú_¸óã
(0, 0);

196 
	}
}

197 
Dúe˘i⁄
 
	$a˘i⁄_to_dúe˘i⁄
(
A˘i⁄
 
a˘i⁄
)

199 i‡(
a˘i⁄
 =
A˘i⁄
::
A_UP
)

200  
Dúe˘i⁄
::
U
;

201 i‡(
a˘i⁄
 =
A˘i⁄
::
A_RIGHT
)

202  
Dúe˘i⁄
::
R
;

203 i‡(
a˘i⁄
 =
A˘i⁄
::
A_DOWN
)

204  
Dúe˘i⁄
::
D
;

205 i‡(
a˘i⁄
 =
A˘i⁄
::
A_LEFT
)

206  
Dúe˘i⁄
::
L
;

207  
Dúe˘i⁄
::
NO_DIRECTION
;

208 
	}
}

210 
	$game°©e_timemachöe_ª£t
(
Game°©eTimeMachöe
* 
timeMachöe
, 
Mem‹y
* 
sc›e_mem‹y
)

212 
√xt_pos
 = 
timeMachöe
->
num_game°©es_°‹ed
;

213 
GameSèã
* 
√xt
 = &
timeMachöe
->
°©e_¨øy
[
√xt_pos
];

214 
GameSèã
* 
ﬁd
 = &
timeMachöe
->
°©e_¨øy
[0];

215 
	`game°©e_˛⁄e_to_unôülized
(
ﬁd
, 
√xt
, 
sc›e_mem‹y
);

216 
timeMachöe
->
num_game°©es_°‹ed
++;

217 
	}
}

218 
	$≠∂y_mîge_moves
(
Põ˚D©a
* 
põ˚_d©a
, 
boﬁ
* 
is_movög
, * 
œyî
, 
Dúe˘i⁄
 
d
, 
w
, 
h
, 
GameSèãAnim©i⁄
* 
™im©i⁄
)

220 
boﬁ
 
d⁄e
 = 
Ál£
;

221 !
d⁄e
)

223 
d⁄e
 = 
åue
;

224 
Àngth
 = 
w
 * 
h
;

225 
z
 = 0;

226 
i
 = 0; i < 
w
; i++)

227 
j
 = 0; j < 
h
; j++, 
z
++)

229 i‡(
is_movög
[
z
])

231 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
d
, 
w
, 
h
);

232 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

233 
boﬁ
 
we_¨e_mîge
 = 
põ˚_d©a
[
z
].
powîs
[
CP_MERGE
] ||Öõ˚_d©a[
√xt_1d
].powers[CP_MERGE];

234 
boﬁ
 
bŸh_¸©es
 = 
œyî
[
√xt_1d
] =
P_CRATE
 &&Üayî[
z
] == P_CRATE;

235 
boﬁ
 
√xt_is_blocked
 = (
œyî
[
√xt_1d
] !
LN_FLOOR
Ë&& !
is_movög
[next_1d];

236 i‡(
√xt_is_blocked
)

238 i‡(
bŸh_¸©es
 && 
we_¨e_mîge
)

241 
põ˚_d©a
[
√xt_1d
].
powîs
[
CP_PUSH
] =Öõ˚_d©a[√xt_1d].powîs[CP_PUSH] ||Öõ˚_d©a[
z
].powers[CP_PUSH];

242 
põ˚_d©a
[
√xt_1d
].
powîs
[
CP_PULL
] =Öõ˚_d©a[√xt_1d].powîs[CP_PULL] ||Öõ˚_d©a[
z
].powers[CP_PULL];

243 
põ˚_d©a
[
√xt_1d
].
powîs
[
CP_MERGE
] =Öõ˚_d©a[√xt_1d].powîs[CP_MERGE] ||Öõ˚_d©a[
z
].powers[CP_MERGE];

244 
põ˚_d©a
[
√xt_1d
].
powîs
[
CP_PARALLEL
] =Öõ˚_d©a[√xt_1d].powîs[CP_PARALLEL] ||Öõ˚_d©a[
z
].powers[CP_PARALLEL];

245 
œyî
[
z
] = 0;

246 
i
 = 0; i < 
CP_COUNT
;i++)

247 
põ˚_d©a
[
z
].
powîs
[
i
] = 
Ál£
;

248 
is_movög
[
z
] = 
Ál£
;

251 
™im©i⁄
->
symbﬁ_°¨t
.
íd_powîs
[
z
] = 
põ˚_d©a
[
√xt_1d
];

252 
™im©i⁄
->
symbﬁ_°¨t
.
íd_powîs
[
√xt_1d
] = 
põ˚_d©a
[next_1d];

258 
	}
}

259 
	$ˇn˚l_moves_by_rigid
(
RigidD©a
* 
rigids
, 
boﬁ
* 
is_movög
, 
rigid_to_ˇn˚l
, 
Àn
)

261 
k
 = 0; k < 
Àn
; k++)

262 i‡(
rigids
->
grid
[
k
] =
rigid_to_ˇn˚l
)

263 
is_movög
[
k
] = 
Ál£
;

264 
z
 = 0; z < 
rigids
->
num_löks
; z++)

265 i‡(
rigids
->
löks
[
z
].
x
 =
rigid_to_ˇn˚l
)

266 
	`ˇn˚l_moves_by_rigid
(
rigids
, 
is_movög
,Ñigids->
löks
[
z
].
y
, 
Àn
);

267 
	}
}

268 
	$ˇn˚l_blocked_n⁄mîge_moves
(
RigidD©a
* 
rigids
, 
boﬁ
* 
is_movög
, * 
œyî
, 
Põ˚D©a
* 
põ˚_d©a
, 
Dúe˘i⁄
 
d
, 
w
, 
h
)

270 
boﬁ
 
lo›
 = 
Ál£
;

271 
boﬁ
 
d⁄e
 = 
Ál£
;

272 !
d⁄e
)

274 
d⁄e
 = 
åue
;

275 
Àngth
 = 
w
 * 
h
;

276 
z
 = 0;

277 
i
 = 0; i < 
w
; i++)

278 
j
 = 0; j < 
h
; j++, 
z
++)

280 i‡(
is_movög
[
z
])

282 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
d
, 
w
, 
h
);

283 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

284 
boﬁ
 
we_¨e_mîge
 = 
põ˚_d©a
[
z
].
powîs
[
CP_MERGE
] ||Öõ˚_d©a[
√xt_1d
].powers[CP_MERGE];

285 
boﬁ
 
bŸh_¸©es
 = 
œyî
[
√xt_1d
] =
P_CRATE
 &&Üayî[
z
] == P_CRATE;

286 
boﬁ
 
√xt_is_blocked
 = (
œyî
[
√xt_1d
] !
LN_FLOOR
Ë&& !
is_movög
[next_1d];

287 i‡(
√xt_is_blocked
)

289 i‡(
bŸh_¸©es
 && 
we_¨e_mîge
)

295 
is_movög
[
z
] = 
Ál£
;

296 
d⁄e
 = 
Ál£
;

297 i‡(
rigids
->
grid
[
z
] != 0)

299 
	`ˇn˚l_moves_by_rigid
(
rigids
,
is_movög
,rigids->
grid
[
z
],
w
*
h
);

300 
lo›
 = 
åue
;

307 i‡(
lo›
)

308 
	`ˇn˚l_blocked_n⁄mîge_moves
(
rigids
, 
is_movög
, 
œyî
, 
põ˚_d©a
, 
d
, 
w
, 
h
);

309 
	}
}

310 
	$ˇn˚l_blocked_moves
(
boﬁ
* 
is_movög
, * 
œyî
, 
Dúe˘i⁄
 
d
, 
w
, 
h
)

312 
boﬁ
 
d⁄e
 = 
Ál£
;

313 !
d⁄e
)

315 
d⁄e
 = 
åue
;

316 
Àngth
 = 
w
 * 
h
;

317 
z
 = 0;

318 
i
 = 0; i < 
w
; i++)

319 
j
 = 0; j < 
h
; j++, 
z
++)

321 i‡(
is_movög
[
z
])

323 
I¡Paú
 
√xt
 = 
	`move_pos_wøµed_2d
(
	`m©h_öçaú_¸óã
(
i
, 
j
), 
d
, 
w
, 
h
);

324 
√xt_1d
 = 
	`f2D
(
√xt
.
x
,Çext.
y
, 
w
, 
h
);

325 
boﬁ
 
√xt_is_blocked
 = (
œyî
[
√xt_1d
] !
LN_FLOOR
Ë&& !
is_movög
[next_1d];

326 i‡(
√xt_is_blocked
)

328 
is_movög
[
z
] = 
Ál£
;

329 
d⁄e
 = 
Ál£
;

335 
	}
}

336 
Game°©eTimeMachöe
* 
	$game°©e_timemachöe_¸óã
(
GameSèã
* 
°¨t_°©e
, 
Mem‹y
* 
mem‹y
, 
max_num_game°©es
)

338 
Game°©eTimeMachöe
* 
ªsu…
 = (Game°©eTimeMachöe*Ë
	`mem‹y_Æloc
(
mem‹y
, (GamestateTimeMachine));

339 
ªsu…
->
°¨t_°©e
 = 
	`game°©e_˛⁄e
(°¨t_°©e, 
mem‹y
);

340 
ªsu…
->
°©e_¨øy
 = (
GameSèã
*)
	`mem‹y_Æloc
(
mem‹y
, (GameSèãË* 
max_num_game°©es
);

342 
	`game°©e_˛⁄e_to_unôülized
(
ªsu…
->
°¨t_°©e
, &‘esu…->
°©e_¨øy
[0]), 
mem‹y
);

344 
ªsu…
->
num_game°©es_°‹ed
 = 1;

345 
ªsu…
->
max_game°©es_°‹abÀ
 = 
max_num_game°©es
;

346  
ªsu…
;

347 
	}
}

348 * 
	$game°©e_timemachöe_undo
(
Game°©eTimeMachöe
* 
timeMachöe
)

351 i‡(
timeMachöe
->
num_game°©es_°‹ed
 > 1)

353 
timeMachöe
->
num_game°©es_°‹ed
--;

355  &
timeMachöe
->
°©e_¨øy
[timeMachöe->
num_game°©es_°‹ed
];

357  
NULL
;

358 
	}
}

359 
GameSèã
* 
	$game°©e_timemachöe_gë_œã°_game°©e
(
Game°©eTimeMachöe
* 
timeMachöe
)

361  &
timeMachöe
->
°©e_¨øy
[timeMachöe->
num_game°©es_°‹ed
 - 1];

362 
	}
}

365 
GameSèã
* 
	$game°©e_¸óã
(
Mem‹y
* 
mem‹y
, 
w
, 
h
)

367 
size
 = (
GameSèã
);

368 
GameSèã
* 
ªsu…
 = (GameSèã*Ë
	`mem‹y_Æloc
(
mem‹y
,
size
);

369 
	`game°©e_Æloˇã_œyîs
(
ªsu…
, 
mem‹y
, 
w
, 
h
);

370  
ªsu…
;

371 
	}
}

372 
GameSèã
* 
	$game°©e_˛⁄e
(
GameSèã
* 
°©e
, 
Mem‹y
* 
mem‹y
)

374 
GameSèã
* 
˛⁄e_to
 = 
	`game°©e_¸óã
(
mem‹y
, 
°©e
->
w
, sèã->
h
);

375 
	`game°©e_˛⁄e_to
(
°©e
, 
˛⁄e_to
);

376  
˛⁄e_to
;

377 
	}
}

378 
GameSèã
* 
	$game°©e_mîge_wôh_Æloˇã
(
GameSèã
* 
fú°
, GameSèã* 
£c⁄d
, 
I¡Paú
 
comböed_size
, 
Mem‹y
* 
ouçut_mem‹y
, I¡Paú 
À·_mîge_off£t
, I¡Paú 
right_mîge_off£t
)

380 
GameSèã
* 
ouçut_°©e
 = 
	`game°©e_¸óã
(
ouçut_mem‹y
, 
comböed_size
.
x
, comböed_size.
y
);

381 
	`game°©e_mîge
(
fú°
, 
£c⁄d
, 
ouçut_°©e
, 
À·_mîge_off£t
, 
right_mîge_off£t
);

382  
ouçut_°©e
;

383 
	}
}

384 
GameSèã
* 
	$game°©e_ªsize_wôh_Æloˇã
(
GameSèã
* 
öput_°©e
, 
Mem‹y
* 
ouçut_mem‹y
, 
ouçut_w
, 
ouçut_h
, 
I¡Paú
 
di•œ˚mít_‰om_öput_to_ouçut
)

386 
GameSèã
* 
ouçut_°©e
 = 
	`game°©e_¸óã
(
ouçut_mem‹y
, 
ouçut_w
, 
ouçut_h
);

387 
	`game°©e_ªsize
(
öput_°©e
, 
ouçut_°©e
, 
di•œ˚mít_‰om_öput_to_ouçut
);

388  
ouçut_°©e
;

389 
	}
}

390 
GameA˘i⁄Jou∫Æ
* 
	$game°©e_timemachöe_èke_a˘i⁄
(
Game°©eTimeMachöe
* 
timeMachöe
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
sc›e_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

392 
√xt_pos
 = 
timeMachöe
->
num_game°©es_°‹ed
;

393 
ﬁd_pos
 = 
√xt_pos
 - 1;

394 
GameSèã
* 
ﬁd
 = &
timeMachöe
->
°©e_¨øy
[
ﬁd_pos
];

395 
GameSèã
* 
√xt
 = &
timeMachöe
->
°©e_¨øy
[
√xt_pos
];

396 
	`game°©e_˛⁄e_to_unôülized
(
ﬁd
, 
√xt
, 
sc›e_mem‹y
);

397 
GameA˘i⁄Jou∫Æ
* 
ªsu…
 = 
	`game°©e_a˘i⁄
(
√xt
, 
a˘i⁄
, 
ãmp_mem‹y
);

398 
timeMachöe
->
num_game°©es_°‹ed
++;

399  
ªsu…
;

400 
	}
}

401 
	$game°©e_mîge
(
GameSèã
* 
À·
, GameSèã* 
right
, GameSèã* 
ouçut
, 
I¡Paú
 
À·_mîge_off£t
, I¡Paú 
right_mîge_off£t
)

403 
w_f
 = 
À·
->
w
;

404 
h_f
 = 
À·
->
h
;

405 
w_s
 = 
right
->
w
;

406 
h_s
 = 
right
->
h
;

407 
w_out
 = 
ouçut
->
w
;

408 
h_out
 = 
ouçut
->
h
;

412 
i
 = 0; i < 
w_f
; i++)

413 
j
 = 0; j < 
h_f
; j++)

415 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_f
, 
h_f
);

416 
ödex_out
 = 
	`f2D
(
i
 + 
À·_mîge_off£t
.
x
, 
j
 +Üe·_mîge_off£t.
y
, 
w_out
, 
h_out
);

417 
ouçut
->
Êo‹
[
ödex_out
] = 
À·
->Êo‹[
ödex_ö
];

419 
i
 = 0; i < 
w_s
; i++)

420 
j
 = 0; j < 
h_s
; j++)

422 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_s
, 
h_s
);

423 
ödex_out
 = 
	`f2D
(
i
 + 
right_mîge_off£t
.
x
, 
j
 + 
À·_mîge_off£t
.
y
, 
w_out
, 
h_out
);

424 
ouçut
->
Êo‹
[
ödex_out
] = 
À·
->Êo‹[
ödex_ö
];

429 
i
 = 0; i < 
w_f
; i++)

430 
j
 = 0; j < 
h_f
; j++)

432 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_f
, 
h_f
);

433 
ödex_out
 = 
	`f2D
(
i
 + 
À·_mîge_off£t
.
x
, 
j
 +Üe·_mîge_off£t.
y
, 
w_out
, 
h_out
);

434 
ouçut
->
põ˚
[
ödex_out
] = 
À·
->põ˚[
ödex_ö
];

436 
i
 = 0; i < 
w_s
; i++)

437 
j
 = 0; j < 
h_s
; j++)

439 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_s
, 
h_s
);

440 
ödex_out
 = 
	`f2D
(
i
 + 
right_mîge_off£t
.
x
, 
j
 + 
À·_mîge_off£t
.
y
, 
w_out
, 
h_out
);

441 
ouçut
->
põ˚
[
ödex_out
] = 
À·
->põ˚[
ödex_ö
];

446 
i
 = 0; i < 
w_f
; i++)

447 
j
 = 0; j < 
h_f
; j++)

449 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_f
, 
h_f
);

450 
ödex_out
 = 
	`f2D
(
i
 + 
À·_mîge_off£t
.
x
, 
j
 +Üe·_mîge_off£t.
y
, 
w_out
, 
h_out
);

451 
ouçut
->
Êo‹_d©a
[
ödex_out
] = 
À·
->Êo‹_d©a[
ödex_ö
];

453 
i
 = 0; i < 
w_s
; i++)

454 
j
 = 0; j < 
h_s
; j++)

456 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_s
, 
h_s
);

457 
ödex_out
 = 
	`f2D
(
i
 + 
right_mîge_off£t
.
x
, 
j
 + 
À·_mîge_off£t
.
y
, 
w_out
, 
h_out
);

458 
ouçut
->
Êo‹_d©a
[
ödex_out
] = 
À·
->Êo‹_d©a[
ödex_ö
];

463 
i
 = 0; i < 
w_f
; i++)

464 
j
 = 0; j < 
h_f
; j++)

466 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_f
, 
h_f
);

467 
ödex_out
 = 
	`f2D
(
i
 + 
À·_mîge_off£t
.
x
, 
j
 +Üe·_mîge_off£t.
y
, 
w_out
, 
h_out
);

468 
ouçut
->
põ˚_d©a
[
ödex_out
] = 
À·
->põ˚_d©a[
ödex_ö
];

470 
i
 = 0; i < 
w_s
; i++)

471 
j
 = 0; j < 
h_s
; j++)

473 
ödex_ö
 = 
	`f2D
(
i
, 
j
, 
w_s
, 
h_s
);

474 
ödex_out
 = 
	`f2D
(
i
 + 
right_mîge_off£t
.
x
, 
j
 + 
À·_mîge_off£t
.
y
, 
w_out
, 
h_out
);

475 
ouçut
->
põ˚_d©a
[
ödex_out
] = 
À·
->põ˚_d©a[
ödex_ö
];

479 
	}
}

480 
GameSèã
* 
	$game°©e_add_row
(
GameSèã
* 
öput
, 
Mem‹y
* 
sc›e_mem‹y
, 
èrgë_x
, 
èrgë_y
)

482 
w_ﬁd
 = 
öput
->
w
;

483 
h_ﬁd
 = 
öput
->
h
;

484 
w_√xt
 = 
w_ﬁd
 + 1;

485 
h_√xt
 = 
h_ﬁd
;

486 
GameSèã
* 
ouçut
 = 
	`game°©e_¸óã
(
sc›e_mem‹y
, 
w_√xt
, 
h_√xt
);

487 
i
 = 0; i < 
w_ﬁd
; i++)

488 
j
 = 0; j < 
h_ﬁd
; j++)

490 
out_x
 = 
i
 + (ò>
èrgë_x
);

491 
out_y
 = 
j
;

492 
ö_ödex
 = 
	`f2D
(
i
, 
j
, 
w_ﬁd
, 
h_ﬁd
);

493 
out_ödex
 = 
	`f2D
(
out_x
, 
out_y
, 
w_√xt
, 
h_√xt
);

495 
ouçut
->
Êo‹
[
out_ödex
] = 
öput
->Êo‹[
ö_ödex
];

496 
ouçut
->
põ˚
[
out_ödex
] = 
öput
->põ˚[
ö_ödex
];

497 
ouçut
->
Êo‹_d©a
[
out_ödex
] = 
öput
->Êo‹_d©a[
ö_ödex
];

498 
ouçut
->
põ˚_d©a
[
out_ödex
] = 
öput
->põ˚_d©a[
ö_ödex
];

502  
ouçut
;

503 
	}
}

504 
GameSèã
* 
	$game°©e_add_cﬁumn
(
GameSèã
* 
öput
, 
Mem‹y
* 
sc›e_mem‹y
, 
èrgë_x
, 
èrgë_y
)

506 
w_ﬁd
 = 
öput
->
w
;

507 
h_ﬁd
 = 
öput
->
h
;

508 
w_√xt
 = 
w_ﬁd
;

509 
h_√xt
 = 
h_ﬁd
 + 1;

510 
GameSèã
* 
ouçut
 = 
	`game°©e_¸óã
(
sc›e_mem‹y
, 
w_√xt
, 
h_√xt
);

511 
i
 = 0; i < 
w_ﬁd
; i++)

512 
j
 = 0; j < 
h_ﬁd
; j++)

514 
out_x
 = 
i
;

515 
out_y
 = 
j
 + (j >
èrgë_y
);

516 
ö_ödex
 = 
	`f2D
(
i
, 
j
, 
w_ﬁd
, 
h_ﬁd
);

517 
out_ödex
 = 
	`f2D
(
out_x
, 
out_y
, 
w_√xt
, 
h_√xt
);

519 
ouçut
->
Êo‹
[
out_ödex
] = 
öput
->Êo‹[
ö_ödex
];

520 
ouçut
->
põ˚
[
out_ödex
] = 
öput
->põ˚[
ö_ödex
];

521 
ouçut
->
Êo‹_d©a
[
out_ödex
] = 
öput
->Êo‹_d©a[
ö_ödex
];

522 
ouçut
->
põ˚_d©a
[
out_ödex
] = 
öput
->põ˚_d©a[
ö_ödex
];

525  
ouçut
;

526 
	}
}

527 
GameSèã
* 
	$game°©e_suºound_wôh_wÆls
(
GameSèã
* 
öput
, 
Mem‹y
* 
sc›e_mem‹y
)

529 
ﬁd_w
 = 
öput
->
w
;

530 
ﬁd_h
 = 
öput
->
h
;

531 
√xt_w
 = 
ﬁd_w
 + 2;

532 
√xt_h
 = 
ﬁd_h
 + 2;

533 
GameSèã
* 
ªsu…
 = 
	`game°©e_¸óã
(
sc›e_mem‹y
, 
√xt_w
, 
√xt_h
);

534 
i
 = 0; i < 
√xt_w
; i++)

535 
j
 = 0; j < 
√xt_h
; j++)

536 i‡(
i
 =0 || 
j
 =0 || i =
√xt_w
 - 1 || j =
√xt_h
 - 1)

538 
z
 = 
	`f2D
(
i
, 
j
, 
√xt_w
,
√xt_h
);

539 
ªsu…
->
põ˚
[
z
] = 
P_WALL
;

542 
i
 = 0; i < 
ﬁd_w
; i++)

543 
j
 = 0; j < 
ﬁd_h
; j++)

545 
ö_ödex
 = 
	`f2D
(
i
, 
j
, 
ﬁd_w
, 
ﬁd_h
);

546 
out_ödex
 = 
	`f2D
(
i
 + 1, 
j
 + 1, 
√xt_w
, 
√xt_h
);

547 
ªsu…
->
Êo‹
[
out_ödex
] = 
öput
->Êo‹[
ö_ödex
];

548 
ªsu…
->
põ˚
[
out_ödex
] = 
öput
->põ˚[
ö_ödex
];

549 
ªsu…
->
Êo‹_d©a
[
out_ödex
] = 
öput
->Êo‹_d©a[
ö_ödex
];

550 
ªsu…
->
põ˚_d©a
[
out_ödex
] = 
öput
->põ˚_d©a[
ö_ödex
];

553  
ªsu…
;

554 
	}
}

556 
	$game°©e_Æloˇã_œyîs
(
GameSèã
* 
ªsu…
, 
Mem‹y
* 
mem‹y
, 
w
, 
h
)

558 
ªsu…
->
w
 = w;

559 
ªsu…
->
h
 = h;

560 
ªsu…
->
põ˚
 = (*)
	`mem‹y_Æloc
(
mem‹y
, (Ë* 
w
 * 
h
);

561 
ªsu…
->
Êo‹
 = (*)
	`mem‹y_Æloc
(
mem‹y
, (Ë* 
w
 * 
h
);

562 
ªsu…
->
põ˚_d©a
 = (
Põ˚D©a
*)
	`mem‹y_Æloc
(
mem‹y
, (Põ˚D©aË* 
w
 * 
h
);

563 
ªsu…
->
Êo‹_d©a
 = (
Flo‹D©a
*)
	`mem‹y_Æloc
(
mem‹y
, (Flo‹D©aË* 
w
 * 
h
);

564 
i
 = 0; i < 
w
 * 
h
; i++)

566 
Flo‹
 
f
 = (Floor)0;

567 
ªsu…
->
Êo‹
[
i
] = 
f
;

569 
i
 = 0; i < 
w
 * 
h
; i++)

571 
Põ˚
 
p
 = (Piece)0;

572 
ªsu…
->
põ˚
[
i
] = 
p
;

574 
i
 = 0; i < 
w
 * 
h
; i++)

576 
ªsu…
->
Êo‹_d©a
[
i
] = 
	`game°©e_Êo‹d©a_make
();

578 
i
 = 0; i < 
w
 * 
h
; i++)

580 
ªsu…
->
põ˚_d©a
[
i
] = 
	`game°©e_põ˚d©a_make
();

583 
	}
}

584 
boﬁ
 
	$game°©e_is_ö_wö_c⁄dôi⁄
(
GameSèã
* 
°©e
)

586 
Àn
 = 
°©e
->
w
 * sèã->
h
;

587 
i
 = 0; i < 
Àn
; i++)

589 i‡(
°©e
->
Êo‹
[
i
] =
F_EXIT
 || sèã->Êo‹[i] =
F_START
 || sèã->Êo‹[i] =
F_STAIRCASE_LEVELSTART
)

590 if(!
	`is_∂ayî
(
°©e
->
põ˚
[
i
]))

592  
Ál£
;

595 
i
 = 0; i < 
Àn
; i++)

597 i‡(
°©e
->
Êo‹
[
i
] =
F_TARGET
 && sèã->
põ˚
[i] !
P_CRATE
)

598  
Ál£
;

600  
åue
;

601 
	}
}

603 
	$maybe_föd_exô_‹_ªtu∫_√g1
(
GameSèã
* 
°©e
)

605 
Àn
 = 
°©e
->
w
 * sèã->
h
;

606 
i
 = 0; i < 
Àn
; i++)

608 i‡(
°©e
->
Êo‹
[
i
] =
Flo‹
::
F_EXIT
)

610  
i
;

614 
i
 = 0; i < 
Àn
; i++)

616 i‡(
°©e
->
Êo‹
[
i
] =
Flo‹
::
F_START
)

618  
i
;

622 
i
 = 0; i < 
Àn
; i++)

624 i‡(
°©e
->
Êo‹
[
i
] =
Flo‹
::
F_STAIRCASE_LEVELSTART
)

626  
i
;

631 
	}
}

633 
	$game°©e_maybe_föd_∂ayî
(
GameSèã
* 
°©e
)

635 
i
 = 0; i < 
°©e
->
w
 * sèã->
h
; i++)

636 i‡(
°©e
->
põ˚
[
i
] =
Põ˚
::
P_PLAYER
)

637  
i
;

639 
	}
}

640 
boﬁ
 
	$is_Àvñ_°¨t
(
vÆ
)

642  
vÆ
 =
F_START
 || vÆ =
F_STAIRCASE_LEVELSTART
;

643 
	}
}

644 
boﬁ
 
	$is_°aúˇ£
(
vÆ
)

646  
vÆ
 =
F_STAIRCASE
 || vÆ =
F_STAIRCASE_LEVELSTART
 || vÆ =
F_STAIRCASE_SOLVED
;

647 
	}
}

648 
boﬁ
 
	$is_∂ayî
(
vÆ
)

650  
vÆ
 =
P_PLAYER
;

651 
	}
}

652 
boﬁ
 
	$is_¸©e
(
vÆ
)

654  
vÆ
 =
P_CRATE
;

655 
	}
}

656 
boﬁ
 
	$is_n‹mÆ_¸©e
(
Põ˚D©a
 
vÆ
)

658  
vÆ
.
powîs
[
CP_PUSH
];

659 
	}
}

660 
boﬁ
 
	$is_puŒ_¸©e
(
Põ˚D©a
 
vÆ
)

662  
vÆ
.
powîs
[
CP_PULL
];

663 
	}
}

664 
	$game°©e_ªsize
(
GameSèã
* 
öput_°©e
, GameSèã* 
ouçut_°©e
, 
I¡Paú
 
di•œ˚mít_‰om_öput_to_ouçut
)

666 
w_ö
 = 
öput_°©e
->
w
;

667 
h_ö
 = 
öput_°©e
->
h
;

668 
w_out
 = 
ouçut_°©e
->
w
;

669 
h_out
 = 
ouçut_°©e
->
h
;

670 
i
 = 0; i < 
w_ö
;i++)

671 
j
 = 0; j < 
h_ö
; j++)

673 
out_x
 = 
i
 + 
di•œ˚mít_‰om_öput_to_ouçut
.
x
;

674 
out_y
 = 
j
 + 
di•œ˚mít_‰om_öput_to_ouçut
.
y
;

675 i‡(
out_x
 >0 && out_x < 
w_out
 && 
out_y
 >0 && out_y < 
h_out
)

677 
ö_ödex
 = 
	`f2D
(
i
, 
j
, 
w_ö
, 
h_ö
);

678 
out_ödex
 = 
	`f2D
(
out_x
, 
out_y
, 
w_out
, 
h_out
);

680 
ouçut_°©e
->
Êo‹
[
out_ödex
] = 
öput_°©e
->Êo‹[
ö_ödex
];

681 
ouçut_°©e
->
põ˚
[
out_ödex
] = 
öput_°©e
->põ˚[
ö_ödex
];

682 
ouçut_°©e
->
Êo‹_d©a
[
out_ödex
] = 
öput_°©e
->Êo‹_d©a[
ö_ödex
];

683 
ouçut_°©e
->
põ˚_d©a
[
out_ödex
] = 
öput_°©e
->põ˚_d©a[
ö_ödex
];

688 
	}
}

689 
	$game°©e_˛⁄e_to
(
GameSèã
* 
öput_°©e
, GameSèã* 
ouçut_°©e
)

691 
w
 = 
öput_°©e
->w;

692 
h
 = 
öput_°©e
->h;

693 i‡(
ouçut_°©e
->
w
 !w || ouçut_°©e->
h
 != h)

695 
	`¸ash_îr
("You fool! YouÅriedÅo use gamestate_clone_to onán input_stateÅhat didn't haveÅhe correctámount of memory. This would beá memoryÜeak. It'sÇowá crash. Enjoy.");

697 
ouçut_°©e
->
w
 = w;

698 
ouçut_°©e
->
h
 = h;

699 
i
 = 0; i < 
w
;i++)

700 
j
 = 0; j < 
h
; j++)

703 
ödex
 = 
	`f2D
(
i
, 
j
, 
w
, 
h
);

704 
ouçut_°©e
->
Êo‹
[
ödex
] = 
öput_°©e
->floor[index];

705 
ouçut_°©e
->
põ˚
[
ödex
] = 
öput_°©e
->piece[index];

706 
ouçut_°©e
->
Êo‹_d©a
[
ödex
] = 
öput_°©e
->floor_data[index];

707 
ouçut_°©e
->
põ˚_d©a
[
ödex
] = 
öput_°©e
->piece_data[index];

711 
	}
}

712 
	$game°©e_˛⁄e_to_unôülized
(
GameSèã
* 
öput_°©e
, GameSèã* 
ouçut_°©e
, 
Mem‹y
* 
mem‹y
)

714 
w
 = 
öput_°©e
->w;

715 
h
 = 
öput_°©e
->h;

716 
	`game°©e_Æloˇã_œyîs
(
ouçut_°©e
, 
mem‹y
, 
w
, 
h
);

717 
	`game°©e_˛⁄e_to
(
öput_°©e
, 
ouçut_°©e
);

718 
	}
}

721 
boﬁ
 
	$game°©e_≠∂y_brush
(
GameSèã
* 
°©e
, 
Game°©eBrush
 
brush
, 
x
, 
y
)

723 
boﬁ
 
ac˚±
 = 
Ál£
;

724 i‡(
brush
.
≠∂yFlo‹
)

726 
w
 = 
°©e
->w;

727 
h
 = 
°©e
->h;

728 
èrgë
 = 
	`f2D
(
x
, 
y
, 
w
,
h
);

729 i‡(
°©e
->
Êo‹
[
èrgë
] !
brush
.floor)

731 
°©e
->
Êo‹
[
èrgë
] = 
brush
.floor;

732 
ac˚±
 = 
åue
;

736 i‡(
brush
.
≠∂yPõ˚
)

738 
w
 = 
°©e
->w;

739 
h
 = 
°©e
->h;

740 
èrgë
 = 
	`f2D
(
x
, 
y
, 
w
, 
h
);

741 i‡(
°©e
->
põ˚
[
èrgë
] !
brush
.piece)

743 
°©e
->
põ˚
[
èrgë
] = 
brush
.piece;

744 
ac˚±
 = 
åue
;

747 i‡(
brush
.
≠∂yCøãPowî
)

749 
w
 = 
°©e
->w;

750 
h
 = 
°©e
->h;

751 
èrgë
 = 
	`f2D
(
x
, 
y
, 
w
, 
h
);

752 
i
 = 0; i < 
CP_COUNT
; i++)

753 
°©e
->
põ˚_d©a
[
èrgë
].
powîs
[
i
] = 
brush
.piece_data.powers[i];

755 i‡(
brush
.
≠∂yFlo‹Powî
)

757 
w
 = 
°©e
->w;

758 
h
 = 
°©e
->h;

759 
èrgë
 = 
	`f2D
(
x
, 
y
, 
w
,
h
);

761 
°©e
->
Êo‹_d©a
[
èrgë
] = 
brush
.floor_data;

764  
ac˚±
;

765 
	}
}

766 
Game°©eBrush
 
	$game°©e_brush_¸óã
(
boﬁ
 
≠∂yFlo‹
, 
Flo‹
 
Êo‹
, boﬁ 
≠∂yPõ˚
, 
Põ˚
 
põ˚
, boﬁ 
≠∂yPõ˚D©a
, 
Põ˚D©a
 
põ˚D©a
,boﬁ 
≠∂yFlo‹D©a
, 
Flo‹D©a
 
Êo‹D©a
)

768 
Game°©eBrush
 
ªsu…
;

769 
ªsu…
.
≠∂yFlo‹
 =ápplyFloor;

770 
ªsu…
.
Êo‹
 = floor;

771 
ªsu…
.
≠∂yPõ˚
 =ápplyPiece;

772 
ªsu…
.
põ˚
 =Öiece;

773 
ªsu…
.
≠∂yCøãPowî
 = 
≠∂yPõ˚D©a
;

774 
ªsu…
.
põ˚_d©a
 = 
põ˚D©a
;

775 
ªsu…
.
≠∂yFlo‹Powî
 = 
≠∂yFlo‹D©a
;

776 
ªsu…
.
Êo‹_d©a
 = 
Êo‹D©a
;

777  
ªsu…
;

778 
	}
}

782 
	gãxtuªAs£ts
::
SYMBOLS
 
	$põ˚d©a_to_symbﬁ
(
CøãPowî
 
vÆ
)

784 i‡(
vÆ
 =
CøãPowî
::
CP_PUSH
)

785  
ãxtuªAs£ts
::
SYMBOLS
::
Cú˛e
;

786 i‡(
vÆ
 =
CøãPowî
::
CP_PULL
)

787  
ãxtuªAs£ts
::
SYMBOLS
::
Squ¨e
;

788 i‡(
vÆ
 =
CøãPowî
::
CP_MERGE
)

789  
ãxtuªAs£ts
::
SYMBOLS
::
Plus
;

790 i‡(
vÆ
 =
CøãPowî
::
CP_PARALLEL
)

791  
ãxtuªAs£ts
::
SYMBOLS
::
TrüngÀ
;

792 
	`¸ash_îr
("TriedÅo drawá crate_powerÅhat isÇot drawable");

793  
ãxtuªAs£ts
::
SYMBOLS
::
HÆfCú˛e
;

794 
	}
}

796 
Põ˚D©a
 
	$game°©e_põ˚d©a_make
()

798 
Põ˚D©a
 
ªsu…
;

799 
i
 = 0; i < 
CP_COUNT
; i++)

800 
ªsu…
.
powîs
[
i
] = 
Ál£
;

801  
ªsu…
;

802 
	}
}

803 
Põ˚D©a
 
	$game°©e_põ˚d©a_make
(
CøãPowî
 
powî
)

805 
Põ˚D©a
 
ªsu…
;

806 
i
 = 0; i < 
CP_COUNT
; i++)

807 
ªsu…
.
powîs
[
i
] = 
Ál£
;

808 
ªsu…
.
powîs
[
powî
] = 
åue
;

809  
ªsu…
;

811 
	}
}

812 
Põ˚D©a
 
	$game°©e_põ˚d©a_make
(
CøãPowî
 
powî
,CøãPowî 
powî2
)

814 
Põ˚D©a
 
ªsu…
;

815 
i
 = 0; i < 
CP_COUNT
; i++)

816 
ªsu…
.
powîs
[
i
] = 
Ál£
;

817 
ªsu…
.
powîs
[
powî
] = 
åue
;

818 
ªsu…
.
powîs
[
powî2
] = 
åue
;

819  
ªsu…
;

821 
	}
}

822 
Põ˚D©a
 
	$game°©e_põ˚d©a_make
(
CøãPowî
 
powî
,CøãPowî 
powî2
, CøãPowî 
powî3
)

824 
Põ˚D©a
 
ªsu…
;

825 
i
 = 0; i < 
CP_COUNT
; i++)

826 
ªsu…
.
powîs
[
i
] = 
Ál£
;

827 
ªsu…
.
powîs
[
powî
] = 
åue
;

828 
ªsu…
.
powîs
[
powî2
] = 
åue
;

829 
ªsu…
.
powîs
[
powî3
] = 
åue
;

830  
ªsu…
;

832 
	}
}

833 
Flo‹D©a
 
	$game°©e_Êo‹d©a_make
()

835 
Flo‹D©a
 
ªsu…
;

836 
ªsu…
.
ãÀp‹ãr_id
 = -1;

837  
ªsu…
;

838 
	}
}

843 
	$game°©e_¥öt_°aúˇ£_ãÀ_vÆue
(
GameSèã
** 
game°©e
, 
Àn
)

845 
z
 = 0; z < 
Àn
; z++)

848 
w
 = 
game°©e
[
z
]->w;

849 
h
 = 
game°©e
[
z
]->h;

850 
i
 = 0; i < 
w
 * 
h
; i++)

852 i‡(
	`is_°aúˇ£
(
game°©e
[
z
]->
Êo‹
[
i
]))

854 
°d
::
cout
 << "i" << 
i
 << ",ãÀ_lök" << 
game°©e
[
z
]->
Êo‹_d©a
[i].
ãÀp‹ãr_id
 << std::
ídl
;

859 
	}
}

860 ** 
	$game°©e_gë_œyîs
(
GameSèã
* 
game°©e
, * 
num_œyîs_found
, 
Mem‹y
* 
ãmp_mem‹y
)

862 ** 
ªsu…
 = (**)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (*) * 2);

863 
ªsu…
[0] = 
game°©e
->
Êo‹
;

864 
ªsu…
[1] = 
game°©e
->
põ˚
;

865  
ªsu…
;

866 
	}
}

867 * 
	$game°©e_gë_œyî
(
GameSèã
* 
game°©e
, 
œyî_num
)

869 i‡(
œyî_num
 == 0)

870  
game°©e
->
Êo‹
;

871 i‡(
œyî_num
 == 1)

872  
game°©e
->
põ˚
;

873 
	`¸ash_îr
("uh ohh, weÅriedÅo getáÜayerÅhat doesn'tÉxist!");

874  
game°©e
->
Êo‹
;

875 
	}
}

876 
AABB
* 
	$game°©e_¸óã_cﬁlidîs
(
Mem‹y
* 
mem‹y
, 
GameSèã
** 
°©es
, 
I¡Paú
* 
loˇti⁄s
, 
Àngth
)

878 
AABB
* 
ªsu…
 = (AABB*)
	`mem‹y_Æloc
(
mem‹y
, (AABBË* (
Àngth
 - 1));

879 
i
 = 0; i < 
Àngth
; i++)

881 
ªsu…
[
i
].
w
 = (Ë
°©es
[i]->w;

882 
ªsu…
[
i
].
h
 = (Ë
°©es
[i]->h;

884 
i
 = 0; i < 
Àngth
; i++)

886 
ªsu…
[
i
].
x
 = (Ë
loˇti⁄s
[i].x;

887 
ªsu…
[
i
].
y
 = (Ë
loˇti⁄s
[i].y;

889  
ªsu…
;

890 
	}
}

891 
AABB
* 
	$game°©e_¸óã_cﬁlidîs
(
Mem‹y
* 
mem‹y
, 
GameSèã
** 
°©es
, 
I¡Paú
* 
loˇti⁄s
, 
Àngth
, 
skù_ödex
)

893 
AABB
* 
ªsu…
 = (AABB*Ë
	`mem‹y_Æloc
(
mem‹y
, (AABBË* (
Àngth
 - 1));

894 
i
 = 0; i < 
skù_ödex
; i++)

896 
ªsu…
[
i
].
w
 = (Ë
°©es
[i]->w;

897 
ªsu…
[
i
].
h
 = (Ë
°©es
[i]->h;

899 
i
 = 
skù_ödex
 + 1; i < 
Àngth
; i++)

901 
ªsu…
[
i
 - 1].
w
 = (Ë
°©es
[i]->w;

902 
ªsu…
[
i
 - 1].
h
 = (Ë
°©es
[i]->h;

904 
i
 = 0; i < 
skù_ödex
; i++)

906 
ªsu…
[
i
].
x
 = (Ë
loˇti⁄s
[i].x;

907 
ªsu…
[
i
].
y
 = (Ë
loˇti⁄s
[i].y;

909 
i
 = 
skù_ödex
 + 1; i < 
Àngth
; i++)

911 
ªsu…
[
i
 - 1].
x
 = (Ë
loˇti⁄s
[i].x;

912 
ªsu…
[
i
 - 1].
y
 = (Ë
loˇti⁄s
[i].y;

914  
ªsu…
;

915 
	}
}

916 
	$symbﬁloˇœnim©i⁄_Æloc_öã∫Æ
(
GameSèã
* 
°©e
, 
SymbﬁAnim©i⁄
* 
™im©i⁄
,
w
, 
h
)

918 
z
 = 0;

919 
i
 = 0; i < 
w
; i++)

920 
j
 = 0; j < 
h
;j++,
z
++)

922 
™im©i⁄
->
°¨t_powîs
[
z
] = 
°©e
->
põ˚_d©a
[z];

923 
™im©i⁄
->
íd_powîs
[
z
] = 
°©e
->
põ˚_d©a
[z];

924 
p
 = 0;Ö < 
CP_COUNT
;Ö++)

925 
™im©i⁄
->
Êash_powîs
[
z
].
powîs
[
p
] = 
Ál£
;;

926 
™im©i⁄
->
globÆ_posôi⁄
[
z
] = 
	`m©h_öçaú_¸óã
(
i
, 
j
);

927 
™im©i⁄
->
globÆ_move
[
z
] = 
Dúe˘i⁄
::
NO_DIRECTION
;

929 
	}
}

931 
SymbﬁAnim©i⁄
* 
	$symbﬁloˇœnim©i⁄_¸óã_öã∫Æ
(
num_ñemíts
, 
Mem‹y
* 
ãmp_mem‹y
)

933 
SymbﬁAnim©i⁄
* 
ªsu…
 = 
mem_Æloc
<SymbﬁAnim©i⁄>(
ãmp_mem‹y
, 1);

934 
ªsu…
->
Àn
 = 
num_ñemíts
;

935 
ªsu…
->
globÆ_posôi⁄
 = 
mem_Æloc
<
I¡Paú
>(
ãmp_mem‹y
, 
num_ñemíts
);

936 
ªsu…
->
globÆ_move
 = 
mem_Æloc
<
Dúe˘i⁄
>(
ãmp_mem‹y
,
num_ñemíts
);

937 
ªsu…
->
°¨t_powîs
 = 
mem_Æloc
<
Põ˚D©a
>(
ãmp_mem‹y
,
num_ñemíts
);

938 
ªsu…
->
íd_powîs
 = 
mem_Æloc
<
Põ˚D©a
>(
ãmp_mem‹y
,
num_ñemíts
);

939 
ªsu…
->
Êash_powîs
 = 
mem_Æloc
<
Põ˚D©a
>(
ãmp_mem‹y
,
num_ñemíts
);

940  
ªsu…
;

941 
	}
}

943 
	$symbﬁglobÆ™im©i⁄_Æloc_öã∫Æ
(
SymbﬁGlobÆAnim©i⁄
* 
to_Æloc
, 
Mem‹y
* 
ãmp_mem‹y
,
num_ñemíts
)

945 
to_Æloc
->
Àn
 = 
num_ñemíts
;

946 
to_Æloc
->
img_vÆue
 = 
mem_Æloc
<>(
ãmp_mem‹y
, 
num_ñemíts
);

947 
to_Æloc
->
to_move
 = 
mem_Æloc
<
Dúe˘i⁄
>(
ãmp_mem‹y
, 
num_ñemíts
);

948 
to_Æloc
->
pos
 = 
mem_Æloc
<
I¡Paú
>(
ãmp_mem‹y
, 
num_ñemíts
);

949 
	}
}

950 
	$c›y_põ˚_™im©i⁄_to_symbﬁ_™im©i⁄
(
Põ˚D©a
* 
¸©es
, 
Àn_põ˚s
, 
Àn_symbﬁs
, 
MaskedMovemítAnim©i⁄
* 
põ˚s
, MaskedMovemítAnim©i⁄* 
symbﬁ
)

952 
cuºít_Àn_symbﬁs
 = 0;

953 
i
 = 0; i < 
Àn_põ˚s
; i++)

955 
j
 = 0; j < 
CP_COUNT
;j++)

956 i‡(
¸©es
[
i
].
powîs
[
j
])

958 
symbﬁ
->
pos
[
cuºít_Àn_symbﬁs
] = 
põ˚s
->pos[
i
];

959 
symbﬁ
->
img_vÆue
[
cuºít_Àn_symbﬁs
] = 
j
;

960 
symbﬁ
->
to_move
[
cuºít_Àn_symbﬁs
]
põ˚s
->to_move[
i
];

961 
cuºít_Àn_symbﬁs
++;

964 
	}
}

965 
	$masked_movemít_™im©i⁄_˛⁄e_öã∫Æ
(
Àn
, 
MaskedMovemítAnim©i⁄
* 
c›y
, MaskedMovemítAnim©i⁄* 
‹igöÆ
)

967 
i
 = 0; i < 
Àn
; i++)

969 
c›y
->
img_vÆue
[
i
] = 
‹igöÆ
->img_value[i];

971 
i
 = 0; i < 
Àn
; i++)

973 
c›y
->
pos
[
i
] = 
‹igöÆ
->pos[i];

975 
i
 = 0; i < 
Àn
; i++)

977 
c›y
->
to_move
[
i
] = 
‹igöÆ
->to_move[i];

979 
	}
}

980 
MaskedMovemítAnim©i⁄
* 
	$game°©e_™im©i⁄moveöfo_¸óã_öã∫Æ
(
num_ñemíts
, 
Mem‹y
* 
ãmp_mem‹y
)

982 
MaskedMovemítAnim©i⁄
* 
ªsu…
 = (MaskedMovemítAnim©i⁄*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (MaskedMovementAnimation));

983 
ªsu…
->
pos
 = (
I¡Paú
*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (I¡PaúË* 
num_ñemíts
);

984 
ªsu…
->
to_move
 = (
Dúe˘i⁄
*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Dúe˘i⁄Ë* 
num_ñemíts
);

985 
ªsu…
->
img_vÆue
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* 
num_ñemíts
);

986 
i
 = 0; i < 
num_ñemíts
; i++)

988 
ªsu…
->
pos
[
i
] = 
	`m©h_öçaú_¸óã
(0, 0);

989 
ªsu…
->
to_move
[
i
] = 
Dúe˘i⁄
::
NO_DIRECTION
;

990 
ªsu…
->
img_vÆue
[
i
] = 0;

992  
ªsu…
;

993 
	}
}

994 
	$™im©i⁄moveöfo_£t_deÁu…_posôi⁄s
(
MaskedMovemítAnim©i⁄
* 
öfo
, 
GameSèã
* 
°©e
)

996 
w
 = 
°©e
->w;

997 
h
 = 
°©e
->h;

998 
z
 = 0;

999 
i
 = 0; i < 
w
;i++)

1000 
j
 = 0; j < 
h
; j++, 
z
++)

1002 
öfo
->
pos
[
z
] = 
	`m©h_öçaú_¸óã
(
i
, 
j
);

1004 
	}
}

1005 
	$™im©i⁄moveöfo_c›y_‰om_game°©e_öã∫Æ
(
MaskedMovemítAnim©i⁄
* 
öfo
, 
GameSèã
* 
°©e
)

1007 
num_to_døw
 = 
°©e
->
w
 * sèã->
h
;

1008 
i
 = 0; i < 
num_to_døw
; i++)

1010 
√xt_vÆ
 = 
°©e
->
põ˚
[
i
];

1011 
öfo
->
img_vÆue
[
i
] = 
√xt_vÆ
;

1014 
	}
}

1015 
	$™im©i⁄moveöfo_≠∂y_movemíts
(
GameSèã
* 
°©e
, 
MaskedMovemítAnim©i⁄
* 
°¨t
,MaskedMovemítAnim©i⁄* 
íd
, 
boﬁ
* 
moves
, 
Dúe˘i⁄
 
movemít
, 
num_to_døw
)

1017 
z
 = 0;

1018 
i
 = 0; i < 
°©e
->
w
;i++)

1019 
j
 = 0;j < 
°©e
->
h
;j++,
z
++)

1020 i‡(
moves
[
z
])

1022 
°¨t
->
to_move
[
z
] = 
movemít
;

1023 
íd
->
to_move
[
z
] = 
movemít
;

1024 
I¡Paú
 
√xt_gﬂl
 = 
	`move_pos_wøµed_2d
(
	`m©h_öçaú_¸óã
(
i
,
j
),
movemít
, 
°©e
->
w
, sèã->
h
);

1025 
íd
->
pos
[
z
] = 
√xt_gﬂl
;

1027 
	}
}

1029 
	gglm
::
vec2
 
	$põ˚d©a_ˇlcuœã_sˇÀ
(
Põ˚D©a
 
põ˚
)

1031 
tŸÆ
 = 0;

1032 
i
 = 0; i < 
CP_COUNT
; i++)

1033 
tŸÆ
 +
põ˚
.
powîs
[
i
];

1034 
width
 = ()
	`˚û
(
	`sqπ
(
tŸÆ
));

1035 
glm
::
vec2
 
sˇÀ
;

1036 
sˇÀ
.
x
 = 1.0‡/ ()
width
;

1037 
sˇÀ
.
y
 = 1.0‡/ ()
width
;

1038  
sˇÀ
;

1039 
	}
}

1041 
	$põ˚d©a_ˇlcuœã_loˇl_posôi⁄s
(
Põ˚D©a
 
põ˚
, 
glm
::
vec2
* 
sˇÀ
, glm::vec2* 
out_posôi⁄s
)

1043 
tŸÆ
 = 0;

1044 
i
 = 0; i < 
CP_COUNT
; i++)

1045 
tŸÆ
 +
põ˚
.
powîs
[
i
];

1046 
width
 = ()
	`˚û
(
	`sqπ
(
tŸÆ
));

1048 
num_døwn
 = 0;

1049 
j
 = 0; j < 
CP_COUNT
; j++)

1051 i‡(
põ˚
.
powîs
[
j
])

1053 
out_posôi⁄s
[
num_døwn
].
x
 = “um_døw¿% 
width
);

1054 
out_posôi⁄s
[
num_døwn
].
y
 = “um_døw¿/ 
width
);

1055 
num_døwn
++;

1058 
	}
}

1062 
GameA˘i⁄Jou∫Æ
* 
	$game°©e_a˘i⁄
(
GameSèã
* 
°©e
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
ãmp_mem‹y
)

1064 
GameA˘i⁄Jou∫Æ
* 
jou∫Æ
 = (GameA˘i⁄Jou∫Æ*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (GameActionJournal));

1065 
jou∫Æ
->
ﬁd_°©e
 = 
	`game°©e_˛⁄e
(
°©e
, 
ãmp_mem‹y
);

1066 c⁄° 
w
 = 
°©e
->w;

1067 c⁄° 
h
 = 
°©e
->h;

1068 c⁄° 
num_ñemíts
 = 
w
 * 
h
;

1069 * 
põ˚s
 = 
°©e
->
põ˚
;

1072 
GameSèãAnim©i⁄
* 
™im©i⁄
;

1074 
™im©i⁄
 = (
GameSèãAnim©i⁄
*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (GameStateAnimation));

1075 
™im©i⁄
->
°¨ts
 = *
	`game°©e_™im©i⁄moveöfo_¸óã_öã∫Æ
(
w
 * 
h
, 
ãmp_mem‹y
);

1076 
™im©i⁄
->
íds
 = *
	`game°©e_™im©i⁄moveöfo_¸óã_öã∫Æ
(
w
 * 
h
, 
ãmp_mem‹y
);

1077 
™im©i⁄
->
num_to_døw
 = 
w
 * 
h
;

1078 
	`™im©i⁄moveöfo_c›y_‰om_game°©e_öã∫Æ
(&
™im©i⁄
->
°¨ts
, 
°©e
);

1079 
	`™im©i⁄moveöfo_£t_deÁu…_posôi⁄s
(&
™im©i⁄
->
°¨ts
, 
°©e
);

1080 
	`™im©i⁄moveöfo_£t_deÁu…_posôi⁄s
(&
™im©i⁄
->
íds
, 
°©e
);

1083 
∂ayî_1d
 = 0;

1084 
I¡Paú
 
∂ayî_2d
 = 
	`m©h_öçaú_¸óã
(0,0);

1087 
i
 = 0; i < 
num_ñemíts
; i++)

1089 i‡(
	`is_∂ayî
(
põ˚s
[
i
]))

1092 
∂ayî_1d
 = 
i
;

1093 
∂ayî_2d
 = 
	`t2D
(
i
, 
°©e
->
w
, sèã->
h
);

1100 
boﬁ
* 
squ¨e_movög
 = (boﬁ*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (boﬁË* 
num_ñemíts
);

1102 
	`mem£t
(
squ¨e_movög
, 
Ál£
, (Ë* 
num_ñemíts
);

1103 
squ¨e_movög
[
∂ayî_1d
] = 
åue
;

1107 
RigidD©a
 
rigid_d©a
;

1109 
rigid_d©a
.
grid
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* 
num_ñemíts
);

1110 
i
 = 0; i < 
num_ñemíts
; i++)

1111 
rigid_d©a
.
grid
[
i
]= 0;

1112 
rigid_d©a
.
löks
 = (
I¡Paú
*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (I¡PaúË* 
num_ñemíts
);

1113 
rigid_d©a
.
num_löks
 = 0;

1114 
rigid_d©a
.
num_rigids
 = 1;

1118 
I¡Paú
 
√xt_squ¨e
 = 
	`move_pos_wøµed_2d
(
∂ayî_2d
, 
a˘i⁄
, 
w
, 
h
);

1119 
I¡Paú
 
back_squ¨e
 = 
	`move_pos_wøµed_2d
(
∂ayî_2d
, 
	`dúe˘i⁄_ªvî£
(
a˘i⁄
), 
w
, 
h
);

1120 
I¡Paú
 
˛ockwi£_squ¨e
 = 
	`move_pos_wøµed_2d
(
∂ayî_2d
, 
	`dúe˘i⁄_rŸ©e_˛ockwi£
(
a˘i⁄
), 
w
, 
h
);

1121 
I¡Paú
 
™ti˛ockwi£_squ¨e
 = 
	`move_pos_wøµed_2d
(
∂ayî_2d
, 
	`dúe˘i⁄_rŸ©e_™ti
(
a˘i⁄
), 
w
, 
h
);

1122 
√xt_squ¨e_1d
 = 
	`f2D
(
√xt_squ¨e
.
x
,Çext_squ¨e.
y
, 
w
, 
h
);

1123 
back_squ¨e_1d
 = 
	`f2D
(
back_squ¨e
.
x
, back_squ¨e.
y
, 
w
, 
h
);

1124 
˛ockwi£_squ¨e_1d
 = 
	`f2D
(
˛ockwi£_squ¨e
.
x
, clockwi£_squ¨e.
y
, 
w
, 
h
);

1125 
™ti˛ockwi£_squ¨e_1d
 = 
	`f2D
(
™ti˛ockwi£_squ¨e
.
x
,á¡i˛ockwi£_squ¨e.
y
, 
w
, 
h
);

1127 
√xt_põ˚
 = 
põ˚s
[
√xt_squ¨e_1d
];

1128 
back_põ˚
 = 
põ˚s
[
back_squ¨e_1d
];

1129 
˛ockwi£_põ˚
 = 
põ˚s
[
˛ockwi£_squ¨e_1d
];

1130 
™ti˛ockwi£_põ˚
 = 
põ˚s
[
™ti˛ockwi£_squ¨e_1d
];

1133 
∂ayî_rigid_numbî
 = 
rigid_d©a
.
num_rigids
;

1134 
rigid_d©a
.
num_rigids
++;

1135 
rigid_d©a
.
grid
[
∂ayî_1d
] = 
∂ayî_rigid_numbî
;

1136 i‡(
√xt_põ˚
 =
P_CRATE
 && 
°©e
->
põ˚_d©a
[
√xt_squ¨e_1d
].
powîs
[
CP_PUSH
])

1138 
squ¨e_movög
[
√xt_squ¨e_1d
] = 
åue
;

1139 
rigid_d©a
.
grid
[
√xt_squ¨e_1d
] =Ñigid_d©a.
num_rigids
;

1140 
rigid_d©a
.
num_rigids
++;

1141 
rigid_d©a
.
löks
[rigid_d©a.
num_löks
] = 
	`m©h_öçaú_¸óã
(
∂ayî_rigid_numbî
,Ñigid_d©a.
grid
[
√xt_squ¨e_1d
]);

1142 
rigid_d©a
.
num_löks
++;

1144 i‡(
back_põ˚
 =
P_CRATE
 && 
°©e
->
põ˚_d©a
[
back_squ¨e_1d
].
powîs
[
CP_PULL
])

1146 
squ¨e_movög
[
back_squ¨e_1d
] = 
åue
;

1147 
rigid_d©a
.
grid
[
back_squ¨e_1d
] =Ñigid_d©a.
num_rigids
;

1148 
rigid_d©a
.
num_rigids
++;

1149 
rigid_d©a
.
löks
[rigid_d©a.
num_löks
] = 
	`m©h_öçaú_¸óã
(
∂ayî_rigid_numbî
,Ñigid_d©a.
grid
[
back_squ¨e_1d
]);

1150 
rigid_d©a
.
num_löks
++;

1152 i‡(
˛ockwi£_põ˚
 =
P_CRATE
 && 
°©e
->
põ˚_d©a
[
˛ockwi£_squ¨e_1d
].
powîs
[
CP_PARALLEL
])

1154 
squ¨e_movög
[
˛ockwi£_squ¨e_1d
] = 
åue
;

1155 
rigid_d©a
.
grid
[
˛ockwi£_squ¨e_1d
] =Ñigid_d©a.
num_rigids
;

1156 
rigid_d©a
.
num_rigids
++;

1157 
rigid_d©a
.
löks
[rigid_d©a.
num_löks
] = 
	`m©h_öçaú_¸óã
(
∂ayî_rigid_numbî
,Ñigid_d©a.
grid
[
˛ockwi£_squ¨e_1d
]);

1158 
rigid_d©a
.
num_löks
++;

1160 i‡(
™ti˛ockwi£_põ˚
 =
P_CRATE
 && 
°©e
->
põ˚_d©a
[
™ti˛ockwi£_squ¨e_1d
].
powîs
[
CP_PARALLEL
])

1162 
squ¨e_movög
[
™ti˛ockwi£_squ¨e_1d
] = 
åue
;

1163 
rigid_d©a
.
grid
[
™ti˛ockwi£_squ¨e_1d
] =Ñigid_d©a.
num_rigids
;

1164 
rigid_d©a
.
num_rigids
++;

1165 
rigid_d©a
.
löks
[rigid_d©a.
num_löks
] = 
	`m©h_öçaú_¸óã
(
∂ayî_rigid_numbî
,Ñigid_d©a.
grid
[
™ti˛ockwi£_squ¨e_1d
]);

1166 
rigid_d©a
.
num_löks
++;

1168 i‡(
°©e
->
Êo‹
[
√xt_squ¨e_1d
] =
F_GRILL_HOT
)

1170 
squ¨e_movög
[
∂ayî_1d
] = 
Ál£
;

1171 
	`ˇn˚l_moves_by_rigid
(&
rigid_d©a
, 
squ¨e_movög
, 
∂ayî_rigid_numbî
, 
°©e
->
w
 * sèã->
h
);

1176 
™im©i⁄
->
symbﬁ_°¨t
 = *
	`symbﬁloˇœnim©i⁄_¸óã_öã∫Æ
(
w
 * 
h
, 
ãmp_mem‹y
);

1177 
™im©i⁄
->
symbﬁ_íd
 = *
	`symbﬁloˇœnim©i⁄_¸óã_öã∫Æ
(
w
 * 
h
, 
ãmp_mem‹y
);

1179 
	`symbﬁloˇœnim©i⁄_Æloc_öã∫Æ
(
°©e
, &
™im©i⁄
->
symbﬁ_°¨t
, 
w
, 
h
);

1180 
	`symbﬁloˇœnim©i⁄_Æloc_öã∫Æ
(
°©e
, &
™im©i⁄
->
symbﬁ_íd
, 
w
, 
h
);

1182 
	`ˇn˚l_blocked_n⁄mîge_moves
(&
rigid_d©a
, 
squ¨e_movög
, 
põ˚s
, 
°©e
->
põ˚_d©a
, 
a˘i⁄
, 
w
, 
h
);

1185 i‡(
squ¨e_movög
[
∂ayî_1d
] && 
°©e
->
Êo‹
[∂ayî_1d] =
F_GRILL_COLD
)

1186 
°©e
->
Êo‹
[
∂ayî_1d
] = 
F_GRILL_HOT
;

1191 
	`≠∂y_mîge_moves
(
°©e
->
põ˚_d©a
, 
squ¨e_movög
, 
põ˚s
, 
a˘i⁄
, 
w
, 
h
,
™im©i⁄
);

1194 
	`™im©i⁄moveöfo_c›y_‰om_game°©e_öã∫Æ
(&
™im©i⁄
->
íds
, 
°©e
);

1197 
	`™im©i⁄moveöfo_≠∂y_movemíts
(
°©e
,&
™im©i⁄
->
°¨ts
, &™im©i⁄->
íds
, 
squ¨e_movög
, 
a˘i⁄
, 
w
 * 
h
);

1200 
≠∂y_moves_to_œyî_SLOW
<>(
ãmp_mem‹y
, 
squ¨e_movög
, 
põ˚s
, 
w
, 
h
, 
a˘i⁄
, 
P_NONE
);

1201 
≠∂y_moves_to_œyî_SLOW
<
Põ˚D©a
>(
ãmp_mem‹y
, 
squ¨e_movög
, 
°©e
->
põ˚_d©a
,
w
,
h
,
a˘i⁄
, 
	`game°©e_põ˚d©a_make
());

1203 
jou∫Æ
->
a˘i⁄_ªsu…
 = 
AR_ACTION_OCCURED
;

1204 
jou∫Æ
->
maybe_™im©i⁄
 = 
™im©i⁄
;

1205  
jou∫Æ
;

1206 
	}
}

1207 
	$game°©e_¸umbÀ
(
GameSèã
* 
°©e
)

1209 
Àn
 = 
°©e
->
w
 * sèã->
h
;

1210 
i
 = 0; i < 
Àn
; i++)

1212 i‡(
°©e
->
põ˚
[
i
] =
P_CRUMBLE
 || sèã->põ˚[i] =
P_CRATE
)

1213 
°©e
->
põ˚
[
i
] = 
P_NONE
;

1215 
i
 = 0; i < 
Àn
; i++)

1217 i‡(
°©e
->
Êo‹
[
i
] =
F_START
 || sèã->Êo‹[i] =
F_TARGET
)

1218 
°©e
->
Êo‹
[
i
] = 
F_NONE
;

1220 
i
 = 0; i < 
Àn
; i++)

1222 i‡(
°©e
->
Êo‹
[
i
] =
F_EXIT
)

1223 
°©e
->
Êo‹
[
i
] = 
F_NONE
;

1225 
	}
}

1226 
	$game°©e_°¨tup
(
GameSèã
* 
°©e
)

1228 
	`game°©e_exåude_lurkög_wÆls
(
°©e
);

1231 
exô
 = 
	`maybe_föd_exô_‹_ªtu∫_√g1
(
°©e
);

1233 i‡(
exô
 == -1)

1235 
	`¸ash_îr
("a gamestate was started up, butánÉxit couldn't be found. Uh oh.");

1238 
i
 = 0; i < 
°©e
->
w
 * sèã->
h
;i++)

1240 i‡(
i
 =
exô
)

1242 i‡(
°©e
->
Êo‹
[
i
] =
F_EXIT
 || sèã->Êo‹[i] =
F_START
 || sèã->Êo‹[i] =
F_STAIRCASE_LEVELSTART
)

1244 
°©e
->
Êo‹
[
i
] = 
F_NONE
;

1248 if(
Ál£
)

1250 
boﬁ
 
found_íå™˚
 = 
Ál£
;

1251 
boﬁ
 
found_exô
 = 
Ál£
;

1252 
íå™˚
 = 0;

1253 
exô
 = 0;

1254 
i
 = 0; i < 
°©e
->
w
 * sèã->
h
; i++)

1256 i‡(
	`is_Àvñ_°¨t
(
°©e
->
Êo‹
[
i
]))

1258 
found_íå™˚
 = 
åue
;

1259 
íå™˚
 = 
i
;

1263 
i
 = 0; i < 
°©e
->
w
 * sèã->
h
; i++)

1266 i‡(
°©e
->
Êo‹
[
i
] =
F_EXIT
)

1268 
found_exô
 = 
åue
;

1269 
exô
 = 
i
;

1274 i‡(
found_íå™˚
 && !
found_exô
)

1276 
°©e
->
Êo‹
[
íå™˚
] = 
F_EXIT
;

1280 
	}
}

1281 
	$game°©e_exåude_lurkög_wÆls
(
GameSèã
* 
°©e
)

1283 
Àn
 = 
°©e
->
w
 * sèã->
h
;

1284 
i
 = 0; i < 
Àn
; i++)

1286 i‡(
°©e
->
Êo‹
[
i
] =
F_LURKING_WALL
)

1288 
°©e
->
põ˚
[
i
] = 
P_WALL
;

1292 
	}
}

	@GameState.h

1 #¥agm®
⁄˚


3 
	~"C⁄°™ts.h
"

4 
	~"Mem‹y.h
"

5 
	~"M©h.h
"

6 
	~<io°ªam
>

7 
	~"ãxtuªAs£ts.h
"

8 
	eLAYER_NAME


10 
	mLN_FLOOR
,

11 
	mLN_PIECE
,

12 
	mLN_COUNT


15 c⁄° 
	gGAME_NUM_LAYERS
 = 
LN_COUNT
;

16 c⁄° 
	gPLAYER_LAYER
 = 
LN_PIECE
;

18 
	ePõ˚
 {

19 
	mP_NONE
,

20 
	mP_PLAYER
,

21 
	mP_CRATE
,

22 
	mP_CRUMBLE
,

23 
	mP_WALL
,

24 
	mP_WALL_ALT
,

25 
	mP_COUNT


28 
	eFlo‹
 {

29 
	mF_NONE
,

30 
	mF_TARGET
,

31 
	mF_OUTLINE
,

32 
	mF_START
,

33 
	mF_ZBLACK
,

34 
	mF_LURKING_WALL
,

35 
	mF_GRILL_COLD
,

36 
	mF_GRILL_HOT
,

37 
	mF_EXIT
,

38 
	mF_STAIRCASE
,

39 
	mF_STAIRCASE_LEVELSTART
,

40 
	mF_STAIRCASE_SOLVED
,

41 
	mF_COUNT


43 
	eCøãPowî
 {

44 
	mCP_PUSH
,

45 
	mCP_PULL
,

46 
	mCP_PARALLEL
,

47 
	mCP_MERGE
,

48 
	mCP_STICKY
,

49 
	mCP_COUNT
,

50 
	mCP_ERROR


52 
	sPõ˚D©a


54 
boﬁ
 
	mpowîs
[
CP_COUNT
];

57 
	gTñï‹ãr_Loˇti⁄
;

58 
	sFlo‹D©a


61 
	mãÀp‹ãr_id
;

62 
I¡Paú
 
	mãÀp‹ãr_èrgë_squ¨e
;

65 
	sGameSèã
 {

66 
	mw
;

67 
	mh
;

68 * 
	mÊo‹
;

69 * 
	mpõ˚
;

70 
Flo‹D©a
* 
	mÊo‹_d©a
;

71 
Põ˚D©a
* 
	mpõ˚_d©a
;

74 
	sGame°©eBrush
 {

75 
boﬁ
 
	m≠∂yFlo‹
;

76 
boﬁ
 
	m≠∂yPõ˚
;

77 
Flo‹
 
	mÊo‹
;

78 
Põ˚
 
	mpõ˚
;

79 
boﬁ
 
	m≠∂yCøãPowî
;

80 
Põ˚D©a
 
	mpõ˚_d©a
;

81 
boﬁ
 
	m≠∂yFlo‹Powî
;

82 
Flo‹D©a
 
	mÊo‹_d©a
;

85 
	sGame°©eTimeMachöe


87 
GameSèã
* 
	m°¨t_°©e
;

88 
GameSèã
* 
	m°©e_¨øy
;

89 
	mnum_game°©es_°‹ed
;

90 
	mmax_game°©es_°‹abÀ
;

92 
	eA˘i⁄
 {

93 
	mA_UP
,

94 
	mA_RIGHT
,

95 
	mA_DOWN
,

96 
	mA_LEFT
,

97 
	mA_UNDO
,

98 
	mA_RESET
,

99 
	mA_NONE
,

100 
	mA_COUNT


104 
	eAnim©i⁄Ty≥
 {

105 
	mAT_NONE
,

106 
	mAT_MOVE
,

107 
	mAT_COUNT


111 
	sSymbﬁGlobÆAnim©i⁄


113 
	mÀn
;

114 
I¡Paú
* 
	mpos
;

115 
Dúe˘i⁄
* 
	mto_move
;

116 * 
	mimg_vÆue
;

118 
	sSymbﬁAnim©i⁄


120 
	mÀn
;

121 * 
	mödex
;

122 
I¡Paú
* 
	mglobÆ_posôi⁄
;

123 
Dúe˘i⁄
* 
	mglobÆ_move
;

124 
Põ˚D©a
* 
	m°¨t_powîs
;

125 
Põ˚D©a
* 
	míd_powîs
;

126 
Põ˚D©a
* 
	mÊash_powîs
;

128 
	sMaskedMovemítAnim©i⁄


130 
I¡Paú
* 
	mpos
;

131 
Dúe˘i⁄
* 
	mto_move
;

133 * 
	mimg_vÆue
;

135 
	sGameSèãAnim©i⁄


137 
	mnum_to_døw
;

139 
MaskedMovemítAnim©i⁄
 
	m°¨ts
;

140 
MaskedMovemítAnim©i⁄
 
	míds
;

142 
SymbﬁAnim©i⁄
 
	msymbﬁ_°¨t
;

143 
SymbﬁAnim©i⁄
 
	msymbﬁ_íd
;

145 
	eA˘i⁄Resu…


147 
	mAR_ACTION_CANCELLED
,

148 
	mAR_ACTION_OCCURED
,

149 
	mAR_COUNT


151 
	sGameA˘i⁄Jou∫Æ


153 
GameSèã
* 
	mﬁd_°©e
;

154 
A˘i⁄Resu…
 
	ma˘i⁄_ªsu…
;

155 
GameSèãAnim©i⁄
* 
	mmaybe_™im©i⁄
;

158 
	sRigidD©a


160 * 
	mgrid
;

161 
	mnum_rigids
;

162 
I¡Paú
* 
	mlöks
;

163 
	mnum_löks
;

165 
Dúe˘i⁄
 
a˘i⁄_to_dúe˘i⁄
(
A˘i⁄
 
a˘i⁄
);

166 
I¡Paú
 
dúe˘i⁄_to_öçaú
(
Dúe˘i⁄
 
dú
);

167 
game°©e_timemachöe_ª£t
(
Game°©eTimeMachöe
* 
timeMachöe
, 
Mem‹y
* 
sc›e_mem‹y
);

171 
game°©e_timemachöe_ª£t
(
Game°©eTimeMachöe
* 
timeMachöe
, 
Mem‹y
* 
sc›e_mem‹y
);

172 * 
game°©e_timemachöe_undo
(
Game°©eTimeMachöe
* 
timeMachöe
);

173 
GameSèã
* 
game°©e_timemachöe_gë_œã°_game°©e
(
Game°©eTimeMachöe
* 
timeMachöe
);

174 
Game°©eTimeMachöe
* 
game°©e_timemachöe_¸óã
(
GameSèã
* 
°¨t_°©e
, 
Mem‹y
* 
mem‹y
, 
max_num_game°©es
);

175 
GameA˘i⁄Jou∫Æ
* 
game°©e_timemachöe_èke_a˘i⁄
(
Game°©eTimeMachöe
* 
timeMachöe
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
sc›e_mem‹y
, Mem‹y* 
ãmp_mem‹y
);

178 
Game°©eBrush
 
game°©e_brush_¸óã
(
boﬁ
 
≠∂yFlo‹
, 
Flo‹
 
Êo‹
, boﬁ 
≠∂yPõ˚
, 
Põ˚
 
põ˚
, boﬁ 
≠∂yPõ˚D©a
, 
Põ˚D©a
 
põ˚D©a
, boﬁ 
≠∂yFlo‹D©a
, 
Flo‹D©a
 
Êo‹D©a
);

182 
	gãxtuªAs£ts
::
SYMBOLS
 
põ˚d©a_to_symbﬁ
(
CøãPowî
 
vÆ
);

183 
Põ˚D©a
 
game°©e_põ˚d©a_make
();

184 
Põ˚D©a
 
game°©e_põ˚d©a_make
(
CøãPowî
 
vÆ
);

185 
Põ˚D©a
 
game°©e_põ˚d©a_make
(
CøãPowî
 
vÆ
, CøãPowî 
vÆ2
);

186 
Põ˚D©a
 
game°©e_põ˚d©a_make
(
CøãPowî
 
vÆ
, CøãPowî 
vÆ2
,CøãPowî 
vÆ3
);

187 
Flo‹D©a
 
game°©e_Êo‹d©a_make
();

191 
GameSèã
* 
game°©e_¸óã
(
Mem‹y
* 
mem‹y
, 
w
, 
h
);

192 
GameSèã
* 
game°©e_˛⁄e
(GameSèã* 
°©e
, 
Mem‹y
* 
mem‹y
);

193 
game°©e_˛⁄e_to_unôülized
(
GameSèã
* 
öput
, GameSèã* 
ouçut
, 
Mem‹y
* 
mem‹y
);

194 
game°©e_˛⁄e_to
(
GameSèã
* 
öput_°©e
, GameSèã* 
ouçut_°©e
);

196 
GameSèã
* 
game°©e_add_row
(GameSèã* 
öput
, 
Mem‹y
* 
sc›e_mem‹y
, 
èrgë_x
, 
èrgë_y
);

197 
GameSèã
* 
game°©e_add_cﬁumn
(GameSèã* 
öput
, 
Mem‹y
* 
sc›e_mem‹y
, 
èrgë_x
, 
èrgë_y
);

198 
GameSèã
* 
game°©e_suºound_wôh_wÆls
(GameSèã* 
öput
, 
Mem‹y
* 
sc›e_mem‹y
);

199 
game°©e_ªsize
(
GameSèã
* 
öput_°©e
, GameSèã* 
ouçut_°©e
, 
I¡Paú
 
di•œ˚mít_‰om_öput_to_ouçut
);

200 
GameSèã
* 
game°©e_ªsize_wôh_Æloˇã
(GameSèã* 
öput_°©e
, 
Mem‹y
* 
ouçut_mem‹y
, 
ouçut_w
, 
ouçut_h
, 
I¡Paú
 
di•œ˚mít_‰om_öput_to_ouçut
);

201 
boﬁ
 
game°©e_≠∂y_brush
(
GameSèã
* 
°©e
, 
Game°©eBrush
 
brush
, 
x
, 
y
);

202 
GameSèã
* 
game°©e_mîge_wôh_Æloˇã
(GameSèã* 
fú°
, GameSèã* 
£c⁄d
, 
I¡Paú
 
comböed_size
, 
Mem‹y
* 
ouçut_mem‹y
, I¡Paú 
À·_mîge_off£t
, I¡Paú 
right_mîge_off£t
);

203 
game°©e_mîge
(
GameSèã
* 
À·
, GameSèã* 
right
, GameSèã* 
ouçut
, 
I¡Paú
 
À·_mîge_off£t
, I¡Paú 
right_mîge_off£t
);

206 
game°©e_¥öt_°aúˇ£_ãÀ_vÆue
(
GameSèã
** 
game°©e
,
Àn
);

207 ** 
game°©e_gë_œyîs
(
GameSèã
* 
game°©e
, * 
num_œyîs_found
, 
Mem‹y
* 
ãmp_mem‹y
);

208 * 
game°©e_gë_œyî
(
GameSèã
* 
game°©e
, 
œyî_num
);

210 
AABB
* 
game°©e_¸óã_cﬁlidîs
(
Mem‹y
* 
mem‹y
, 
GameSèã
** 
°©es
, 
I¡Paú
* 
loˇti⁄s
, 
Àngth
);

211 
AABB
* 
game°©e_¸óã_cﬁlidîs
(
Mem‹y
* 
mem‹y
, 
GameSèã
** 
°©es
, 
I¡Paú
* 
loˇti⁄s
, 
Àngth
, 
skù_ödex
);

212 
boﬁ
 
game°©e_is_ö_wö_c⁄dôi⁄
(
GameSèã
* 
°©e
);

214 
game°©e_maybe_föd_∂ayî
(
GameSèã
* 
°©e
);

215 
maybe_föd_exô_‹_ªtu∫_√g1
(
GameSèã
* 
°©e
);

216 
boﬁ
 
is_Àvñ_°¨t
(
vÆ
);

217 
boﬁ
 
is_°aúˇ£
(
vÆ
);

218 
boﬁ
 
is_∂ayî
(
vÆ
);

220 
	gglm
::
vec2
 
põ˚d©a_ˇlcuœã_sˇÀ
(
Põ˚D©a
 
põ˚
);

221 
põ˚d©a_ˇlcuœã_loˇl_posôi⁄s
(
Põ˚D©a
 
põ˚
, 
glm
::
vec2
* 
sˇÀ
, glm::vec2* 
out_posôi⁄s
);

226 
GameA˘i⁄Jou∫Æ
* 
game°©e_a˘i⁄
(
GameSèã
* 
°©e
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
ãmp_mem‹y
);

228 
game°©e_°¨tup
(
GameSèã
* 
°©e
);

229 
game°©e_¸umbÀ
(
GameSèã
* 
°©e
);

230 
game°©e_exåude_lurkög_wÆls
(
GameSèã
* 
°©e
);

	@GamestateAI.h

1 #¥agm®
⁄˚


3 
	tw‹d
;

5 
«me•a˚
 
	gGame°©eAI


7 
	sGame°©e


9 
	gw
;

10 
	gh
;

11 
	gnum_¸©es
;

12 
boﬁ
* 
	gh‹iz⁄èl_wÆls
;

13 
boﬁ
* 
	gvîtiˇl_wÆls
;

14 
	gmou£_èrgë
;

17 
	gãm∂©e
<
ty≥«me
 
	gsize_t
>

18 
ex∑nd
(
Game°©e
 
°©e
, c⁄° 
öput_Àngth
, 
size_t
* 
öput
, size_t* 
ouçut
)

21 
	gi
 = 0; i < 
	göput_Àngth
; i++)

26 
	gi
 = 0; i < 
	göput_Àngth
; i++)

31 
	gi
 = 0; i < 
	göput_Àngth
;i++)

36 
	gi
 = 0; i < 
	göput_Àngth
; i++)

	@GenericUtil.h

1 #¥agm®
⁄˚


3 
	gãm∂©e
 <
ty≥«me
 
	gEÀmít
>

4 
	$föd_ñemít
(
EÀmít
* 
li°
, EÀmíà
£ek
, 
Àngth
)

6 
i
 = 0; i < 
Àngth
; i++)

7 i‡(
li°
[
i
] =
£ek
)

8  
i
;

10 
	}
}

	@Grid.cpp

1 
	~"M©h.h
"

3 
I¡Paú
 
	$m©h_grid_move_dúe˘i⁄
(
I¡Paú
 
pos
, I¡Paú 
move
, I¡Paú 
dimísi⁄s
)

5 
x
 = 
pos
.x + 
move
.x;

6 
y
 = 
pos
.y + 
move
.y;

7 i‡(
x
 >
dimísi⁄s
.x)

8 
x
 = 
dimísi⁄s
.x - 1;

9 i‡(
y
 >
dimísi⁄s
.y)

10 
y
 = 
dimísi⁄s
.y - 1;

11 i‡(
x
 < 0)

12 
x
 = 0;

13 i‡(
y
 < 0)

14 
y
 = 0;

15  
	`m©h_öçaú_¸óã
(
x
, 
y
);

16 
	}
}

17 
I¡Paú
 
	$m©h_grid_move_dúe˘i⁄
(
xSèπ
, 
ySèπ
, 
xMove
, 
yMove
, 
w
, 
h
)

19 
x
 = 
xSèπ
 + 
xMove
;

20 
y
 = 
ySèπ
 + 
yMove
;

21 i‡(
x
 >
w
)

22 
x
 = 
w
 - 1;

23 i‡(
y
 >
h
)

24 
y
 = 
h
 - 1;

25 i‡(
x
 < 0)

26 
x
 = 0;

27 i‡(
y
 < 0)

28 
y
 = 0;

29  
	`m©h_öçaú_¸óã
(
x
, 
y
);

30 
	}
}

31 
I¡Paú
 
	$m©h_grid_move_dúe˘i⁄_wøµed
(
I¡Paú
 
pos
, I¡Paú 
move
, I¡Paú 
dimísi⁄s
)

33 
x
 = 
pos
.x + 
move
.x;

34 
y
 = 
pos
.y + 
move
.y;

35 
x
 = x % 
dimísi⁄s
.x;

36 
y
 = y % 
dimísi⁄s
.y;

37 i‡(
x
 < 0)

38 
x
 +
dimísi⁄s
.x;

39 i‡(
y
 < 0)

40 
y
 +
dimísi⁄s
.y;

41  
	`m©h_öçaú_¸óã
(
x
, 
y
);

42 
	}
}

43 
I¡Paú
 
	$m©h_grid_move_dúe˘i⁄_wøµed
(
xSèπ
, 
ySèπ
, 
xMove
, 
yMove
, 
w
, 
h
)

45 
x
 = 
xSèπ
 + 
xMove
;

46 
y
 = 
ySèπ
 + 
yMove
;

47 
x
 = x % 
w
;

48 
y
 = y % y;

49 i‡(
x
 < 0)

50 
x
 +
w
;

51 i‡(
y
 < 0)

52 
y
 +
h
;

53  
	`m©h_öçaú_¸óã
(
x
, 
y
);

54 
	}
}

	@HelperGL.cpp

1 
	~"Hñ≥rGL.h
"

3 
	$gl_gíî©e_™d_böd_VAO
(
GLuöt
* 
loˇti⁄
)

5 
	`glGíVîãxAºays
(1, 
loˇti⁄
);

6 
	`glBödVîãxAºay
(*
loˇti⁄
);

7 
	}
}

9 
	$gl_£tup_deÁu…s
()

12 
	}
}

14 
	$gl_£tup_öt_vîãx
(
GLuöt
* 
buf„r
, GLuöà
gl_©åib_loˇti⁄
, 
ve˘‹_size
, 
max_buf„r_Àngth
)

16 i‡(
ve˘‹_size
 <= 0 || vector_size > 4)

18 
	`¸ash_îr
("öc‹ª˘ly cÆÀd gl_£tup_vîãx wôhá ve˘‹ sizêo‡" + 
ve˘‹_size
);

20 
	`glGíBuf„rs
(1, 
buf„r
);

21 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, *
buf„r
);

22 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (Ë* 
ve˘‹_size
 * 
max_buf„r_Àngth
, 
NULL
, 
GL_DYNAMIC_DRAW
);

24 
	`glVîãxAâribPoöãr
(
gl_©åib_loˇti⁄
, 
ve˘‹_size
, 
GL_FLOAT
, 
Ál£
, vector_size * (), (*)0);

25 
	`glE«bÀVîãxAâribAºay
(
gl_©åib_loˇti⁄
);

26 
	`glVîãxAâribDivis‹
(
gl_©åib_loˇti⁄
, 1);

27 
	}
}

29 
	$gl_£tup_Êﬂt_vîãx
(
GLuöt
* 
buf„r
, GLuöà
gl_©åib_loˇti⁄
, 
ve˘‹_size
, 
max_buf„r_Àngth
)

31 i‡(
ve˘‹_size
 <= 0 || vector_size > 4)

33 
	`¸ash_îr
("öc‹ª˘ly cÆÀd gl_£tup_vîãx wôhá ve˘‹ sizêo‡" + 
ve˘‹_size
);

35 
	`glGíBuf„rs
(1, 
buf„r
);

36 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, *
buf„r
);

37 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (Ë* 
ve˘‹_size
 * 
max_buf„r_Àngth
, 
NULL
, 
GL_DYNAMIC_DRAW
);

39 
	`glVîãxAâribPoöãr
(
gl_©åib_loˇti⁄
, 
ve˘‹_size
, 
GL_FLOAT
, 
Ál£
, vector_size * (), (*)0);

40 
	`glE«bÀVîãxAâribAºay
(
gl_©åib_loˇti⁄
);

41 
	`glVîãxAâribDivis‹
(
gl_©åib_loˇti⁄
, 1);

42 
	}
}

44 
	$gl_check_îr
(c⁄° * 
fûíame
, 
löe
)

46 
îr‹_check
 = 
	`glGëEº‹
();

47 i‡(
îr‹_check
 != 0)

48 
°d
::
cout
 << "wêhavê¥odu˚dá¿›íGLÉº‹ o¿löe" << 
löe
 << " , i¿fûê" << 
fûíame
 << "bëã∏check iàout." << 
îr‹_check
 << std::
ídl
;

49 
	}
}

	@HelperGL.h

1 #¥agm®
⁄˚


3 
	~"C⁄°™ts.h
"

4 
	~<gœd\gœd.h
>

5 
	~"Mem‹y.h
"

6 
	~"glm/glm.hµ
"

8 
gl_gíî©e_™d_böd_VAO
(
GLuöt
* 
loˇti⁄
);

10 
gl_£tup_deÁu…s
();

11 
gl_£tup_öt_vîãx
(
GLuöt
* 
buf„r
, GLuöà
gl_©åib_loˇti⁄
, 
ve˘‹_size
, 
max_buf„r_Àngth
);

12 
gl_£tup_Êﬂt_vîãx
(
GLuöt
* 
buf„r
, GLuöà
gl_©åib_loˇti⁄
, 
ve˘‹_size
, 
max_buf„r_Àngth
);

13 
	#CHK
 dÿ{
	`gl_check_îr
(
__FILE__
,
__LINE__
);} 0);

	)

15 
gl_check_îr
(c⁄° * 
fûíame
, 
löe
);

	@IntPair.cpp

1 
	~"M©h.h
"

3 
Dúe˘i⁄
 
	$dúe˘i⁄_ªvî£
(
Dúe˘i⁄
 
dú
)

5 i‡(
dú
 =
Dúe˘i⁄
::
U
)

6  
Dúe˘i⁄
::
D
;

7 i‡(
dú
 =
Dúe˘i⁄
::
L
)

8  
Dúe˘i⁄
::
R
;

9 i‡(
dú
 =
Dúe˘i⁄
::
D
)

10  
Dúe˘i⁄
::
U
;

11 i‡(
dú
 =
Dúe˘i⁄
::
R
)

12  
Dúe˘i⁄
::
L
;

13  
dú
;

14 
	}
}

16 
Dúe˘i⁄
 
	$dúe˘i⁄_rŸ©e_˛ockwi£
(
Dúe˘i⁄
 
dú
) {

17 i‡(
dú
 >
NO_DIRECTION
)

18  
dú
;

19  (
Dúe˘i⁄
)((()
dú
 + 1) % 4);

20 
	}
}

22 
Dúe˘i⁄
 
	$dúe˘i⁄_rŸ©e_™ti
(
Dúe˘i⁄
 
dú
)

24 i‡(
dú
 =
Dúe˘i⁄
::
U
)

25  
Dúe˘i⁄
::
L
;

26 i‡(
dú
 =
Dúe˘i⁄
::
L
)

27  
Dúe˘i⁄
::
D
;

28 i‡(
dú
 =
Dúe˘i⁄
::
D
)

29  
Dúe˘i⁄
::
R
;

30 i‡(
dú
 =
Dúe˘i⁄
::
R
)

31  
Dúe˘i⁄
::
U
;

32  
dú
;

33 
	}
}

35 
I¡Paú
 
	$m©h_öçaú_¸óã
(
x
, 
y
)

37 
I¡Paú
 
ªsu…
;

38 
ªsu…
.
x
 = x;

39 
ªsu…
.
y
 = y;

40  
ªsu…
;

41 
	}
}

42 
I¡Paú
 
	$m©h_öçaú_add
(
I¡Paú
 
À·
, I¡Paú 
right
)

44 
I¡Paú
 
ªsu…
;

45 
ªsu…
.
x
 = 
À·
.x + 
right
.x;

46 
ªsu…
.
y
 = 
À·
.y + 
right
.y;

47  
ªsu…
;

48 
	}
}

49 
I¡Paú
 
	$m©h_öçaú_sub
(
I¡Paú
 
À·
, I¡Paú 
right
)

51 
I¡Paú
 
ªsu…
;

52 
ªsu…
.
x
 = 
À·
.x - 
right
.x;

53 
ªsu…
.
y
 = 
À·
.y - 
right
.y;

54  
ªsu…
;

55 
	}
}

57 
boﬁ
 
	$m©h_öçaú_eq
(
I¡Paú
 
À·
, I¡Paú 
right
)

59  
À·
.
x
 =
right
.x &&Üe·.
y
 ==Ñight.y;

60 
	}
}

	@MainHelpers.h

1 #¥agm®
⁄˚


2 
	~<c°rög
>

3 
	~"GameSèã.h
"

4 
	~"M©h.h
"

5 
	~"Shadî.h
"

6 
	~"Edô‹.h
"

7 
	~<io°ªam
>

8 
	~"Resour˚.h
"

9 
	~<SDL.h
>

10 
	~"Click.h
"

11 
	~"TrueF⁄tCh¨a˘î.h
"

12 
	~<·2buûd.h
>

13 
	~"P¨£.h
"

14 
	~"W‹ld.h
"

15 
	~"Anim©i⁄.h
"

16 
	~"TextDøw.h
"

17 
	~"Hñ≥rGL.h
"

18 
	~"døw.h
"

19 #ö˛udê
FT_FREETYPE_H


23 
	sPœyS˚√


25 
Game°©eTimeMachöe
* 
	mtimeMachöe
;

26 
Game°©eTimeMachöe
* 
	mtimeMachöe_edô
;

27 
I¡Paú
 
	mloc
;

28 
I¡Paú
 
	mloc_edô
;

29 
	mgame_«me_Àngth
;

30 
	mgame_«me
[
GAME_LEVEL_NAME_MAX_SIZE
];

31 
	medô‹_posôi⁄_ö_time_machöe
;

36 
	sGame•rôeDøwInfo
 {

37 
	mglm
::
vec4
* 
Êo‹_©œs_˝u
;

38 
	mglm
::
vec3
* 
Êo‹_posôi⁄s_˝u
;

39 * 
	mÊo‹_tŸÆ_døwn
;

40 
	mglm
::
vec4
* 
Êo‹_©œs_m≠≥r
;

41 
	mglm
::
vec4
* 
põ˚_©œs_˝u
;

42 
	mglm
::
vec3
* 
põ˚_posôi⁄s_˝u
;

43 * 
	mpõ˚_tŸÆ_døwn
;

44 
	mglm
::
vec4
* 
põ˚_©œs_m≠≥r
;

56 
GameS∑˚Camîa
 
m©h_ˇmîa_buûd_f‹_game°©e
(
GameSèã
* 
game°©e
, 
I¡Paú
 
posôi⁄
, 
VõwP‹tCamîa
 
võwp‹t
, 
x_∑ddög
 = 4, 
y_∑ddög
 = 3);

61 
èke_∂ayî_a˘i⁄
(
Game°©eTimeMachöe
* 
maybe_time_machöe
, 
I¡Paú
 
døw_posôi⁄
, 
Edô‹UISèã
* 
ui_°©e
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
Àvñ_mem‹y
, Mem‹y* 
‰ame_mem‹y
, Mem‹y* 
™im©i⁄_mem‹y
);

64 
boﬁ
 
MaybeAµlyBrush
(
Game°©eBrush
* 
∑Àã
, 
cuºítBrush
, 
Edô‹UISèã
* 
ui_°©e
, 
TimeMachöeEdô‹
* 
timeMachöe
, 
glm
::
vec2
 
mou£GamePos
);

65 
boﬁ
 
MaybeAµlyBrushInPœyMode
(
Mem‹y
* 
mem‹y
, 
Game°©eBrush
* 
∑Àã
, 
cuºít_brush
, 
Edô‹UISèã
* 
ui_°©e
, 
Game°©eTimeMachöe
* 
time_machöe
, 
I¡Paú
 
cuºít_°©e_pos
, 
glm
::
vec2
 
mou£GamePos
);

69 
AABB
 
ˇlcuœã_ouéöe_‰om_¸óã_öfo
(
Mem‹y
* 
‰ame_mem‹y
, 
TimeMachöeEdô‹
* 
timeMachöe
, 
Edô‹UISèã
 
ui_°©e
);

70 
AABB
 
ˇlcuœã_ouéöe_posôi⁄_‰om_døg_öfo
(
Mem‹y
* 
‰ame_mem‹y
,

71 
TimeMachöeEdô‹
* 
timeMachöe
,

72 
Edô‹UISèã
 
ui_°©e
,

73 
glm
::
vec2
 
døggög_°¨t_posôi⁄_ö_game•a˚
);

74 
AABB
 
ˇlcuœã_ouéöe_‰om_move_öfo
(
Mem‹y
* 
‰ame_mem‹y
, 
TimeMachöeEdô‹
* 
timeMachöe
, 
Edô‹UISèã
 
ui_°©e
);

	@Math.h

1 #¥agm®
⁄˚


3 
	~"Mem‹y.h
"

4 
	~"glm/glm.hµ
"

5 
	~"glm/gtc/m©rix_å™sf‹m.hµ
"

10 
	sGameS∑˚Camîa


12 
	mÀ·
;

13 
	mright
;

14 
	mup
;

15 
	mdown
;

16 
	m˛o£Poöt
;

17 
	mÁrPoöt
;

21 
	sVõwP‹tCamîa


23 
	mÀ·
;

24 
	mright
;

25 
	mup
;

26 
	mdown
;

28 
	sI¡Paú


30 
	mx
;

31 
	my
;

33 
	eDúe˘i⁄
 {

34 
	mU
, 
	mR
, 
	mD
, 
	mL
, 
	mNO_DIRECTION
, 
	mDIRECTION_COUNT


36 
Dúe˘i⁄
 
dúe˘i⁄_ªvî£
(Dúe˘i⁄ 
dú
);

37 
Dúe˘i⁄
 
dúe˘i⁄_rŸ©e_˛ockwi£
(Dúe˘i⁄ 
dú
);

38 
Dúe˘i⁄
 
dúe˘i⁄_rŸ©e_™ti
(Dúe˘i⁄ 
dú
);

39 
I¡Paú
 
m©h_öçaú_¸óã
(
x
, 
y
);

40 
I¡Paú
 
m©h_öçaú_add
(I¡Paú 
À·
, I¡Paú 
right
);

41 
I¡Paú
 
m©h_öçaú_sub
(I¡Paú 
À·
, I¡Paú 
right
);

42 
boﬁ
 
m©h_öçaú_eq
(
I¡Paú
 
À·
, I¡Paú 
right
);

44 
ˇmîa_øtio
(
VõwP‹tCamîa
 
võwp‹t
);

45 
	gglm
::
m©4
 
ˇmîa_make_m©rix
(
GameS∑˚Camîa
 
ˇmîa
);

46 
GameS∑˚Camîa
 
m©h_ˇmîa_move_tow¨ds_ÀΩ
(GameS∑˚Camî®
movög
, GameS∑˚Camî®
gﬂl
, 
cuºít_time
, 
gﬂl_time
);

47 
GameS∑˚Camîa
 
m©h_ˇmîa_buûd
(
ˇmîa_height
, 
s¸ìn_˚¡î_x
, 
s¸ìn_˚¡î_y
, 
VõwP‹tCamîa
 
võwp‹t
);

48 
m©h_pixñ•a˚_to_game•a˚_mu…ùlõr
(
VõwP‹tCamîa
 
võw
, 
gameHeight
);

49 
m©h_game•a˚_to_pixñ•a˚_mu…ùlõr
(
VõwP‹tCamîa
 
võw
, 
gameHeight
);

50 
	gglm
::
vec2
 
m©h_s¸ìn•a˚_to_pixñ•a˚
(
I¡Paú
 
s¸ìnS∑˚Posôi⁄
, 
GameS∑˚Camîa
 
ˇmîa
, 
VõwP‹tCamîa
 
võw
, 
gameHeight
);

51 
	gglm
::
vec2
 
m©h_pixñ•a˚_to_s¸ìn•a˚
(
I¡Paú
 
pixñS∑˚Posôi⁄
, 
GameS∑˚Camîa
 
ˇmîa
, 
VõwP‹tCamîa
 
võw
, 
gameHeight
);

52 
	gglm
::
vec2
 
m©h_s¸ìn•a˚_to_game•a˚
(
I¡Paú
 
s¸ìnS∑˚Posôi⁄
, 
GameS∑˚Camîa
 
ˇmîa
, 
VõwP‹tCamîa
 
võw
, 
gameHeight
);

57 
	gglm
::
m©4
 
m©h_å™¶©ed_m©rix
(
glm
::
vec3
 
å™¶©e
);

58 
	gglm
::
m©4
 
m©h_å™¶©ed_sˇÀd_m©rix
(
glm
::
vec3
 
å™¶©e
, glm::vec3 
sˇÀ
);

63 
	eSide


65 
	mS_RIGHT
,

66 
	mS_DOWN
,

67 
	mS_LEFT
,

68 
	mS_UP
,

69 
	mS_COUNT


72 
I¡Paú
 
m©h_side_to_dúe˘i⁄
(
Side
 
s
);

73 
Side
 
m©h_side_›posôe
(Sidê
s
);

74 
Side
 
m©h_dúe˘i⁄_to_side
(
I¡Paú
 
∑ú
);

79 
I¡Paú
 
m©h_grid_move_dúe˘i⁄
(I¡Paú 
pos
, I¡Paú 
move
, I¡Paú 
dimísi⁄s
);

80 
I¡Paú
 
m©h_grid_move_dúe˘i⁄
(
xSèπ
, 
ySèπ
, 
xMove
, 
yMove
, 
w
, 
h
);

81 
I¡Paú
 
m©h_grid_move_dúe˘i⁄_wøµed
(I¡Paú 
pos
, I¡Paú 
move
, I¡Paú 
dimísi⁄s
);

82 
I¡Paú
 
m©h_grid_move_dúe˘i⁄_wøµed
(
xSèπ
, 
ySèπ
, 
xMove
, 
yMove
, 
w
, 
h
);

84 
boﬁ
* 
m©h_grid_wÆk_adja˚¡
(
Mem‹y
* 
ªsu…_mem‹y
, Mem‹y* 
ãmp_mem‹y
, * 
öput_grid
, 
°¨t_x
, 
°¨t_y
, 
w
, 
h
);

85 
boﬁ
* 
m©h_grid_wÆk_adja˚¡_wøµed
(
Mem‹y
* 
ªsu…_mem‹y
, Mem‹y* 
ãmp_mem‹y
, * 
öput_grid
, 
°¨t_x
, 
°¨t_y
, 
w
, 
h
);

90 
	sAABB


92 
	mx
;

93 
	my
;

94 
	mw
;

95 
	mh
;

98 
AABB
 
m©h_AABB_¸óã
(
x
, 
y
, 
width
, 
height
);

99 
AABB
 
m©h_AABB_¸óã_öt
(
x
, 
y
, 
width
, 
height
);

100 
m©h_˛ick_is_öside_AABB_li°
(
˛ickX
, 
˛ickY
, 
AABB
* 
boxes
, 
tŸÆ_boxes
);

102 
boﬁ
 
m©h_AABB_is_cﬁlidög
(
AABB
 
ã°
, AABB* 
agaö°_¨øy
, 
Àngth
);

103 
m©h_AABB_bªak_öto_b‹dîs
(
AABB
 
box
, AABB* 
ouçut
, 
b‹dî_size
);

105 
ölöe
 
boﬁ
 
	$m©h_˛ick_is_öside_AABB
(
˛ickX
, 
˛ickY
, 
AABB
 
box
)

107  
˛ickX
 >
box
.
x
 && clickX < (box.x + box.
w
Ë&& 
˛ickY
 >box.
y
 && clickY < (box.y + box.
h
);

108 
	}
}

109 
ölöe
 
	$≥r˚¡_bëwìn_two_poöts
(
poöt
, 
möi
, 
maxi
)

111  (
poöt
 - 
möi
Ë/ (
maxi
 - mini);

112 
	}
}

113 
ölöe
 
boﬁ
 
	$m©h_˛ick_is_öside_AABB
(
À·
, 
bŸtom
, 
right
, 
t›
, 
˛ickX
, 
˛ickY
)

115  
˛ickX
 >
À·
 && clickX < 
right
 && 
˛ickY
 >
bŸtom
 && clickY < 
t›
;

116 
	}
}

117 
ölöe
 
boﬁ
 
	$m©h_˛ick_is_öside_AABB
(
I¡Paú
 
möi
, I¡Paú 
maxi
, I¡Paú 
˛ick
)

119  
˛ick
.
x
 >
möi
.x && click.x <
maxi
.x && click.
y
 >= mini.y && click.y <= maxi.y;

120 
	}
}

133 
ölöe
 
	$f2D
(
x
, 
y
, 
w
, 
h
)

135  
y
 + 
x
 * 
h
;

136 
	}
}

139 
ölöe
 
I¡Paú
 
	$t2D
(
i
, 
w
, 
h
)

141 
I¡Paú
 
ªsu…
;

142 
ªsu…
.
x
 = 
i
 / 
h
;

143 
ªsu…
.
y
 = 
i
 % 
h
;

144  
ªsu…
;

145 
	}
}

147 
ölöe
 
boﬁ
 
	$m©h_wôhö_grid
(
x
, 
y
, 
w
, 
h
)

149  
x
 >0 && 
y
 >0 && x < 
w
 && y < 
h
;

150 
	}
}

153 
ölöe
 
	$ÀΩf
(
À·
, 
right
, 
t
)

155  
À·
 * (1.0‡- 
t
Ë+ 
right
 *Å;

156 
	}
}

157 
ölöe
 
	$˛ampf
(
mö
, 
max
, 
v
)

159 i‡(
v
 < 
mö
)

160  
mö
;

161 i‡(
v
 > 
max
)

162  
max
;

163  
v
;

164 
	}
}

165 
ölöe
 
	$maxf
(
x
, 
y
) {

166 i‡(
x
 < 
y
)

167  
y
;

168  
x
;

169 
	}
}

170 
ölöe
 
	$möf
(
x
, 
y
)

172 i‡(
x
 < 
y
)

173  
x
;

174  
y
;

175 
	}
}

176 
ölöe
 
	$maxi
(
x
, 
y
)

178 i‡(
x
 >
y
)

179  
x
;

180  
y
;

181 
	}
}

182 
ölöe
 
	$möi
(
x
, 
y
)

184 i‡(
x
 <
y
)

185  
x
;

186  
y
;

187 
	}
}

189 
ölöe
 
	$sign
(
x
)

191 i‡(
x
 > 0)

193 i‡(
x
 < 0)

196 
	}
}

	@Maths.h

1 #¥agm®
⁄˚


3 
	svec2


5 
	mx
;

6 
	my
;

9 
	svec3


11 
	mx
;

12 
	my
;

13 
	mz
;

16 
	svec4


18 
	mx
;

19 
	my
;

20 
	mz
;

21 
	mw
;

	@Memory.cpp

1 
	~<°dlib.h
>

2 
	~<io°ªam
>

3 
	~"C⁄°™ts.h
"

4 c⁄° 
	gÆignBound¨y
 = 8;

6 
	sMem‹y


8 
	mcuºítOff£t
;

9 
	msize
;

10 * 
	mmem‹ySèπ
;

13 * 
	$mem‹y_Æloc
(
Mem‹y
* 
mem‹y
, 
numByãs
)

15 
byãsToAddToMem‹yToC⁄£rveAlignmít
 = (
ÆignBound¨y
 - (
numByãs
 %álignBoundary)) %álignBoundary;

16 
föÆByãs
 = 
numByãs
 + 
byãsToAddToMem‹yToC⁄£rveAlignmít
;

19 i‡(
föÆByãs
 + 
mem‹y
->
cuºítOff£t
 >mem‹y->
size
)

21 
	`¸ash_îr
("we have overflowed our memory. Rats!");

22  
nuŒ±r
;

24 * 
ªsu…
 = (*Ë(((*Ë
mem‹y
->
mem‹ySèπ
Ë+ mem‹y->
cuºítOff£t
);

25 
mem‹y
->
cuºítOff£t
 +
föÆByãs
;

26  
ªsu…
;

27 
	}
}

28 
	$mem‹y_˛ór
(
Mem‹y
* 
mem‹y
)

30 
mem‹y
->
cuºítOff£t
 = 0;

31 
	}
}

32 
Mem‹y
* 
	$mem‹y_¸óã
(
numByãs
)

34 
size
 = (
Mem‹y
);

35 
Mem‹y
* 
mem‹y
 = (Mem‹y*Ë
	`mÆloc
(
size
);

36 
mem‹y
->
cuºítOff£t
 = 0;

37 
mem‹y
->
size
 = 
numByãs
;

38 
mem‹y
->
mem‹ySèπ
 = 
	`mÆloc
(
numByãs
);

39  
mem‹y
;

40 
	}
}

42 
	$mem‹y_p›_°ack
(
Mem‹y
* 
mem‹y
, * 
poöãr
)

45 * 
±r_c‹e
 = (*Ë
mem‹y
->
mem‹ySèπ
;

46 * 
±r_biggî
 = (*Ë
poöãr
;

47 
di°™˚
 = (Ë(
±r_biggî
 - 
±r_c‹e
);

48 
ªsu…
 = (Ë
di°™˚
;

49 
mem‹y
->
cuºítOff£t
 -
di°™˚
;

50 
	}
}

	@Memory.h

1 #¥agm®
⁄˚


3 
	gMem‹y
;

8 
	gãm∂©e
<
˛ass
 
	gT
>

9 
T
* 
	$mem_Æloc
(
Mem‹y
* 
mem‹y
, 
num_ñemíts
)

11  (
T
*)
	`mem‹y_Æloc
(
mem‹y
, (TË* 
num_ñemíts
);

12 
	}
}

14 * 
mem‹y_Æloc
(
Mem‹y
* 
mem‹y
, 
numByãs
);

15 
mem‹y_˛ór
(
Mem‹y
* 
mem‹y
);

16 
mem‹y_de°roy_™nihÆ©e_g⁄e_nŸ_eví_the_poöãr_wûl_ªmaö
(
Mem‹y
* 
mem‹y
);

17 
mem‹y_p›_°ack
(
Mem‹y
*, * 
poöt_to_˛ór
);

18 
Mem‹y
* 
mem‹y_¸óã
(
numByãs
);

20 
	gSèckMem‹y
;

22 * 
mem‹y_°ack_Æloc
(
SèckMem‹y
* 
mem‹y
, 
num_byãs
);

	@MenuScene.h

1 #¥agm®
⁄˚


2 
	~<°rög
>

3 
	~"Mem‹y.h
"

4 
	~"TextDøw.h
"

5 (*
	gBuâ⁄CÆlback
)();

7 
	sMíuText


9 
GameS∑˚Camîa
 
	mdøw_¨ó
;

10 * 
	mãxt
;

12 
	sMíuBuâ⁄


14 
GameS∑˚Camîa
 
	mdøw_¨ó
;

15 * 
	mbuâ⁄_ãxt
;

16 
Buâ⁄CÆlback
 
	mˇŒback
;

18 
	sMíuS˚√


20 
	mnum_buâ⁄s
;

21 
	mcuºít_highlighãd_buâ⁄
;

22 
MíuBuâ⁄
* 
	mbuâ⁄s
;

26 * 
	$ch¨_Æloc
(
Mem‹y
* 
mem‹y
, 
°d
::
°rög
 
to_Æloc
)

28 
Àngth
 = 
to_Æloc
.
	`Àngth
() + 1;

29 * 
ªsu…
 = (*Ë
	`mem‹y_Æloc
(
mem‹y
, (Ë* 
Àngth
);

30 
i
 = 0; i < 
to_Æloc
.
	`Àngth
(); i++)

31 
ªsu…
[
i
] = 
to_Æloc
[i];

32 
ªsu…
[
to_Æloc
.
	`Àngth
()] = 
NULL
;

33  
ªsu…
;

34 
	}
}

35 
MíuS˚√
* 
	$£tup_maö_míu
(
Mem‹y
* 
míu_mem‹y
, 
Buâ⁄CÆlback
 
√w_game
, Buâ⁄CÆlback 
c⁄töue_game
, Buâ⁄CÆlback 
Àvñ_edô‹
)

37 
	`mem‹y_˛ór
(
míu_mem‹y
);

39 
MíuS˚√
* 
ªsu…
 = (MíuS˚√*Ë
	`mem‹y_Æloc
(
míu_mem‹y
, (MenuScene));

40 
ªsu…
->
num_buâ⁄s
 = 3;

41 
ªsu…
->
cuºít_highlighãd_buâ⁄
 = 1;

42 
ªsu…
->
buâ⁄s
 = (
MíuBuâ⁄
*Ë
	`mem‹y_Æloc
(
míu_mem‹y
, (MenuButton) * 3);

43 * 
fú°
 = 
	`ch¨_Æloc
(
míu_mem‹y
, "New Game");

44 
ªsu…
->
buâ⁄s
[0].
buâ⁄_ãxt
 = 
fú°
;

45 
ªsu…
->
buâ⁄s
[1].
buâ⁄_ãxt
 = 
	`ch¨_Æloc
(
míu_mem‹y
,"Continuey");

46 
ªsu…
->
buâ⁄s
[2].
buâ⁄_ãxt
 = 
	`ch¨_Æloc
(
míu_mem‹y
,"Level Editor");

47 
ªsu…
->
buâ⁄s
[0].
ˇŒback
 = 
√w_game
;

48 
ªsu…
->
buâ⁄s
[1].
ˇŒback
 = 
c⁄töue_game
;

49 
ªsu…
->
buâ⁄s
[2].
ˇŒback
 = 
Àvñ_edô‹
;

51  
ªsu…
;

52 
	}
}

	@Parse.cpp

1 
	~"P¨£.h
"

2 
	~<io°ªam
>

3 #ifde‡
EMSCRIPTEN


4 
	#•rötf_s
(
¨gs1
,
¨gs2
,...Ë
	`•rötf
◊rgs1,
__VA_ARGS__
)

	)

6 
	$di°™˚_to_ch¨
(c⁄° * 
pos
, c⁄° 
m©ch
)

8 
i
 = 0;

9 ; 
pos
[0] !
m©ch
 ||Öos[0] == '\0';Öos++)

11 
i
++;

13  
i
;

14 
	}
}

16 
	$∑r£_numbî
(c⁄° * 
pos
)

18 
ªsu…
 = 0;

19 ; 
pos
[0] >= '0' &&Öos[0] <= '9';Öos++)

21 
ªsu…
 *= 10;

22 
to_add
 = 
pos
[0] - '0';

23 
ªsu…
 +
to_add
;

25  
ªsu…
;

26 
	}
}

27 
boﬁ
 
	$∑r£_°rögs_m©ch
(c⁄° * 
pos
, c⁄° * 
m©ch
, 
max_Àngth
)

29 
i
 = 0; i < 
max_Àngth
; i++, 
pos
++, 
m©ch
++)

31 i‡(
pos
[0] !
m©ch
[0])

32  
Ál£
;

34  
åue
;

35 
	}
}

37 
	$to_num
(
c
)

39  
c
 - '0';

40 
	}
}

42 
boﬁ
 
	$is_num_n⁄zîo
(
c
)

44  
c
 >= '1' && c <= '9';

45 
	}
}

47 
boﬁ
 
	$is_num
(
c
)

49  
c
 >= '0' && c <= '9';

50 
	}
}

52 
boﬁ
 
	$is_whôe•a˚
(
c
)

54  
c
 == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';

55 
	}
}

57 * 
	$åy_∑r£_numbî
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

59 * 
ªsu…
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, ());

60 * 
⁄_Áû
 = 
t
->
©
;

61 i‡(
t
->
©
[0] == '0')

63 
t
->
©
++;

64 *
ªsu…
 = 0;

65  
ªsu…
;

67 
boﬁ
 
√g©ive_numbî
 = 
Ál£
;

68 i‡(
t
->
©
[0] == '-')

70 
t
->
©
++;

71 
√g©ive_numbî
 = 
åue
;

73 i‡(
	`is_num_n⁄zîo
(
t
->
©
[0]))

75 
num
 = 
	`to_num
(
t
->
©
[0]);

76 
t
->
©
++;

77 
	`is_num
(
t
->
©
[0]))

79 
num
 *= 10;

80 
num
 +
	`to_num
(
t
->
©
[0]);

81 
t
->
©
++;

83 *
ªsu…
 = 
num
;

84 i‡(
√g©ive_numbî
)

85 *
ªsu…
 = -(*result);

86  
ªsu…
;

89 
t
->
©
 = 
⁄_Áû
;

90  
NULL
;

91 
	}
}

93 
boﬁ
 
	$åy_∑r£_°rög
(
Tokíizî
* 
t
, c⁄° * 
«me
)

95 * 
Áû_ªsu…
 = 
t
->
©
;

97 
t
->
©
[0] && 
«me
[0])

99 i‡(
t
->
©
[0] !
«me
[0])

101 
t
->
©
 = 
Áû_ªsu…
;

102  
Ál£
;

104 
t
->
©
++;

105 
«me
++;

108 i‡(
t
->
©
[0])

110  
åue
;

114 
t
->
©
 = 
Áû_ªsu…
;

115  
Ál£
;

117 
	}
}

119 
boﬁ
 
	$åy_∑r£_ch¨
(
Tokíizî
* 
t
, 
c
)

121 i‡(
t
->
©
[0] =
c
)

123 
t
->
©
++;

124  
åue
;

126  
Ál£
;

127 
	}
}

129 * 
	$åy_∑r£_numbî_ch¨_∑ú
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
, 
c
)

131 * 
⁄_Áû
 = 
t
->
©
;

132 * 
ªsu…
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

133 
boﬁ
 
ch¨_a·î
 = 
	`åy_∑r£_ch¨
(
t
, 
c
);

134 i‡(
ch¨_a·î
 && 
ªsu…
)

136  
ªsu…
;

138 
t
->
©
 = 
⁄_Áû
;

139  
NULL
;

141 
	}
}

142 * 
	$åy_∑r£_numbî_comma_∑ú
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

144 * 
⁄_Áû
 = 
t
->
©
;

145 * 
ªsu…
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

146 
boﬁ
 
comma_a·î
 = 
	`åy_∑r£_ch¨
(
t
, ',');

147 i‡(
comma_a·î
 && 
ªsu…
)

149  
ªsu…
;

151 
t
->
©
 = 
⁄_Áû
;

152  
NULL
;

154 
	}
}

155 * 
	$åy_∑r£_numbî_dash_∑ú
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

157 * 
⁄_Áû
 = 
t
->
©
;

158 * 
ªsu…
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

159 
boﬁ
 
comma_a·î
 = 
	`åy_∑r£_ch¨
(
t
, '_');

160 i‡(
comma_a·î
 && 
ªsu…
)

162  
ªsu…
;

164 
t
->
©
 = 
⁄_Áû
;

165  
NULL
;

167 
	}
}

168 
Flo‹D©a
* 
	$åy_∑r£_Êo‹_d©a
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

171 * 
⁄_Áû
 = 
t
->
©
;

172 
Flo‹D©a
* 
ªsu…
 = (Flo‹D©a*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (FloorData));

173 
num_vÆ
 = 0;

174 * 
fú°
 = 
	`åy_∑r£_numbî_ch¨_∑ú
(
t
, 
ãmp_mem‹y
,'-');

175 * 
£c⁄d
 = 
	`åy_∑r£_numbî_ch¨_∑ú
(
t
, 
ãmp_mem‹y
,'-');

176 * 
thúd
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

177 i‡(!
fú°
 || !
£c⁄d
 || !
thúd
)

179 
t
->
©
 = 
⁄_Áû
;

180  
NULL
;

182 
ªsu…
->
ãÀp‹ãr_id
 = *
fú°
;

183 
ªsu…
->
ãÀp‹ãr_èrgë_squ¨e
.
x
 = *
£c⁄d
;

184 
ªsu…
->
ãÀp‹ãr_èrgë_squ¨e
.
y
 = *
thúd
;

186 
boﬁ
 
found_comma
 = 
	`åy_∑r£_ch¨
(
t
, ',');

187 i‡(!
found_comma
)

189 
	`¸ash_îr
("parsing floor dataÉrror with comma");

191  
ªsu…
;

192 
	}
}

193 
Põ˚D©a
* 
	$åy_∑r£_põ˚_d©a
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

195 * 
⁄_Áû
 = 
t
->
©
;

196 
Põ˚D©a
* 
ªsu…
 = (Põ˚D©a*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (PieceData));

197 
num_vÆ
 = 0;

198 * 
√xt_vÆ
 = 
	`åy_∑r£_numbî_dash_∑ú
(
t
, 
ãmp_mem‹y
);

199 i‡(!
√xt_vÆ
)

201 
t
->
©
 = 
⁄_Áû
;

202  
NULL
;

204 
√xt_vÆ
)

206 
ªsu…
->
powîs
[
num_vÆ
] = *
√xt_vÆ
;

207 
√xt_vÆ
 = 
	`åy_∑r£_numbî_dash_∑ú
(
t
, 
ãmp_mem‹y
);

208 
num_vÆ
++;

210 
boﬁ
 
found_comma
 = 
	`åy_∑r£_ch¨
(
t
, ',');

211 i‡(!
found_comma
)

213 
	`¸ash_îr
("parsingÖiece dataÉrror with comma");

215  
ªsu…
;

217 
	}
}

218 
	$c⁄sume_whôe•a˚
(
Tokíizî
* 
t
)

220 
	`is_whôe•a˚
(
t
->
©
[0]))

221 
t
->
©
++;

222 
	}
}

224 * 
	$åy_∑r£_cuºít_Àvñ
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

226 * 
⁄_Áû
 = 
t
->
©
;

227 
boﬁ
 
∑r£_föished
 = 
Ál£
;

228 
boﬁ
 
found_num_game°©es
 = 
	`åy_∑r£_°rög
(
t
, "current_level:");

229 i‡(
found_num_game°©es
)

231 * 
maybe_num
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

232 
	`åy_∑r£_ch¨
(
t
, ';');

233 i‡(
maybe_num
)

235  
maybe_num
;

239 
	`¸ash_îr
("we failedÅoÖarseÅhe currentÜevel value, when we'dálready foundÅhe current_levelÅag, uh oh.");

242 
t
->
©
 = 
⁄_Áû
;

243  
NULL
;

244 
	}
}

245 * 
	$åy_∑r£_num_game°©es
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

247 * 
⁄_Áû
 = 
t
->
©
;

249 
boﬁ
 
∑r£_föished
 = 
Ál£
;

251 
boﬁ
 
found_num_game°©es
 = 
	`åy_∑r£_°rög
(
t
, "num_gamestates:");

252 i‡(
found_num_game°©es
)

254 * 
maybe_num
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

255 
	`åy_∑r£_ch¨
(
t
, ';');

256 i‡(
maybe_num
)

258  
maybe_num
;

262 
°d
::
cout
 << "FaûedÅÿªadÇumbî o‡game°©e†numbî. OhÇo! Wê¸ashögÇow,Åhi†i†ªÆ bad." << std::
ídl
;

263 
	`ab‹t
();

267 
t
->
©
 = 
⁄_Áû
;

268  
NULL
;

270 
	}
}

272 
boﬁ
 
	$åy_∑r£_posôi⁄s
(
Tokíizî
* 
t
, 
I¡Paú
 * 
ªsu…
, 
Mem‹y
* 
ãmp_mem‹y
)

274 * 
⁄_Áû
 = 
t
->
©
;

275 
boﬁ
 
found_posôi⁄s
 = 
	`åy_∑r£_°rög
(
t
, "positions:");

276 i‡(
found_posôi⁄s
)

278 
boﬁ
 
ªached_íd
 = 
	`åy_∑r£_ch¨
(
t
, ';');

279 
num_posôi⁄s_∑r£d
 = 0;

280 !
ªached_íd
)

282 * 
√xtW
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

283 * 
√xtH
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

285 i‡(!
√xtW
 || !
√xtH
)

287 
°d
::
cout
 << "okay. Okay. Wow. Ou∏posôi⁄áºay i†û»f‹m©ãd. Somëhög g⁄êwr⁄g. Bëã∏¸ash." << std::
ídl
;

288 
	`ab‹t
();

290 
ªsu…
[
num_posôi⁄s_∑r£d
].
x
 = *
√xtW
;

291 
ªsu…
[
num_posôi⁄s_∑r£d
].
y
 = *
√xtH
;

292 
num_posôi⁄s_∑r£d
++;

294 
ªached_íd
 = 
	`åy_∑r£_ch¨
(
t
, ';');

296  
åue
;

298 
t
->
©
 = 
⁄_Áû
;

299  
Ál£
;

301 
	}
}

303 
boﬁ
 
	$åy_∑r£_vîsi⁄
(
Tokíizî
* 
t
, * 
vîsi⁄_ªsu…
, 
I¡Paú
* 
ªsu…
, 
Mem‹y
* 
ãmp_mem‹y
)

305 
Tokíizî
 
Áû_ªsu…
 = *
t
;

306 
boﬁ
 
some_vÆ
 = 
	`åy_∑r£_°rög
(
t
, "version:");

308 i‡(!
some_vÆ
)

310 *
vîsi⁄_ªsu…
 = 0;

311 *
t
 = 
Áû_ªsu…
;

312  
Ál£
;

314 * 
maybe_vîsi⁄_numbî
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

315 i‡(
maybe_vîsi⁄_numbî
 =
NULL
)

317 
	`¸ash_îr
("uh oh, we'veÉncounteredá 'version:'Åag butÅhere isÇo versionÇumberáttached! ");

319 
vîsi⁄_numbî
 = *
maybe_vîsi⁄_numbî
;

320 
boﬁ
 
suc˚ed
 = 
	`åy_∑r£_ch¨
(
t
, ';');

321 i‡(!
suc˚ed
)

323 
	`¸ash_îr
("uh oh, weÅriedÅoÖarseá ';'Åo head intoÅheÇext section.Åhat didn't work.");

325  
vîsi⁄_numbî
;

327 
	}
}

329 
boﬁ
 
	$åy_∑r£_Êo‹_d©a
(
Tokíizî
* 
t
, 
GameSèã
** 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

332 * 
⁄_Áû
 = 
t
->
©
;

333 
boﬁ
 
found_Êo‹_d©a
 = 
	`åy_∑r£_°rög
(
t
, "floor_data:");

334 i‡(
found_Êo‹_d©a
)

337 
num_game°©es
 = 0;

338 !
	`åy_∑r£_ch¨
(
t
, ';'))

340 * 
wp
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

341 * 
hp
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

342 i‡(!
wp
 || !
hp
)

344 
°d
::
cout
 << "Êo‹_d©®œyî faûed o¿∑rsög w h." << std::
ídl
;

345 
	`ab‹t
();

347 
w
 = *
wp
;

348 
h
 = *
hp
;

349 
Àn
 = 
w
 * 
h
;

350 i‡(
ªsu…
[
num_game°©es
] =
NULL
)

351 
ªsu…
[
num_game°©es
] = 
	`game°©e_¸óã
(
föÆ_mem‹y
, 
w
, 
h
);

352 
i
 = 0; i < 
Àn
; i++)

354 
Flo‹D©a
* 
√xtf
 = 
	`åy_∑r£_Êo‹_d©a
(
t
, 
ãmp_mem‹y
);

355 i‡(!
√xtf
)

357 
°d
::
cout
 << "∑r£ flo‹ d©®Áûed o¿∑rsögÇumbî." << std::
ídl
;

358 
	`ab‹t
();

360 
Flo‹D©a
 
√xt
 = *
√xtf
;

361 
ªsu…
[
num_game°©es
]->
Êo‹_d©a
[
i
] = 
√xt
;

363 
num_game°©es
++;

365  
åue
;

367  
Ál£
;

368 
	}
}

370 
boﬁ
 
	$åy_∑r£_põ˚_d©a
(
Tokíizî
* 
t
, 
GameSèã
** 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

372 * 
⁄_Áû
 = 
t
->
©
;

373 
boﬁ
 
found_põ˚_d©a
 = 
	`åy_∑r£_°rög
(
t
, "piece_data:");

374 i‡(
found_põ˚_d©a
)

377 
num_game°©es
 = 0;

378 !
	`åy_∑r£_ch¨
(
t
, ';'))

380 * 
wp
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

381 * 
hp
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

382 i‡(!
wp
 || !
hp
)

384 
°d
::
cout
 << "∑r£Üayî faûed o¿∑rsög w h." << std::
ídl
;

385 
	`ab‹t
();

387 
w
 = *
wp
;

388 
h
 = *
hp
;

389 
Àn
 = 
w
 * 
h
;

390 i‡(
ªsu…
[
num_game°©es
] =
NULL
)

391 
ªsu…
[
num_game°©es
] = 
	`game°©e_¸óã
(
föÆ_mem‹y
, 
w
, 
h
);

392 
i
 = 0; i < 
Àn
; i++)

394 
Põ˚D©a
* 
√xç
 = 
	`åy_∑r£_põ˚_d©a
(
t
, 
ãmp_mem‹y
);

395 i‡(!
√xç
)

397 
°d
::
cout
 << "∑r£Öõ˚ d©®Áûed o¿∑rsögÇumbî." << std::
ídl
;

398 
	`ab‹t
();

400 
Põ˚D©a
 
√xt
 = *
√xç
;

401 
ªsu…
[
num_game°©es
]->
põ˚_d©a
[
i
] = 
√xt
;

404 
num_game°©es
++;

407  
åue
;

409  
Ál£
;

410 
	}
}

411 
boﬁ
 
	$åy_∑r£_œyî
(
Tokíizî
* 
t
, 
GameSèã
** 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

413 * 
⁄_Áû
 = 
t
->
©
;

414 
boﬁ
 
is_œyî_∑r£_°¨t
 = 
	`åy_∑r£_°rög
(
t
, "layer");

415 * 
maybe_œyî_num
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

416 
boﬁ
 
is_£micﬁ⁄_©_íd
 = 
	`åy_∑r£_ch¨
(
t
, ':');

417 i‡(
is_œyî_∑r£_°¨t
 && 
maybe_œyî_num
 && 
is_£micﬁ⁄_©_íd
)

420 
œyî_num
 = *
maybe_œyî_num
;

421 i‡(
œyî_num
 >
GAME_NUM_LAYERS
)

423 
°d
::
cout
 << "wê¨êåyögÅÿwrôêtÿ®œyîÇumbîÅh© i†biggîÅh™ shouldÉxi° i¿ou∏game. CøshögÇow!" << std::
ídl
;

424 
	`ab‹t
();

428 
num_game°©es
 = 0;

429 !
	`åy_∑r£_ch¨
(
t
, ';'))

431 * 
wp
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

432 * 
hp
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

433 i‡(!
wp
 || !
hp
)

435 
°d
::
cout
 << "∑r£Üayî faûed o¿∑rsög w h." << std::
ídl
;

436 
	`ab‹t
();

438 
w
 = *
wp
;

439 
h
 = *
hp
;

440 
Àn
 = 
w
 * 
h
;

441 i‡(
ªsu…
[
num_game°©es
] =
NULL
)

442 
ªsu…
[
num_game°©es
] = 
	`game°©e_¸óã
(
föÆ_mem‹y
, 
w
, 
h
);

443 
i
 = 0; i < 
Àn
; i++)

445 * 
√xç
 = 
	`åy_∑r£_numbî_comma_∑ú
(
t
, 
ãmp_mem‹y
);

446 i‡(!
√xç
)

448 
°d
::
cout
 << "∑r£Üayî faûed o¿∑rsögÇumbî." << std::
ídl
;

449 
	`ab‹t
();

451 
√xt
 = *
√xç
;

452 * 
cuºít_œyî
 = 
	`game°©e_gë_œyî
(
ªsu…
[
num_game°©es
], 
œyî_num
);

453 
cuºít_œyî
[
i
] = 
√xt
;

456 
num_game°©es
++;

458  
åue
;

461 
t
->
©
 = 
⁄_Áû
;

462  
Ál£
;

463 
	}
}

464 
boﬁ
 
	$åy_∑r£_boﬁs
(
Tokíizî
* 
t
, 
boﬁ
* 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

466 * 
⁄_Áû
 = 
t
->
©
;

467 
boﬁ
 
is_«me_∑r£
 = 
	`åy_∑r£_°rög
(
t
, "solved:");

468 i‡(!
is_«me_∑r£
)

470 
t
->
©
 = 
⁄_Áû
;

471  
Ál£
;

473 
num_game°©es
 = 0;

474 !
	`åy_∑r£_ch¨
(
t
, ';'))

476 * 
boﬁ_vÆ
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

477 i‡(!
boﬁ_vÆ
 || *bool_val > 1 || *bool_val < 0)

479 
	`¸ash_îr
("weÅriedÅoÖarseá comma seperatedÜist of bools, but weÑan into somethingÅhat wasn'tá bool");

481 
boﬁ
 
suc˚ed
 = 
	`åy_∑r£_ch¨
(
t
, ',');

482 i‡(!
suc˚ed
)

483 
	`¸ash_îr
("weÅriedÅoÖarseá comma seperatedÜist of bools, but weÑan into somethingÅhat wasn'tá comma");

485 
ªsu…
[
num_game°©es
] = 
boﬁ_vÆ
;

486 
num_game°©es
++;

488  
åue
;

489 
	}
}

490 
boﬁ
 
	$åy_∑r£_mode
(
Tokíizî
* 
t
, 
LevñMode
* 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

492 * 
⁄_Áû
 = 
t
->
©
;

493 
boﬁ
 
is_mode_∑r£
 = 
	`åy_∑r£_°rög
(
t
, "mode:");

494 i‡(!
is_mode_∑r£
)

496 
t
->
©
 = 
⁄_Áû
;

497  
Ál£
;

499 
num_game°©es
 = 0;

500 !
	`åy_∑r£_ch¨
(
t
, ';'))

502 * 
vÆ
 = 
	`åy_∑r£_numbî
(
t
, 
ãmp_mem‹y
);

503 
boﬁ
 
comma_√xt
 = 
	`åy_∑r£_ch¨
(
t
, ',');

504 i‡(
vÆ
 && 
comma_√xt
)

506 
ªsu…
[
num_game°©es
] = (
LevñMode
Ë*
vÆ
;

510 
	`¸ash_îr
("uh oh, weÅriedÅoÖarse ourselvesáÇumber commaÖair forÖarsing mode, we couldn't find it, ohÇoooooo");

512 
num_game°©es
++;

514  
åue
;

516 
	}
}

517 
boﬁ
 
	$åy_∑r£_«mes
(
Tokíizî
* 
t
, 
LevñName
* 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

519 * 
⁄_Áû
 = 
t
->
©
;

520 
boﬁ
 
is_«mes_∑r£
 = 
	`åy_∑r£_°rög
(
t
, "names:");

521 i‡(!
is_«mes_∑r£
)

523 
t
->
©
 = 
⁄_Áû
;

524  
Ál£
;

528 
num_game°©es
 = 0;

529 !
	`åy_∑r£_ch¨
(
t
, ';'))

531 
i
 = 0;

532 
t
->
©
[0] != ',')

534 i‡(
i
 >
GAME_LEVEL_NAME_MAX_SIZE
)

536 
°d
::
cout
 << "∑r£ faûed, we'vêru¿a¸os†®hideous, hideou†thög, we'vêru¿a¸oss" << std::
ídl
;

537 
	`ab‹t
();

539 
ªsu…
[
num_game°©es
].
«me
[
i
] = 
t
->
©
[0];

540 
i
++;

541 
t
->
©
++;

543 ; 
i
 <
GAME_LEVEL_NAME_MAX_SIZE
; i++)

544 
ªsu…
[
num_game°©es
].
«me
[
i
] = '\0';

546 
t
->
©
++;

547 
num_game°©es
++;

549  
åue
;

550 
	}
}

551 
W‹ldSèã
* 
	$∑r£_de£rülize_timemachöe
(
°d
::
°rög
 
öput_°rög
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

557 
°d
::
°rög
::
ôî©‹
 
íd_pos
 = std::
	`ªmove
(
öput_°rög
.
	`begö
(), i≈ut_°rög.
	`íd
(), '\n');

558 
öput_°rög
.
	`îa£
(
íd_pos
, i≈ut_°rög.
	`íd
());

561 
W‹ldSèã
* 
ªsu…
 = (W‹ldSèã*)
	`mem‹y_Æloc
(
föÆ_mem‹y
, (WorldState));

562 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

564 
ªsu…
->
Àvñ_°©e
[
i
] = 
NULL
;

566 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

567 
j
 = 0; j < 
GAME_LEVEL_NAME_MAX_SIZE
;j++)

569 
ªsu…
->
Àvñ_«mes
[
i
].
«me
[
j
] = '\0';

571 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

573 
ªsu…
->
Àvñ_sﬁved
[
i
] = 
Ál£
;

576 * 
öput
 = &(
öput_°rög
[0]);

577 
Tokíizî
 
tokíizî
;

578 
tokíizî
.
©
 = 
öput
;

580 
tokíizî
.
©
[0] !
NULL
)

582 
	`c⁄sume_whôe•a˚
(&
tokíizî
);

583 * 
maybe_num_game°©es
 = 
	`åy_∑r£_num_game°©es
(&
tokíizî
, 
ãmp_mem‹y
);

584 i‡(
maybe_num_game°©es
)

586 
ªsu…
->
num_Àvñ
 = *
maybe_num_game°©es
;

589 
boﬁ
 
∑r£d_posôi⁄s
 = 
	`åy_∑r£_posôi⁄s
(&
tokíizî
, 
ªsu…
->
Àvñ_posôi⁄
, 
ãmp_mem‹y
);

590 
boﬁ
 
∑r£d_œyî
 = 
	`åy_∑r£_œyî
(&
tokíizî
, 
ªsu…
->
Àvñ_°©e
, 
föÆ_mem‹y
, 
ãmp_mem‹y
);

591 
boﬁ
 
∑r£d_põ˚_d©a
 = 
	`åy_∑r£_põ˚_d©a
(&
tokíizî
, 
ªsu…
->
Àvñ_°©e
, 
föÆ_mem‹y
, 
ãmp_mem‹y
);

592 
boﬁ
 
∑r£d_Êo‹_d©a
 = 
	`åy_∑r£_Êo‹_d©a
(&
tokíizî
, 
ªsu…
->
Àvñ_°©e
, 
föÆ_mem‹y
, 
ãmp_mem‹y
);

593 
boﬁ
 
∑r£d_«mes
 = 
	`åy_∑r£_«mes
(&
tokíizî
, 
ªsu…
->
Àvñ_«mes
, 
föÆ_mem‹y
, 
ãmp_mem‹y
);

595 
boﬁ
 
∑r£d_Àvñ_sﬁved
 = 
	`åy_∑r£_boﬁs
(&
tokíizî
, 
ªsu…
->
Àvñ_sﬁved
, 
föÆ_mem‹y
, 
ãmp_mem‹y
);

596 
boﬁ
 
∑r£d_Àvñ_mode
 = 
	`åy_∑r£_mode
(&
tokíizî
, 
ªsu…
->
Àvñ_modes
, 
föÆ_mem‹y
, 
ãmp_mem‹y
);

597 i‡(!
maybe_num_game°©es
 && !
∑r£d_posôi⁄s
 && !
∑r£d_œyî
 && !
∑r£d_«mes
 && !
∑r£d_põ˚_d©a
)

599 
°d
::
cout
 << "uh oh, we'vêÁûedÅÿ∑r£ somëhögándÅhê∑rsög i¢'àovî. Bëã∏¸ash!" << std::
ídl
;

600 
°d
::
cout
 << "ª° o‡tokíizîÇexàlöe:" << std::
ídl
;

601 i‡(
tokíizî
.
©
[0] =
NULL
)

602 
°d
::
cout
 << "tu∫†ouàthîêi†nÿtokíizîÜe·,ánd wê¨êcom∂ëñy d⁄e.Huh ? Wh©†goög o¿thí." << std::
ídl
;

604 
°d
::
cout
 << 
tokíizî
.
©
[0] << std::
ídl
;

605 
°d
::
cout
 << "∑r£d_posôi⁄s:" << 
∑r£d_posôi⁄s
 << std::
ídl
;

606 
°d
::
cout
 << "∑r£d_œyî:" << 
∑r£d_œyî
 << std::
ídl
;

607 
°d
::
cout
 << "∑r£d_«mes:" << 
∑r£d_«mes
 << std::
ídl
;

608 
°d
::
cout
 << "∑r£d_posôi⁄s:" << (
maybe_num_game°©es
 !
NULL
Ë<< std::
ídl
;

609 
	`ab‹t
();

612 
	`c⁄sume_whôe•a˚
(&
tokíizî
);

613 i‡(
tokíizî
.
©
[0] =
NULL
)

614 
°d
::
cout
 << "Wêshould quôÑighànow,Üikê°øighàouèÅown." << std::
ídl
;

616  
ªsu…
;

617 
	}
}

619 
	$∑r£_£rülize_game°©e_œyîs
(* 
ouçut
, * 
ouçut_c⁄sumed
, 
max_ouçut_Àngth
, 
Àngth
, 
GameSèã
** 
°©es
)

621 
z
 = 0; z < 
GAME_NUM_LAYERS
; z++)

623 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "œyî%i:", 
z
);

624 
i
 = 0; i < 
Àngth
; i++)

626 
GameSèã
* 
°©e
 = 
°©es
[
i
];

629 c⁄° 
w
 = 
°©e
->w;

630 c⁄° 
h
 = 
°©e
->h;

631 c⁄° 
œyî_Àn
 = 
w
 * 
h
;

632 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "%d,%d", 
w
, 
h
);

633 
j
 = 0; j < 
œyî_Àn
; j++)

635 * 
cuºít_œyî
 = 
	`game°©e_gë_œyî
(
°©e
, 
z
);

636 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, ",%d", 
cuºít_œyî
[
j
]);

638 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, ",");

642 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, ";\n");

645 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "piece_data:");

646 
i
 = 0; i < 
Àngth
; i++)

648 
GameSèã
* 
°©e
 = 
°©es
[
i
];

649 c⁄° 
w
 = 
°©e
->w;

650 c⁄° 
h
 = 
°©e
->h;

651 c⁄° 
œyî_Àn
 = 
w
 * 
h
;

652 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "%d,%d,", 
w
, 
h
);

653 
j
 = 0; j < 
w
 * 
h
; j++)

655 
k
 = 0; k < 
CP_COUNT
; k++)

657 
to_¥öt
 = 
°©e
->
põ˚_d©a
[
j
].
powîs
[
k
];

658 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "%d_", 
to_¥öt
);

660 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, ",");

663 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, ";\n");

665 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "floor_data:");

666 
i
 = 0; i < 
Àngth
; i++)

668 
GameSèã
* 
°©e
 = 
°©es
[
i
];

669 c⁄° 
w
 = 
°©e
->w;

670 c⁄° 
h
 = 
°©e
->h;

671 c⁄° 
œyî_Àn
 = 
w
 * 
h
;

672 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "%d,%d,", 
w
, 
h
);

673 
j
 = 0; j < 
w
 * 
h
; j++)

675 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, "%d-%d-%d,",

676 
°©e
->
Êo‹_d©a
[
j
].
ãÀp‹ãr_id
,

677 
°©e
->
Êo‹_d©a
[
j
].
ãÀp‹ãr_èrgë_squ¨e
.
x
,

678 
°©e
->
Êo‹_d©a
[
j
].
ãÀp‹ãr_èrgë_squ¨e
.
y


683 *
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + *ouçut_c⁄sumed, 
max_ouçut_Àngth
, ";\n");

684 
	}
}

685 
	g°d
::
°rög
 
	$∑r£_£rülize_timemachöe
(
W‹ldSèã
* 
w‹ld_°©e
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
)

687 c⁄° 
max_Àngth
 = 60000;

688 
ouçut_c⁄sumed
 = 0;

689 * 
ouçut
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* 
max_Àngth
);

690 c⁄° 
num_game°©es
 = 
w‹ld_°©e
->
num_Àvñ
;

694 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "num_game°©es:%d;\n", 
num_game°©es
);

698 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "positions:");

699 
i
 = 0; i < 
num_game°©es
; i++)

701 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%d,%d,", 
w‹ld_°©e
->
Àvñ_posôi⁄
[
i
].
x
, w‹ld_°©e->Àvñ_posôi⁄[i].
y
);

703 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

706 
	`∑r£_£rülize_game°©e_œyîs
(
ouçut
, &
ouçut_c⁄sumed
, 
max_Àngth
, 
num_game°©es
, 
w‹ld_°©e
->
Àvñ_°©e
);

709 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "names:");

710 
i
 = 0; i < 
num_game°©es
; i++)

712 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%s,", &
w‹ld_°©e
->
Àvñ_«mes
[
i
].
«me
);

714 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

718 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "solved:");

719 
i
 = 0; i < 
num_game°©es
; i++)

721 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%d,", 
w‹ld_°©e
->
Àvñ_sﬁved
[
i
]);

723 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

727 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "mode:");

728 
i
 = 0; i < 
num_game°©es
; i++)

730 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%d,", 
w‹ld_°©e
->
Àvñ_modes
[
i
]);

732 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

735  
°d
::
	`°rög
(
ouçut
);

736 
	}
}

	@Parse.h

1 #¥agm®
⁄˚


2 
	~"Edô‹.h
"

3 
	~<°rög
>

4 
	~"Mem‹y.h
"

5 
	~<ªgex
>

13 
	sTokíizî


15 * 
	m©
;

17 
di°™˚_to_ch¨
(c⁄° * 
pos
, c⁄° 
m©ch
);

18 
∑r£_numbî
(c⁄° * 
pos
);

19 
boﬁ
 
∑r£_°rögs_m©ch
(c⁄° * 
pos
, c⁄° * 
m©ch
, 
max_Àngth
);

21 
to_num
(
c
);

22 
boﬁ
 
is_num_n⁄zîo
(
c
);

23 
boﬁ
 
is_num
(
c
);

24 
boﬁ
 
is_whôe•a˚
(
c
);

25 * 
åy_∑r£_numbî
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
);

26 
boﬁ
 
åy_∑r£_°rög
(
Tokíizî
* 
t
, c⁄° * 
«me
);

27 
boﬁ
 
åy_∑r£_ch¨
(
Tokíizî
* 
t
, 
c
);

28 * 
åy_∑r£_numbî_comma_∑ú
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
);

29 
c⁄sume_whôe•a˚
(
Tokíizî
* 
t
);

31 
boﬁ
 
åy_∑r£_boﬁs
(
Tokíizî
* 
t
, boﬁ* 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
);

32 * 
åy_∑r£_cuºít_Àvñ
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
);

33 * 
åy_∑r£_num_game°©es
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
);

34 
boﬁ
 
åy_∑r£_posôi⁄s
(
Tokíizî
* 
t
, 
I¡Paú
 * 
ªsu…
, 
Mem‹y
* 
ãmp_mem‹y
);

35 
boﬁ
 
åy_∑r£_œyî
(
Tokíizî
* 
t
, 
GameSèã
** 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
);

36 
boﬁ
 
åy_∑r£_«mes
(
Tokíizî
* 
t
, 
LevñName
* 
ªsu…
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
);

37 
W‹ldSèã
* 
∑r£_de£rülize_timemachöe
(
°d
::
°rög
 
öput_°rög
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
);

39 
∑r£_£rülize_game°©e_œyîs
(* 
ouçut
, * 
ouçut_c⁄sumed
, 
max_ouçut_Àngth
, 
Àngth
, 
GameSèã
** 
°©es
);

40 
	g°d
::
°rög
 
∑r£_£rülize_timemachöe
(
W‹ldSèã
* 
w‹ld_°©e
, 
Mem‹y
* 
föÆ_mem‹y
, Mem‹y* 
ãmp_mem‹y
);

	@ParticleSystem.h

1 #¥agm®
⁄˚


2 
	~<glm\fwd.hµ
>

3 
	~<gœd\gœd.h
>

5 
	gP¨ti˛eSy°em
;

7 
P¨ti˛eSy°em
 
∑πi˛e_£tup
(
max_num_∑πi˛es
, 
num_∑πi˛es_ty≥s
, 
glm
::
vec4
* 
co‹dö©e_m≠
, 
GLuöt
 
∑πi˛e_ãxtuª
);

10 
∑πi˛e_døw
(
P¨ti˛eSy°em
 
sy°em
, 
ønge_°¨t
,
Àngth
);

	@PreludeIncludes.h

1 #¥agm®
⁄˚


3 #ifde‡
EMSCRIPTEN


4 
	~<ems¸ùãn.h
>

5 
	~<ems¸ùãn/html5.h
>

6 
	#°r˝y_s
 
°r˝y


	)

7 
	~<SDL_image.h
>

8 
	~<SDL_âf.h
>

9 
	#GL_GLES_PROTOTYPES
 1

	)

10 
	#GL_GLEXT_PROTOTYPES
 1

	)

12 
	~<GLES3/gl3.h
>

14 
	#EM_BOOL
 
boﬁ


	)

15 
	~<gœd/gœd.h
>

16 
	~"Clock.h
"

	@Regex.cpp

1 
	~"Regex.h
"

2 
	~"P¨£.h
"

6 
boﬁ
 
	$åy_∑r£_u¡û_°rög
(
Tokíizî
* 
t
, c⁄° * 
«me
)

8 * 
Áû
 = 
t
->
©
;

9 
boﬁ
 
d⁄e
 = 
Ál£
;

10 
t
->
©
[0] != '\0')

12 
boﬁ
 
found_°rög
 = 
	`åy_∑r£_°rög
(
t
, 
«me
);

13 i‡(
found_°rög
)

14  
åue
;

15 
t
->
©
++;

17 
t
->
©
 = 
Áû
;

18  
Ál£
;

19 
	}
}

20 * 
	$åy_∑r£_u¡û_ch¨
(
Tokíizî
* 
t
, 
°›_ch¨
, 
Mem‹y
* 
ãmp_mem‹y
)

23 * 
Áû
 = 
t
->
©
;

24 
Àngth
 = 1;

25 
t
->
©
[0] !
°›_ch¨
)

27 i‡(
t
->
©
[0] == '\0')

29 
t
-> 
©
 = 
Áû
;

30  
NULL
;

32 
Àngth
++;

33 
t
->
©
++;

35 * 
ªsu…
 = (*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* 
Àngth
);

36 
i
 = 0; i < 
Àngth
 - 1; i++)

37 
ªsu…
[
i
] = 
Áû
[i];

38 
ªsu…
[
Àngth
 - 1] = '\0';

39  
ªsu…
;

40 
	}
}

41 * 
	$åy_∑r£_u¡û_numbî
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

43 * 
Áû
 = 
t
->
©
;

44 
boﬁ
 
d⁄e
 = 
Ál£
;

45 
t
->
©
[0] != '\0')

47 * 
maybe_num
 = 
	`åy_∑r£_numbî
(
t
,
ãmp_mem‹y
);

48 i‡(
maybe_num
)

49  
maybe_num
;

50 
t
->
©
++;

52 
t
->
©
 = 
Áû
;

53  
NULL
;

54 
	}
}

55 
	g°d
::
°rög
 
	$∑r£_bëwìn_quŸes
(
Tokíizî
* 
t
, 
Mem‹y
* 
ãmp_mem‹y
)

57 * 
Áû
 = 
t
->
©
;

58 
boﬁ
 
∑ssög
 = 
	`åy_∑r£_ch¨
(
t
, '"');

59 * 
ªsu…
 = 
	`åy_∑r£_u¡û_ch¨
(
t
, '"',
ãmp_mem‹y
);

60 i‡(
ªsu…
 =
NULL
)

62 
°d
::
cout
 << "ÁûedÅÿ∑r£ bëwì¿quŸes.áb‹tög." << std::
ídl
;

63 
	`ab‹t
();

65  
°d
::
	`°rög
(
ªsu…
);

66 
	}
}

71 
AéasD©a
* 
	$GëAéasPosôi⁄
(
Mem‹y
* 
ãmp_mem‹y
, 
°d
::
°rög
 
©œs
, 
gë_©œs_numbî_‰om_«me
 
func_©œs
)

73 * 
öput
 = &(
©œs
[0]);

74 
AéasD©a
* 
ªsu…
 = (AéasD©a*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (AtlasData));

75 
ªsu…
->
Àngth
 = 0;

79 
Tokíizî
 
Àngth_tokíizî
;

80 
Àngth_tokíizî
.
©
 = 
öput
;

82 
boﬁ
 
found_√xt
 = 
åue
;

83 
found_√xt
)

85 
found_√xt
 = 
	`åy_∑r£_u¡û_°rög
(&
Àngth_tokíizî
, "\"filename\":");

86 i‡(
found_√xt
)

87 
ªsu…
->
Àngth
++;

93 
ªsu…
->
íum_c‹ro•odög_vÆues
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë*Ñesu…->
Àngth
);

94 
ªsu…
->
posôi⁄s
 = (
Posôi⁄
*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Posôi⁄Ë*Ñesu…->
Àngth
);

95 
Tokíizî
 
t
;

96 
t
.
©
 = 
öput
;

98 
i
 = 0; i < 
ªsu…
->
Àngth
; i++)

101 
boﬁ
 
found_√xt_fûíame
 = 
	`åy_∑r£_u¡û_°rög
(&
t
, "\"filename\": ");

102 
°d
::
°rög
 
quŸed_«me
 = 
	`∑r£_bëwìn_quŸes
(&
t
,
ãmp_mem‹y
);

103 
boﬁ
 
found_√xt_‰ame
 = 
	`åy_∑r£_u¡û_°rög
(&
t
, "\"frame\": {");

104 * 
x
 = 
	`åy_∑r£_u¡û_numbî
(&
t
,
ãmp_mem‹y
);

105 * 
y
 = 
	`åy_∑r£_u¡û_numbî
(&
t
, 
ãmp_mem‹y
);

106 * 
w
 = 
	`åy_∑r£_u¡û_numbî
(&
t
, 
ãmp_mem‹y
);

107 * 
h
 = 
	`åy_∑r£_u¡û_numbî
(&
t
, 
ãmp_mem‹y
);

108 i‡(!
found_√xt_fûíame
 || !
found_√xt_‰ame
 || !
x
 || !
y
 || !
w
 || !
h
)

110 
°d
::
cout
 << "Áûuª i¿ou∏bøndÇewÅextuªáéa†∑r£r, fix it." << std::
ídl
;

111 
	`ab‹t
();

115 
ªsu…
->
íum_c‹ro•odög_vÆues
[
i
] = 
	`func_©œs
(
quŸed_«me
);

117 
ªsu…
->
posôi⁄s
[
i
].
x
 = *x;

118 
ªsu…
->
posôi⁄s
[
i
].
y
 = *y;

119 
ªsu…
->
posôi⁄s
[
i
].
w
 = *w;

120 
ªsu…
->
posôi⁄s
[
i
].
h
 = *h;

126 
boﬁ
 
found_mëa
 = 
	`åy_∑r£_u¡û_°rög
(&
t
, "\"meta\"");

127 
boﬁ
 
found_size
 = 
	`åy_∑r£_u¡û_°rög
(&
t
, "\"w\":");

128 * 
√xtW
 = 
	`åy_∑r£_u¡û_numbî
(&
t
,
ãmp_mem‹y
);

129 * 
√xtH
 = 
	`åy_∑r£_u¡û_numbî
(&
t
,
ãmp_mem‹y
);

131 i‡(
found_mëa
 && 
found_size
 && 
√xtW
 && 
√xtH
)

133 
ªsu…
->
mëaWidth
 = *
√xtW
;

134 
ªsu…
->
mëaHeight
 = *
√xtH
;

138 
°d
::
cout
 << "Më®∑s†Áûed. Ab‹tög." << std::
ídl
;

139 
	`ab‹t
();

141  
ªsu…
;

144 
	}
}

	@Regex.h

1 #¥agm®
⁄˚


3 
	~"Mem‹y.h
"

4 
	~"GameSèã.h
"

5 
	~<io°ªam
>

6 
	~"Resour˚.h
"

7 
	eLAYERNAMEREGEX


9 
	mLNR_FLOOR
,

10 
	mLNR_PIECE
,

11 
	mLNR_COUNT


13 
	sPosôi⁄


15 
	mx
;

16 
	my
;

17 
	mw
;

18 
	mh
;

21 
	s°r


23 
	mÀngth
;

24 * 
	mvÆ
;

27 
	sAéasD©a


29 
	mmëaWidth
;

30 
	mmëaHeight
;

31 
	mÀngth
;

32 * 
	míum_c‹ro•odög_vÆues
;

33 
Posôi⁄
* 
	mposôi⁄s
;

38 
AéasD©a
* 
GëAéasPosôi⁄
(
Mem‹y
* 
ãmp_mem‹y
, 
°d
::
°rög
 
©œs
, 
gë_©œs_numbî_‰om_«me
 
func_©œs
);

	@Resource.h

1 #¥agm®
⁄˚


3 
	~<°rög
>

4 
	~"Mem‹y.h
"

5 
	~"GameSèã.h
"

6 
	~"ãxtuªAs£ts.h
"

7 (*
	tgë_©œs_numbî_‰om_«me
Ë(
	t°d
::
	t°rög
);

11 
ãxtuªAs£ts
::
FLOOR
 
	`ªsour˚_Êo‹_to_•rôe
(
Flo‹
 
Êo‹
);

12 
ãxtuªAs£ts
::
PIECE
 
	`ªsour˚_põ˚_to_•rôe
(
Põ˚
 
põ˚
);

13 
	`ªsour˚_œyî_vÆue_to_œyî_•rôe_vÆue
(
œyî_vÆue
, 
œyî_num
);

14 
°d
::
°rög
 
	`ªsour˚_lﬂd_puzzÀ_fûe
(°d::°rög 
fûeP©h
);

15 
°d
::
°rög
 
	`ªsour˚_lﬂd_ãxt_fûe
(°d::°rög 
fûeP©h
);

16 
	`ªsour˚_lﬂd_image_‰om_fûe_⁄to_gpu
(
°d
::
°rög
 
fûeP©h
);

	@ResourceLoadText.cpp

1 
	~<°rög
>

2 
	~<io°ªam
>

3 
	~<f°ªam
>

4 
	~<s°ªam
>

6 
	~"PªludeIn˛udes.h
"

7 
	~<GLFW/glfw3.h
>

8 
	~"Mem‹y.h
"

9 
	#STB_IMAGE_IMPLEMENTATION


	)

10 
	~"°b_image.h
"

11 
	~<glm\ext\ve˘‹_Êﬂt4.hµ
>

12 
	~"GameSèã.h
"

13 
	~<°rög
>

14 
	~"Regex.h
"

15 
	~"Resour˚.h
"

17 
	gãxtuªAs£ts
::
FLOOR
 
	$ªsour˚_Êo‹_to_•rôe
(
Flo‹
 
Êo‹
)

19 i‡(
Êo‹
 =
F_NONE
)

20  
ãxtuªAs£ts
::
FLOOR
::
Flo‹
;

21 i‡(
Êo‹
 =
F_TARGET
)

22  
ãxtuªAs£ts
::
FLOOR
::
T¨gë
;

23 i‡(
Êo‹
 =
F_START
)

24  
ãxtuªAs£ts
::
FLOOR
::
Sèπ
;

25 i‡(
Êo‹
 =
F_EXIT
)

26  
ãxtuªAs£ts
::
FLOOR
::
ZBZ
;

27 i‡(
Êo‹
 =
F_ZBLACK
)

28  
ãxtuªAs£ts
::
FLOOR
::
ZBœck
;

29 i‡(
Êo‹
 =
F_LURKING_WALL
)

30  
ãxtuªAs£ts
::
FLOOR
::
Flo‹
;

31 i‡(
Êo‹
 =
F_OUTLINE
)

32  
ãxtuªAs£ts
::
FLOOR
::
Flo‹
;

33 i‡(
Êo‹
 =
F_GRILL_COLD
)

34  
ãxtuªAs£ts
::
FLOOR
::
GrûlCŸ
;

35 i‡(
Êo‹
 =
F_GRILL_HOT
)

36  
ãxtuªAs£ts
::
FLOOR
::
GrûlHŸ
;

37 i‡(
Êo‹
 =
F_STAIRCASE
 || flo‹ =
F_STAIRCASE_LEVELSTART
)

38  
ãxtuªAs£ts
::
FLOOR
::
Sèúˇ£
;

39 i‡(
Êo‹
 =
F_STAIRCASE_SOLVED
)

40  
ãxtuªAs£ts
::
FLOOR
::
Tick
;

41  (
ãxtuªAs£ts
::
FLOOR
Ë
Êo‹
;

42 
	}
}

43 
	gãxtuªAs£ts
::
PIECE
 
	$ªsour˚_põ˚_to_•rôe
(
Põ˚
 
põ˚
)

45 i‡(
põ˚
 =
Põ˚
::
P_CRATE
)

46  
ãxtuªAs£ts
::
PIECE
::
Cøã
;

47 i‡(
põ˚
 =
Põ˚
::
P_CRUMBLE
)

48  
ãxtuªAs£ts
::
PIECE
::
CrumbÀ
;

49 i‡(
põ˚
 =
Põ˚
::
P_NONE
)

50  
ãxtuªAs£ts
::
PIECE
::
Em±y
;

51 i‡(
põ˚
 =
Põ˚
::
P_PLAYER
)

52  
ãxtuªAs£ts
::
PIECE
::
Pœyî
;

53 i‡(
põ˚
 =
Põ˚
::
P_WALL_ALT
)

54  
ãxtuªAs£ts
::
PIECE
::
WÆlA…
;

55 i‡(
põ˚
 =
Põ˚
::
P_WALL
)

56  
ãxtuªAs£ts
::
PIECE
::
WÆl
;

57  (
ãxtuªAs£ts
::
PIECE
Ë
põ˚
;

58 
	}
}

59 
	$ªsour˚_œyî_vÆue_to_œyî_•rôe_vÆue
(
œyî_vÆue
, 
œyî_num
)

61 i‡(
œyî_num
 =
LN_FLOOR
)

62  
	`ªsour˚_Êo‹_to_•rôe
((
Flo‹
)
œyî_vÆue
);

64  
	`ªsour˚_põ˚_to_•rôe
((
Põ˚
)
œyî_vÆue
);

65 
	}
}

67 
	g°d
::
°rög
 
	$ªsour˚_lﬂd_puzzÀ_fûe
(
°d
::
°rög
 
puzzÀ«me
)

69 
°d
::
°rög
 
föÆ_∑th
 = "as£ts/puzzÀs/" + 
puzzÀ«me
 + ".puzzle";

70 
°d
::
cout
 << "föÆÖ©h: " << 
föÆ_∑th
 << std::
ídl
;

71 
°d
::
if°ªam
 
	`myFûe
(
föÆ_∑th
);

72 
°d
::
°rög°ªam
 
mySåóm
;

73 
mySåóm
 << 
myFûe
.
	`rdbuf
();

74 
myFûe
.
	`˛o£
();

75 
°d
::
°rög
 
ªsu…
 = 
mySåóm
.
	`°r
();

76  
ªsu…
;

77 
	}
}

78 
	g°d
::
°rög
 
	$ªsour˚_lﬂd_ãxt_fûe
(
°d
::
°rög
 
fûeP©h
)

80 
°d
::
if°ªam
 
	`myFûe
("as£ts/" + 
fûeP©h
);

81 
°d
::
°rög°ªam
 
mySåóm
;

82 
mySåóm
 << 
myFûe
.
	`rdbuf
();

83 
myFûe
.
	`˛o£
();

84 
°d
::
°rög
 
ªsu…
 = 
mySåóm
.
	`°r
();

85  
ªsu…
;

86 
	}
}

88 
	$ªsour˚_lﬂd_image_‰om_fûe_⁄to_gpu
(
°d
::
°rög
 
fûe_∑th
)

90 
°d
::
°rög
 
as£t_fûe_∑th
 = "as£ts//" + 
fûe_∑th
;

91 
ªsu…
;

92 
	`glGíTextuªs
(1, &
ªsu…
);

93 
	`glE«bÀ
(
GL_BLEND
);

94 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ªsu…
);

96 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

97 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

99 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
);

100 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
);

102 
	`°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd
(
åue
);

104 
width
;

105 
height
;

106 
num_of_ch™√ls
;

107 * 
d©a
 = 
	`°bi_lﬂd
(
as£t_fûe_∑th
.
	`c_°r
(), &
width
, &
height
, &
num_of_ch™√ls
, 0);

108 
f‹m©
 = 
GL_RGBA
;

109 i‡(
num_of_ch™√ls
 == 3)

110 
f‹m©
 = 
GL_RGB
;

111 i‡(
d©a
)

113 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 
width
, 
height
, 0, 
f‹m©
, 
GL_UNSIGNED_BYTE
, 
d©a
);

118 
°d
::
cout
 << "TextuªÜﬂd faûed,Çamêo‡fûe:" << 
fûe_∑th
.
	`c_°r
(Ë<< "look†likêthê¥ogøm†g⁄« cøshÇow" << std::
ídl
;

120 
	`°bi_image_‰ì
(
d©a
);

122  
ªsu…
;

123 
	}
}

125 
	gglm
::
vec4
* 
	$ªsour˚_lﬂd_öã∫Æ
(
°d
::
°rög
 
fûe_lﬂd
, 
gë_©œs_numbî_‰om_«me
 
func
, 
Mem‹y
* 
mem‹y
, Mem‹y* 
ãmpMem‹y
)

127 
°d
::
°rög
 
fûe
 = 
	`ªsour˚_lﬂd_ãxt_fûe
(
fûe_lﬂd
);

128 
AéasD©a
* 
d©a
 = 
	`GëAéasPosôi⁄
(
mem‹y
, 
fûe
, 
func
);

129 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
, (glm::vec4Ë* 
d©a
->
Àngth
);

131 
tŸÆW
 = 
d©a
->
mëaWidth
;

132 
tŸÆH
 = 
d©a
->
mëaHeight
;

133 
i
 = 0; i < 
d©a
->
Àngth
; i++)

135 
Posôi⁄
 
p
 = 
d©a
->
posôi⁄s
[
i
];

137 
p
.
y
 = 
tŸÆH
 - 1 -Ö.y;

138 
p
.
y
 -p.
h
 - 1;

141 
p
.
w
 +p.
x
 - 1;

142 
p
.
h
 +p.
y
 - 1;

144 
√xt_ödex
 = 
d©a
->
íum_c‹ro•odög_vÆues
[
i
];

146 
ªsu…
[
√xt_ödex
].
x
 = ()
p
.x / (
tŸÆW
 - 1);

147 
ªsu…
[
√xt_ödex
].
y
 = ()
p
.y / (
tŸÆH
 - 1);

148 
ªsu…
[
√xt_ödex
].
z
 = ()
p
.
w
 / (
tŸÆW
 - 1);

149 
ªsu…
[
√xt_ödex
].
w
 = ()
p
.
h
 / (
tŸÆH
 - 1);

152  
ªsu…
;

153 
	}
}

	@SDL2/include/SDL.h

29 #i‚de‡
SDL_h_


30 
	#SDL_h_


	)

32 
	~"SDL_maö.h
"

33 
	~"SDL_°döc.h
"

34 
	~"SDL_as£π.h
"

35 
	~"SDL_©omic.h
"

36 
	~"SDL_audio.h
"

37 
	~"SDL_˛ùbﬂrd.h
"

38 
	~"SDL_˝uöfo.h
"

39 
	~"SDL_ídün.h
"

40 
	~"SDL_îr‹.h
"

41 
	~"SDL_evíts.h
"

42 
	~"SDL_fûesy°em.h
"

43 
	~"SDL_gamec⁄åﬁÀr.h
"

44 
	~"SDL_h≠tic.h
"

45 
	~"SDL_höts.h
"

46 
	~"SDL_joy°ick.h
"

47 
	~"SDL_lﬂdso.h
"

48 
	~"SDL_log.h
"

49 
	~"SDL_mesßgebox.h
"

50 
	~"SDL_mëÆ.h
"

51 
	~"SDL_muãx.h
"

52 
	~"SDL_powî.h
"

53 
	~"SDL_ªndî.h
"

54 
	~"SDL_rw›s.h
"

55 
	~"SDL_£ns‹.h
"

56 
	~"SDL_sh≠e.h
"

57 
	~"SDL_sy°em.h
"

58 
	~"SDL_thªad.h
"

59 
	~"SDL_timî.h
"

60 
	~"SDL_vîsi⁄.h
"

61 
	~"SDL_video.h
"

63 
	~"begö_code.h
"

65 #ifde‡
__˝lu•lus


78 
	#SDL_INIT_TIMER
 0x00000001u

	)

79 
	#SDL_INIT_AUDIO
 0x00000010u

	)

80 
	#SDL_INIT_VIDEO
 0x00000020u

	)

81 
	#SDL_INIT_JOYSTICK
 0x00000200u

	)

82 
	#SDL_INIT_HAPTIC
 0x00001000u

	)

83 
	#SDL_INIT_GAMECONTROLLER
 0x00002000u

	)

84 
	#SDL_INIT_EVENTS
 0x00004000u

	)

85 
	#SDL_INIT_SENSOR
 0x00008000u

	)

86 
	#SDL_INIT_NOPARACHUTE
 0x00100000u

	)

87 
	#SDL_INIT_EVERYTHING
 ( \

88 
SDL_INIT_TIMER
 | 
SDL_INIT_AUDIO
 | 
SDL_INIT_VIDEO
 | 
SDL_INIT_EVENTS
 | \

89 
SDL_INIT_JOYSTICK
 | 
SDL_INIT_HAPTIC
 | 
SDL_INIT_GAMECONTROLLER
 | 
SDL_INIT_SENSOR
 \

90 )

	)

96 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

107 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

112 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

120 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

126 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

129 #ifde‡
__˝lu•lus


132 
	~"˛o£_code.h
"

	@SDL2/include/SDL_assert.h

22 #i‚de‡
SDL_as£π_h_


23 
	#SDL_as£π_h_


	)

25 
	~"SDL_c⁄fig.h
"

27 
	~"begö_code.h
"

29 #ifde‡
__˝lu•lus


33 #i‚de‡
SDL_ASSERT_LEVEL


34 #ifde‡
SDL_DEFAULT_ASSERT_LEVEL


35 
	#SDL_ASSERT_LEVEL
 
SDL_DEFAULT_ASSERT_LEVEL


	)

36 #ñi‡
deföed
(
_DEBUG
Ë|| deföed(
DEBUG
) || \

37 (
deföed
(
__GNUC__
Ë&& !
	$deföed
(
__OPTIMIZE__
))

38 
	#SDL_ASSERT_LEVEL
 2

	)

40 
	#SDL_ASSERT_LEVEL
 1

	)

50 #i‡
	`deföed
(
_MSC_VER
)

52 
__cde˛
 
	`__debugbªak
();

53 
	#SDL_TriggîBªakpoöt
(Ë
	`__debugbªak
()

	)

54 #ñi‡–(!
	`deföed
(
__NACL__
)Ë&& ((deföed(
__GNUC__
Ë|| deföed(
__˛™g__
)Ë&& (deföed(
__i386__
Ë|| deföed(
__x86_64__
))) )

55 
	#SDL_TriggîBªakpoöt
(Ë
__asm__
 
	`__vﬁ©ûe__
 ( "öà$3\n\t" )

	)

56 #ñi‡
	`deföed
(
__386__
Ë&& deföed(
__WATCOMC__
)

57 
	#SDL_TriggîBªakpoöt
(Ë{ 
_asm
 { 0x03 } }

	)

58 #ñi‡
	`deföed
(
HAVE_SIGNAL_H
Ë&& !deföed(
__WATCOMC__
)

59 
	~<sig«l.h
>

60 
	#SDL_TriggîBªakpoöt
(Ë
	`øi£
(
SIGTRAP
)

	)

63 
	#SDL_TriggîBªakpoöt
()

	)

66 #i‡
	`deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ >= 199901L)

67 
	#SDL_FUNCTION
 
__func__


	)

68 #ñi‡((
__GNUC__
 >2Ë|| 
	`deföed
(
_MSC_VER
Ë|| deföed (
__WATCOMC__
))

69 
	#SDL_FUNCTION
 
__FUNCTION__


	)

71 
	#SDL_FUNCTION
 "???"

	)

73 
	#SDL_FILE
 
__FILE__


	)

74 
	#SDL_LINE
 
__LINE__


	)

93 #ifde‡
_MSC_VER


94 
	#SDL_NULL_WHILE_LOOP_CONDITION
 (0,0)

	)

96 
	#SDL_NULL_WHILE_LOOP_CONDITION
 (0)

	)

99 
	#SDL_dißbÀd_as£π
(
c⁄dôi⁄
) \

100 dÿ{ (Ë ((
c⁄dôi⁄
)); } 
SDL_NULL_WHILE_LOOP_CONDITION
)

	)

104 
SDL_ASSERTION_RETRY
,

105 
SDL_ASSERTION_BREAK
,

106 
SDL_ASSERTION_ABORT
,

107 
SDL_ASSERTION_IGNORE
,

108 
SDL_ASSERTION_ALWAYS_IGNORE


109 } 
	tSDL_As£πSèã
;

111 
	sSDL_As£πD©a


113 
Æways_ign‹e
;

114 
åiggî_cou¡
;

115 c⁄° *
c⁄dôi⁄
;

116 c⁄° *
fûíame
;

117 
löíum
;

118 c⁄° *
fun˘i⁄
;

119 c⁄° 
SDL_As£πD©a
 *
√xt
;

120 } 
	tSDL_As£πD©a
;

122 #i‡(
SDL_ASSERT_LEVEL
 > 0)

125 
DECLSPEC
 
SDL_As£πSèã
 
SDLCALL
 
	`SDL_Rï‹tAs£πi⁄
(
SDL_As£πD©a
 *,

128 #i‡
	`deföed
(
__˛™g__
)

129 #i‡
	`__has_„©uª
(
©åibuã_™Æyzî_n‹ëu∫
)

133 
	`__©åibuã__
((
™Æyzî_n‹ëu∫
))

145 
	#SDL_íabÀd_as£π
(
c⁄dôi⁄
) \

147  !(
c⁄dôi⁄
) ) { \

148 
SDL_As£πD©a
 
sdl_as£π_d©a
 = { \

151 c⁄° 
SDL_As£πSèã
 
sdl_as£π_°©e
 = 
	`SDL_Rï‹tAs£πi⁄
(&
sdl_as£π_d©a
, 
SDL_FUNCTION
, 
SDL_FILE
, 
SDL_LINE
); \

152 i‡(
sdl_as£π_°©e
 =
SDL_ASSERTION_RETRY
) { \

154 } i‡(
sdl_as£π_°©e
 =
SDL_ASSERTION_BREAK
) { \

155 
	`SDL_TriggîBªakpoöt
(); \

159 } 
SDL_NULL_WHILE_LOOP_CONDITION
)

	)

164 #i‡
SDL_ASSERT_LEVEL
 == 0

165 
	#SDL_as£π
(
c⁄dôi⁄
Ë
	`SDL_dißbÀd_as£π
(c⁄dôi⁄)

	)

166 
	#SDL_as£π_ªÀa£
(
c⁄dôi⁄
Ë
	`SDL_dißbÀd_as£π
(c⁄dôi⁄)

	)

167 
	#SDL_as£π_∑ønoid
(
c⁄dôi⁄
Ë
	`SDL_dißbÀd_as£π
(c⁄dôi⁄)

	)

168 #ñi‡
SDL_ASSERT_LEVEL
 == 1

169 
	#SDL_as£π
(
c⁄dôi⁄
Ë
	`SDL_dißbÀd_as£π
(c⁄dôi⁄)

	)

170 
	#SDL_as£π_ªÀa£
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

171 
	#SDL_as£π_∑ønoid
(
c⁄dôi⁄
Ë
	`SDL_dißbÀd_as£π
(c⁄dôi⁄)

	)

172 #ñi‡
SDL_ASSERT_LEVEL
 == 2

173 
	#SDL_as£π
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

174 
	#SDL_as£π_ªÀa£
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

175 
	#SDL_as£π_∑ønoid
(
c⁄dôi⁄
Ë
	`SDL_dißbÀd_as£π
(c⁄dôi⁄)

	)

176 #ñi‡
SDL_ASSERT_LEVEL
 == 3

177 
	#SDL_as£π
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

178 
	#SDL_as£π_ªÀa£
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

179 
	#SDL_as£π_∑ønoid
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

181 #îr‹ 
Unknown
 
as£πi⁄
 
Àvñ
.

185 
	#SDL_as£π_Æways
(
c⁄dôi⁄
Ë
	`SDL_íabÀd_as£π
(c⁄dôi⁄)

	)

188 
	`SDL_As£πSèã
 (
	tSDLCALL
 *
	tSDL_As£πi⁄H™dÀr
)(

189 c⁄° 
	tSDL_As£πD©a
* 
	td©a
, * 
	tu£rd©a
);

211 
DECLSPEC
 
SDLCALL
 
	`SDL_SëAs£πi⁄H™dÀr
(

212 
SDL_As£πi⁄H™dÀr
 
h™dÀr
,

213 *
u£rd©a
);

225 
DECLSPEC
 
SDL_As£πi⁄H™dÀr
 
SDLCALL
 
	`SDL_GëDeÁu…As£πi⁄H™dÀr
();

242 
DECLSPEC
 
SDL_As£πi⁄H™dÀr
 
SDLCALL
 
	`SDL_GëAs£πi⁄H™dÀr
(**
pu£rd©a
);

266 
DECLSPEC
 c⁄° 
SDL_As£πD©a
 * 
SDLCALL
 
	`SDL_GëAs£πi⁄Rï‹t
();

275 
DECLSPEC
 
SDLCALL
 
	`SDL_Re£tAs£πi⁄Rï‹t
();

279 
	#SDL_as£π_°©e
 
SDL_As£πSèã


	)

280 
	#SDL_as£π_d©a
 
SDL_As£πD©a


	)

284 #ifde‡
__˝lu•lus


285 
	}
}

287 
	~"˛o£_code.h
"

	@SDL2/include/SDL_atomic.h

59 #i‚de‡
SDL_©omic_h_


60 
	#SDL_©omic_h_


	)

62 
	~"SDL_°döc.h
"

63 
	~"SDL_∂©f‹m.h
"

65 
	~"begö_code.h
"

68 #ifde‡
__˝lu•lus


89 
	tSDL_SpöLock
;

98 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_AtomicTryLock
(
SDL_SpöLock
 *
lock
);

105 
DECLSPEC
 
SDLCALL
 
SDL_AtomicLock
(
SDL_SpöLock
 *
lock
);

112 
DECLSPEC
 
SDLCALL
 
SDL_AtomicU∆ock
(
SDL_SpöLock
 *
lock
);

121 #i‡
deföed
(
_MSC_VER
Ë&& (_MSC_VER > 1200Ë&& !deföed(
__˛™g__
)

122 
_RódWrôeB¨rõr
();

123 #¥agm®
öåösic
(
_RódWrôeB¨rõr
)

124 
	#SDL_CompûîB¨rõr
(Ë
	`_RódWrôeB¨rõr
()

	)

125 #ñi‡(
deföed
(
__GNUC__
Ë&& !deföed(
__EMSCRIPTEN__
)Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5120))

127 
	#SDL_CompûîB¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

128 #ñi‡
deföed
(
__WATCOMC__
)

129 
_ölöe
 
SDL_CompûîB¨rõr
 ();

130 #¥agm®
aux
 
SDL_CompûîB¨rõr
 = "" 
∑rm
 [] 
modify
 
exa˘
 [];

132 
	#SDL_CompûîB¨rõr
() \

133 { 
SDL_SpöLock
 
_tmp
 = 0; 
	`SDL_AtomicLock
(&_tmp); 
	`SDL_AtomicU∆ock
(&_tmp); }

	)

155 
DECLSPEC
 
SDLCALL
 
SDL_Mem‹yB¨rõrRñó£Fun˘i⁄
();

156 
DECLSPEC
 
SDLCALL
 
SDL_Mem‹yB¨rõrAcquúeFun˘i⁄
();

158 #i‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

159 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lwsync" : : : "mem‹y")

	)

160 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lwsync" : : : "mem‹y")

	)

161 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__Ørch64__
)

162 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dmb ish" : : : "mem‹y")

	)

163 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dmb ish" : : : "mem‹y")

	)

164 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__¨m__
)

172 (*
	gSDL_Kî√lMem‹yB¨rõrFunc
)();

173 
	#SDL_Mem‹yB¨rõrRñó£
(Ë((
SDL_Kî√lMem‹yB¨rõrFunc
)0xffff0Á0)()

	)

174 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë((
SDL_Kî√lMem‹yB¨rõrFunc
)0xffff0Á0)()

	)

176 
	~<sys/˝uölöe.h
>

178 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
	`__˝u_memb¨rõr
()

	)

179 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
	`__˝u_memb¨rõr
()

	)

181 #i‡
deföed
(
__ARM_ARCH_7__
Ë|| deföed(
__ARM_ARCH_7A__
Ë|| deföed(
__ARM_ARCH_7EM__
Ë|| deföed(
__ARM_ARCH_7R__
Ë|| deföed(
__ARM_ARCH_7M__
Ë|| deföed(
__ARM_ARCH_7S__
Ë|| deföed(
__ARM_ARCH_8A__
)

182 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dmb ish" : : : "mem‹y")

	)

183 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("dmb ish" : : : "mem‹y")

	)

184 #ñi‡
deföed
(
__ARM_ARCH_6__
Ë|| deföed(
__ARM_ARCH_6J__
Ë|| deföed(
__ARM_ARCH_6K__
Ë|| deföed(
__ARM_ARCH_6T2__
Ë|| deföed(
__ARM_ARCH_6Z__
Ë|| deföed(
__ARM_ARCH_6ZK__
Ë|| deföed(
__ARM_ARCH_5TE__
)

185 #ifde‡
__thumb__


187 
	#SDL_MEMORY_BARRIER_USES_FUNCTION


	)

188 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
	`SDL_Mem‹yB¨rõrRñó£Fun˘i⁄
()

	)

189 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
	`SDL_Mem‹yB¨rõrAcquúeFun˘i⁄
()

	)

191 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("m¸Ö15, 0, %0, c7, c10, 5" : : "r"(0Ë: "mem‹y")

	)

192 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("m¸Ö15, 0, %0, c7, c10, 5" : : "r"(0Ë: "mem‹y")

	)

195 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

196 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

200 #i‡(
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x5120))

202 
	~<mb¨rõr.h
>

203 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
	`__machöe_ªl_b¨rõr
()

	)

204 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
	`__machöe_acq_b¨rõr
()

	)

207 
	#SDL_Mem‹yB¨rõrRñó£
(Ë
	`SDL_CompûîB¨rõr
()

	)

208 
	#SDL_Mem‹yB¨rõrAcquúe
(Ë
	`SDL_CompûîB¨rõr
()

	)

216 °ru˘ { 
	gvÆue
; } 
	tSDL_©omic_t
;

225 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_AtomicCAS
(
SDL_©omic_t
 *
a
, 
ﬁdvÆ
, 
√wvÆ
);

232 
DECLSPEC
 
SDLCALL
 
SDL_AtomicSë
(
SDL_©omic_t
 *
a
, 
v
);

237 
DECLSPEC
 
SDLCALL
 
SDL_AtomicGë
(
SDL_©omic_t
 *
a
);

246 
DECLSPEC
 
SDLCALL
 
SDL_AtomicAdd
(
SDL_©omic_t
 *
a
, 
v
);

251 #i‚de‡
SDL_AtomicIncRef


252 
	#SDL_AtomicIncRef
(
a
Ë
	`SDL_AtomicAdd
◊, 1)

	)

261 #i‚de‡
SDL_AtomicDecRef


262 
	#SDL_AtomicDecRef
(
a
Ë(
	`SDL_AtomicAdd
◊, -1Ë=1)

	)

272 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_AtomicCASPå
(**
a
, *
ﬁdvÆ
, *
√wvÆ
);

279 
DECLSPEC
 * 
SDLCALL
 
SDL_AtomicSëPå
(**
a
, * 
v
);

284 
DECLSPEC
 * 
SDLCALL
 
SDL_AtomicGëPå
(**
a
);

287 #ifde‡
__˝lu•lus


291 
	~"˛o£_code.h
"

	@SDL2/include/SDL_audio.h

28 #i‚de‡
SDL_audio_h_


29 
	#SDL_audio_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_ídün.h
"

34 
	~"SDL_muãx.h
"

35 
	~"SDL_thªad.h
"

36 
	~"SDL_rw›s.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


64 
Uöt16
 
	tSDL_AudioF‹m©
;

71 
	#SDL_AUDIO_MASK_BITSIZE
 (0xFF)

	)

72 
	#SDL_AUDIO_MASK_DATATYPE
 (1<<8)

	)

73 
	#SDL_AUDIO_MASK_ENDIAN
 (1<<12)

	)

74 
	#SDL_AUDIO_MASK_SIGNED
 (1<<15)

	)

75 
	#SDL_AUDIO_BITSIZE
(
x
Ë(x & 
SDL_AUDIO_MASK_BITSIZE
)

	)

76 
	#SDL_AUDIO_ISFLOAT
(
x
Ë(x & 
SDL_AUDIO_MASK_DATATYPE
)

	)

77 
	#SDL_AUDIO_ISBIGENDIAN
(
x
Ë(x & 
SDL_AUDIO_MASK_ENDIAN
)

	)

78 
	#SDL_AUDIO_ISSIGNED
(
x
Ë(x & 
SDL_AUDIO_MASK_SIGNED
)

	)

79 
	#SDL_AUDIO_ISINT
(
x
Ë(!
	`SDL_AUDIO_ISFLOAT
(x))

	)

80 
	#SDL_AUDIO_ISLITTLEENDIAN
(
x
Ë(!
	`SDL_AUDIO_ISBIGENDIAN
(x))

	)

81 
	#SDL_AUDIO_ISUNSIGNED
(
x
Ë(!
	`SDL_AUDIO_ISSIGNED
(x))

	)

89 
	#AUDIO_U8
 0x0008

	)

90 
	#AUDIO_S8
 0x8008

	)

91 
	#AUDIO_U16LSB
 0x0010

	)

92 
	#AUDIO_S16LSB
 0x8010

	)

93 
	#AUDIO_U16MSB
 0x1010

	)

94 
	#AUDIO_S16MSB
 0x9010

	)

95 
	#AUDIO_U16
 
AUDIO_U16LSB


	)

96 
	#AUDIO_S16
 
AUDIO_S16LSB


	)

103 
	#AUDIO_S32LSB
 0x8020

	)

104 
	#AUDIO_S32MSB
 0x9020

	)

105 
	#AUDIO_S32
 
AUDIO_S32LSB


	)

112 
	#AUDIO_F32LSB
 0x8120

	)

113 
	#AUDIO_F32MSB
 0x9120

	)

114 
	#AUDIO_F32
 
AUDIO_F32LSB


	)

121 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


122 
	#AUDIO_U16SYS
 
AUDIO_U16LSB


	)

123 
	#AUDIO_S16SYS
 
AUDIO_S16LSB


	)

124 
	#AUDIO_S32SYS
 
AUDIO_S32LSB


	)

125 
	#AUDIO_F32SYS
 
AUDIO_F32LSB


	)

127 
	#AUDIO_U16SYS
 
AUDIO_U16MSB


	)

128 
	#AUDIO_S16SYS
 
AUDIO_S16MSB


	)

129 
	#AUDIO_S32SYS
 
AUDIO_S32MSB


	)

130 
	#AUDIO_F32SYS
 
AUDIO_F32MSB


	)

140 
	#SDL_AUDIO_ALLOW_FREQUENCY_CHANGE
 0x00000001

	)

141 
	#SDL_AUDIO_ALLOW_FORMAT_CHANGE
 0x00000002

	)

142 
	#SDL_AUDIO_ALLOW_CHANNELS_CHANGE
 0x00000004

	)

143 
	#SDL_AUDIO_ALLOW_SAMPLES_CHANGE
 0x00000008

	)

144 
	#SDL_AUDIO_ALLOW_ANY_CHANGE
 (
SDL_AUDIO_ALLOW_FREQUENCY_CHANGE
|
SDL_AUDIO_ALLOW_FORMAT_CHANGE
|
SDL_AUDIO_ALLOW_CHANNELS_CHANGE
|
SDL_AUDIO_ALLOW_SAMPLES_CHANGE
)

	)

163 (
SDLCALL
 * 
	tSDL_AudioCÆlback
Ë(*
	tu£rd©a
, 
	tUöt8
 * 
	t°ªam
,

164 
	tÀn
);

178 
	sSDL_AudioS≥c


180 
‰eq
;

181 
SDL_AudioF‹m©
 
f‹m©
;

182 
Uöt8
 
ch™√ls
;

183 
Uöt8
 
sûí˚
;

184 
Uöt16
 
ßm∂es
;

185 
Uöt16
 
∑ddög
;

186 
Uöt32
 
size
;

187 
SDL_AudioCÆlback
 
ˇŒback
;

188 *
u£rd©a
;

189 } 
	tSDL_AudioS≥c
;

192 
SDL_AudioCVT
;

193 (
SDLCALL
 * 
	tSDL_AudioFûãr
Ë(
	tSDL_AudioCVT
 * 
	tcvt
,

194 
	tSDL_AudioF‹m©
 
	tf‹m©
);

203 
	#SDL_AUDIOCVT_MAX_FILTERS
 9

	)

215 #ifde‡
__GNUC__


221 
	#SDL_AUDIOCVT_PACKED
 
	`__©åibuã__
((
∑cked
))

	)

223 
	#SDL_AUDIOCVT_PACKED


	)

226 
	sSDL_AudioCVT


228 
√eded
;

229 
SDL_AudioF‹m©
 
§c_f‹m©
;

230 
SDL_AudioF‹m©
 
d°_f‹m©
;

231 
øã_ö¸
;

232 
Uöt8
 *
buf
;

233 
Àn
;

234 
Àn_cvt
;

235 
Àn_mu…
;

236 
Àn_øtio
;

237 
SDL_AudioFûãr
 
fûãrs
[
SDL_AUDIOCVT_MAX_FILTERS
 + 1];

238 
fûãr_ödex
;

239 } 
	tSDL_AUDIOCVT_PACKED
 
	tSDL_AudioCVT
;

251 
DECLSPEC
 
SDLCALL
 
SDL_GëNumAudioDrivîs
();

252 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëAudioDrivî
(
ödex
);

263 
DECLSPEC
 
SDLCALL
 
SDL_AudioInô
(c⁄° *
drivî_«me
);

264 
DECLSPEC
 
SDLCALL
 
SDL_AudioQuô
();

271 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëCuºítAudioDrivî
();

318 
DECLSPEC
 
SDLCALL
 
SDL_O≥nAudio
(
SDL_AudioS≥c
 * 
desúed
,

319 
SDL_AudioS≥c
 * 
obèöed
);

330 
Uöt32
 
	tSDL_AudioDevi˚ID
;

344 
DECLSPEC
 
SDLCALL
 
SDL_GëNumAudioDevi˚s
(
isˇ±uª
);

359 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëAudioDevi˚Name
(
ödex
,

360 
isˇ±uª
);

376 
DECLSPEC
 
SDL_AudioDevi˚ID
 
SDLCALL
 
SDL_O≥nAudioDevi˚
(const 

377 *
devi˚
,

378 
isˇ±uª
,

380 
SDL_AudioS≥c
 *

381 
desúed
,

382 
SDL_AudioS≥c
 *

383 
obèöed
,

385 
Ælowed_ch™ges
);

397 
	gSDL_AUDIO_STOPPED
 = 0,

398 
	gSDL_AUDIO_PLAYING
,

399 
	gSDL_AUDIO_PAUSED


400 } 
	tSDL_AudioSètus
;

401 
DECLSPEC
 
SDL_AudioSètus
 
SDLCALL
 
SDL_GëAudioSètus
();

403 
DECLSPEC
 
SDL_AudioSètus
 
SDLCALL


404 
SDL_GëAudioDevi˚Sètus
(
SDL_AudioDevi˚ID
 
dev
);

417 
DECLSPEC
 
SDLCALL
 
SDL_Pau£Audio
(
∑u£_⁄
);

418 
DECLSPEC
 
SDLCALL
 
SDL_Pau£AudioDevi˚
(
SDL_AudioDevi˚ID
 
dev
,

419 
∑u£_⁄
);

474 
DECLSPEC
 
SDL_AudioS≥c
 *
SDLCALL
 
SDL_LﬂdWAV_RW
(
SDL_RW›s
 * 
§c
,

475 
‰ì§c
,

476 
SDL_AudioS≥c
 * 
•ec
,

477 
Uöt8
 ** 
audio_buf
,

478 
Uöt32
 * 
audio_Àn
);

484 
	#SDL_LﬂdWAV
(
fûe
, 
•ec
, 
audio_buf
, 
audio_Àn
) \

485 
	`SDL_LﬂdWAV_RW
(
	`SDL_RWFromFûe
(
fûe
, "rb"),1, 
•ec
,
audio_buf
,
audio_Àn
)

	)

490 
DECLSPEC
 
SDLCALL
 
SDL_FªeWAV
(
Uöt8
 * 
audio_buf
);

501 
DECLSPEC
 
SDLCALL
 
SDL_BuûdAudioCVT
(
SDL_AudioCVT
 * 
cvt
,

502 
SDL_AudioF‹m©
 
§c_f‹m©
,

503 
Uöt8
 
§c_ch™√ls
,

504 
§c_øã
,

505 
SDL_AudioF‹m©
 
d°_f‹m©
,

506 
Uöt8
 
d°_ch™√ls
,

507 
d°_øã
);

521 
DECLSPEC
 
SDLCALL
 
SDL_C⁄vîtAudio
(
SDL_AudioCVT
 * 
cvt
);

531 
	g_SDL_AudioSåóm
;

532 
_SDL_AudioSåóm
 
	tSDL_AudioSåóm
;

552 
DECLSPEC
 
SDL_AudioSåóm
 * 
SDLCALL
 
SDL_NewAudioSåóm
(c⁄° 
SDL_AudioF‹m©
 
§c_f‹m©
,

553 c⁄° 
Uöt8
 
§c_ch™√ls
,

554 c⁄° 
§c_øã
,

555 c⁄° 
SDL_AudioF‹m©
 
d°_f‹m©
,

556 c⁄° 
Uöt8
 
d°_ch™√ls
,

557 c⁄° 
d°_øã
);

574 
DECLSPEC
 
SDLCALL
 
SDL_AudioSåómPut
(
SDL_AudioSåóm
 *
°ªam
, c⁄° *
buf
, 
Àn
);

591 
DECLSPEC
 
SDLCALL
 
SDL_AudioSåómGë
(
SDL_AudioSåóm
 *
°ªam
, *
buf
, 
Àn
);

606 
DECLSPEC
 
SDLCALL
 
SDL_AudioSåómAvaûabÀ
(
SDL_AudioSåóm
 *
°ªam
);

623 
DECLSPEC
 
SDLCALL
 
SDL_AudioSåómFlush
(
SDL_AudioSåóm
 *
°ªam
);

635 
DECLSPEC
 
SDLCALL
 
SDL_AudioSåómCÀ¨
(
SDL_AudioSåóm
 *
°ªam
);

647 
DECLSPEC
 
SDLCALL
 
SDL_FªeAudioSåóm
(
SDL_AudioSåóm
 *
°ªam
);

649 
	#SDL_MIX_MAXVOLUME
 128

	)

657 
DECLSPEC
 
SDLCALL
 
SDL_MixAudio
(
Uöt8
 * 
d°
, c⁄° Uöt8 * 
§c
,

658 
Uöt32
 
Àn
, 
vﬁume
);

665 
DECLSPEC
 
SDLCALL
 
SDL_MixAudioF‹m©
(
Uöt8
 * 
d°
,

666 c⁄° 
Uöt8
 * 
§c
,

667 
SDL_AudioF‹m©
 
f‹m©
,

668 
Uöt32
 
Àn
, 
vﬁume
);

709 
DECLSPEC
 
SDLCALL
 
SDL_QueueAudio
(
SDL_AudioDevi˚ID
 
dev
, c⁄° *
d©a
, 
Uöt32
 
Àn
);

755 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_DequeueAudio
(
SDL_AudioDevi˚ID
 
dev
, *
d©a
, Uöt32 
Àn
);

791 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëQueuedAudioSize
(
SDL_AudioDevi˚ID
 
dev
);

827 
DECLSPEC
 
SDLCALL
 
SDL_CÀ¨QueuedAudio
(
SDL_AudioDevi˚ID
 
dev
);

839 
DECLSPEC
 
SDLCALL
 
SDL_LockAudio
();

840 
DECLSPEC
 
SDLCALL
 
SDL_LockAudioDevi˚
(
SDL_AudioDevi˚ID
 
dev
);

841 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockAudio
();

842 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockAudioDevi˚
(
SDL_AudioDevi˚ID
 
dev
);

848 
DECLSPEC
 
SDLCALL
 
SDL_Clo£Audio
();

849 
DECLSPEC
 
SDLCALL
 
SDL_Clo£AudioDevi˚
(
SDL_AudioDevi˚ID
 
dev
);

852 #ifde‡
__˝lu•lus


855 
	~"˛o£_code.h
"

	@SDL2/include/SDL_bits.h

28 #i‚de‡
SDL_bôs_h_


29 
	#SDL_bôs_h_


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


50 #i‡
deföed
(
__WATCOMC__
Ë&& deföed(
__386__
)

51 
_ölöe
 
_SDL_˛z_w©com
 (
Uöt32
);

52 #¥agm®
aux
 
_SDL_˛z_w©com
 = \

55 
	g∑rm
 [
óx
] 
	gnomem‹y
 \

56 
	gvÆue
 [
óx
] \

57 
modify
 
	gexa˘
 [
óx
] 
	gnomem‹y
;

60 
SDL_FORCE_INLINE
 

61 
SDL_Mo°Signifiˇ¡BôIndex32
(
Uöt32
 
x
)

63 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 4))

67 i‡(
	gx
 == 0) {

70  31 - 
__buûtö_˛z
(
x
);

71 #ñi‡
deföed
(
__WATCOMC__
Ë&& deföed(
__386__
)

72 i‡(
	gx
 == 0) {

75  31 - 
_SDL_˛z_w©com
(
x
);

81 c⁄° 
Uöt32
 
	gb
[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};

82 c⁄° 
	gS
[] = {1, 2, 4, 8, 16};

84 
	gmsbIndex
 = 0;

85 
	gi
;

87 i‡(
	gx
 == 0) {

91 
	gi
 = 4; i >= 0; i--)

93 i‡(
	gx
 & 
	gb
[
i
])

95 
	gx
 >>
S
[
i
];

96 
	gmsbIndex
 |
S
[
i
];

100  
	gmsbIndex
;

104 
SDL_FORCE_INLINE
 
SDL_boﬁ


105 
SDL_HasExa˘lyO√BôSë32
(
Uöt32
 
x
)

107 i‡(
	gx
 && !(x & (x - 1))) {

108  
	gSDL_TRUE
;

110  
	gSDL_FALSE
;

114 #ifde‡
__˝lu•lus


117 
	~"˛o£_code.h
"

	@SDL2/include/SDL_blendmode.h

28 #i‚de‡
SDL_bÀndmode_h_


29 
	#SDL_bÀndmode_h_


	)

31 
	~"begö_code.h
"

33 #ifde‡
__˝lu•lus


42 
SDL_BLENDMODE_NONE
 = 0x00000000,

44 
SDL_BLENDMODE_BLEND
 = 0x00000001,

47 
SDL_BLENDMODE_ADD
 = 0x00000002,

50 
SDL_BLENDMODE_MOD
 = 0x00000004,

53 
SDL_BLENDMODE_MUL
 = 0x00000008,

56 
SDL_BLENDMODE_INVALID
 = 0x7FFFFFFF

60 } 
	tSDL_BÀndMode
;

67 
SDL_BLENDOPERATION_ADD
 = 0x1,

68 
SDL_BLENDOPERATION_SUBTRACT
 = 0x2,

69 
SDL_BLENDOPERATION_REV_SUBTRACT
 = 0x3,

70 
SDL_BLENDOPERATION_MINIMUM
 = 0x4,

71 
SDL_BLENDOPERATION_MAXIMUM
 = 0x5

73 } 
	tSDL_BÀndO≥øti⁄
;

80 
SDL_BLENDFACTOR_ZERO
 = 0x1,

81 
SDL_BLENDFACTOR_ONE
 = 0x2,

82 
SDL_BLENDFACTOR_SRC_COLOR
 = 0x3,

83 
SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR
 = 0x4,

84 
SDL_BLENDFACTOR_SRC_ALPHA
 = 0x5,

85 
SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA
 = 0x6,

86 
SDL_BLENDFACTOR_DST_COLOR
 = 0x7,

87 
SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR
 = 0x8,

88 
SDL_BLENDFACTOR_DST_ALPHA
 = 0x9,

89 
SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA
 = 0xA

91 } 
	tSDL_BÀndFa˘‹
;

108 
DECLSPEC
 
SDL_BÀndMode
 
SDLCALL
 
SDL_Compo£Cu°omBÀndMode
(
SDL_BÀndFa˘‹
 
§cCﬁ‹Fa˘‹
,

109 
SDL_BÀndFa˘‹
 
d°Cﬁ‹Fa˘‹
,

110 
SDL_BÀndO≥øti⁄
 
cﬁ‹O≥øti⁄
,

111 
SDL_BÀndFa˘‹
 
§cAÕhaFa˘‹
,

112 
SDL_BÀndFa˘‹
 
d°AÕhaFa˘‹
,

113 
SDL_BÀndO≥øti⁄
 
ÆphaO≥øti⁄
);

116 #ifde‡
__˝lu•lus


119 
	~"˛o£_code.h
"

	@SDL2/include/SDL_clipboard.h

28 #i‚de‡
SDL_˛ùbﬂrd_h_


29 
	#SDL_˛ùbﬂrd_h_


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


46 
DECLSPEC
 
SDLCALL
 
SDL_SëClùbﬂrdText
(c⁄° *
ãxt
);

53 
DECLSPEC
 * 
SDLCALL
 
SDL_GëClùbﬂrdText
();

60 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasClùbﬂrdText
();

64 #ifde‡
__˝lu•lus


67 
	~"˛o£_code.h
"

	@SDL2/include/SDL_config.h

22 #i‚de‡
SDL_c⁄fig_wödows_h_


23 
	#SDL_c⁄fig_wödows_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

30 #i‡!
deföed
(
_STDINT_H_
Ë&& (!deföed(
HAVE_STDINT_H
Ë|| !
_HAVE_STDINT_H
)

31 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__DMC__
Ë|| deföed(
__WATCOMC__
)

32 
	#HAVE_STDINT_H
 1

	)

33 #ñi‡
deföed
(
_MSC_VER
)

34 sig√d 
	t__öt8
 
	töt8_t
;

35 
	t__öt8
 
	tuöt8_t
;

36 sig√d 
	t__öt16
 
	töt16_t
;

37 
	t__öt16
 
	tuöt16_t
;

38 sig√d 
	t__öt32
 
	töt32_t
;

39 
	t__öt32
 
	tuöt32_t
;

40 sig√d 
	t__öt64
 
	töt64_t
;

41 
	t__öt64
 
	tuöt64_t
;

42 #i‚de‡
_UINTPTR_T_DEFINED


43 #ifde‡ 
_WIN64


44 
	t__öt64
 
	tuöçå_t
;

46 
	tuöçå_t
;

48 
	#_UINTPTR_T_DEFINED


	)

51 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
DWORD_PTR
)))

52 
	#DWORD_PTR
 
DWORD


	)

54 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
LONG_PTR
)))

55 
	#LONG_PTR
 
LONG


	)

58 sig√d 
	töt8_t
;

59 
	tuöt8_t
;

60 sig√d 
	töt16_t
;

61 
	tuöt16_t
;

62 sig√d 
	töt32_t
;

63 
	tuöt32_t
;

64 sig√d 
	töt64_t
;

65 
	tuöt64_t
;

66 #i‚de‡
_SIZE_T_DEFINED_


67 
	#_SIZE_T_DEFINED_


	)

68 
	tsize_t
;

70 
	tuöçå_t
;

74 #ifde‡
_WIN64


75 
	#SIZEOF_VOIDP
 8

	)

77 
	#SIZEOF_VOIDP
 4

	)

80 
	#HAVE_DDRAW_H
 1

	)

81 
	#HAVE_DINPUT_H
 1

	)

82 
	#HAVE_DSOUND_H
 1

	)

83 
	#HAVE_DXGI_H
 1

	)

84 
	#HAVE_XINPUT_H
 1

	)

85 
	#HAVE_MMDEVICEAPI_H
 1

	)

86 
	#HAVE_AUDIOCLIENT_H
 1

	)

89 #ifde‡
HAVE_LIBC


91 
	#STDC_HEADERS
 1

	)

92 
	#HAVE_CTYPE_H
 1

	)

93 
	#HAVE_FLOAT_H
 1

	)

94 
	#HAVE_LIMITS_H
 1

	)

95 
	#HAVE_MATH_H
 1

	)

96 
	#HAVE_SIGNAL_H
 1

	)

97 
	#HAVE_STDIO_H
 1

	)

98 
	#HAVE_STRING_H
 1

	)

101 
	#HAVE_MALLOC
 1

	)

102 
	#HAVE_CALLOC
 1

	)

103 
	#HAVE_REALLOC
 1

	)

104 
	#HAVE_FREE
 1

	)

105 
	#HAVE_ALLOCA
 1

	)

106 
	#HAVE_QSORT
 1

	)

107 
	#HAVE_ABS
 1

	)

108 
	#HAVE_MEMSET
 1

	)

109 
	#HAVE_MEMCPY
 1

	)

110 
	#HAVE_MEMMOVE
 1

	)

111 
	#HAVE_MEMCMP
 1

	)

112 
	#HAVE_STRLEN
 1

	)

113 
	#HAVE__STRREV
 1

	)

117 
	#HAVE_STRCHR
 1

	)

118 
	#HAVE_STRRCHR
 1

	)

119 
	#HAVE_STRSTR
 1

	)

121 #i‡
deföed
(
_MSC_VER
)

122 
	#HAVE_STRTOK_S
 1

	)

127 
	#HAVE_STRTOL
 1

	)

128 
	#HAVE_STRTOUL
 1

	)

129 
	#HAVE_STRTOD
 1

	)

130 
	#HAVE_ATOI
 1

	)

131 
	#HAVE_ATOF
 1

	)

132 
	#HAVE_STRCMP
 1

	)

133 
	#HAVE_STRNCMP
 1

	)

134 
	#HAVE__STRICMP
 1

	)

135 
	#HAVE__STRNICMP
 1

	)

136 
	#HAVE_ACOS
 1

	)

137 
	#HAVE_ACOSF
 1

	)

138 
	#HAVE_ASIN
 1

	)

139 
	#HAVE_ASINF
 1

	)

140 
	#HAVE_ATAN
 1

	)

141 
	#HAVE_ATANF
 1

	)

142 
	#HAVE_ATAN2
 1

	)

143 
	#HAVE_ATAN2F
 1

	)

144 
	#HAVE_CEILF
 1

	)

145 
	#HAVE__COPYSIGN
 1

	)

146 
	#HAVE_COS
 1

	)

147 
	#HAVE_COSF
 1

	)

148 
	#HAVE_EXP
 1

	)

149 
	#HAVE_EXPF
 1

	)

150 
	#HAVE_FABS
 1

	)

151 
	#HAVE_FABSF
 1

	)

152 
	#HAVE_FLOOR
 1

	)

153 
	#HAVE_FLOORF
 1

	)

154 
	#HAVE_FMOD
 1

	)

155 
	#HAVE_FMODF
 1

	)

156 
	#HAVE_LOG
 1

	)

157 
	#HAVE_LOGF
 1

	)

158 
	#HAVE_LOG10
 1

	)

159 
	#HAVE_LOG10F
 1

	)

160 
	#HAVE_POW
 1

	)

161 
	#HAVE_POWF
 1

	)

162 
	#HAVE_SIN
 1

	)

163 
	#HAVE_SINF
 1

	)

164 
	#HAVE_SQRT
 1

	)

165 
	#HAVE_SQRTF
 1

	)

166 
	#HAVE_TAN
 1

	)

167 
	#HAVE_TANF
 1

	)

168 #i‡
deföed
(
_MSC_VER
)

170 #i‡
_MSC_VER
 >= 1800

171 
	#HAVE_STRTOLL
 1

	)

172 
	#HAVE_VSSCANF
 1

	)

173 
	#HAVE_SCALBN
 1

	)

174 
	#HAVE_SCALBNF
 1

	)

177 #i‡
_MSC_VER
 >= 1400

178 
	#HAVE__FSEEKI64
 1

	)

181 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
_USE_MATH_DEFINES
)

182 
	#HAVE_M_PI
 1

	)

185 
	#HAVE_STDARG_H
 1

	)

186 
	#HAVE_STDDEF_H
 1

	)

190 
	#SDL_AUDIO_DRIVER_WASAPI
 1

	)

191 
	#SDL_AUDIO_DRIVER_DSOUND
 1

	)

192 
	#SDL_AUDIO_DRIVER_WINMM
 1

	)

193 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

194 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

197 
	#SDL_JOYSTICK_DINPUT
 1

	)

198 
	#SDL_JOYSTICK_XINPUT
 1

	)

199 
	#SDL_JOYSTICK_HIDAPI
 1

	)

200 
	#SDL_HAPTIC_DINPUT
 1

	)

201 
	#SDL_HAPTIC_XINPUT
 1

	)

204 
	#SDL_SENSOR_DUMMY
 1

	)

207 
	#SDL_LOADSO_WINDOWS
 1

	)

210 
	#SDL_THREAD_WINDOWS
 1

	)

213 
	#SDL_TIMER_WINDOWS
 1

	)

216 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

217 
	#SDL_VIDEO_DRIVER_WINDOWS
 1

	)

219 #i‚de‡
SDL_VIDEO_RENDER_D3D


220 
	#SDL_VIDEO_RENDER_D3D
 1

	)

222 #i‚de‡
SDL_VIDEO_RENDER_D3D11


223 
	#SDL_VIDEO_RENDER_D3D11
 0

	)

227 #i‚de‡
SDL_VIDEO_OPENGL


228 
	#SDL_VIDEO_OPENGL
 1

	)

230 #i‚de‡
SDL_VIDEO_OPENGL_WGL


231 
	#SDL_VIDEO_OPENGL_WGL
 1

	)

233 #i‚de‡
SDL_VIDEO_RENDER_OGL


234 
	#SDL_VIDEO_RENDER_OGL
 1

	)

236 #i‚de‡
SDL_VIDEO_RENDER_OGL_ES2


237 
	#SDL_VIDEO_RENDER_OGL_ES2
 1

	)

239 #i‚de‡
SDL_VIDEO_OPENGL_ES2


240 
	#SDL_VIDEO_OPENGL_ES2
 1

	)

242 #i‚de‡
SDL_VIDEO_OPENGL_EGL


243 
	#SDL_VIDEO_OPENGL_EGL
 1

	)

247 
	#SDL_VIDEO_VULKAN
 1

	)

250 
	#SDL_POWER_WINDOWS
 1

	)

253 
	#SDL_FILESYSTEM_WINDOWS
 1

	)

256 #i‚de‡
_WIN64


257 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL2/include/SDL_config_android.h

22 #i‚de‡
SDL_c⁄fig_™droid_h_


23 
	#SDL_c⁄fig_™droid_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

34 
	~<°d¨g.h
>

36 
	#HAVE_GCC_ATOMICS
 1

	)

38 
	#HAVE_ALLOCA_H
 1

	)

39 
	#HAVE_SYS_TYPES_H
 1

	)

40 
	#HAVE_STDIO_H
 1

	)

41 
	#STDC_HEADERS
 1

	)

42 
	#HAVE_STRING_H
 1

	)

43 
	#HAVE_INTTYPES_H
 1

	)

44 
	#HAVE_STDINT_H
 1

	)

45 
	#HAVE_CTYPE_H
 1

	)

46 
	#HAVE_MATH_H
 1

	)

47 
	#HAVE_SIGNAL_H
 1

	)

50 
	#HAVE_MALLOC
 1

	)

51 
	#HAVE_CALLOC
 1

	)

52 
	#HAVE_REALLOC
 1

	)

53 
	#HAVE_FREE
 1

	)

54 
	#HAVE_ALLOCA
 1

	)

55 
	#HAVE_GETENV
 1

	)

56 
	#HAVE_SETENV
 1

	)

57 
	#HAVE_PUTENV
 1

	)

58 
	#HAVE_SETENV
 1

	)

59 
	#HAVE_UNSETENV
 1

	)

60 
	#HAVE_QSORT
 1

	)

61 
	#HAVE_ABS
 1

	)

62 
	#HAVE_BCOPY
 1

	)

63 
	#HAVE_MEMSET
 1

	)

64 
	#HAVE_MEMCPY
 1

	)

65 
	#HAVE_MEMMOVE
 1

	)

66 
	#HAVE_MEMCMP
 1

	)

67 
	#HAVE_STRLEN
 1

	)

68 
	#HAVE_STRLCPY
 1

	)

69 
	#HAVE_STRLCAT
 1

	)

70 
	#HAVE_STRDUP
 1

	)

71 
	#HAVE_STRCHR
 1

	)

72 
	#HAVE_STRRCHR
 1

	)

73 
	#HAVE_STRSTR
 1

	)

74 
	#HAVE_STRTOL
 1

	)

75 
	#HAVE_STRTOUL
 1

	)

76 
	#HAVE_STRTOLL
 1

	)

77 
	#HAVE_STRTOULL
 1

	)

78 
	#HAVE_STRTOD
 1

	)

79 
	#HAVE_ATOI
 1

	)

80 
	#HAVE_ATOF
 1

	)

81 
	#HAVE_STRCMP
 1

	)

82 
	#HAVE_STRNCMP
 1

	)

83 
	#HAVE_STRCASECMP
 1

	)

84 
	#HAVE_STRNCASECMP
 1

	)

85 
	#HAVE_VSSCANF
 1

	)

86 
	#HAVE_VSNPRINTF
 1

	)

87 
	#HAVE_M_PI
 1

	)

88 
	#HAVE_ATAN
 1

	)

89 
	#HAVE_ATAN2
 1

	)

90 
	#HAVE_ACOS
 1

	)

91 
	#HAVE_ASIN
 1

	)

92 
	#HAVE_CEIL
 1

	)

93 
	#HAVE_COPYSIGN
 1

	)

94 
	#HAVE_COS
 1

	)

95 
	#HAVE_COSF
 1

	)

96 
	#HAVE_FABS
 1

	)

97 
	#HAVE_FLOOR
 1

	)

98 
	#HAVE_LOG
 1

	)

99 
	#HAVE_POW
 1

	)

100 
	#HAVE_SCALBN
 1

	)

101 
	#HAVE_SIN
 1

	)

102 
	#HAVE_SINF
 1

	)

103 
	#HAVE_SQRT
 1

	)

104 
	#HAVE_SQRTF
 1

	)

105 
	#HAVE_TAN
 1

	)

106 
	#HAVE_TANF
 1

	)

107 
	#HAVE_SIGACTION
 1

	)

108 
	#HAVE_SETJMP
 1

	)

109 
	#HAVE_NANOSLEEP
 1

	)

110 
	#HAVE_SYSCONF
 1

	)

111 
	#HAVE_CLOCK_GETTIME
 1

	)

113 
	#SIZEOF_VOIDP
 4

	)

116 
	#SDL_AUDIO_DRIVER_ANDROID
 1

	)

117 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

120 
	#SDL_JOYSTICK_ANDROID
 1

	)

121 
	#SDL_HAPTIC_ANDROID
 1

	)

124 
	#SDL_LOADSO_DLOPEN
 1

	)

127 
	#SDL_THREAD_PTHREAD
 1

	)

128 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
 1

	)

131 
	#SDL_TIMER_UNIX
 1

	)

134 
	#SDL_VIDEO_DRIVER_ANDROID
 1

	)

137 
	#SDL_VIDEO_OPENGL_ES
 1

	)

138 
	#SDL_VIDEO_OPENGL_ES2
 1

	)

139 
	#SDL_VIDEO_OPENGL_EGL
 1

	)

140 
	#SDL_VIDEO_RENDER_OGL_ES
 1

	)

141 
	#SDL_VIDEO_RENDER_OGL_ES2
 1

	)

145 #i‡
deföed
(
__ARM_ARCH
) && __ARM_ARCH < 7

146 
	#SDL_VIDEO_VULKAN
 0

	)

148 
	#SDL_VIDEO_VULKAN
 1

	)

152 
	#SDL_POWER_ANDROID
 1

	)

155 
	#SDL_FILESYSTEM_ANDROID
 1

	)

	@SDL2/include/SDL_config_iphoneos.h

22 #i‚de‡
SDL_c⁄fig_ùh⁄eos_h_


23 
	#SDL_c⁄fig_ùh⁄eos_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

28 #ifde‡
__LP64__


29 
	#SIZEOF_VOIDP
 8

	)

31 
	#SIZEOF_VOIDP
 4

	)

34 
	#HAVE_GCC_ATOMICS
 1

	)

36 
	#HAVE_ALLOCA_H
 1

	)

37 
	#HAVE_SYS_TYPES_H
 1

	)

38 
	#HAVE_STDIO_H
 1

	)

39 
	#STDC_HEADERS
 1

	)

40 
	#HAVE_STRING_H
 1

	)

41 
	#HAVE_INTTYPES_H
 1

	)

42 
	#HAVE_STDINT_H
 1

	)

43 
	#HAVE_CTYPE_H
 1

	)

44 
	#HAVE_MATH_H
 1

	)

45 
	#HAVE_SIGNAL_H
 1

	)

48 
	#HAVE_MALLOC
 1

	)

49 
	#HAVE_CALLOC
 1

	)

50 
	#HAVE_REALLOC
 1

	)

51 
	#HAVE_FREE
 1

	)

52 
	#HAVE_ALLOCA
 1

	)

53 
	#HAVE_GETENV
 1

	)

54 
	#HAVE_SETENV
 1

	)

55 
	#HAVE_PUTENV
 1

	)

56 
	#HAVE_SETENV
 1

	)

57 
	#HAVE_UNSETENV
 1

	)

58 
	#HAVE_QSORT
 1

	)

59 
	#HAVE_ABS
 1

	)

60 
	#HAVE_BCOPY
 1

	)

61 
	#HAVE_MEMSET
 1

	)

62 
	#HAVE_MEMCPY
 1

	)

63 
	#HAVE_MEMMOVE
 1

	)

64 
	#HAVE_MEMCMP
 1

	)

65 
	#HAVE_STRLEN
 1

	)

66 
	#HAVE_STRLCPY
 1

	)

67 
	#HAVE_STRLCAT
 1

	)

68 
	#HAVE_STRDUP
 1

	)

69 
	#HAVE_STRCHR
 1

	)

70 
	#HAVE_STRRCHR
 1

	)

71 
	#HAVE_STRSTR
 1

	)

72 
	#HAVE_STRTOL
 1

	)

73 
	#HAVE_STRTOUL
 1

	)

74 
	#HAVE_STRTOLL
 1

	)

75 
	#HAVE_STRTOULL
 1

	)

76 
	#HAVE_STRTOD
 1

	)

77 
	#HAVE_ATOI
 1

	)

78 
	#HAVE_ATOF
 1

	)

79 
	#HAVE_STRCMP
 1

	)

80 
	#HAVE_STRNCMP
 1

	)

81 
	#HAVE_STRCASECMP
 1

	)

82 
	#HAVE_STRNCASECMP
 1

	)

83 
	#HAVE_VSSCANF
 1

	)

84 
	#HAVE_VSNPRINTF
 1

	)

85 
	#HAVE_M_PI
 1

	)

86 
	#HAVE_ATAN
 1

	)

87 
	#HAVE_ATAN2
 1

	)

88 
	#HAVE_ACOS
 1

	)

89 
	#HAVE_ASIN
 1

	)

90 
	#HAVE_CEIL
 1

	)

91 
	#HAVE_COPYSIGN
 1

	)

92 
	#HAVE_COS
 1

	)

93 
	#HAVE_COSF
 1

	)

94 
	#HAVE_FABS
 1

	)

95 
	#HAVE_FLOOR
 1

	)

96 
	#HAVE_LOG
 1

	)

97 
	#HAVE_POW
 1

	)

98 
	#HAVE_SCALBN
 1

	)

99 
	#HAVE_SIN
 1

	)

100 
	#HAVE_SINF
 1

	)

101 
	#HAVE_SQRT
 1

	)

102 
	#HAVE_SQRTF
 1

	)

103 
	#HAVE_TAN
 1

	)

104 
	#HAVE_TANF
 1

	)

105 
	#HAVE_SIGACTION
 1

	)

106 
	#HAVE_SETJMP
 1

	)

107 
	#HAVE_NANOSLEEP
 1

	)

108 
	#HAVE_SYSCONF
 1

	)

109 
	#HAVE_SYSCTLBYNAME
 1

	)

112 
	#SDL_AUDIO_DRIVER_COREAUDIO
 1

	)

114 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

117 
	#SDL_HAPTIC_DUMMY
 1

	)

120 
	#SDL_JOYSTICK_MFI
 1

	)

123 
	#SDL_LOADSO_DLOPEN
 1

	)

126 
	#SDL_THREAD_PTHREAD
 1

	)

127 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
 1

	)

130 
	#SDL_TIMER_UNIX
 1

	)

133 
	#SDL_VIDEO_DRIVER_UIKIT
 1

	)

134 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

137 
	#SDL_VIDEO_OPENGL_ES2
 1

	)

138 
	#SDL_VIDEO_OPENGL_ES
 1

	)

139 
	#SDL_VIDEO_RENDER_OGL_ES
 1

	)

140 
	#SDL_VIDEO_RENDER_OGL_ES2
 1

	)

143 #i‡!
TARGET_OS_SIMULATOR
 && !
TARGET_CPU_ARM


144 
	#SDL_VIDEO_VULKAN
 1

	)

146 
	#SDL_VIDEO_VULKAN
 0

	)

150 
	#SDL_POWER_UIKIT
 1

	)

153 
	#SDL_IPHONE_KEYBOARD
 1

	)

156 
	#SDL_IPHONE_LAUNCHSCREEN
 1

	)

161 
	#SDL_IPHONE_MAX_GFORCE
 5.0

	)

164 
	#SDL_FILESYSTEM_COCOA
 1

	)

	@SDL2/include/SDL_config_macosx.h

22 #i‚de‡
SDL_c⁄fig_macosx_h_


23 
	#SDL_c⁄fig_macosx_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

29 
	~<AvaûabûôyMa¸os.h
>

33 #ifde‡
__LP64__


34 
	#SIZEOF_VOIDP
 8

	)

36 
	#SIZEOF_VOIDP
 4

	)

40 
	#HAVE_ALLOCA_H
 1

	)

41 
	#HAVE_SYS_TYPES_H
 1

	)

42 
	#HAVE_STDIO_H
 1

	)

43 
	#STDC_HEADERS
 1

	)

44 
	#HAVE_STRING_H
 1

	)

45 
	#HAVE_INTTYPES_H
 1

	)

46 
	#HAVE_STDINT_H
 1

	)

47 
	#HAVE_CTYPE_H
 1

	)

48 
	#HAVE_MATH_H
 1

	)

49 
	#HAVE_SIGNAL_H
 1

	)

52 
	#HAVE_MALLOC
 1

	)

53 
	#HAVE_CALLOC
 1

	)

54 
	#HAVE_REALLOC
 1

	)

55 
	#HAVE_FREE
 1

	)

56 
	#HAVE_ALLOCA
 1

	)

57 
	#HAVE_GETENV
 1

	)

58 
	#HAVE_SETENV
 1

	)

59 
	#HAVE_PUTENV
 1

	)

60 
	#HAVE_UNSETENV
 1

	)

61 
	#HAVE_QSORT
 1

	)

62 
	#HAVE_ABS
 1

	)

63 
	#HAVE_BCOPY
 1

	)

64 
	#HAVE_MEMSET
 1

	)

65 
	#HAVE_MEMCPY
 1

	)

66 
	#HAVE_MEMMOVE
 1

	)

67 
	#HAVE_MEMCMP
 1

	)

68 
	#HAVE_STRLEN
 1

	)

69 
	#HAVE_STRLCPY
 1

	)

70 
	#HAVE_STRLCAT
 1

	)

71 
	#HAVE_STRDUP
 1

	)

72 
	#HAVE_STRCHR
 1

	)

73 
	#HAVE_STRRCHR
 1

	)

74 
	#HAVE_STRSTR
 1

	)

75 
	#HAVE_STRTOL
 1

	)

76 
	#HAVE_STRTOUL
 1

	)

77 
	#HAVE_STRTOLL
 1

	)

78 
	#HAVE_STRTOULL
 1

	)

79 
	#HAVE_STRTOD
 1

	)

80 
	#HAVE_ATOI
 1

	)

81 
	#HAVE_ATOF
 1

	)

82 
	#HAVE_STRCMP
 1

	)

83 
	#HAVE_STRNCMP
 1

	)

84 
	#HAVE_STRCASECMP
 1

	)

85 
	#HAVE_STRNCASECMP
 1

	)

86 
	#HAVE_VSSCANF
 1

	)

87 
	#HAVE_VSNPRINTF
 1

	)

88 
	#HAVE_CEIL
 1

	)

89 
	#HAVE_COPYSIGN
 1

	)

90 
	#HAVE_COS
 1

	)

91 
	#HAVE_COSF
 1

	)

92 
	#HAVE_FABS
 1

	)

93 
	#HAVE_FLOOR
 1

	)

94 
	#HAVE_LOG
 1

	)

95 
	#HAVE_POW
 1

	)

96 
	#HAVE_SCALBN
 1

	)

97 
	#HAVE_SIN
 1

	)

98 
	#HAVE_SINF
 1

	)

99 
	#HAVE_SQRT
 1

	)

100 
	#HAVE_SQRTF
 1

	)

101 
	#HAVE_TAN
 1

	)

102 
	#HAVE_TANF
 1

	)

103 
	#HAVE_SIGACTION
 1

	)

104 
	#HAVE_SETJMP
 1

	)

105 
	#HAVE_NANOSLEEP
 1

	)

106 
	#HAVE_SYSCONF
 1

	)

107 
	#HAVE_SYSCTLBYNAME
 1

	)

108 
	#HAVE_ATAN
 1

	)

109 
	#HAVE_ATAN2
 1

	)

110 
	#HAVE_ACOS
 1

	)

111 
	#HAVE_ASIN
 1

	)

114 
	#SDL_AUDIO_DRIVER_COREAUDIO
 1

	)

115 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

116 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

119 
	#SDL_JOYSTICK_IOKIT
 1

	)

120 
	#SDL_HAPTIC_IOKIT
 1

	)

123 
	#SDL_LOADSO_DLOPEN
 1

	)

126 
	#SDL_THREAD_PTHREAD
 1

	)

127 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
 1

	)

130 
	#SDL_TIMER_UNIX
 1

	)

133 
	#SDL_VIDEO_DRIVER_COCOA
 1

	)

134 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

135 #unde‡
SDL_VIDEO_DRIVER_X11


136 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC
 "/u§/X11R6/lib/libX11.6.dylib"

	)

137 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
 "/u§/X11R6/lib/libXext.6.dylib"

	)

138 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA
 "/u§/X11R6/lib/libXöîama.1.dylib"

	)

139 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2
 "/u§/X11R6/lib/libXi.6.dylib"

	)

140 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
 "/u§/X11R6/lib/libXøndr.2.dylib"

	)

141 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS
 "/u§/X11R6/lib/libXss.1.dylib"

	)

142 
	#SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE
 "/u§/X11R6/lib/libXxf86vm.1.dylib"

	)

143 
	#SDL_VIDEO_DRIVER_X11_XDBE
 1

	)

144 
	#SDL_VIDEO_DRIVER_X11_XINERAMA
 1

	)

145 
	#SDL_VIDEO_DRIVER_X11_XRANDR
 1

	)

146 
	#SDL_VIDEO_DRIVER_X11_XSCRNSAVER
 1

	)

147 
	#SDL_VIDEO_DRIVER_X11_XSHAPE
 1

	)

148 
	#SDL_VIDEO_DRIVER_X11_XVIDMODE
 1

	)

149 
	#SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM
 1

	)

151 #ifde‡
MAC_OS_X_VERSION_10_8


157 
	#SDL_VIDEO_DRIVER_X11_XINPUT2
 1

	)

158 
	#SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS
 1

	)

159 
	#SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY
 1

	)

162 #i‚de‡
SDL_VIDEO_RENDER_OGL


163 
	#SDL_VIDEO_RENDER_OGL
 1

	)

167 #i‚de‡
SDL_VIDEO_OPENGL


168 
	#SDL_VIDEO_OPENGL
 1

	)

170 #i‚de‡
SDL_VIDEO_OPENGL_CGL


171 
	#SDL_VIDEO_OPENGL_CGL
 1

	)

173 #i‚de‡
SDL_VIDEO_OPENGL_GLX


174 
	#SDL_VIDEO_OPENGL_GLX
 1

	)

179 #i‡
TARGET_CPU_X86_64
 && (
MAC_OS_X_VERSION_MAX_ALLOWED
 >= 101100)

180 
	#SDL_VIDEO_VULKAN
 1

	)

182 
	#SDL_VIDEO_VULKAN
 0

	)

186 
	#SDL_POWER_MACOSX
 1

	)

189 
	#SDL_FILESYSTEM_COCOA
 1

	)

192 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

193 #ifde‡
__µc__


194 
	#SDL_ALTIVEC_BLITTERS
 1

	)

	@SDL2/include/SDL_config_minimal.h

22 #i‚de‡
SDL_c⁄fig_möimÆ_h_


23 
	#SDL_c⁄fig_möimÆ_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

34 
	#HAVE_STDARG_H
 1

	)

35 
	#HAVE_STDDEF_H
 1

	)

38 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER < 1600)

40 
	tsize_t
;

41 sig√d 
	töt8_t
;

42 
	tuöt8_t
;

43 sig√d 
	töt16_t
;

44 
	tuöt16_t
;

45 sig√d 
	töt32_t
;

46 
	tuöt32_t
;

47 sig√d 
	töt64_t
;

48 
	tuöt64_t
;

49 
	tuöçå_t
;

51 
	#HAVE_STDINT_H
 1

	)

54 #ifde‡
__GNUC__


55 
	#HAVE_GCC_SYNC_LOCK_TEST_AND_SET
 1

	)

59 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

62 
	#SDL_JOYSTICK_DISABLED
 1

	)

65 
	#SDL_HAPTIC_DISABLED
 1

	)

68 
	#SDL_LOADSO_DISABLED
 1

	)

71 
	#SDL_THREADS_DISABLED
 1

	)

74 
	#SDL_TIMERS_DISABLED
 1

	)

77 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

80 
	#SDL_FILESYSTEM_DUMMY
 1

	)

	@SDL2/include/SDL_config_pandora.h

22 #i‚de‡
SDL_c⁄fig_∑nd‹a_h_


23 
	#SDL_c⁄fig_∑nd‹a_h_


	)

24 
	#SDL_c⁄fig_h_


	)

29 
	~"SDL_∂©f‹m.h
"

31 #ifde‡
__LP64__


32 
	#SIZEOF_VOIDP
 8

	)

34 
	#SIZEOF_VOIDP
 4

	)

37 
	#SDL_BYTEORDER
 1234

	)

39 
	#HAVE_ALLOCA_H
 1

	)

40 
	#HAVE_SYS_TYPES_H
 1

	)

41 
	#HAVE_STDIO_H
 1

	)

42 
	#STDC_HEADERS
 1

	)

43 
	#HAVE_STDLIB_H
 1

	)

44 
	#HAVE_STDARG_H
 1

	)

45 
	#HAVE_MALLOC_H
 1

	)

46 
	#HAVE_MEMORY_H
 1

	)

47 
	#HAVE_STRING_H
 1

	)

48 
	#HAVE_STRINGS_H
 1

	)

49 
	#HAVE_INTTYPES_H
 1

	)

50 
	#HAVE_STDINT_H
 1

	)

51 
	#HAVE_CTYPE_H
 1

	)

52 
	#HAVE_MATH_H
 1

	)

53 
	#HAVE_ICONV_H
 1

	)

54 
	#HAVE_SIGNAL_H
 1

	)

55 
	#HAVE_MALLOC
 1

	)

56 
	#HAVE_CALLOC
 1

	)

57 
	#HAVE_REALLOC
 1

	)

58 
	#HAVE_FREE
 1

	)

59 
	#HAVE_ALLOCA
 1

	)

60 
	#HAVE_GETENV
 1

	)

61 
	#HAVE_SETENV
 1

	)

62 
	#HAVE_PUTENV
 1

	)

63 
	#HAVE_UNSETENV
 1

	)

64 
	#HAVE_QSORT
 1

	)

65 
	#HAVE_ABS
 1

	)

66 
	#HAVE_BCOPY
 1

	)

67 
	#HAVE_MEMSET
 1

	)

68 
	#HAVE_MEMCPY
 1

	)

69 
	#HAVE_MEMMOVE
 1

	)

70 
	#HAVE_STRLEN
 1

	)

71 
	#HAVE_STRDUP
 1

	)

72 
	#HAVE_STRCHR
 1

	)

73 
	#HAVE_STRRCHR
 1

	)

74 
	#HAVE_STRSTR
 1

	)

75 
	#HAVE_STRTOL
 1

	)

76 
	#HAVE_STRTOUL
 1

	)

77 
	#HAVE_STRTOLL
 1

	)

78 
	#HAVE_STRTOULL
 1

	)

79 
	#HAVE_ATOI
 1

	)

80 
	#HAVE_ATOF
 1

	)

81 
	#HAVE_STRCMP
 1

	)

82 
	#HAVE_STRNCMP
 1

	)

83 
	#HAVE_STRCASECMP
 1

	)

84 
	#HAVE_STRNCASECMP
 1

	)

85 
	#HAVE_VSSCANF
 1

	)

86 
	#HAVE_VSNPRINTF
 1

	)

87 
	#HAVE_M_PI
 1

	)

88 
	#HAVE_CEIL
 1

	)

89 
	#HAVE_COPYSIGN
 1

	)

90 
	#HAVE_COS
 1

	)

91 
	#HAVE_COSF
 1

	)

92 
	#HAVE_FABS
 1

	)

93 
	#HAVE_FLOOR
 1

	)

94 
	#HAVE_LOG
 1

	)

95 
	#HAVE_SCALBN
 1

	)

96 
	#HAVE_SIN
 1

	)

97 
	#HAVE_SINF
 1

	)

98 
	#HAVE_SQRT
 1

	)

99 
	#HAVE_SQRTF
 1

	)

100 
	#HAVE_TAN
 1

	)

101 
	#HAVE_TANF
 1

	)

102 
	#HAVE_SIGACTION
 1

	)

103 
	#HAVE_SETJMP
 1

	)

104 
	#HAVE_NANOSLEEP
 1

	)

106 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

107 
	#SDL_AUDIO_DRIVER_OSS
 1

	)

109 
	#SDL_INPUT_LINUXEV
 1

	)

110 
	#SDL_INPUT_TSLIB
 1

	)

111 
	#SDL_JOYSTICK_LINUX
 1

	)

112 
	#SDL_HAPTIC_LINUX
 1

	)

114 
	#SDL_LOADSO_DLOPEN
 1

	)

116 
	#SDL_THREAD_PTHREAD
 1

	)

117 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP
 1

	)

119 
	#SDL_TIMER_UNIX
 1

	)

120 
	#SDL_FILESYSTEM_UNIX
 1

	)

122 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

123 
	#SDL_VIDEO_DRIVER_X11
 1

	)

124 
	#SDL_VIDEO_DRIVER_PANDORA
 1

	)

125 
	#SDL_VIDEO_RENDER_OGL_ES
 1

	)

126 
	#SDL_VIDEO_OPENGL_ES
 1

	)

	@SDL2/include/SDL_config_psp.h

22 #i‚de‡
SDL_c⁄fig_p•_h_


23 
	#SDL_c⁄fig_p•_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

30 #ifde‡
__GNUC__


31 
	#HAVE_GCC_SYNC_LOCK_TEST_AND_SET
 1

	)

34 
	#HAVE_GCC_ATOMICS
 1

	)

36 
	#HAVE_ALLOCA_H
 1

	)

37 
	#HAVE_SYS_TYPES_H
 1

	)

38 
	#HAVE_STDIO_H
 1

	)

39 
	#STDC_HEADERS
 1

	)

40 
	#HAVE_STRING_H
 1

	)

41 
	#HAVE_INTTYPES_H
 1

	)

42 
	#HAVE_STDINT_H
 1

	)

43 
	#HAVE_CTYPE_H
 1

	)

44 
	#HAVE_MATH_H
 1

	)

45 
	#HAVE_SIGNAL_H
 1

	)

48 
	#HAVE_MALLOC
 1

	)

49 
	#HAVE_CALLOC
 1

	)

50 
	#HAVE_REALLOC
 1

	)

51 
	#HAVE_FREE
 1

	)

52 
	#HAVE_ALLOCA
 1

	)

53 
	#HAVE_GETENV
 1

	)

54 
	#HAVE_SETENV
 1

	)

55 
	#HAVE_PUTENV
 1

	)

56 
	#HAVE_SETENV
 1

	)

57 
	#HAVE_UNSETENV
 1

	)

58 
	#HAVE_QSORT
 1

	)

59 
	#HAVE_ABS
 1

	)

60 
	#HAVE_BCOPY
 1

	)

61 
	#HAVE_MEMSET
 1

	)

62 
	#HAVE_MEMCPY
 1

	)

63 
	#HAVE_MEMMOVE
 1

	)

64 
	#HAVE_MEMCMP
 1

	)

65 
	#HAVE_STRLEN
 1

	)

66 
	#HAVE_STRLCPY
 1

	)

67 
	#HAVE_STRLCAT
 1

	)

68 
	#HAVE_STRDUP
 1

	)

69 
	#HAVE_STRCHR
 1

	)

70 
	#HAVE_STRRCHR
 1

	)

71 
	#HAVE_STRSTR
 1

	)

72 
	#HAVE_STRTOL
 1

	)

73 
	#HAVE_STRTOUL
 1

	)

74 
	#HAVE_STRTOLL
 1

	)

75 
	#HAVE_STRTOULL
 1

	)

76 
	#HAVE_STRTOD
 1

	)

77 
	#HAVE_ATOI
 1

	)

78 
	#HAVE_ATOF
 1

	)

79 
	#HAVE_STRCMP
 1

	)

80 
	#HAVE_STRNCMP
 1

	)

81 
	#HAVE_STRCASECMP
 1

	)

82 
	#HAVE_STRNCASECMP
 1

	)

83 
	#HAVE_VSSCANF
 1

	)

84 
	#HAVE_VSNPRINTF
 1

	)

85 
	#HAVE_M_PI
 1

	)

86 
	#HAVE_ATAN
 1

	)

87 
	#HAVE_ATAN2
 1

	)

88 
	#HAVE_ACOS
 1

	)

89 
	#HAVE_ASIN
 1

	)

90 
	#HAVE_CEIL
 1

	)

91 
	#HAVE_COPYSIGN
 1

	)

92 
	#HAVE_COS
 1

	)

93 
	#HAVE_COSF
 1

	)

94 
	#HAVE_FABS
 1

	)

95 
	#HAVE_FLOOR
 1

	)

96 
	#HAVE_LOG
 1

	)

97 
	#HAVE_POW
 1

	)

98 
	#HAVE_SCALBN
 1

	)

99 
	#HAVE_SIN
 1

	)

100 
	#HAVE_SINF
 1

	)

101 
	#HAVE_SQRT
 1

	)

102 
	#HAVE_SQRTF
 1

	)

103 
	#HAVE_TAN
 1

	)

104 
	#HAVE_TANF
 1

	)

105 
	#HAVE_SETJMP
 1

	)

106 
	#HAVE_NANOSLEEP
 1

	)

112 
	#LACKS_SYS_MMAN_H
 1

	)

115 
	#SDL_THREAD_PSP
 1

	)

118 
	#SDL_TIMERS_PSP
 1

	)

121 
	#SDL_JOYSTICK_PSP
 1

	)

124 
	#SDL_AUDIO_DRIVER_PSP
 1

	)

127 
	#SDL_VIDEO_DRIVER_PSP
 1

	)

130 
	#SDL_VIDEO_RENDER_PSP
 1

	)

132 
	#SDL_POWER_PSP
 1

	)

135 
	#SDL_FILESYSTEM_DUMMY
 1

	)

138 
	#SDL_HAPTIC_DISABLED
 1

	)

141 
	#SDL_LOADSO_DISABLED
 1

	)

	@SDL2/include/SDL_config_windows.h

22 #i‚de‡
SDL_c⁄fig_wödows_h_


23 
	#SDL_c⁄fig_wödows_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

30 #i‡!
deföed
(
_STDINT_H_
Ë&& (!deföed(
HAVE_STDINT_H
Ë|| !
_HAVE_STDINT_H
)

31 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__DMC__
Ë|| deföed(
__WATCOMC__
)

32 
	#HAVE_STDINT_H
 1

	)

33 #ñi‡
deföed
(
_MSC_VER
)

34 sig√d 
	t__öt8
 
	töt8_t
;

35 
	t__öt8
 
	tuöt8_t
;

36 sig√d 
	t__öt16
 
	töt16_t
;

37 
	t__öt16
 
	tuöt16_t
;

38 sig√d 
	t__öt32
 
	töt32_t
;

39 
	t__öt32
 
	tuöt32_t
;

40 sig√d 
	t__öt64
 
	töt64_t
;

41 
	t__öt64
 
	tuöt64_t
;

42 #i‚de‡
_UINTPTR_T_DEFINED


43 #ifde‡ 
_WIN64


44 
	t__öt64
 
	tuöçå_t
;

46 
	tuöçå_t
;

48 
	#_UINTPTR_T_DEFINED


	)

51 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
DWORD_PTR
)))

52 
	#DWORD_PTR
 
DWORD


	)

54 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
LONG_PTR
)))

55 
	#LONG_PTR
 
LONG


	)

58 sig√d 
	töt8_t
;

59 
	tuöt8_t
;

60 sig√d 
	töt16_t
;

61 
	tuöt16_t
;

62 sig√d 
	töt32_t
;

63 
	tuöt32_t
;

64 sig√d 
	töt64_t
;

65 
	tuöt64_t
;

66 #i‚de‡
_SIZE_T_DEFINED_


67 
	#_SIZE_T_DEFINED_


	)

68 
	tsize_t
;

70 
	tuöçå_t
;

74 #ifde‡
_WIN64


75 
	#SIZEOF_VOIDP
 8

	)

77 
	#SIZEOF_VOIDP
 4

	)

80 
	#HAVE_DDRAW_H
 1

	)

81 
	#HAVE_DINPUT_H
 1

	)

82 
	#HAVE_DSOUND_H
 1

	)

83 
	#HAVE_DXGI_H
 1

	)

84 
	#HAVE_XINPUT_H
 1

	)

87 #ifde‡
HAVE_LIBC


89 
	#HAVE_STDIO_H
 1

	)

90 
	#STDC_HEADERS
 1

	)

91 
	#HAVE_STRING_H
 1

	)

92 
	#HAVE_CTYPE_H
 1

	)

93 
	#HAVE_MATH_H
 1

	)

94 
	#HAVE_SIGNAL_H
 1

	)

97 
	#HAVE_MALLOC
 1

	)

98 
	#HAVE_CALLOC
 1

	)

99 
	#HAVE_REALLOC
 1

	)

100 
	#HAVE_FREE
 1

	)

101 
	#HAVE_ALLOCA
 1

	)

102 
	#HAVE_QSORT
 1

	)

103 
	#HAVE_ABS
 1

	)

104 
	#HAVE_MEMSET
 1

	)

105 
	#HAVE_MEMCPY
 1

	)

106 
	#HAVE_MEMMOVE
 1

	)

107 
	#HAVE_MEMCMP
 1

	)

108 
	#HAVE_STRLEN
 1

	)

109 
	#HAVE__STRREV
 1

	)

110 
	#HAVE__STRUPR
 1

	)

111 
	#HAVE__STRLWR
 1

	)

112 
	#HAVE_STRCHR
 1

	)

113 
	#HAVE_STRRCHR
 1

	)

114 
	#HAVE_STRSTR
 1

	)

115 
	#HAVE__LTOA
 1

	)

116 
	#HAVE__ULTOA
 1

	)

117 
	#HAVE_STRTOL
 1

	)

118 
	#HAVE_STRTOUL
 1

	)

119 
	#HAVE_STRTOD
 1

	)

120 
	#HAVE_ATOI
 1

	)

121 
	#HAVE_ATOF
 1

	)

122 
	#HAVE_STRCMP
 1

	)

123 
	#HAVE_STRNCMP
 1

	)

124 
	#HAVE__STRICMP
 1

	)

125 
	#HAVE__STRNICMP
 1

	)

126 
	#HAVE_ATAN
 1

	)

127 
	#HAVE_ATAN2
 1

	)

128 
	#HAVE_ACOS
 1

	)

129 
	#HAVE_ASIN
 1

	)

130 
	#HAVE_CEIL
 1

	)

131 
	#HAVE_COS
 1

	)

132 
	#HAVE_COSF
 1

	)

133 
	#HAVE_FABS
 1

	)

134 
	#HAVE_FLOOR
 1

	)

135 
	#HAVE_LOG
 1

	)

136 
	#HAVE_POW
 1

	)

137 
	#HAVE_SIN
 1

	)

138 
	#HAVE_SINF
 1

	)

139 
	#HAVE_SQRT
 1

	)

140 
	#HAVE_SQRTF
 1

	)

141 
	#HAVE_TAN
 1

	)

142 
	#HAVE_TANF
 1

	)

143 #i‡
_MSC_VER
 >= 1800

144 
	#HAVE_STRTOLL
 1

	)

145 
	#HAVE_VSSCANF
 1

	)

146 
	#HAVE_COPYSIGN
 1

	)

147 
	#HAVE_SCALBN
 1

	)

149 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
_USE_MATH_DEFINES
)

150 
	#HAVE_M_PI
 1

	)

153 
	#HAVE_STDARG_H
 1

	)

154 
	#HAVE_STDDEF_H
 1

	)

158 
	#SDL_AUDIO_DRIVER_WASAPI
 1

	)

159 
	#SDL_AUDIO_DRIVER_DSOUND
 1

	)

160 
	#SDL_AUDIO_DRIVER_XAUDIO2
 0

	)

161 
	#SDL_AUDIO_DRIVER_WINMM
 1

	)

162 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

163 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

166 
	#SDL_JOYSTICK_DINPUT
 1

	)

167 
	#SDL_JOYSTICK_XINPUT
 1

	)

168 
	#SDL_HAPTIC_DINPUT
 1

	)

169 
	#SDL_HAPTIC_XINPUT
 1

	)

172 
	#SDL_LOADSO_WINDOWS
 1

	)

175 
	#SDL_THREAD_WINDOWS
 1

	)

178 
	#SDL_TIMER_WINDOWS
 1

	)

181 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

182 
	#SDL_VIDEO_DRIVER_WINDOWS
 1

	)

184 #i‚de‡
SDL_VIDEO_RENDER_D3D


185 
	#SDL_VIDEO_RENDER_D3D
 1

	)

187 #i‚de‡
SDL_VIDEO_RENDER_D3D11


188 
	#SDL_VIDEO_RENDER_D3D11
 0

	)

192 #i‚de‡
SDL_VIDEO_OPENGL


193 
	#SDL_VIDEO_OPENGL
 1

	)

195 #i‚de‡
SDL_VIDEO_OPENGL_WGL


196 
	#SDL_VIDEO_OPENGL_WGL
 1

	)

198 #i‚de‡
SDL_VIDEO_RENDER_OGL


199 
	#SDL_VIDEO_RENDER_OGL
 1

	)

201 #i‚de‡
SDL_VIDEO_RENDER_OGL_ES2


202 
	#SDL_VIDEO_RENDER_OGL_ES2
 1

	)

204 #i‚de‡
SDL_VIDEO_OPENGL_ES2


205 
	#SDL_VIDEO_OPENGL_ES2
 1

	)

207 #i‚de‡
SDL_VIDEO_OPENGL_EGL


208 
	#SDL_VIDEO_OPENGL_EGL
 1

	)

212 
	#SDL_VIDEO_VULKAN
 1

	)

215 
	#SDL_POWER_WINDOWS
 1

	)

218 
	#SDL_FILESYSTEM_WINDOWS
 1

	)

221 #i‚de‡
_WIN64


222 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL2/include/SDL_config_winrt.h

22 #i‚de‡
SDL_c⁄fig_wöπ_h_


23 
	#SDL_c⁄fig_wöπ_h_


	)

24 
	#SDL_c⁄fig_h_


	)

26 
	~"SDL_∂©f‹m.h
"

31 
	~<sdkddkvî.h
>

36 #i‚de‡
NTDDI_WINBLUE


37 
	#NTDDI_WINBLUE
 0x06030000

	)

39 #i‚de‡
NTDDI_WIN10


40 
	#NTDDI_WIN10
 0x0A000000

	)

45 #i‡!
deföed
(
_STDINT_H_
Ë&& (!deföed(
HAVE_STDINT_H
Ë|| !
_HAVE_STDINT_H
)

46 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__DMC__
Ë|| deföed(
__WATCOMC__
)

47 
	#HAVE_STDINT_H
 1

	)

48 #ñi‡
deföed
(
_MSC_VER
)

49 sig√d 
	t__öt8
 
	töt8_t
;

50 
	t__öt8
 
	tuöt8_t
;

51 sig√d 
	t__öt16
 
	töt16_t
;

52 
	t__öt16
 
	tuöt16_t
;

53 sig√d 
	t__öt32
 
	töt32_t
;

54 
	t__öt32
 
	tuöt32_t
;

55 sig√d 
	t__öt64
 
	töt64_t
;

56 
	t__öt64
 
	tuöt64_t
;

57 #i‚de‡
_UINTPTR_T_DEFINED


58 #ifde‡ 
_WIN64


59 
	t__öt64
 
	tuöçå_t
;

61 
	tuöçå_t
;

63 
	#_UINTPTR_T_DEFINED


	)

66 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
DWORD_PTR
)))

67 
	#DWORD_PTR
 
DWORD


	)

69 #i‡((
_MSC_VER
 <1200Ë&& (!
deföed
(
LONG_PTR
)))

70 
	#LONG_PTR
 
LONG


	)

73 sig√d 
	töt8_t
;

74 
	tuöt8_t
;

75 sig√d 
	töt16_t
;

76 
	tuöt16_t
;

77 sig√d 
	töt32_t
;

78 
	tuöt32_t
;

79 sig√d 
	töt64_t
;

80 
	tuöt64_t
;

81 #i‚de‡
_SIZE_T_DEFINED_


82 
	#_SIZE_T_DEFINED_


	)

83 
	tsize_t
;

85 
	tuöçå_t
;

89 #ifde‡
_WIN64


90 
	#SIZEOF_VOIDP
 8

	)

92 
	#SIZEOF_VOIDP
 4

	)

96 
	#HAVE_DXGI_H
 1

	)

97 #i‡
WINAPI_FAMILY
 !
WINAPI_FAMILY_PHONE_APP


98 
	#HAVE_XINPUT_H
 1

	)

100 
	#HAVE_LIBC
 1

	)

101 
	#HAVE_STDIO_H
 1

	)

102 
	#STDC_HEADERS
 1

	)

103 
	#HAVE_STRING_H
 1

	)

104 
	#HAVE_CTYPE_H
 1

	)

105 
	#HAVE_MATH_H
 1

	)

106 
	#HAVE_FLOAT_H
 1

	)

107 
	#HAVE_SIGNAL_H
 1

	)

110 
	#HAVE_MALLOC
 1

	)

111 
	#HAVE_CALLOC
 1

	)

112 
	#HAVE_REALLOC
 1

	)

113 
	#HAVE_FREE
 1

	)

114 
	#HAVE_ALLOCA
 1

	)

115 
	#HAVE_QSORT
 1

	)

116 
	#HAVE_ABS
 1

	)

117 
	#HAVE_MEMSET
 1

	)

118 
	#HAVE_MEMCPY
 1

	)

119 
	#HAVE_MEMMOVE
 1

	)

120 
	#HAVE_MEMCMP
 1

	)

121 
	#HAVE_STRLEN
 1

	)

122 
	#HAVE__STRREV
 1

	)

123 
	#HAVE__STRUPR
 1

	)

125 
	#HAVE_STRCHR
 1

	)

126 
	#HAVE_STRRCHR
 1

	)

127 
	#HAVE_STRSTR
 1

	)

131 
	#HAVE_STRTOL
 1

	)

132 
	#HAVE_STRTOUL
 1

	)

134 
	#HAVE_STRTOD
 1

	)

135 
	#HAVE_ATOI
 1

	)

136 
	#HAVE_ATOF
 1

	)

137 
	#HAVE_STRCMP
 1

	)

138 
	#HAVE_STRNCMP
 1

	)

139 
	#HAVE__STRICMP
 1

	)

140 
	#HAVE__STRNICMP
 1

	)

141 
	#HAVE_VSNPRINTF
 1

	)

143 
	#HAVE_M_PI
 1

	)

144 
	#HAVE_ATAN
 1

	)

145 
	#HAVE_ATAN2
 1

	)

146 
	#HAVE_CEIL
 1

	)

147 
	#HAVE__COPYSIGN
 1

	)

148 
	#HAVE_COS
 1

	)

149 
	#HAVE_COSF
 1

	)

150 
	#HAVE_FABS
 1

	)

151 
	#HAVE_FLOOR
 1

	)

152 
	#HAVE_LOG
 1

	)

153 
	#HAVE_POW
 1

	)

155 
	#HAVE__SCALB
 1

	)

156 
	#HAVE_SIN
 1

	)

157 
	#HAVE_SINF
 1

	)

158 
	#HAVE_SQRT
 1

	)

159 
	#HAVE_SQRTF
 1

	)

160 
	#HAVE_TAN
 1

	)

161 
	#HAVE_TANF
 1

	)

162 
	#HAVE__FSEEKI64
 1

	)

165 
	#SDL_AUDIO_DRIVER_XAUDIO2
 1

	)

166 
	#SDL_AUDIO_DRIVER_DISK
 1

	)

167 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

170 #i‡
WINAPI_FAMILY
 =
WINAPI_FAMILY_PHONE_APP


171 
	#SDL_JOYSTICK_DISABLED
 1

	)

172 
	#SDL_HAPTIC_DISABLED
 1

	)

174 
	#SDL_JOYSTICK_XINPUT
 1

	)

175 
	#SDL_HAPTIC_XINPUT
 1

	)

179 
	#SDL_LOADSO_WINDOWS
 1

	)

182 #i‡(
NTDDI_VERSION
 >
NTDDI_WINBLUE
)

183 
	#SDL_THREAD_WINDOWS
 1

	)

186 
	#SDL_THREAD_STDCPP
 1

	)

190 
	#SDL_TIMER_WINDOWS
 1

	)

193 
	#SDL_VIDEO_DRIVER_WINRT
 1

	)

194 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

197 
	#SDL_VIDEO_OPENGL_ES2
 1

	)

198 
	#SDL_VIDEO_OPENGL_EGL
 1

	)

201 
	#SDL_VIDEO_RENDER_D3D11
 1

	)

203 #i‡
SDL_VIDEO_OPENGL_ES2


204 
	#SDL_VIDEO_RENDER_OGL_ES2
 1

	)

208 
	#SDL_POWER_WINRT
 1

	)

211 #i‚de‡
_WIN64


212 
	#SDL_ASSEMBLY_ROUTINES
 1

	)

	@SDL2/include/SDL_config_wiz.h

22 #i‚de‡
SDL_c⁄fig_wiz_h_


23 
	#SDL_c⁄fig_wiz_h_


	)

24 
	#SDL_c⁄fig_h_


	)

29 
	~"SDL_∂©f‹m.h
"

31 
	#SDL_BYTEORDER
 1234

	)

33 
	#HAVE_ALLOCA_H
 1

	)

34 
	#HAVE_SYS_TYPES_H
 1

	)

35 
	#HAVE_STDIO_H
 1

	)

36 
	#STDC_HEADERS
 1

	)

37 
	#HAVE_STDLIB_H
 1

	)

38 
	#HAVE_STDARG_H
 1

	)

39 
	#HAVE_MALLOC_H
 1

	)

40 
	#HAVE_MEMORY_H
 1

	)

41 
	#HAVE_STRING_H
 1

	)

42 
	#HAVE_STRINGS_H
 1

	)

43 
	#HAVE_INTTYPES_H
 1

	)

44 
	#HAVE_STDINT_H
 1

	)

45 
	#HAVE_CTYPE_H
 1

	)

46 
	#HAVE_MATH_H
 1

	)

47 
	#HAVE_ICONV_H
 1

	)

48 
	#HAVE_SIGNAL_H
 1

	)

49 
	#HAVE_MALLOC
 1

	)

50 
	#HAVE_CALLOC
 1

	)

51 
	#HAVE_REALLOC
 1

	)

52 
	#HAVE_FREE
 1

	)

53 
	#HAVE_ALLOCA
 1

	)

54 
	#HAVE_GETENV
 1

	)

55 
	#HAVE_SETENV
 1

	)

56 
	#HAVE_PUTENV
 1

	)

57 
	#HAVE_UNSETENV
 1

	)

58 
	#HAVE_QSORT
 1

	)

59 
	#HAVE_ABS
 1

	)

60 
	#HAVE_BCOPY
 1

	)

61 
	#HAVE_MEMSET
 1

	)

62 
	#HAVE_MEMCPY
 1

	)

63 
	#HAVE_MEMMOVE
 1

	)

64 
	#HAVE_STRLEN
 1

	)

65 
	#HAVE_STRDUP
 1

	)

66 
	#HAVE_STRCHR
 1

	)

67 
	#HAVE_STRRCHR
 1

	)

68 
	#HAVE_STRSTR
 1

	)

69 
	#HAVE_STRTOL
 1

	)

70 
	#HAVE_STRTOUL
 1

	)

71 
	#HAVE_STRTOLL
 1

	)

72 
	#HAVE_STRTOULL
 1

	)

73 
	#HAVE_ATOI
 1

	)

74 
	#HAVE_ATOF
 1

	)

75 
	#HAVE_STRCMP
 1

	)

76 
	#HAVE_STRNCMP
 1

	)

77 
	#HAVE_STRCASECMP
 1

	)

78 
	#HAVE_STRNCASECMP
 1

	)

79 
	#HAVE_VSSCANF
 1

	)

80 
	#HAVE_VSNPRINTF
 1

	)

81 
	#HAVE_M_PI
 1

	)

82 
	#HAVE_CEIL
 1

	)

83 
	#HAVE_COPYSIGN
 1

	)

84 
	#HAVE_COS
 1

	)

85 
	#HAVE_COSF
 1

	)

86 
	#HAVE_FABS
 1

	)

87 
	#HAVE_FLOOR
 1

	)

88 
	#HAVE_LOG
 1

	)

89 
	#HAVE_SCALBN
 1

	)

90 
	#HAVE_SIN
 1

	)

91 
	#HAVE_SINF
 1

	)

92 
	#HAVE_SQRT
 1

	)

93 
	#HAVE_SQRTF
 1

	)

94 
	#HAVE_TAN
 1

	)

95 
	#HAVE_TANF
 1

	)

96 
	#HAVE_SIGACTION
 1

	)

97 
	#HAVE_SETJMP
 1

	)

98 
	#HAVE_NANOSLEEP
 1

	)

99 
	#HAVE_POW
 1

	)

101 
	#SDL_AUDIO_DRIVER_DUMMY
 1

	)

102 
	#SDL_AUDIO_DRIVER_OSS
 1

	)

104 
	#SDL_INPUT_LINUXEV
 1

	)

105 
	#SDL_INPUT_TSLIB
 1

	)

106 
	#SDL_JOYSTICK_LINUX
 1

	)

107 
	#SDL_HAPTIC_LINUX
 1

	)

109 
	#SDL_LOADSO_DLOPEN
 1

	)

111 
	#SDL_THREAD_PTHREAD
 1

	)

112 
	#SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP
 1

	)

114 
	#SDL_TIMER_UNIX
 1

	)

116 
	#SDL_VIDEO_DRIVER_DUMMY
 1

	)

117 
	#SDL_VIDEO_DRIVER_PANDORA
 1

	)

118 
	#SDL_VIDEO_RENDER_OGL_ES
 1

	)

119 
	#SDL_VIDEO_OPENGL_ES
 1

	)

	@SDL2/include/SDL_copying.h

	@SDL2/include/SDL_cpuinfo.h

28 #i‚de‡
SDL_˝uöfo_h_


29 
	#SDL_˝uöfo_h_


	)

31 
	~"SDL_°döc.h
"

35 #i‡
deföed
(
_MSC_VER
Ë&& (_MSC_VER >1500Ë&& (deföed(
_M_IX86
Ë|| deföed(
_M_X64
))

36 #ifde‡
__˛™g__


38 #unde‡
__MMX__


39 #unde‡
__SSE__


40 #unde‡
__SSE2__


42 
	~<öåö.h
>

43 #i‚de‡
_WIN64


44 #i‚de‡
__MMX__


45 
	#__MMX__


	)

47 #i‚de‡
__3dNOW__


48 
	#__3dNOW__


	)

51 #i‚de‡
__SSE__


52 
	#__SSE__


	)

54 #i‚de‡
__SSE2__


55 
	#__SSE2__


	)

58 #ñi‡
deföed
(
__MINGW64_VERSION_MAJOR
)

59 
	~<öåö.h
>

62 #i‡
deföed
(
HAVE_ALTIVEC_H
Ë&& deföed(
__ALTIVEC__
Ë&& !deföed(
__APPLE_ALTIVEC__
Ë&& deföed(
SDL_ENABLE_ALTIVEC_H
)

63 
	~<Ætivec.h
>

65 #i‡!
deföed
(
SDL_DISABLE_ARM_NEON_H
)

66 #i‡
deföed
(
__ARM_NEON
)

67 
	~<¨m_√⁄.h
>

68 #ñi‡
deföed
(
__WINDOWS__
Ë|| deföed(
__WINRT__
)

70 #i‡
deföed
(
_M_ARM
)

71 
	~<¨möå.h
>

72 
	~<¨m_√⁄.h
>

73 
	#__ARM_NEON
 1

	)

75 #i‡
deföed
 (
_M_ARM64
)

76 
	~<¨m64öå.h
>

77 
	~<¨m64_√⁄.h
>

78 
	#__ARM_NEON
 1

	)

82 #i‡
deföed
(
__3dNOW__
Ë&& !deföed(
SDL_DISABLE_MM3DNOW_H
)

83 
	~<mm3dnow.h
>

85 #i‡
deföed
(
HAVE_IMMINTRIN_H
Ë&& !deföed(
SDL_DISABLE_IMMINTRIN_H
)

86 
	~<immöåö.h
>

88 #i‡
deföed
(
__MMX__
Ë&& !deföed(
SDL_DISABLE_MMINTRIN_H
)

89 
	~<mmöåö.h
>

91 #i‡
deföed
(
__SSE__
Ë&& !deföed(
SDL_DISABLE_XMMINTRIN_H
)

92 
	~<xmmöåö.h
>

94 #i‡
deföed
(
__SSE2__
Ë&& !deföed(
SDL_DISABLE_EMMINTRIN_H
)

95 
	~<emmöåö.h
>

97 #i‡
deföed
(
__SSE3__
Ë&& !deföed(
SDL_DISABLE_PMMINTRIN_H
)

98 
	~<pmmöåö.h
>

103 
	~"begö_code.h
"

105 #ifde‡
__˝lu•lus


114 
	#SDL_CACHELINE_SIZE
 128

	)

119 
DECLSPEC
 
SDLCALL
 
SDL_GëCPUCou¡
();

127 
DECLSPEC
 
SDLCALL
 
SDL_GëCPUCacheLöeSize
();

132 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasRDTSC
();

137 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasA…iVec
();

142 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasMMX
();

147 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Has3DNow
();

152 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE
();

157 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE2
();

162 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE3
();

167 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE41
();

172 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasSSE42
();

177 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasAVX
();

182 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasAVX2
();

187 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasAVX512F
();

192 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasARMSIMD
();

197 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasNEON
();

202 
DECLSPEC
 
SDLCALL
 
SDL_GëSy°emRAM
();

216 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_SIMDGëAlignmít
();

251 
DECLSPEC
 * 
SDLCALL
 
SDL_SIMDAŒoc
(c⁄° 
size_t
 
Àn
);

264 
DECLSPEC
 
SDLCALL
 
SDL_SIMDFªe
(*
±r
);

268 #ifde‡
__˝lu•lus


271 
	~"˛o£_code.h
"

	@SDL2/include/SDL_egl.h

27 #i‡!
deföed
(
_MSC_VER
Ë&& !deföed(
__ANDROID__
)

29 
	~<EGL/egl.h
>

30 
	~<EGL/egÀxt.h
>

36 #i‚de‡
__khΩœtf‹m_h_


37 
	#__khΩœtf‹m_h_


	)

135 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
Ë&& !deföed(
SDL_VIDEO_STATIC_ANGLE
)

136 
	#KHRONOS_APICALL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

137 #ñi‡
deföed
 (
__SYMBIAN32__
)

138 
	#KHRONOS_APICALL
 
IMPORT_C


	)

140 
	#KHRONOS_APICALL


	)

149 #i‡
deföed
(
_WIN32
Ë&& !deföed(
_WIN32_WCE
Ë&& !deföed(
__SCITECH_SNAP__
)

151 
	#KHRONOS_APIENTRY
 
__°dˇŒ


	)

153 
	#KHRONOS_APIENTRY


	)

161 #i‡
deföed
 (
__ARMCC_2__
)

162 
	#KHRONOS_APIATTRIBUTES
 
__so·Â


	)

164 
	#KHRONOS_APIATTRIBUTES


	)

170 #i‡(
deföed
(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__GNUC__
Ë|| deföed(
__SCO__
Ë|| deföed(
__USLC__
)

176 
	~<°döt.h
>

177 
öt32_t
 
	tkhr⁄os_öt32_t
;

178 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

179 
öt64_t
 
	tkhr⁄os_öt64_t
;

180 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

181 
	#KHRONOS_SUPPORT_INT64
 1

	)

182 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

184 #ñi‡
deföed
(
__VMS
 ) || deföed(
__sgi
)

189 
	~<öây≥s.h
>

190 
öt32_t
 
	tkhr⁄os_öt32_t
;

191 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

192 
öt64_t
 
	tkhr⁄os_öt64_t
;

193 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

194 
	#KHRONOS_SUPPORT_INT64
 1

	)

195 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

197 #ñi‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

202 
__öt32
 
	tkhr⁄os_öt32_t
;

203 
	t__öt32
 
	tkhr⁄os_uöt32_t
;

204 
__öt64
 
	tkhr⁄os_öt64_t
;

205 
	t__öt64
 
	tkhr⁄os_uöt64_t
;

206 
	#KHRONOS_SUPPORT_INT64
 1

	)

207 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

209 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

214 
	tkhr⁄os_öt32_t
;

215 
	tkhr⁄os_uöt32_t
;

216 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

217 
	tkhr⁄os_öt64_t
;

218 
	tkhr⁄os_uöt64_t
;

220 
	tkhr⁄os_öt64_t
;

221 
	tkhr⁄os_uöt64_t
;

223 
	#KHRONOS_SUPPORT_INT64
 1

	)

224 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

231 
	tkhr⁄os_öt32_t
;

232 
	tkhr⁄os_uöt32_t
;

233 
	#KHRONOS_SUPPORT_INT64
 0

	)

234 
	#KHRONOS_SUPPORT_FLOAT
 0

	)

241 
	~<°döt.h
>

242 
öt32_t
 
	tkhr⁄os_öt32_t
;

243 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

244 
öt64_t
 
	tkhr⁄os_öt64_t
;

245 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

246 
	#KHRONOS_SUPPORT_INT64
 1

	)

247 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

255 sig√d 
	tkhr⁄os_öt8_t
;

256 
	tkhr⁄os_uöt8_t
;

257 sig√d 
	tkhr⁄os_öt16_t
;

258 
	tkhr⁄os_uöt16_t
;

265 #ifde‡
_WIN64


266 sig√d 
	tkhr⁄os_öçå_t
;

267 
	tkhr⁄os_uöçå_t
;

268 sig√d 
	tkhr⁄os_ssize_t
;

269 
	tkhr⁄os_usize_t
;

271 sig√d 
	tkhr⁄os_öçå_t
;

272 
	tkhr⁄os_uöçå_t
;

273 sig√d 
	tkhr⁄os_ssize_t
;

274 
	tkhr⁄os_usize_t
;

277 #i‡
KHRONOS_SUPPORT_FLOAT


281 
	tkhr⁄os_Êﬂt_t
;

284 #i‡
KHRONOS_SUPPORT_INT64


294 
khr⁄os_uöt64_t
 
	tkhr⁄os_utime_«no£c⁄ds_t
;

295 
khr⁄os_öt64_t
 
	tkhr⁄os_°ime_«no£c⁄ds_t
;

301 #i‚de‡
KHRONOS_MAX_ENUM


302 
	#KHRONOS_MAX_ENUM
 0x7FFFFFFF

	)

312 
	mKHRONOS_FALSE
 = 0,

313 
	mKHRONOS_TRUE
 = 1,

314 
	mKHRONOS_BOOLEAN_ENUM_FORCE_SIZE
 = 
KHRONOS_MAX_ENUM


315 } 
	tkhr⁄os_boﬁón_íum_t
;

320 #i‚de‡
__egÕœtf‹m_h_


321 
	#__egÕœtf‹m_h_


	)

368 #i‚de‡
EGLAPI


369 
	#EGLAPI
 
KHRONOS_APICALL


	)

372 #i‚de‡
EGLAPIENTRY


373 
	#EGLAPIENTRY
 
KHRONOS_APIENTRY


	)

375 
	#EGLAPIENTRYP
 
EGLAPIENTRY
*

	)

389 #i‡
deföed
(
_WIN32
Ë|| deföed(
__VC32__
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

390 #i‚de‡
WIN32_LEAN_AND_MEAN


391 
	#WIN32_LEAN_AND_MEAN
 1

	)

393 #i‚de‡
NOMINMAX


394 
	#NOMINMAX


	)

396 
	~<wödows.h
>

398 #i‡
__WINRT__


399 
	~<Unknwn.h
>

400 
IUnknown
 * 
	tEGLN©iveWödowTy≥
;

401 
IUnknown
 * 
	tEGLN©ivePixm≠Ty≥
;

402 
IUnknown
 * 
	tEGLN©iveDi•œyTy≥
;

404 
HDC
 
	tEGLN©iveDi•œyTy≥
;

405 
HBITMAP
 
	tEGLN©ivePixm≠Ty≥
;

406 
HWND
 
	tEGLN©iveWödowTy≥
;

409 #ñi‡
deföed
(
__WINSCW__
Ë|| deföed(
__SYMBIAN32__
)

411 
	tEGLN©iveDi•œyTy≥
;

412 *
	tEGLN©iveWödowTy≥
;

413 *
	tEGLN©ivePixm≠Ty≥
;

415 #ñi‡
deföed
(
WL_EGL_PLATFORM
)

417 
wl_di•œy
 *
	tEGLN©iveDi•œyTy≥
;

418 
wl_egl_pixm≠
 *
	tEGLN©ivePixm≠Ty≥
;

419 
wl_egl_wödow
 *
	tEGLN©iveWödowTy≥
;

421 #ñi‡
deföed
(
__GBM__
)

423 
gbm_devi˚
 *
	tEGLN©iveDi•œyTy≥
;

424 
gbm_bo
 *
	tEGLN©ivePixm≠Ty≥
;

425 *
	tEGLN©iveWödowTy≥
;

427 #ñi‡
deföed
(
__ANDROID__
)

429 
	gAN©iveWödow
;

430 
	gegl_«tive_pixm≠_t
;

432 
AN©iveWödow
 *
	tEGLN©iveWödowTy≥
;

433 
egl_«tive_pixm≠_t
 *
	tEGLN©ivePixm≠Ty≥
;

434 *
	tEGLN©iveDi•œyTy≥
;

436 #ñi‡
deföed
(
MIR_EGL_PLATFORM
)

438 
	~<mú_toﬁkô/mú_˛õ¡_libøry.h
>

439 
MúEGLN©iveDi•œyTy≥
 
	tEGLN©iveDi•œyTy≥
;

440 *
	tEGLN©ivePixm≠Ty≥
;

441 
MúEGLN©iveWödowTy≥
 
	tEGLN©iveWödowTy≥
;

443 #ñi‡
deföed
(
__unix__
)

445 #ifde‡
MESA_EGL_NO_X11_HEADERS


447 *
	tEGLN©iveDi•œyTy≥
;

448 
khr⁄os_uöçå_t
 
	tEGLN©ivePixm≠Ty≥
;

449 
khr⁄os_uöçå_t
 
	tEGLN©iveWödowTy≥
;

454 
	~<X11/Xlib.h
>

455 
	~<X11/Xutû.h
>

457 
Di•œy
 *
	tEGLN©iveDi•œyTy≥
;

458 
Pixm≠
 
	tEGLN©ivePixm≠Ty≥
;

459 
Wödow
 
	tEGLN©iveWödowTy≥
;

468 
EGLN©iveDi•œyTy≥
 
	tN©iveDi•œyTy≥
;

469 
EGLN©ivePixm≠Ty≥
 
	tN©ivePixm≠Ty≥
;

470 
EGLN©iveWödowTy≥
 
	tN©iveWödowTy≥
;

480 
khr⁄os_öt32_t
 
	tEGLöt
;

484 #i‚de‡
__egl_h_


485 
	#__egl_h_
 1

	)

487 #ifde‡
__˝lu•lus


535 #i‚de‡
EGL_VERSION_1_0


536 
	#EGL_VERSION_1_0
 1

	)

537 
	tEGLBoﬁón
;

538 *
	tEGLDi•œy
;

539 *
	tEGLC⁄fig
;

540 *
	tEGLSurÁ˚
;

541 *
	tEGLC⁄ãxt
;

542 (*
	t__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
)();

543 
	#EGL_ALPHA_SIZE
 0x3021

	)

544 
	#EGL_BAD_ACCESS
 0x3002

	)

545 
	#EGL_BAD_ALLOC
 0x3003

	)

546 
	#EGL_BAD_ATTRIBUTE
 0x3004

	)

547 
	#EGL_BAD_CONFIG
 0x3005

	)

548 
	#EGL_BAD_CONTEXT
 0x3006

	)

549 
	#EGL_BAD_CURRENT_SURFACE
 0x3007

	)

550 
	#EGL_BAD_DISPLAY
 0x3008

	)

551 
	#EGL_BAD_MATCH
 0x3009

	)

552 
	#EGL_BAD_NATIVE_PIXMAP
 0x300A

	)

553 
	#EGL_BAD_NATIVE_WINDOW
 0x300B

	)

554 
	#EGL_BAD_PARAMETER
 0x300C

	)

555 
	#EGL_BAD_SURFACE
 0x300D

	)

556 
	#EGL_BLUE_SIZE
 0x3022

	)

557 
	#EGL_BUFFER_SIZE
 0x3020

	)

558 
	#EGL_CONFIG_CAVEAT
 0x3027

	)

559 
	#EGL_CONFIG_ID
 0x3028

	)

560 
	#EGL_CORE_NATIVE_ENGINE
 0x305B

	)

561 
	#EGL_DEPTH_SIZE
 0x3025

	)

562 
	#EGL_DONT_CARE
 ((
EGLöt
)-1)

	)

563 
	#EGL_DRAW
 0x3059

	)

564 
	#EGL_EXTENSIONS
 0x3055

	)

565 
	#EGL_FALSE
 0

	)

566 
	#EGL_GREEN_SIZE
 0x3023

	)

567 
	#EGL_HEIGHT
 0x3056

	)

568 
	#EGL_LARGEST_PBUFFER
 0x3058

	)

569 
	#EGL_LEVEL
 0x3029

	)

570 
	#EGL_MAX_PBUFFER_HEIGHT
 0x302A

	)

571 
	#EGL_MAX_PBUFFER_PIXELS
 0x302B

	)

572 
	#EGL_MAX_PBUFFER_WIDTH
 0x302C

	)

573 
	#EGL_NATIVE_RENDERABLE
 0x302D

	)

574 
	#EGL_NATIVE_VISUAL_ID
 0x302E

	)

575 
	#EGL_NATIVE_VISUAL_TYPE
 0x302F

	)

576 
	#EGL_NONE
 0x3038

	)

577 
	#EGL_NON_CONFORMANT_CONFIG
 0x3051

	)

578 
	#EGL_NOT_INITIALIZED
 0x3001

	)

579 
	#EGL_NO_CONTEXT
 ((
EGLC⁄ãxt
)0)

	)

580 
	#EGL_NO_DISPLAY
 ((
EGLDi•œy
)0)

	)

581 
	#EGL_NO_SURFACE
 ((
EGLSurÁ˚
)0)

	)

582 
	#EGL_PBUFFER_BIT
 0x0001

	)

583 
	#EGL_PIXMAP_BIT
 0x0002

	)

584 
	#EGL_READ
 0x305A

	)

585 
	#EGL_RED_SIZE
 0x3024

	)

586 
	#EGL_SAMPLES
 0x3031

	)

587 
	#EGL_SAMPLE_BUFFERS
 0x3032

	)

588 
	#EGL_SLOW_CONFIG
 0x3050

	)

589 
	#EGL_STENCIL_SIZE
 0x3026

	)

590 
	#EGL_SUCCESS
 0x3000

	)

591 
	#EGL_SURFACE_TYPE
 0x3033

	)

592 
	#EGL_TRANSPARENT_BLUE_VALUE
 0x3035

	)

593 
	#EGL_TRANSPARENT_GREEN_VALUE
 0x3036

	)

594 
	#EGL_TRANSPARENT_RED_VALUE
 0x3037

	)

595 
	#EGL_TRANSPARENT_RGB
 0x3052

	)

596 
	#EGL_TRANSPARENT_TYPE
 0x3034

	)

597 
	#EGL_TRUE
 1

	)

598 
	#EGL_VENDOR
 0x3053

	)

599 
	#EGL_VERSION
 0x3054

	)

600 
	#EGL_WIDTH
 0x3057

	)

601 
	#EGL_WINDOW_BIT
 0x0004

	)

602 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglChoo£C⁄fig
 (
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
, 
EGLC⁄fig
 *
c⁄figs
, EGLöà
c⁄fig_size
, EGLöà*
num_c⁄fig
);

603 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglC›yBuf„rs
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLN©ivePixm≠Ty≥
 
èrgë
);

604 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
	`eglCª©eC⁄ãxt
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, EGLC⁄ãxà
sh¨e_c⁄ãxt
, c⁄° 
EGLöt
 *
©åib_li°
);

605 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglCª©ePbuf„rSurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, c⁄° 
EGLöt
 *
©åib_li°
);

606 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglCª©ePixm≠SurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, 
EGLN©ivePixm≠Ty≥
 
pixm≠
, c⁄° 
EGLöt
 *
©åib_li°
);

607 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglCª©eWödowSurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, 
EGLN©iveWödowTy≥
 
wö
, c⁄° 
EGLöt
 *
©åib_li°
);

608 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglDe°royC⁄ãxt
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
);

609 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglDe°roySurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

610 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglGëC⁄figAârib
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

611 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglGëC⁄figs
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 *
c⁄figs
, 
EGLöt
 
c⁄fig_size
, EGLöà*
num_c⁄fig
);

612 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
	`eglGëCuºítDi•œy
 ();

613 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglGëCuºítSurÁ˚
 (
EGLöt
 
ªaddøw
);

614 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
	`eglGëDi•œy
 (
EGLN©iveDi•œyTy≥
 
di•œy_id
);

615 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
	`eglGëEº‹
 ();

616 
EGLAPI
 
__eglMu°Ca°ToPr›îFun˘i⁄PoöãrTy≥
 
EGLAPIENTRY
 
	`eglGëProcAddªss
 (c⁄° *
¥o˙ame
);

617 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglInôülize
 (
EGLDi•œy
 
dpy
, 
EGLöt
 *
maj‹
, EGLöà*
mö‹
);

618 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglMakeCuºít
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
døw
, EGLSurÁ˚ 
ªad
, 
EGLC⁄ãxt
 
˘x
);

619 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglQuîyC⁄ãxt
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

620 
EGLAPI
 c⁄° *
EGLAPIENTRY
 
	`eglQuîySåög
 (
EGLDi•œy
 
dpy
, 
EGLöt
 
«me
);

621 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglQuîySurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

622 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglSw≠Buf„rs
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

623 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglTîmö©e
 (
EGLDi•œy
 
dpy
);

624 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglWaôGL
 ();

625 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglWaôN©ive
 (
EGLöt
 
ígöe
);

628 #i‚de‡
EGL_VERSION_1_1


629 
	#EGL_VERSION_1_1
 1

	)

630 
	#EGL_BACK_BUFFER
 0x3084

	)

631 
	#EGL_BIND_TO_TEXTURE_RGB
 0x3039

	)

632 
	#EGL_BIND_TO_TEXTURE_RGBA
 0x303A

	)

633 
	#EGL_CONTEXT_LOST
 0x300E

	)

634 
	#EGL_MIN_SWAP_INTERVAL
 0x303B

	)

635 
	#EGL_MAX_SWAP_INTERVAL
 0x303C

	)

636 
	#EGL_MIPMAP_TEXTURE
 0x3082

	)

637 
	#EGL_MIPMAP_LEVEL
 0x3083

	)

638 
	#EGL_NO_TEXTURE
 0x305C

	)

639 
	#EGL_TEXTURE_2D
 0x305F

	)

640 
	#EGL_TEXTURE_FORMAT
 0x3080

	)

641 
	#EGL_TEXTURE_RGB
 0x305D

	)

642 
	#EGL_TEXTURE_RGBA
 0x305E

	)

643 
	#EGL_TEXTURE_TARGET
 0x3081

	)

644 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglBödTexImage
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

645 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglRñó£TexImage
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
buf„r
);

646 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglSurÁ˚Aârib
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
©åibuã
, EGLöà
vÆue
);

647 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglSw≠I¡îvÆ
 (
EGLDi•œy
 
dpy
, 
EGLöt
 
öãrvÆ
);

650 #i‚de‡
EGL_VERSION_1_2


651 
	#EGL_VERSION_1_2
 1

	)

652 
	tEGLíum
;

653 *
	tEGLClõ¡Buf„r
;

654 
	#EGL_ALPHA_FORMAT
 0x3088

	)

655 
	#EGL_ALPHA_FORMAT_NONPRE
 0x308B

	)

656 
	#EGL_ALPHA_FORMAT_PRE
 0x308C

	)

657 
	#EGL_ALPHA_MASK_SIZE
 0x303E

	)

658 
	#EGL_BUFFER_PRESERVED
 0x3094

	)

659 
	#EGL_BUFFER_DESTROYED
 0x3095

	)

660 
	#EGL_CLIENT_APIS
 0x308D

	)

661 
	#EGL_COLORSPACE
 0x3087

	)

662 
	#EGL_COLORSPACE_sRGB
 0x3089

	)

663 
	#EGL_COLORSPACE_LINEAR
 0x308A

	)

664 
	#EGL_COLOR_BUFFER_TYPE
 0x303F

	)

665 
	#EGL_CONTEXT_CLIENT_TYPE
 0x3097

	)

666 
	#EGL_DISPLAY_SCALING
 10000

	)

667 
	#EGL_HORIZONTAL_RESOLUTION
 0x3090

	)

668 
	#EGL_LUMINANCE_BUFFER
 0x308F

	)

669 
	#EGL_LUMINANCE_SIZE
 0x303D

	)

670 
	#EGL_OPENGL_ES_BIT
 0x0001

	)

671 
	#EGL_OPENVG_BIT
 0x0002

	)

672 
	#EGL_OPENGL_ES_API
 0x30A0

	)

673 
	#EGL_OPENVG_API
 0x30A1

	)

674 
	#EGL_OPENVG_IMAGE
 0x3096

	)

675 
	#EGL_PIXEL_ASPECT_RATIO
 0x3092

	)

676 
	#EGL_RENDERABLE_TYPE
 0x3040

	)

677 
	#EGL_RENDER_BUFFER
 0x3086

	)

678 
	#EGL_RGB_BUFFER
 0x308E

	)

679 
	#EGL_SINGLE_BUFFER
 0x3085

	)

680 
	#EGL_SWAP_BEHAVIOR
 0x3093

	)

681 
	#EGL_UNKNOWN
 ((
EGLöt
)-1)

	)

682 
	#EGL_VERTICAL_RESOLUTION
 0x3091

	)

683 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglBödAPI
 (
EGLíum
 
≠i
);

684 
EGLAPI
 
EGLíum
 
EGLAPIENTRY
 
	`eglQuîyAPI
 ();

685 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglCª©ePbuf„rFromClõ¡Buf„r
 (
EGLDi•œy
 
dpy
, 
EGLíum
 
bu·y≥
, 
EGLClõ¡Buf„r
 
buf„r
, 
EGLC⁄fig
 
c⁄fig
, c⁄° 
EGLöt
 *
©åib_li°
);

686 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglRñó£Thªad
 ();

687 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglWaôClõ¡
 ();

690 #i‚de‡
EGL_VERSION_1_3


691 
	#EGL_VERSION_1_3
 1

	)

692 
	#EGL_CONFORMANT
 0x3042

	)

693 
	#EGL_CONTEXT_CLIENT_VERSION
 0x3098

	)

694 
	#EGL_MATCH_NATIVE_PIXMAP
 0x3041

	)

695 
	#EGL_OPENGL_ES2_BIT
 0x0004

	)

696 
	#EGL_VG_ALPHA_FORMAT
 0x3088

	)

697 
	#EGL_VG_ALPHA_FORMAT_NONPRE
 0x308B

	)

698 
	#EGL_VG_ALPHA_FORMAT_PRE
 0x308C

	)

699 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT
 0x0040

	)

700 
	#EGL_VG_COLORSPACE
 0x3087

	)

701 
	#EGL_VG_COLORSPACE_sRGB
 0x3089

	)

702 
	#EGL_VG_COLORSPACE_LINEAR
 0x308A

	)

703 
	#EGL_VG_COLORSPACE_LINEAR_BIT
 0x0020

	)

706 #i‚de‡
EGL_VERSION_1_4


707 
	#EGL_VERSION_1_4
 1

	)

708 
	#EGL_DEFAULT_DISPLAY
 ((
EGLN©iveDi•œyTy≥
)0)

	)

709 
	#EGL_MULTISAMPLE_RESOLVE_BOX_BIT
 0x0200

	)

710 
	#EGL_MULTISAMPLE_RESOLVE
 0x3099

	)

711 
	#EGL_MULTISAMPLE_RESOLVE_DEFAULT
 0x309A

	)

712 
	#EGL_MULTISAMPLE_RESOLVE_BOX
 0x309B

	)

713 
	#EGL_OPENGL_API
 0x30A2

	)

714 
	#EGL_OPENGL_BIT
 0x0008

	)

715 
	#EGL_SWAP_BEHAVIOR_PRESERVED_BIT
 0x0400

	)

716 
EGLAPI
 
EGLC⁄ãxt
 
EGLAPIENTRY
 
	`eglGëCuºítC⁄ãxt
 ();

719 #i‚de‡
EGL_VERSION_1_5


720 
	#EGL_VERSION_1_5
 1

	)

721 *
	tEGLSync
;

722 
öçå_t
 
	tEGLAârib
;

723 
khr⁄os_utime_«no£c⁄ds_t
 
	tEGLTime
;

724 *
	tEGLImage
;

725 
	#EGL_CONTEXT_MAJOR_VERSION
 0x3098

	)

726 
	#EGL_CONTEXT_MINOR_VERSION
 0x30FB

	)

727 
	#EGL_CONTEXT_OPENGL_PROFILE_MASK
 0x30FD

	)

728 
	#EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY
 0x31BD

	)

729 
	#EGL_NO_RESET_NOTIFICATION
 0x31BE

	)

730 
	#EGL_LOSE_CONTEXT_ON_RESET
 0x31BF

	)

731 
	#EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT
 0x00000001

	)

732 
	#EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

733 
	#EGL_CONTEXT_OPENGL_DEBUG
 0x31B0

	)

734 
	#EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE
 0x31B1

	)

735 
	#EGL_CONTEXT_OPENGL_ROBUST_ACCESS
 0x31B2

	)

736 
	#EGL_OPENGL_ES3_BIT
 0x00000040

	)

737 
	#EGL_CL_EVENT_HANDLE
 0x309C

	)

738 
	#EGL_SYNC_CL_EVENT
 0x30FE

	)

739 
	#EGL_SYNC_CL_EVENT_COMPLETE
 0x30FF

	)

740 
	#EGL_SYNC_PRIOR_COMMANDS_COMPLETE
 0x30F0

	)

741 
	#EGL_SYNC_TYPE
 0x30F7

	)

742 
	#EGL_SYNC_STATUS
 0x30F1

	)

743 
	#EGL_SYNC_CONDITION
 0x30F8

	)

744 
	#EGL_SIGNALED
 0x30F2

	)

745 
	#EGL_UNSIGNALED
 0x30F3

	)

746 
	#EGL_SYNC_FLUSH_COMMANDS_BIT
 0x0001

	)

747 
	#EGL_FOREVER
 0xFFFFFFFFFFFFFFFFuŒ

	)

748 
	#EGL_TIMEOUT_EXPIRED
 0x30F5

	)

749 
	#EGL_CONDITION_SATISFIED
 0x30F6

	)

750 
	#EGL_NO_SYNC
 ((
EGLSync
)0)

	)

751 
	#EGL_SYNC_FENCE
 0x30F9

	)

752 
	#EGL_GL_COLORSPACE
 0x309D

	)

753 
	#EGL_GL_COLORSPACE_SRGB
 0x3089

	)

754 
	#EGL_GL_COLORSPACE_LINEAR
 0x308A

	)

755 
	#EGL_GL_RENDERBUFFER
 0x30B9

	)

756 
	#EGL_GL_TEXTURE_2D
 0x30B1

	)

757 
	#EGL_GL_TEXTURE_LEVEL
 0x30BC

	)

758 
	#EGL_GL_TEXTURE_3D
 0x30B2

	)

759 
	#EGL_GL_TEXTURE_ZOFFSET
 0x30BD

	)

760 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x30B3

	)

761 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x30B4

	)

762 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x30B5

	)

763 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x30B6

	)

764 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x30B7

	)

765 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x30B8

	)

766 
	#EGL_IMAGE_PRESERVED
 0x30D2

	)

767 
	#EGL_NO_IMAGE
 ((
EGLImage
)0)

	)

768 
EGLAPI
 
EGLSync
 
EGLAPIENTRY
 
	`eglCª©eSync
 (
EGLDi•œy
 
dpy
, 
EGLíum
 
ty≥
, c⁄° 
EGLAârib
 *
©åib_li°
);

769 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglDe°roySync
 (
EGLDi•œy
 
dpy
, 
EGLSync
 
sync
);

770 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
	`eglClõ¡WaôSync
 (
EGLDi•œy
 
dpy
, 
EGLSync
 
sync
, EGLöà
Êags
, 
EGLTime
 
timeout
);

771 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglGëSyncAârib
 (
EGLDi•œy
 
dpy
, 
EGLSync
 
sync
, 
EGLöt
 
©åibuã
, 
EGLAârib
 *
vÆue
);

772 
EGLAPI
 
EGLImage
 
EGLAPIENTRY
 
	`eglCª©eImage
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
, 
EGLíum
 
èrgë
, 
EGLClõ¡Buf„r
 
buf„r
, c⁄° 
EGLAârib
 *
©åib_li°
);

773 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglDe°royImage
 (
EGLDi•œy
 
dpy
, 
EGLImage
 
image
);

774 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
	`eglGëPœtf‹mDi•œy
 (
EGLíum
 
∂©f‹m
, *
«tive_di•œy
, c⁄° 
EGLAârib
 *
©åib_li°
);

775 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglCª©ePœtf‹mWödowSurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, *
«tive_wödow
, c⁄° 
EGLAârib
 *
©åib_li°
);

776 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
	`eglCª©ePœtf‹mPixm≠SurÁ˚
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, *
«tive_pixm≠
, c⁄° 
EGLAârib
 *
©åib_li°
);

777 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
	`eglWaôSync
 (
EGLDi•œy
 
dpy
, 
EGLSync
 
sync
, 
EGLöt
 
Êags
);

780 #ifde‡
__˝lu•lus


781 
	}
}

788 #i‚de‡
__egÀxt_h_


789 
	#__egÀxt_h_
 1

	)

791 #ifde‡
__˝lu•lus


828 
	#EGL_EGLEXT_VERSION
 20150623

	)

839 #i‚de‡
EGL_KHR_˛_evít


840 
	#EGL_KHR_˛_evít
 1

	)

841 
	#EGL_CL_EVENT_HANDLE_KHR
 0x309C

	)

842 
	#EGL_SYNC_CL_EVENT_KHR
 0x30FE

	)

843 
	#EGL_SYNC_CL_EVENT_COMPLETE_KHR
 0x30FF

	)

846 #i‚de‡
EGL_KHR_˛_evít2


847 
	#EGL_KHR_˛_evít2
 1

	)

848 *
	tEGLSyncKHR
;

849 
öçå_t
 
	tEGLAâribKHR
;

850 
EGLSyncKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESYNC64KHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLíum
 
	tty≥
, c⁄° 
	tEGLAâribKHR
 *
	t©åib_li°
);

851 #ifde‡
EGL_EGLEXT_PROTOTYPES


852 
EGLAPI
 
EGLSyncKHR
 
EGLAPIENTRY
 
eglCª©eSync64KHR
 (
EGLDi•œy
 
dpy
, 
EGLíum
 
ty≥
, c⁄° 
EGLAâribKHR
 *
©åib_li°
);

856 #i‚de‡
EGL_KHR_˛õ¡_gë_Æl_¥oc_addªs£s


857 
	#EGL_KHR_˛õ¡_gë_Æl_¥oc_addªs£s
 1

	)

860 #i‚de‡
EGL_KHR_c⁄fig_©åibs


861 
	#EGL_KHR_c⁄fig_©åibs
 1

	)

862 
	#EGL_CONFORMANT_KHR
 0x3042

	)

863 
	#EGL_VG_COLORSPACE_LINEAR_BIT_KHR
 0x0020

	)

864 
	#EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR
 0x0040

	)

867 #i‚de‡
EGL_KHR_¸óã_c⁄ãxt


868 
	#EGL_KHR_¸óã_c⁄ãxt
 1

	)

869 
	#EGL_CONTEXT_MAJOR_VERSION_KHR
 0x3098

	)

870 
	#EGL_CONTEXT_MINOR_VERSION_KHR
 0x30FB

	)

871 
	#EGL_CONTEXT_FLAGS_KHR
 0x30FC

	)

872 
	#EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR
 0x30FD

	)

873 
	#EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR
 0x31BD

	)

874 
	#EGL_NO_RESET_NOTIFICATION_KHR
 0x31BE

	)

875 
	#EGL_LOSE_CONTEXT_ON_RESET_KHR
 0x31BF

	)

876 
	#EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR
 0x00000001

	)

877 
	#EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR
 0x00000002

	)

878 
	#EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR
 0x00000004

	)

879 
	#EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR
 0x00000001

	)

880 
	#EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR
 0x00000002

	)

881 
	#EGL_OPENGL_ES3_BIT_KHR
 0x00000040

	)

884 #i‚de‡
EGL_KHR_¸óã_c⁄ãxt_no_îr‹


885 
	#EGL_KHR_¸óã_c⁄ãxt_no_îr‹
 1

	)

886 
	#EGL_CONTEXT_OPENGL_NO_ERROR_KHR
 0x31B3

	)

889 #i‚de‡
EGL_KHR_„n˚_sync


890 
	#EGL_KHR_„n˚_sync
 1

	)

891 
khr⁄os_utime_«no£c⁄ds_t
 
	tEGLTimeKHR
;

892 #ifde‡
KHRONOS_SUPPORT_INT64


893 
	#EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR
 0x30F0

	)

894 
	#EGL_SYNC_CONDITION_KHR
 0x30F8

	)

895 
	#EGL_SYNC_FENCE_KHR
 0x30F9

	)

896 
EGLSyncKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLíum
 
	tty≥
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

897 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
);

898 
EGLöt
 (
	tEGLAPIENTRYP
 
	tPFNEGLCLIENTWAITSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLöt
 
	tÊags
, 
	tEGLTimeKHR
 
	ttimeout
);

899 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYNCATTRIBKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLöt
 
	t©åibuã
, EGLöà*
	tvÆue
);

900 #ifde‡
EGL_EGLEXT_PROTOTYPES


901 
EGLAPI
 
EGLSyncKHR
 
EGLAPIENTRY
 
eglCª©eSyncKHR
 (
EGLDi•œy
 
dpy
, 
EGLíum
 
ty≥
, c⁄° 
EGLöt
 *
©åib_li°
);

902 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySyncKHR
 (
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
);

903 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglClõ¡WaôSyncKHR
 (
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, EGLöà
Êags
, 
EGLTimeKHR
 
timeout
);

904 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëSyncAâribKHR
 (
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

909 #i‚de‡
EGL_KHR_gë_Æl_¥oc_addªs£s


910 
	#EGL_KHR_gë_Æl_¥oc_addªs£s
 1

	)

913 #i‚de‡
EGL_KHR_gl_cﬁ‹•a˚


914 
	#EGL_KHR_gl_cﬁ‹•a˚
 1

	)

915 
	#EGL_GL_COLORSPACE_KHR
 0x309D

	)

916 
	#EGL_GL_COLORSPACE_SRGB_KHR
 0x3089

	)

917 
	#EGL_GL_COLORSPACE_LINEAR_KHR
 0x308A

	)

920 #i‚de‡
EGL_KHR_gl_ªndîbuf„r_image


921 
	#EGL_KHR_gl_ªndîbuf„r_image
 1

	)

922 
	#EGL_GL_RENDERBUFFER_KHR
 0x30B9

	)

925 #i‚de‡
EGL_KHR_gl_ãxtuª_2D_image


926 
	#EGL_KHR_gl_ãxtuª_2D_image
 1

	)

927 
	#EGL_GL_TEXTURE_2D_KHR
 0x30B1

	)

928 
	#EGL_GL_TEXTURE_LEVEL_KHR
 0x30BC

	)

931 #i‚de‡
EGL_KHR_gl_ãxtuª_3D_image


932 
	#EGL_KHR_gl_ãxtuª_3D_image
 1

	)

933 
	#EGL_GL_TEXTURE_3D_KHR
 0x30B2

	)

934 
	#EGL_GL_TEXTURE_ZOFFSET_KHR
 0x30BD

	)

937 #i‚de‡
EGL_KHR_gl_ãxtuª_cubem≠_image


938 
	#EGL_KHR_gl_ãxtuª_cubem≠_image
 1

	)

939 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR
 0x30B3

	)

940 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR
 0x30B4

	)

941 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR
 0x30B5

	)

942 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR
 0x30B6

	)

943 
	#EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR
 0x30B7

	)

944 
	#EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR
 0x30B8

	)

947 #i‚de‡
EGL_KHR_image


948 
	#EGL_KHR_image
 1

	)

949 *
	tEGLImageKHR
;

950 
	#EGL_NATIVE_PIXMAP_KHR
 0x30B0

	)

951 
	#EGL_NO_IMAGE_KHR
 ((
EGLImageKHR
)0)

	)

952 
EGLImageKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄ãxt
 
	t˘x
, 
	tEGLíum
 
	tèrgë
, 
	tEGLClõ¡Buf„r
 
	tbuf„r
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

953 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYIMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
);

954 #ifde‡
EGL_EGLEXT_PROTOTYPES


955 
EGLAPI
 
EGLImageKHR
 
EGLAPIENTRY
 
eglCª©eImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLC⁄ãxt
 
˘x
, 
EGLíum
 
èrgë
, 
EGLClõ¡Buf„r
 
buf„r
, c⁄° 
EGLöt
 *
©åib_li°
);

956 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°royImageKHR
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
);

960 #i‚de‡
EGL_KHR_image_ba£


961 
	#EGL_KHR_image_ba£
 1

	)

962 
	#EGL_IMAGE_PRESERVED_KHR
 0x30D2

	)

965 #i‚de‡
EGL_KHR_image_pixm≠


966 
	#EGL_KHR_image_pixm≠
 1

	)

969 #i‚de‡
EGL_KHR_lock_surÁ˚


970 
	#EGL_KHR_lock_surÁ˚
 1

	)

971 
	#EGL_READ_SURFACE_BIT_KHR
 0x0001

	)

972 
	#EGL_WRITE_SURFACE_BIT_KHR
 0x0002

	)

973 
	#EGL_LOCK_SURFACE_BIT_KHR
 0x0080

	)

974 
	#EGL_OPTIMAL_FORMAT_BIT_KHR
 0x0100

	)

975 
	#EGL_MATCH_FORMAT_KHR
 0x3043

	)

976 
	#EGL_FORMAT_RGB_565_EXACT_KHR
 0x30C0

	)

977 
	#EGL_FORMAT_RGB_565_KHR
 0x30C1

	)

978 
	#EGL_FORMAT_RGBA_8888_EXACT_KHR
 0x30C2

	)

979 
	#EGL_FORMAT_RGBA_8888_KHR
 0x30C3

	)

980 
	#EGL_MAP_PRESERVE_PIXELS_KHR
 0x30C4

	)

981 
	#EGL_LOCK_USAGE_HINT_KHR
 0x30C5

	)

982 
	#EGL_BITMAP_POINTER_KHR
 0x30C6

	)

983 
	#EGL_BITMAP_PITCH_KHR
 0x30C7

	)

984 
	#EGL_BITMAP_ORIGIN_KHR
 0x30C8

	)

985 
	#EGL_BITMAP_PIXEL_RED_OFFSET_KHR
 0x30C9

	)

986 
	#EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR
 0x30CA

	)

987 
	#EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR
 0x30CB

	)

988 
	#EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR
 0x30CC

	)

989 
	#EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR
 0x30CD

	)

990 
	#EGL_LOWER_LEFT_KHR
 0x30CE

	)

991 
	#EGL_UPPER_LEFT_KHR
 0x30CF

	)

992 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

993 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLUNLOCKSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
);

994 #ifde‡
EGL_EGLEXT_PROTOTYPES


995 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglLockSurÁ˚KHR
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, c⁄° 
EGLöt
 *
©åib_li°
);

996 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglU∆ockSurÁ˚KHR
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
);

1000 #i‚de‡
EGL_KHR_lock_surÁ˚2


1001 
	#EGL_KHR_lock_surÁ˚2
 1

	)

1002 
	#EGL_BITMAP_PIXEL_SIZE_KHR
 0x3110

	)

1005 #i‚de‡
EGL_KHR_lock_surÁ˚3


1006 
	#EGL_KHR_lock_surÁ˚3
 1

	)

1007 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYSURFACE64KHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAâribKHR
 *
	tvÆue
);

1008 #ifde‡
EGL_EGLEXT_PROTOTYPES


1009 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySurÁ˚64KHR
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
©åibuã
, 
EGLAâribKHR
 *
vÆue
);

1013 #i‚de‡
EGL_KHR_∑πül_upd©e


1014 
	#EGL_KHR_∑πül_upd©e
 1

	)

1015 
	#EGL_BUFFER_AGE_KHR
 0x313D

	)

1016 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSETDAMAGEREGIONKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 *
	tª˘s
, EGLöà
	tn_ª˘s
);

1017 #ifde‡
EGL_EGLEXT_PROTOTYPES


1018 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSëDamageRegi⁄KHR
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 *
ª˘s
, EGLöà
n_ª˘s
);

1022 #i‚de‡
EGL_KHR_∂©f‹m_™droid


1023 
	#EGL_KHR_∂©f‹m_™droid
 1

	)

1024 
	#EGL_PLATFORM_ANDROID_KHR
 0x3141

	)

1027 #i‚de‡
EGL_KHR_∂©f‹m_gbm


1028 
	#EGL_KHR_∂©f‹m_gbm
 1

	)

1029 
	#EGL_PLATFORM_GBM_KHR
 0x31D7

	)

1032 #i‚de‡
EGL_KHR_∂©f‹m_wayœnd


1033 
	#EGL_KHR_∂©f‹m_wayœnd
 1

	)

1034 
	#EGL_PLATFORM_WAYLAND_KHR
 0x31D8

	)

1037 #i‚de‡
EGL_KHR_∂©f‹m_x11


1038 
	#EGL_KHR_∂©f‹m_x11
 1

	)

1039 
	#EGL_PLATFORM_X11_KHR
 0x31D5

	)

1040 
	#EGL_PLATFORM_X11_SCREEN_KHR
 0x31D6

	)

1043 #i‚de‡
EGL_KHR_ªußbÀ_sync


1044 
	#EGL_KHR_ªußbÀ_sync
 1

	)

1045 #ifde‡
KHRONOS_SUPPORT_INT64


1046 
	#EGL_SYNC_STATUS_KHR
 0x30F1

	)

1047 
	#EGL_SIGNALED_KHR
 0x30F2

	)

1048 
	#EGL_UNSIGNALED_KHR
 0x30F3

	)

1049 
	#EGL_TIMEOUT_EXPIRED_KHR
 0x30F5

	)

1050 
	#EGL_CONDITION_SATISFIED_KHR
 0x30F6

	)

1051 
	#EGL_SYNC_TYPE_KHR
 0x30F7

	)

1052 
	#EGL_SYNC_REUSABLE_KHR
 0x30FA

	)

1053 
	#EGL_SYNC_FLUSH_COMMANDS_BIT_KHR
 0x0001

	)

1054 
	#EGL_FOREVER_KHR
 0xFFFFFFFFFFFFFFFFuŒ

	)

1055 
	#EGL_NO_SYNC_KHR
 ((
EGLSyncKHR
)0)

	)

1056 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSIGNALSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLíum
 
	tmode
);

1057 #ifde‡
EGL_EGLEXT_PROTOTYPES


1058 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSig«lSyncKHR
 (
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, 
EGLíum
 
mode
);

1063 #i‚de‡
EGL_KHR_°ªam


1064 
	#EGL_KHR_°ªam
 1

	)

1065 *
	tEGLSåómKHR
;

1066 
khr⁄os_uöt64_t
 
	tEGLuöt64KHR
;

1067 #ifde‡
KHRONOS_SUPPORT_INT64


1068 
	#EGL_NO_STREAM_KHR
 ((
EGLSåómKHR
)0)

	)

1069 
	#EGL_CONSUMER_LATENCY_USEC_KHR
 0x3210

	)

1070 
	#EGL_PRODUCER_FRAME_KHR
 0x3212

	)

1071 
	#EGL_CONSUMER_FRAME_KHR
 0x3213

	)

1072 
	#EGL_STREAM_STATE_KHR
 0x3214

	)

1073 
	#EGL_STREAM_STATE_CREATED_KHR
 0x3215

	)

1074 
	#EGL_STREAM_STATE_CONNECTING_KHR
 0x3216

	)

1075 
	#EGL_STREAM_STATE_EMPTY_KHR
 0x3217

	)

1076 
	#EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
 0x3218

	)

1077 
	#EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR
 0x3219

	)

1078 
	#EGL_STREAM_STATE_DISCONNECTED_KHR
 0x321A

	)

1079 
	#EGL_BAD_STREAM_KHR
 0x321B

	)

1080 
	#EGL_BAD_STATE_KHR
 0x321C

	)

1081 
EGLSåómKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESTREAMKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1082 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYSTREAMKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
);

1083 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSTREAMATTRIBKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
, 
	tEGLíum
 
	t©åibuã
, 
	tEGLöt
 
	tvÆue
);

1084 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYSTREAMKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
, 
	tEGLíum
 
	t©åibuã
, 
	tEGLöt
 *
	tvÆue
);

1085 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYSTREAMU64KHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
, 
	tEGLíum
 
	t©åibuã
, 
	tEGLuöt64KHR
 *
	tvÆue
);

1086 #ifde‡
EGL_EGLEXT_PROTOTYPES


1087 
EGLAPI
 
EGLSåómKHR
 
EGLAPIENTRY
 
eglCª©eSåómKHR
 (
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
);

1088 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySåómKHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
);

1089 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSåómAâribKHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
, 
EGLíum
 
©åibuã
, 
EGLöt
 
vÆue
);

1090 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySåómKHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
, 
EGLíum
 
©åibuã
, 
EGLöt
 *
vÆue
);

1091 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySåómu64KHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
, 
EGLíum
 
©åibuã
, 
EGLuöt64KHR
 *
vÆue
);

1096 #i‚de‡
EGL_KHR_°ªam_c⁄sumî_g…extuª


1097 
	#EGL_KHR_°ªam_c⁄sumî_g…extuª
 1

	)

1098 #ifde‡
EGL_KHR_°ªam


1099 
	#EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
 0x321E

	)

1100 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
);

1101 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSTREAMCONSUMERACQUIREKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
);

1102 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSTREAMCONSUMERRELEASEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
);

1103 #ifde‡
EGL_EGLEXT_PROTOTYPES


1104 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSåómC⁄sumîGLTextuªExã∫ÆKHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
);

1105 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSåómC⁄sumîAcquúeKHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
);

1106 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSåómC⁄sumîRñó£KHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
);

1111 #i‚de‡
EGL_KHR_°ªam_¸oss_¥o˚ss_fd


1112 
	#EGL_KHR_°ªam_¸oss_¥o˚ss_fd
 1

	)

1113 
	tEGLN©iveFûeDes¸ùt‹KHR
;

1114 #ifde‡
EGL_KHR_°ªam


1115 
	#EGL_NO_FILE_DESCRIPTOR_KHR
 ((
EGLN©iveFûeDes¸ùt‹KHR
)(-1))

	)

1116 
EGLN©iveFûeDes¸ùt‹KHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSTREAMFILEDESCRIPTORKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
);

1117 
EGLSåómKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLN©iveFûeDes¸ùt‹KHR
 
	tfûe_des¸ùt‹
);

1118 #ifde‡
EGL_EGLEXT_PROTOTYPES


1119 
EGLAPI
 
EGLN©iveFûeDes¸ùt‹KHR
 
EGLAPIENTRY
 
eglGëSåómFûeDes¸ùt‹KHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
);

1120 
EGLAPI
 
EGLSåómKHR
 
EGLAPIENTRY
 
eglCª©eSåómFromFûeDes¸ùt‹KHR
 (
EGLDi•œy
 
dpy
, 
EGLN©iveFûeDes¸ùt‹KHR
 
fûe_des¸ùt‹
);

1125 #i‚de‡
EGL_KHR_°ªam_fifo


1126 
	#EGL_KHR_°ªam_fifo
 1

	)

1127 #ifde‡
EGL_KHR_°ªam


1128 
	#EGL_STREAM_FIFO_LENGTH_KHR
 0x31FC

	)

1129 
	#EGL_STREAM_TIME_NOW_KHR
 0x31FD

	)

1130 
	#EGL_STREAM_TIME_CONSUMER_KHR
 0x31FE

	)

1131 
	#EGL_STREAM_TIME_PRODUCER_KHR
 0x31FF

	)

1132 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYSTREAMTIMEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
, 
	tEGLíum
 
	t©åibuã
, 
	tEGLTimeKHR
 *
	tvÆue
);

1133 #ifde‡
EGL_EGLEXT_PROTOTYPES


1134 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySåómTimeKHR
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
, 
EGLíum
 
©åibuã
, 
EGLTimeKHR
 *
vÆue
);

1139 #i‚de‡
EGL_KHR_°ªam_¥odu˚r_Æd©Æoˇt‹


1140 
	#EGL_KHR_°ªam_¥odu˚r_Æd©Æoˇt‹
 1

	)

1141 #ifde‡
EGL_KHR_°ªam


1145 #i‚de‡
EGL_KHR_°ªam_¥odu˚r_eglsurÁ˚


1146 
	#EGL_KHR_°ªam_¥odu˚r_eglsurÁ˚
 1

	)

1147 #ifde‡
EGL_KHR_°ªam


1148 
	#EGL_STREAM_BIT_KHR
 0x0800

	)

1149 
EGLSurÁ˚
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄fig
 
	tc⁄fig
, 
	tEGLSåómKHR
 
	t°ªam
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1150 #ifde‡
EGL_EGLEXT_PROTOTYPES


1151 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©eSåómProdu˚rSurÁ˚KHR
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, 
EGLSåómKHR
 
°ªam
, c⁄° 
EGLöt
 *
©åib_li°
);

1156 #i‚de‡
EGL_KHR_surÁ˚Àss_c⁄ãxt


1157 
	#EGL_KHR_surÁ˚Àss_c⁄ãxt
 1

	)

1160 #i‚de‡
EGL_KHR_sw≠_buf„rs_wôh_damage


1161 
	#EGL_KHR_sw≠_buf„rs_wôh_damage
 1

	)

1162 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 *
	tª˘s
, EGLöà
	tn_ª˘s
);

1163 #ifde‡
EGL_EGLEXT_PROTOTYPES


1164 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rsWôhDamageKHR
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 *
ª˘s
, EGLöà
n_ª˘s
);

1168 #i‚de‡
EGL_KHR_vg_∑ª¡_image


1169 
	#EGL_KHR_vg_∑ª¡_image
 1

	)

1170 
	#EGL_VG_PARENT_IMAGE_KHR
 0x30BA

	)

1173 #i‚de‡
EGL_KHR_waô_sync


1174 
	#EGL_KHR_waô_sync
 1

	)

1175 
EGLöt
 (
	tEGLAPIENTRYP
 
	tPFNEGLWAITSYNCKHRPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
, 
	tEGLöt
 
	tÊags
);

1176 #ifde‡
EGL_EGLEXT_PROTOTYPES


1177 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglWaôSyncKHR
 (
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
, EGLöà
Êags
);

1181 #i‚de‡
EGL_ANDROID_blob_ˇche


1182 
	#EGL_ANDROID_blob_ˇche
 1

	)

1183 
khr⁄os_ssize_t
 
	tEGLsizeiANDROID
;

1184 (*
EGLSëBlobFuncANDROID
Ë(c⁄° *
	tkey
, 
	tEGLsizeiANDROID
 
	tkeySize
, c⁄° *
	tvÆue
, EGLsizeiANDROID 
	tvÆueSize
);

1185 
EGLsizeiANDROID
 (*
	tEGLGëBlobFuncANDROID
Ë(c⁄° *
	tkey
, 
	tEGLsizeiANDROID
 
	tkeySize
, *
	tvÆue
, EGLsizeiANDROID 
	tvÆueSize
);

1186 (
EGLAPIENTRYP
 
	tPFNEGLSETBLOBCACHEFUNCSANDROIDPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSëBlobFuncANDROID
 
	t£t
, 
	tEGLGëBlobFuncANDROID
 
	tgë
);

1187 #ifde‡
EGL_EGLEXT_PROTOTYPES


1188 
EGLAPI
 
EGLAPIENTRY
 
eglSëBlobCacheFuncsANDROID
 (
EGLDi•œy
 
dpy
, 
EGLSëBlobFuncANDROID
 
£t
, 
EGLGëBlobFuncANDROID
 
gë
);

1192 #i‚de‡
EGL_ANDROID_‰amebuf„r_èrgë


1193 
	#EGL_ANDROID_‰amebuf„r_èrgë
 1

	)

1194 
	#EGL_FRAMEBUFFER_TARGET_ANDROID
 0x3147

	)

1197 #i‚de‡
EGL_ANDROID_image_«tive_buf„r


1198 
	#EGL_ANDROID_image_«tive_buf„r
 1

	)

1199 
	#EGL_NATIVE_BUFFER_ANDROID
 0x3140

	)

1202 #i‚de‡
EGL_ANDROID_«tive_„n˚_sync


1203 
	#EGL_ANDROID_«tive_„n˚_sync
 1

	)

1204 
	#EGL_SYNC_NATIVE_FENCE_ANDROID
 0x3144

	)

1205 
	#EGL_SYNC_NATIVE_FENCE_FD_ANDROID
 0x3145

	)

1206 
	#EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID
 0x3146

	)

1207 
	#EGL_NO_NATIVE_FENCE_FD_ANDROID
 -1

	)

1208 
EGLöt
 (
	tEGLAPIENTRYP
 
	tPFNEGLDUPNATIVEFENCEFDANDROIDPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSyncKHR
 
	tsync
);

1209 #ifde‡
EGL_EGLEXT_PROTOTYPES


1210 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglDupN©iveFí˚FDANDROID
 (
EGLDi•œy
 
dpy
, 
EGLSyncKHR
 
sync
);

1214 #i‚de‡
EGL_ANDROID_ªc‹dabÀ


1215 
	#EGL_ANDROID_ªc‹dabÀ
 1

	)

1216 
	#EGL_RECORDABLE_ANDROID
 0x3142

	)

1219 #i‚de‡
EGL_ANGLE_d3d_sh¨e_h™dÀ_˛õ¡_buf„r


1220 
	#EGL_ANGLE_d3d_sh¨e_h™dÀ_˛õ¡_buf„r
 1

	)

1221 
	#EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE
 0x3200

	)

1224 #i‚de‡
EGL_ANGLE_devi˚_d3d


1225 
	#EGL_ANGLE_devi˚_d3d
 1

	)

1226 
	#EGL_D3D9_DEVICE_ANGLE
 0x33A0

	)

1227 
	#EGL_D3D11_DEVICE_ANGLE
 0x33A1

	)

1230 #i‚de‡
EGL_ANGLE_quîy_surÁ˚_poöãr


1231 
	#EGL_ANGLE_quîy_surÁ˚_poöãr
 1

	)

1232 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYSURFACEPOINTERANGLEPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 
	t©åibuã
, **
	tvÆue
);

1233 #ifde‡
EGL_EGLEXT_PROTOTYPES


1234 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîySurÁ˚PoöãrANGLE
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
©åibuã
, **
vÆue
);

1238 #i‚de‡
EGL_ANGLE_surÁ˚_d3d_ãxtuª_2d_sh¨e_h™dÀ


1239 
	#EGL_ANGLE_surÁ˚_d3d_ãxtuª_2d_sh¨e_h™dÀ
 1

	)

1242 #i‚de‡
EGL_ANGLE_wödow_fixed_size


1243 
	#EGL_ANGLE_wödow_fixed_size
 1

	)

1244 
	#EGL_FIXED_SIZE_ANGLE
 0x3201

	)

1247 #i‚de‡
EGL_ARM_pixm≠_mu…ißm∂e_disˇrd


1248 
	#EGL_ARM_pixm≠_mu…ißm∂e_disˇrd
 1

	)

1249 
	#EGL_DISCARD_SAMPLES_ARM
 0x3286

	)

1252 #i‚de‡
EGL_EXT_buf„r_age


1253 
	#EGL_EXT_buf„r_age
 1

	)

1254 
	#EGL_BUFFER_AGE_EXT
 0x313D

	)

1257 #i‚de‡
EGL_EXT_˛õ¡_exãnsi⁄s


1258 
	#EGL_EXT_˛õ¡_exãnsi⁄s
 1

	)

1261 #i‚de‡
EGL_EXT_¸óã_c⁄ãxt_robu°√ss


1262 
	#EGL_EXT_¸óã_c⁄ãxt_robu°√ss
 1

	)

1263 
	#EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT
 0x30BF

	)

1264 
	#EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT
 0x3138

	)

1265 
	#EGL_NO_RESET_NOTIFICATION_EXT
 0x31BE

	)

1266 
	#EGL_LOSE_CONTEXT_ON_RESET_EXT
 0x31BF

	)

1269 #i‚de‡
EGL_EXT_devi˚_ba£


1270 
	#EGL_EXT_devi˚_ba£
 1

	)

1271 *
	tEGLDevi˚EXT
;

1272 
	#EGL_NO_DEVICE_EXT
 ((
EGLDevi˚EXT
)(0))

	)

1273 
	#EGL_BAD_DEVICE_EXT
 0x322B

	)

1274 
	#EGL_DEVICE_EXT
 0x322C

	)

1275 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYDEVICEATTRIBEXTPROC
Ë(
	tEGLDevi˚EXT
 
	tdevi˚
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAârib
 *
	tvÆue
);

1276 c⁄° *(
	tEGLAPIENTRYP
 
	tPFNEGLQUERYDEVICESTRINGEXTPROC
Ë(
	tEGLDevi˚EXT
 
	tdevi˚
, 
	tEGLöt
 
	t«me
);

1277 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYDEVICESEXTPROC
Ë(
	tEGLöt
 
	tmax_devi˚s
, 
	tEGLDevi˚EXT
 *
	tdevi˚s
, EGLöà*
	tnum_devi˚s
);

1278 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYDISPLAYATTRIBEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAârib
 *
	tvÆue
);

1279 #ifde‡
EGL_EGLEXT_PROTOTYPES


1280 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyDevi˚AâribEXT
 (
EGLDevi˚EXT
 
devi˚
, 
EGLöt
 
©åibuã
, 
EGLAârib
 *
vÆue
);

1281 
EGLAPI
 c⁄° *
EGLAPIENTRY
 
eglQuîyDevi˚SåögEXT
 (
EGLDevi˚EXT
 
devi˚
, 
EGLöt
 
«me
);

1282 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyDevi˚sEXT
 (
EGLöt
 
max_devi˚s
, 
EGLDevi˚EXT
 *
devi˚s
, EGLöà*
num_devi˚s
);

1283 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyDi•œyAâribEXT
 (
EGLDi•œy
 
dpy
, 
EGLöt
 
©åibuã
, 
EGLAârib
 *
vÆue
);

1287 #i‚de‡
EGL_EXT_devi˚_drm


1288 
	#EGL_EXT_devi˚_drm
 1

	)

1289 
	#EGL_DRM_DEVICE_FILE_EXT
 0x3233

	)

1292 #i‚de‡
EGL_EXT_devi˚_íumî©i⁄


1293 
	#EGL_EXT_devi˚_íumî©i⁄
 1

	)

1296 #i‚de‡
EGL_EXT_devi˚_›íwf


1297 
	#EGL_EXT_devi˚_›íwf
 1

	)

1298 
	#EGL_OPENWF_DEVICE_ID_EXT
 0x3237

	)

1301 #i‚de‡
EGL_EXT_devi˚_quîy


1302 
	#EGL_EXT_devi˚_quîy
 1

	)

1305 #i‚de‡
EGL_EXT_image_dma_buf_imp‹t


1306 
	#EGL_EXT_image_dma_buf_imp‹t
 1

	)

1307 
	#EGL_LINUX_DMA_BUF_EXT
 0x3270

	)

1308 
	#EGL_LINUX_DRM_FOURCC_EXT
 0x3271

	)

1309 
	#EGL_DMA_BUF_PLANE0_FD_EXT
 0x3272

	)

1310 
	#EGL_DMA_BUF_PLANE0_OFFSET_EXT
 0x3273

	)

1311 
	#EGL_DMA_BUF_PLANE0_PITCH_EXT
 0x3274

	)

1312 
	#EGL_DMA_BUF_PLANE1_FD_EXT
 0x3275

	)

1313 
	#EGL_DMA_BUF_PLANE1_OFFSET_EXT
 0x3276

	)

1314 
	#EGL_DMA_BUF_PLANE1_PITCH_EXT
 0x3277

	)

1315 
	#EGL_DMA_BUF_PLANE2_FD_EXT
 0x3278

	)

1316 
	#EGL_DMA_BUF_PLANE2_OFFSET_EXT
 0x3279

	)

1317 
	#EGL_DMA_BUF_PLANE2_PITCH_EXT
 0x327A

	)

1318 
	#EGL_YUV_COLOR_SPACE_HINT_EXT
 0x327B

	)

1319 
	#EGL_SAMPLE_RANGE_HINT_EXT
 0x327C

	)

1320 
	#EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT
 0x327D

	)

1321 
	#EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT
 0x327E

	)

1322 
	#EGL_ITU_REC601_EXT
 0x327F

	)

1323 
	#EGL_ITU_REC709_EXT
 0x3280

	)

1324 
	#EGL_ITU_REC2020_EXT
 0x3281

	)

1325 
	#EGL_YUV_FULL_RANGE_EXT
 0x3282

	)

1326 
	#EGL_YUV_NARROW_RANGE_EXT
 0x3283

	)

1327 
	#EGL_YUV_CHROMA_SITING_0_EXT
 0x3284

	)

1328 
	#EGL_YUV_CHROMA_SITING_0_5_EXT
 0x3285

	)

1331 #i‚de‡
EGL_EXT_mu…ivõw_wödow


1332 
	#EGL_EXT_mu…ivõw_wödow
 1

	)

1333 
	#EGL_MULTIVIEW_VIEW_COUNT_EXT
 0x3134

	)

1336 #i‚de‡
EGL_EXT_ouçut_ba£


1337 
	#EGL_EXT_ouçut_ba£
 1

	)

1338 *
	tEGLOuçutLayîEXT
;

1339 *
	tEGLOuçutP‹tEXT
;

1340 
	#EGL_NO_OUTPUT_LAYER_EXT
 ((
EGLOuçutLayîEXT
)0)

	)

1341 
	#EGL_NO_OUTPUT_PORT_EXT
 ((
EGLOuçutP‹tEXT
)0)

	)

1342 
	#EGL_BAD_OUTPUT_LAYER_EXT
 0x322D

	)

1343 
	#EGL_BAD_OUTPUT_PORT_EXT
 0x322E

	)

1344 
	#EGL_SWAP_INTERVAL_EXT
 0x322F

	)

1345 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETOUTPUTLAYERSEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, c⁄° 
	tEGLAârib
 *
	t©åib_li°
, 
	tEGLOuçutLayîEXT
 *
	tœyîs
, 
	tEGLöt
 
	tmax_œyîs
, EGLöà*
	tnum_œyîs
);

1346 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETOUTPUTPORTSEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, c⁄° 
	tEGLAârib
 *
	t©åib_li°
, 
	tEGLOuçutP‹tEXT
 *
	tp‹ts
, 
	tEGLöt
 
	tmax_p‹ts
, EGLöà*
	tnum_p‹ts
);

1347 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLOUTPUTLAYERATTRIBEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLOuçutLayîEXT
 
	tœyî
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAârib
 
	tvÆue
);

1348 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLOuçutLayîEXT
 
	tœyî
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAârib
 *
	tvÆue
);

1349 c⁄° *(
	tEGLAPIENTRYP
 
	tPFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLOuçutLayîEXT
 
	tœyî
, 
	tEGLöt
 
	t«me
);

1350 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLOUTPUTPORTATTRIBEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLOuçutP‹tEXT
 
	tp‹t
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAârib
 
	tvÆue
);

1351 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYOUTPUTPORTATTRIBEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLOuçutP‹tEXT
 
	tp‹t
, 
	tEGLöt
 
	t©åibuã
, 
	tEGLAârib
 *
	tvÆue
);

1352 c⁄° *(
	tEGLAPIENTRYP
 
	tPFNEGLQUERYOUTPUTPORTSTRINGEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLOuçutP‹tEXT
 
	tp‹t
, 
	tEGLöt
 
	t«me
);

1353 #ifde‡
EGL_EGLEXT_PROTOTYPES


1354 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëOuçutLayîsEXT
 (
EGLDi•œy
 
dpy
, c⁄° 
EGLAârib
 *
©åib_li°
, 
EGLOuçutLayîEXT
 *
œyîs
, 
EGLöt
 
max_œyîs
, EGLöà*
num_œyîs
);

1355 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëOuçutP‹tsEXT
 (
EGLDi•œy
 
dpy
, c⁄° 
EGLAârib
 *
©åib_li°
, 
EGLOuçutP‹tEXT
 *
p‹ts
, 
EGLöt
 
max_p‹ts
, EGLöà*
num_p‹ts
);

1356 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglOuçutLayîAâribEXT
 (
EGLDi•œy
 
dpy
, 
EGLOuçutLayîEXT
 
œyî
, 
EGLöt
 
©åibuã
, 
EGLAârib
 
vÆue
);

1357 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyOuçutLayîAâribEXT
 (
EGLDi•œy
 
dpy
, 
EGLOuçutLayîEXT
 
œyî
, 
EGLöt
 
©åibuã
, 
EGLAârib
 *
vÆue
);

1358 
EGLAPI
 c⁄° *
EGLAPIENTRY
 
eglQuîyOuçutLayîSåögEXT
 (
EGLDi•œy
 
dpy
, 
EGLOuçutLayîEXT
 
œyî
, 
EGLöt
 
«me
);

1359 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglOuçutP‹tAâribEXT
 (
EGLDi•œy
 
dpy
, 
EGLOuçutP‹tEXT
 
p‹t
, 
EGLöt
 
©åibuã
, 
EGLAârib
 
vÆue
);

1360 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyOuçutP‹tAâribEXT
 (
EGLDi•œy
 
dpy
, 
EGLOuçutP‹tEXT
 
p‹t
, 
EGLöt
 
©åibuã
, 
EGLAârib
 *
vÆue
);

1361 
EGLAPI
 c⁄° *
EGLAPIENTRY
 
eglQuîyOuçutP‹tSåögEXT
 (
EGLDi•œy
 
dpy
, 
EGLOuçutP‹tEXT
 
p‹t
, 
EGLöt
 
«me
);

1365 #i‚de‡
EGL_EXT_ouçut_drm


1366 
	#EGL_EXT_ouçut_drm
 1

	)

1367 
	#EGL_DRM_CRTC_EXT
 0x3234

	)

1368 
	#EGL_DRM_PLANE_EXT
 0x3235

	)

1369 
	#EGL_DRM_CONNECTOR_EXT
 0x3236

	)

1372 #i‚de‡
EGL_EXT_ouçut_›íwf


1373 
	#EGL_EXT_ouçut_›íwf
 1

	)

1374 
	#EGL_OPENWF_PIPELINE_ID_EXT
 0x3238

	)

1375 
	#EGL_OPENWF_PORT_ID_EXT
 0x3239

	)

1378 #i‚de‡
EGL_EXT_∂©f‹m_ba£


1379 
	#EGL_EXT_∂©f‹m_ba£
 1

	)

1380 
EGLDi•œy
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETPLATFORMDISPLAYEXTPROC
Ë(
	tEGLíum
 
	t∂©f‹m
, *
	t«tive_di•œy
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1381 
EGLSurÁ˚
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄fig
 
	tc⁄fig
, *
	t«tive_wödow
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1382 
EGLSurÁ˚
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄fig
 
	tc⁄fig
, *
	t«tive_pixm≠
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1383 #ifde‡
EGL_EGLEXT_PROTOTYPES


1384 
EGLAPI
 
EGLDi•œy
 
EGLAPIENTRY
 
eglGëPœtf‹mDi•œyEXT
 (
EGLíum
 
∂©f‹m
, *
«tive_di•œy
, c⁄° 
EGLöt
 *
©åib_li°
);

1385 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePœtf‹mWödowSurÁ˚EXT
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, *
«tive_wödow
, c⁄° 
EGLöt
 *
©åib_li°
);

1386 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePœtf‹mPixm≠SurÁ˚EXT
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, *
«tive_pixm≠
, c⁄° 
EGLöt
 *
©åib_li°
);

1390 #i‚de‡
EGL_EXT_∂©f‹m_devi˚


1391 
	#EGL_EXT_∂©f‹m_devi˚
 1

	)

1392 
	#EGL_PLATFORM_DEVICE_EXT
 0x313F

	)

1395 #i‚de‡
EGL_EXT_∂©f‹m_wayœnd


1396 
	#EGL_EXT_∂©f‹m_wayœnd
 1

	)

1397 
	#EGL_PLATFORM_WAYLAND_EXT
 0x31D8

	)

1400 #i‚de‡
EGL_EXT_∂©f‹m_x11


1401 
	#EGL_EXT_∂©f‹m_x11
 1

	)

1402 
	#EGL_PLATFORM_X11_EXT
 0x31D5

	)

1403 
	#EGL_PLATFORM_X11_SCREEN_EXT
 0x31D6

	)

1406 #i‚de‡
EGL_EXT_¥Ÿe˘ed_surÁ˚


1407 
	#EGL_EXT_¥Ÿe˘ed_surÁ˚
 1

	)

1408 
	#EGL_PROTECTED_CONTENT_EXT
 0x32C0

	)

1411 #i‚de‡
EGL_EXT_°ªam_c⁄sumî_eglouçut


1412 
	#EGL_EXT_°ªam_c⁄sumî_eglouçut
 1

	)

1413 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSTREAMCONSUMEROUTPUTEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
, 
	tEGLOuçutLayîEXT
 
	tœyî
);

1414 #ifde‡
EGL_EGLEXT_PROTOTYPES


1415 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSåómC⁄sumîOuçutEXT
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
, 
EGLOuçutLayîEXT
 
œyî
);

1419 #i‚de‡
EGL_EXT_sw≠_buf„rs_wôh_damage


1420 
	#EGL_EXT_sw≠_buf„rs_wôh_damage
 1

	)

1421 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 *
	tª˘s
, EGLöà
	tn_ª˘s
);

1422 #ifde‡
EGL_EGLEXT_PROTOTYPES


1423 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rsWôhDamageEXT
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 *
ª˘s
, EGLöà
n_ª˘s
);

1427 #i‚de‡
EGL_EXT_yuv_surÁ˚


1428 
	#EGL_EXT_yuv_surÁ˚
 1

	)

1429 
	#EGL_YUV_ORDER_EXT
 0x3301

	)

1430 
	#EGL_YUV_NUMBER_OF_PLANES_EXT
 0x3311

	)

1431 
	#EGL_YUV_SUBSAMPLE_EXT
 0x3312

	)

1432 
	#EGL_YUV_DEPTH_RANGE_EXT
 0x3317

	)

1433 
	#EGL_YUV_CSC_STANDARD_EXT
 0x330A

	)

1434 
	#EGL_YUV_PLANE_BPP_EXT
 0x331A

	)

1435 
	#EGL_YUV_BUFFER_EXT
 0x3300

	)

1436 
	#EGL_YUV_ORDER_YUV_EXT
 0x3302

	)

1437 
	#EGL_YUV_ORDER_YVU_EXT
 0x3303

	)

1438 
	#EGL_YUV_ORDER_YUYV_EXT
 0x3304

	)

1439 
	#EGL_YUV_ORDER_UYVY_EXT
 0x3305

	)

1440 
	#EGL_YUV_ORDER_YVYU_EXT
 0x3306

	)

1441 
	#EGL_YUV_ORDER_VYUY_EXT
 0x3307

	)

1442 
	#EGL_YUV_ORDER_AYUV_EXT
 0x3308

	)

1443 
	#EGL_YUV_SUBSAMPLE_4_2_0_EXT
 0x3313

	)

1444 
	#EGL_YUV_SUBSAMPLE_4_2_2_EXT
 0x3314

	)

1445 
	#EGL_YUV_SUBSAMPLE_4_4_4_EXT
 0x3315

	)

1446 
	#EGL_YUV_DEPTH_RANGE_LIMITED_EXT
 0x3318

	)

1447 
	#EGL_YUV_DEPTH_RANGE_FULL_EXT
 0x3319

	)

1448 
	#EGL_YUV_CSC_STANDARD_601_EXT
 0x330B

	)

1449 
	#EGL_YUV_CSC_STANDARD_709_EXT
 0x330C

	)

1450 
	#EGL_YUV_CSC_STANDARD_2020_EXT
 0x330D

	)

1451 
	#EGL_YUV_PLANE_BPP_0_EXT
 0x331B

	)

1452 
	#EGL_YUV_PLANE_BPP_8_EXT
 0x331C

	)

1453 
	#EGL_YUV_PLANE_BPP_10_EXT
 0x331D

	)

1456 #i‚de‡
EGL_HI_˛õ¡pixm≠


1457 
	#EGL_HI_˛õ¡pixm≠
 1

	)

1458 
	sEGLClõ¡Pixm≠HI
 {

1459 *
pD©a
;

1460 
EGLöt
 
iWidth
;

1461 
EGLöt
 
iHeight
;

1462 
EGLöt
 
iSåide
;

1464 
	#EGL_CLIENT_PIXMAP_POINTER_HI
 0x8F74

	)

1465 
EGLSurÁ˚
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEPIXMAPSURFACEHIPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLC⁄fig
 
	tc⁄fig
, 
	tEGLClõ¡Pixm≠HI
 *
	tpixm≠
);

1466 #ifde‡
EGL_EGLEXT_PROTOTYPES


1467 
EGLAPI
 
EGLSurÁ˚
 
EGLAPIENTRY
 
eglCª©ePixm≠SurÁ˚HI
 (
EGLDi•œy
 
dpy
, 
EGLC⁄fig
 
c⁄fig
, 
EGLClõ¡Pixm≠HI
 *
pixm≠
);

1471 #i‚de‡
EGL_HI_cﬁ‹f‹m©s


1472 
	#EGL_HI_cﬁ‹f‹m©s
 1

	)

1473 
	#EGL_COLOR_FORMAT_HI
 0x8F70

	)

1474 
	#EGL_COLOR_RGB_HI
 0x8F71

	)

1475 
	#EGL_COLOR_RGBA_HI
 0x8F72

	)

1476 
	#EGL_COLOR_ARGB_HI
 0x8F73

	)

1479 #i‚de‡
EGL_IMG_c⁄ãxt_¥i‹ôy


1480 
	#EGL_IMG_c⁄ãxt_¥i‹ôy
 1

	)

1481 
	#EGL_CONTEXT_PRIORITY_LEVEL_IMG
 0x3100

	)

1482 
	#EGL_CONTEXT_PRIORITY_HIGH_IMG
 0x3101

	)

1483 
	#EGL_CONTEXT_PRIORITY_MEDIUM_IMG
 0x3102

	)

1484 
	#EGL_CONTEXT_PRIORITY_LOW_IMG
 0x3103

	)

1487 #i‚de‡
EGL_MESA_drm_image


1488 
	#EGL_MESA_drm_image
 1

	)

1489 
	#EGL_DRM_BUFFER_FORMAT_MESA
 0x31D0

	)

1490 
	#EGL_DRM_BUFFER_USE_MESA
 0x31D1

	)

1491 
	#EGL_DRM_BUFFER_FORMAT_ARGB32_MESA
 0x31D2

	)

1492 
	#EGL_DRM_BUFFER_MESA
 0x31D3

	)

1493 
	#EGL_DRM_BUFFER_STRIDE_MESA
 0x31D4

	)

1494 
	#EGL_DRM_BUFFER_USE_SCANOUT_MESA
 0x00000001

	)

1495 
	#EGL_DRM_BUFFER_USE_SHARE_MESA
 0x00000002

	)

1496 
EGLImageKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEDRMIMAGEMESAPROC
Ë(
	tEGLDi•œy
 
	tdpy
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1497 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLEXPORTDRMIMAGEMESAPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
, 
	tEGLöt
 *
	t«me
, EGLöà*
	th™dÀ
, EGLöà*
	t°ride
);

1498 #ifde‡
EGL_EGLEXT_PROTOTYPES


1499 
EGLAPI
 
EGLImageKHR
 
EGLAPIENTRY
 
eglCª©eDRMImageMESA
 (
EGLDi•œy
 
dpy
, c⁄° 
EGLöt
 *
©åib_li°
);

1500 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglExp‹tDRMImageMESA
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
, 
EGLöt
 *
«me
, EGLöà*
h™dÀ
, EGLöà*
°ride
);

1504 #i‚de‡
EGL_MESA_image_dma_buf_exp‹t


1505 
	#EGL_MESA_image_dma_buf_exp‹t
 1

	)

1506 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
, *
	tfourcc
, *
	tnum_∂™es
, 
	tEGLuöt64KHR
 *
	tmodifõrs
);

1507 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLEXPORTDMABUFIMAGEMESAPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLImageKHR
 
	timage
, *
	tfds
, 
	tEGLöt
 *
	t°rides
, EGLöà*
	toff£ts
);

1508 #ifde‡
EGL_EGLEXT_PROTOTYPES


1509 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglExp‹tDMABUFImageQuîyMESA
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
, *
fourcc
, *
num_∂™es
, 
EGLuöt64KHR
 *
modifõrs
);

1510 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglExp‹tDMABUFImageMESA
 (
EGLDi•œy
 
dpy
, 
EGLImageKHR
 
image
, *
fds
, 
EGLöt
 *
°rides
, EGLöà*
off£ts
);

1514 #i‚de‡
EGL_MESA_∂©f‹m_gbm


1515 
	#EGL_MESA_∂©f‹m_gbm
 1

	)

1516 
	#EGL_PLATFORM_GBM_MESA
 0x31D7

	)

1519 #i‚de‡
EGL_NOK_sw≠_ªgi⁄


1520 
	#EGL_NOK_sw≠_ªgi⁄
 1

	)

1521 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSWAPBUFFERSREGIONNOKPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 
	tnumRe˘s
, c⁄° EGLöà*
	tª˘s
);

1522 #ifde‡
EGL_EGLEXT_PROTOTYPES


1523 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rsRegi⁄NOK
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
numRe˘s
, c⁄° EGLöà*
ª˘s
);

1527 #i‚de‡
EGL_NOK_sw≠_ªgi⁄2


1528 
	#EGL_NOK_sw≠_ªgi⁄2
 1

	)

1529 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSWAPBUFFERSREGION2NOKPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 
	tnumRe˘s
, c⁄° EGLöà*
	tª˘s
);

1530 #ifde‡
EGL_EGLEXT_PROTOTYPES


1531 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSw≠Buf„rsRegi⁄2NOK
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
numRe˘s
, c⁄° EGLöà*
ª˘s
);

1535 #i‚de‡
EGL_NOK_ãxtuª_‰om_pixm≠


1536 
	#EGL_NOK_ãxtuª_‰om_pixm≠
 1

	)

1537 
	#EGL_Y_INVERTED_NOK
 0x307F

	)

1540 #i‚de‡
EGL_NV_3dvisi⁄_surÁ˚


1541 
	#EGL_NV_3dvisi⁄_surÁ˚
 1

	)

1542 
	#EGL_AUTO_STEREO_NV
 0x3136

	)

1545 #i‚de‡
EGL_NV_covîage_ßm∂e


1546 
	#EGL_NV_covîage_ßm∂e
 1

	)

1547 
	#EGL_COVERAGE_BUFFERS_NV
 0x30E0

	)

1548 
	#EGL_COVERAGE_SAMPLES_NV
 0x30E1

	)

1551 #i‚de‡
EGL_NV_covîage_ßm∂e_ªsﬁve


1552 
	#EGL_NV_covîage_ßm∂e_ªsﬁve
 1

	)

1553 
	#EGL_COVERAGE_SAMPLE_RESOLVE_NV
 0x3131

	)

1554 
	#EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV
 0x3132

	)

1555 
	#EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV
 0x3133

	)

1558 #i‚de‡
EGL_NV_cuda_evít


1559 
	#EGL_NV_cuda_evít
 1

	)

1560 
	#EGL_CUDA_EVENT_HANDLE_NV
 0x323B

	)

1561 
	#EGL_SYNC_CUDA_EVENT_NV
 0x323C

	)

1562 
	#EGL_SYNC_CUDA_EVENT_COMPLETE_NV
 0x323D

	)

1565 #i‚de‡
EGL_NV_dïth_n⁄löór


1566 
	#EGL_NV_dïth_n⁄löór
 1

	)

1567 
	#EGL_DEPTH_ENCODING_NV
 0x30E2

	)

1568 
	#EGL_DEPTH_ENCODING_NONE_NV
 0

	)

1569 
	#EGL_DEPTH_ENCODING_NONLINEAR_NV
 0x30E3

	)

1572 #i‚de‡
EGL_NV_devi˚_cuda


1573 
	#EGL_NV_devi˚_cuda
 1

	)

1574 
	#EGL_CUDA_DEVICE_NV
 0x323A

	)

1577 #i‚de‡
EGL_NV_«tive_quîy


1578 
	#EGL_NV_«tive_quîy
 1

	)

1579 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYNATIVEDISPLAYNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLN©iveDi•œyTy≥
 *
	tdi•œy_id
);

1580 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYNATIVEWINDOWNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurf
, 
	tEGLN©iveWödowTy≥
 *
	twödow
);

1581 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLQUERYNATIVEPIXMAPNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurf
, 
	tEGLN©ivePixm≠Ty≥
 *
	tpixm≠
);

1582 #ifde‡
EGL_EGLEXT_PROTOTYPES


1583 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyN©iveDi•œyNV
 (
EGLDi•œy
 
dpy
, 
EGLN©iveDi•œyTy≥
 *
di•œy_id
);

1584 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyN©iveWödowNV
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surf
, 
EGLN©iveWödowTy≥
 *
wödow
);

1585 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglQuîyN©ivePixm≠NV
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surf
, 
EGLN©ivePixm≠Ty≥
 *
pixm≠
);

1589 #i‚de‡
EGL_NV_po°_c⁄vît_roundög


1590 
	#EGL_NV_po°_c⁄vît_roundög
 1

	)

1593 #i‚de‡
EGL_NV_po°_sub_buf„r


1594 
	#EGL_NV_po°_sub_buf„r
 1

	)

1595 
	#EGL_POST_SUB_BUFFER_SUPPORTED_NV
 0x30BE

	)

1596 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLPOSTSUBBUFFERNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSurÁ˚
 
	tsurÁ˚
, 
	tEGLöt
 
	tx
, EGLöà
	ty
, EGLöà
	twidth
, EGLöà
	theight
);

1597 #ifde‡
EGL_EGLEXT_PROTOTYPES


1598 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglPo°SubBuf„rNV
 (
EGLDi•œy
 
dpy
, 
EGLSurÁ˚
 
surÁ˚
, 
EGLöt
 
x
, EGLöà
y
, EGLöà
width
, EGLöà
height
);

1602 #i‚de‡
EGL_NV_°ªam_sync


1603 
	#EGL_NV_°ªam_sync
 1

	)

1604 
	#EGL_SYNC_NEW_FRAME_NV
 0x321F

	)

1605 
EGLSyncKHR
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATESTREAMSYNCNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLSåómKHR
 
	t°ªam
, 
	tEGLíum
 
	tty≥
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1606 #ifde‡
EGL_EGLEXT_PROTOTYPES


1607 
EGLAPI
 
EGLSyncKHR
 
EGLAPIENTRY
 
eglCª©eSåómSyncNV
 (
EGLDi•œy
 
dpy
, 
EGLSåómKHR
 
°ªam
, 
EGLíum
 
ty≥
, c⁄° 
EGLöt
 *
©åib_li°
);

1611 #i‚de‡
EGL_NV_sync


1612 
	#EGL_NV_sync
 1

	)

1613 *
	tEGLSyncNV
;

1614 
khr⁄os_utime_«no£c⁄ds_t
 
	tEGLTimeNV
;

1615 #ifde‡
KHRONOS_SUPPORT_INT64


1616 
	#EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV
 0x30E6

	)

1617 
	#EGL_SYNC_STATUS_NV
 0x30E7

	)

1618 
	#EGL_SIGNALED_NV
 0x30E8

	)

1619 
	#EGL_UNSIGNALED_NV
 0x30E9

	)

1620 
	#EGL_SYNC_FLUSH_COMMANDS_BIT_NV
 0x0001

	)

1621 
	#EGL_FOREVER_NV
 0xFFFFFFFFFFFFFFFFuŒ

	)

1622 
	#EGL_ALREADY_SIGNALED_NV
 0x30EA

	)

1623 
	#EGL_TIMEOUT_EXPIRED_NV
 0x30EB

	)

1624 
	#EGL_CONDITION_SATISFIED_NV
 0x30EC

	)

1625 
	#EGL_SYNC_TYPE_NV
 0x30ED

	)

1626 
	#EGL_SYNC_CONDITION_NV
 0x30EE

	)

1627 
	#EGL_SYNC_FENCE_NV
 0x30EF

	)

1628 
	#EGL_NO_SYNC_NV
 ((
EGLSyncNV
)0)

	)

1629 
EGLSyncNV
 (
	tEGLAPIENTRYP
 
	tPFNEGLCREATEFENCESYNCNVPROC
Ë(
	tEGLDi•œy
 
	tdpy
, 
	tEGLíum
 
	tc⁄dôi⁄
, c⁄° 
	tEGLöt
 *
	t©åib_li°
);

1630 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLDESTROYSYNCNVPROC
Ë(
	tEGLSyncNV
 
	tsync
);

1631 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLFENCENVPROC
Ë(
	tEGLSyncNV
 
	tsync
);

1632 
EGLöt
 (
	tEGLAPIENTRYP
 
	tPFNEGLCLIENTWAITSYNCNVPROC
Ë(
	tEGLSyncNV
 
	tsync
, 
	tEGLöt
 
	tÊags
, 
	tEGLTimeNV
 
	ttimeout
);

1633 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLSIGNALSYNCNVPROC
Ë(
	tEGLSyncNV
 
	tsync
, 
	tEGLíum
 
	tmode
);

1634 
EGLBoﬁón
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYNCATTRIBNVPROC
Ë(
	tEGLSyncNV
 
	tsync
, 
	tEGLöt
 
	t©åibuã
, EGLöà*
	tvÆue
);

1635 #ifde‡
EGL_EGLEXT_PROTOTYPES


1636 
EGLAPI
 
EGLSyncNV
 
EGLAPIENTRY
 
eglCª©eFí˚SyncNV
 (
EGLDi•œy
 
dpy
, 
EGLíum
 
c⁄dôi⁄
, c⁄° 
EGLöt
 *
©åib_li°
);

1637 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglDe°roySyncNV
 (
EGLSyncNV
 
sync
);

1638 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglFí˚NV
 (
EGLSyncNV
 
sync
);

1639 
EGLAPI
 
EGLöt
 
EGLAPIENTRY
 
eglClõ¡WaôSyncNV
 (
EGLSyncNV
 
sync
, EGLöà
Êags
, 
EGLTimeNV
 
timeout
);

1640 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglSig«lSyncNV
 (
EGLSyncNV
 
sync
, 
EGLíum
 
mode
);

1641 
EGLAPI
 
EGLBoﬁón
 
EGLAPIENTRY
 
eglGëSyncAâribNV
 (
EGLSyncNV
 
sync
, 
EGLöt
 
©åibuã
, EGLöà*
vÆue
);

1646 #i‚de‡
EGL_NV_sy°em_time


1647 
	#EGL_NV_sy°em_time
 1

	)

1648 
khr⁄os_utime_«no£c⁄ds_t
 
	tEGLuöt64NV
;

1649 #ifde‡
KHRONOS_SUPPORT_INT64


1650 
EGLuöt64NV
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYSTEMTIMEFREQUENCYNVPROC
) ();

1651 
EGLuöt64NV
 (
	tEGLAPIENTRYP
 
	tPFNEGLGETSYSTEMTIMENVPROC
) ();

1652 #ifde‡
EGL_EGLEXT_PROTOTYPES


1653 
EGLAPI
 
EGLuöt64NV
 
EGLAPIENTRY
 
eglGëSy°emTimeFªquícyNV
 ();

1654 
EGLAPI
 
EGLuöt64NV
 
EGLAPIENTRY
 
eglGëSy°emTimeNV
 ();

1659 #i‚de‡
EGL_TIZEN_image_«tive_buf„r


1660 
	#EGL_TIZEN_image_«tive_buf„r
 1

	)

1661 
	#EGL_NATIVE_BUFFER_TIZEN
 0x32A0

	)

1664 #i‚de‡
EGL_TIZEN_image_«tive_surÁ˚


1665 
	#EGL_TIZEN_image_«tive_surÁ˚
 1

	)

1666 
	#EGL_NATIVE_SURFACE_TIZEN
 0x32A1

	)

1669 #ifde‡
__˝lu•lus


	@SDL2/include/SDL_endian.h

28 #i‚de‡
SDL_ídün_h_


29 
	#SDL_ídün_h_


	)

31 
	~"SDL_°döc.h
"

37 
	#SDL_LIL_ENDIAN
 1234

	)

38 
	#SDL_BIG_ENDIAN
 4321

	)

41 #i‚de‡
SDL_BYTEORDER


42 #ifde‡
__löux__


43 
	~<ídün.h
>

44 
	#SDL_BYTEORDER
 
__BYTE_ORDER


	)

45 #ñi‡
deföed
(
__O≥nBSD__
)

46 
	~<ídün.h
>

47 
	#SDL_BYTEORDER
 
BYTE_ORDER


	)

49 #i‡
deföed
(
__hµa__
) || \

50 
deföed
(
__m68k__
Ë|| deföed(
mc68000
Ë|| deföed(
_M_M68K
) || \

51 (
deföed
(
__MIPS__
Ë&& deföed(
__MIPSEB__
)) || \

52 
deföed
(
__µc__
Ë|| deföed(
__POWERPC__
Ë|| deföed(
_M_PPC
) || \

53 
	$deföed
(
__•¨c__
)

54 
	#SDL_BYTEORDER
 
SDL_BIG_ENDIAN


	)

56 
	#SDL_BYTEORDER
 
SDL_LIL_ENDIAN


	)

62 
	~"begö_code.h
"

64 #ifde‡
__˝lu•lus


71 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
__i386__
) && \

72 !(
__GNUC__
 =2 && 
__GNUC_MINOR__
 == 95 )

73 
SDL_FORCE_INLINE
 
Uöt16


74 
	$SDL_Sw≠16
(
Uöt16
 
x
)

76 
	`__asm__
("xchgb %b0,%h0": "=q"(
x
):"0"(x));

77  
x
;

78 
	}
}

79 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

80 
SDL_FORCE_INLINE
 
Uöt16


81 
	$SDL_Sw≠16
(
Uöt16
 
x
)

83 
	`__asm__
("xchgb %b0,%h0": "=Q"(
x
):"0"(x));

84  
x
;

85 
	}
}

86 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

87 
SDL_FORCE_INLINE
 
Uöt16


88 
	$SDL_Sw≠16
(
Uöt16
 
x
)

90 
ªsu…
;

92 
	`__asm__
("æwimò%0,%2,8,16,23": "=&r"(
ªsu…
):"0"(
x
 >> 8), "r"(x));

93  (
Uöt16
)
ªsu…
;

94 
	}
}

95 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__M68000__
Ë|| deföed(
__M68020__
)Ë&& !deföed(
__mcﬁdfúe__
)

96 
SDL_FORCE_INLINE
 
Uöt16


97 
	$SDL_Sw≠16
(
Uöt16
 
x
)

99 
	`__asm__
("r‹w #8,%0": "=d"(
x
): "0"(x):"cc");

100  
x
;

101 
	}
}

102 #ñi‡
deföed
(
__WATCOMC__
Ë&& deföed(
__386__
)

103 
_ölöe
 
Uöt16
 
SDL_Sw≠16
(Uint16);

104 #¥agm®
aux
 
SDL_Sw≠16
 = \

106 
	g∑rm
 [
ax
] \

107 
	gmodify
 [
ax
];

109 
SDL_FORCE_INLINE
 
Uöt16


110 
	$SDL_Sw≠16
(
Uöt16
 
x
)

112  
	`SDL_°©ic_ˇ°
(
Uöt16
, ((
x
 << 8) | (x >> 8)));

113 
	}
}

116 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)

117 
SDL_FORCE_INLINE
 
Uöt32


118 
SDL_Sw≠32
(
Uöt32
 
x
)

120 
__asm__
("bsw≠ %0": "Ù"(
x
):"0"(x));

121  
	gx
;

123 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

124 
SDL_FORCE_INLINE
 
Uöt32


125 
SDL_Sw≠32
(
Uöt32
 
x
)

127 
__asm__
("bsw≠»%0": "Ù"(
x
):"0"(x));

128  
	gx
;

130 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__powîpc__
Ë|| deföed(
__µc__
))

131 
SDL_FORCE_INLINE
 
Uöt32


132 
SDL_Sw≠32
(
Uöt32
 
x
)

134 
Uöt32
 
	gªsu…
;

136 
__asm__
("æwimò%0,%2,24,16,23": "=&r"(
ªsu…
):"0"(
x
 >> 24), "r"(x));

137 
__asm__
("æwimò%0,%2,8,8,15": "=&r"(
ªsu…
):"0"‘esu…), "r"(
x
));

138 
__asm__
("æwimò%0,%2,24,0,7": "=&r"(
ªsu…
):"0"‘esu…), "r"(
x
));

139  
	gªsu…
;

141 #ñi‡
deföed
(
__GNUC__
Ë&& (deföed(
__M68000__
Ë|| deföed(
__M68020__
)Ë&& !deföed(
__mcﬁdfúe__
)

142 
SDL_FORCE_INLINE
 
Uöt32


143 
SDL_Sw≠32
(
Uöt32
 
x
)

145 
__asm__
("r‹w #8,%0\n\tsw≠ %0\n\å‹w #8,%0": "=d"(
x
): "0"(x):"cc");

146  
	gx
;

148 #ñi‡
deföed
(
__WATCOMC__
Ë&& deföed(
__386__
)

149 
_ölöe
 
Uöt32
 
SDL_Sw≠32
(Uint32);

150 #i‚de‡
__SW_3


151 #¥agm®
aux
 
SDL_Sw≠32
 = \

153 
	g∑rm
 [
óx
] \

154 
	gmodify
 [
óx
];

156 #¥agm®
aux
 
SDL_Sw≠32
 = \

160 
	g∑rm
 [
óx
] \

161 
	gmodify
 [
óx
];

164 
SDL_FORCE_INLINE
 
Uöt32


165 
SDL_Sw≠32
(
Uöt32
 
x
)

167  
SDL_°©ic_ˇ°
(
Uöt32
, ((
x
 << 24) | ((x << 8) & 0x00FF0000) |

168 ((
x
 >> 8) & 0x0000FF00) | (x >> 24)));

172 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)

173 
SDL_FORCE_INLINE
 
Uöt64


174 
SDL_Sw≠64
(
Uöt64
 
x
)

180 
Uöt32
 
	ga
, 
	gb
;

181 } 
	gs
;

182 
Uöt64
 
	gu
;

183 } 
	gv
;

184 
	gv
.
	gu
 = 
x
;

185 
__asm__
("bsw≠»%0 ; bsw≠»%1 ; xchg»%0,%1": "Ù"(
v
.
s
.
a
), "Ù"(v.s.
b
):"0"(v.s.a),

186 "1"(
v
.
s
.

187 
b
));

188  
	gv
.
	gu
;

190 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
__x86_64__
)

191 
SDL_FORCE_INLINE
 
Uöt64


192 
SDL_Sw≠64
(
Uöt64
 
x
)

194 
__asm__
("bsw≠q %0": "Ù"(
x
):"0"(x));

195  
	gx
;

198 
SDL_FORCE_INLINE
 
Uöt64


199 
SDL_Sw≠64
(
Uöt64
 
x
)

201 
Uöt32
 
	ghi
, 
	glo
;

204 
	glo
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

205 
	gx
 >>= 32;

206 
	ghi
 = 
SDL_°©ic_ˇ°
(
Uöt32
, 
x
 & 0xFFFFFFFF);

207 
	gx
 = 
SDL_Sw≠32
(
lo
);

208 
	gx
 <<= 32;

209 
	gx
 |
SDL_Sw≠32
(
hi
);

210  (
	gx
);

215 
SDL_FORCE_INLINE
 

216 
SDL_Sw≠Flﬂt
(
x
)

220 
	gf
;

221 
Uöt32
 
	gui32
;

222 } 
	gsw≠≥r
;

223 
	gsw≠≥r
.
	gf
 = 
x
;

224 
	gsw≠≥r
.
	gui32
 = 
SDL_Sw≠32
(
sw≠≥r
.
ui32
);

225  
	gsw≠≥r
.
	gf
;

234 #i‡
SDL_BYTEORDER
 =
SDL_LIL_ENDIAN


235 
	#SDL_Sw≠LE16
(
X
Ë(X)

	)

236 
	#SDL_Sw≠LE32
(
X
Ë(X)

	)

237 
	#SDL_Sw≠LE64
(
X
Ë(X)

	)

238 
	#SDL_Sw≠FlﬂtLE
(
X
Ë(X)

	)

239 
	#SDL_Sw≠BE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

240 
	#SDL_Sw≠BE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

241 
	#SDL_Sw≠BE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

242 
	#SDL_Sw≠FlﬂtBE
(
X
Ë
	`SDL_Sw≠Flﬂt
(X)

	)

244 
	#SDL_Sw≠LE16
(
X
Ë
	`SDL_Sw≠16
(X)

	)

245 
	#SDL_Sw≠LE32
(
X
Ë
	`SDL_Sw≠32
(X)

	)

246 
	#SDL_Sw≠LE64
(
X
Ë
	`SDL_Sw≠64
(X)

	)

247 
	#SDL_Sw≠FlﬂtLE
(
X
Ë
	`SDL_Sw≠Flﬂt
(X)

	)

248 
	#SDL_Sw≠BE16
(
X
Ë(X)

	)

249 
	#SDL_Sw≠BE32
(
X
Ë(X)

	)

250 
	#SDL_Sw≠BE64
(
X
Ë(X)

	)

251 
	#SDL_Sw≠FlﬂtBE
(
X
Ë(X)

	)

256 #ifde‡
__˝lu•lus


259 
	~"˛o£_code.h
"

	@SDL2/include/SDL_error.h

28 #i‚de‡
SDL_îr‹_h_


29 
	#SDL_îr‹_h_


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


41 
DECLSPEC
 
SDLCALL
 
SDL_SëEº‹
(
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(1);

42 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëEº‹
();

43 
DECLSPEC
 
SDLCALL
 
SDL_CÀ¨Eº‹
();

52 
	#SDL_OutOfMem‹y
(Ë
	`SDL_Eº‹
(
SDL_ENOMEM
)

	)

53 
	#SDL_Unsuµ‹ãd
(Ë
	`SDL_Eº‹
(
SDL_UNSUPPORTED
)

	)

54 
	#SDL_InvÆidP¨amEº‹
(
∑øm
Ë
	`SDL_SëEº‹
("P¨amëî '%s' i†övÆid", (∑øm))

	)

57 
	gSDL_ENOMEM
,

58 
	gSDL_EFREAD
,

59 
	gSDL_EFWRITE
,

60 
	gSDL_EFSEEK
,

61 
	gSDL_UNSUPPORTED
,

62 
	gSDL_LASTERROR


63 } 
	tSDL_îr‹code
;

65 
DECLSPEC
 
SDLCALL
 
SDL_Eº‹
(
SDL_îr‹code
 
code
);

69 #ifde‡
__˝lu•lus


72 
	~"˛o£_code.h
"

	@SDL2/include/SDL_events.h

28 #i‚de‡
SDL_evíts_h_


29 
	#SDL_evíts_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_video.h
"

34 
	~"SDL_keybﬂrd.h
"

35 
	~"SDL_mou£.h
"

36 
	~"SDL_joy°ick.h
"

37 
	~"SDL_gamec⁄åﬁÀr.h
"

38 
	~"SDL_quô.h
"

39 
	~"SDL_ge°uª.h
"

40 
	~"SDL_touch.h
"

42 
	~"begö_code.h
"

44 #ifde‡
__˝lu•lus


49 
	#SDL_RELEASED
 0

	)

50 
	#SDL_PRESSED
 1

	)

57 
SDL_FIRSTEVENT
 = 0,

60 
SDL_QUIT
 = 0x100,

63 
SDL_APP_TERMINATING
,

67 
SDL_APP_LOWMEMORY
,

71 
SDL_APP_WILLENTERBACKGROUND
,

75 
SDL_APP_DIDENTERBACKGROUND
,

79 
SDL_APP_WILLENTERFOREGROUND
,

83 
SDL_APP_DIDENTERFOREGROUND
,

89 
SDL_DISPLAYEVENT
 = 0x150,

92 
SDL_WINDOWEVENT
 = 0x200,

93 
SDL_SYSWMEVENT
,

96 
SDL_KEYDOWN
 = 0x300,

97 
SDL_KEYUP
,

98 
SDL_TEXTEDITING
,

99 
SDL_TEXTINPUT
,

100 
SDL_KEYMAPCHANGED
,

105 
SDL_MOUSEMOTION
 = 0x400,

106 
SDL_MOUSEBUTTONDOWN
,

107 
SDL_MOUSEBUTTONUP
,

108 
SDL_MOUSEWHEEL
,

111 
SDL_JOYAXISMOTION
 = 0x600,

112 
SDL_JOYBALLMOTION
,

113 
SDL_JOYHATMOTION
,

114 
SDL_JOYBUTTONDOWN
,

115 
SDL_JOYBUTTONUP
,

116 
SDL_JOYDEVICEADDED
,

117 
SDL_JOYDEVICEREMOVED
,

120 
SDL_CONTROLLERAXISMOTION
 = 0x650,

121 
SDL_CONTROLLERBUTTONDOWN
,

122 
SDL_CONTROLLERBUTTONUP
,

123 
SDL_CONTROLLERDEVICEADDED
,

124 
SDL_CONTROLLERDEVICEREMOVED
,

125 
SDL_CONTROLLERDEVICEREMAPPED
,

128 
SDL_FINGERDOWN
 = 0x700,

129 
SDL_FINGERUP
,

130 
SDL_FINGERMOTION
,

133 
SDL_DOLLARGESTURE
 = 0x800,

134 
SDL_DOLLARRECORD
,

135 
SDL_MULTIGESTURE
,

138 
SDL_CLIPBOARDUPDATE
 = 0x900,

141 
SDL_DROPFILE
 = 0x1000,

142 
SDL_DROPTEXT
,

143 
SDL_DROPBEGIN
,

144 
SDL_DROPCOMPLETE
,

147 
SDL_AUDIODEVICEADDED
 = 0x1100,

148 
SDL_AUDIODEVICEREMOVED
,

151 
SDL_SENSORUPDATE
 = 0x1200,

154 
SDL_RENDER_TARGETS_RESET
 = 0x2000,

155 
SDL_RENDER_DEVICE_RESET
,

160 
SDL_USEREVENT
 = 0x8000,

165 
SDL_LASTEVENT
 = 0xFFFF

166 } 
	tSDL_EvítTy≥
;

171 
	sSDL_Comm⁄Evít


173 
Uöt32
 
ty≥
;

174 
Uöt32
 
time°amp
;

175 } 
	tSDL_Comm⁄Evít
;

180 
	sSDL_Di•œyEvít


182 
Uöt32
 
ty≥
;

183 
Uöt32
 
time°amp
;

184 
Uöt32
 
di•œy
;

185 
Uöt8
 
evít
;

186 
Uöt8
 
∑ddög1
;

187 
Uöt8
 
∑ddög2
;

188 
Uöt8
 
∑ddög3
;

189 
Söt32
 
d©a1
;

190 } 
	tSDL_Di•œyEvít
;

195 
	sSDL_WödowEvít


197 
Uöt32
 
ty≥
;

198 
Uöt32
 
time°amp
;

199 
Uöt32
 
wödowID
;

200 
Uöt8
 
evít
;

201 
Uöt8
 
∑ddög1
;

202 
Uöt8
 
∑ddög2
;

203 
Uöt8
 
∑ddög3
;

204 
Söt32
 
d©a1
;

205 
Söt32
 
d©a2
;

206 } 
	tSDL_WödowEvít
;

211 
	sSDL_KeybﬂrdEvít


213 
Uöt32
 
ty≥
;

214 
Uöt32
 
time°amp
;

215 
Uöt32
 
wödowID
;

216 
Uöt8
 
°©e
;

217 
Uöt8
 
ª≥©
;

218 
Uöt8
 
∑ddög2
;

219 
Uöt8
 
∑ddög3
;

220 
SDL_Keysym
 
keysym
;

221 } 
	tSDL_KeybﬂrdEvít
;

223 
	#SDL_TEXTEDITINGEVENT_TEXT_SIZE
 (32)

	)

227 
	sSDL_TextEdôögEvít


229 
Uöt32
 
ty≥
;

230 
Uöt32
 
time°amp
;

231 
Uöt32
 
wödowID
;

232 
ãxt
[
SDL_TEXTEDITINGEVENT_TEXT_SIZE
];

233 
Söt32
 
°¨t
;

234 
Söt32
 
Àngth
;

235 } 
	tSDL_TextEdôögEvít
;

238 
	#SDL_TEXTINPUTEVENT_TEXT_SIZE
 (32)

	)

242 
	sSDL_TextI≈utEvít


244 
Uöt32
 
ty≥
;

245 
Uöt32
 
time°amp
;

246 
Uöt32
 
wödowID
;

247 
ãxt
[
SDL_TEXTINPUTEVENT_TEXT_SIZE
];

248 } 
	tSDL_TextI≈utEvít
;

253 
	sSDL_Mou£MŸi⁄Evít


255 
Uöt32
 
ty≥
;

256 
Uöt32
 
time°amp
;

257 
Uöt32
 
wödowID
;

258 
Uöt32
 
which
;

259 
Uöt32
 
°©e
;

260 
Söt32
 
x
;

261 
Söt32
 
y
;

262 
Söt32
 
xªl
;

263 
Söt32
 
yªl
;

264 } 
	tSDL_Mou£MŸi⁄Evít
;

269 
	sSDL_Mou£Buâ⁄Evít


271 
Uöt32
 
ty≥
;

272 
Uöt32
 
time°amp
;

273 
Uöt32
 
wödowID
;

274 
Uöt32
 
which
;

275 
Uöt8
 
buâ⁄
;

276 
Uöt8
 
°©e
;

277 
Uöt8
 
˛icks
;

278 
Uöt8
 
∑ddög1
;

279 
Söt32
 
x
;

280 
Söt32
 
y
;

281 } 
	tSDL_Mou£Buâ⁄Evít
;

286 
	sSDL_Mou£WhìlEvít


288 
Uöt32
 
ty≥
;

289 
Uöt32
 
time°amp
;

290 
Uöt32
 
wödowID
;

291 
Uöt32
 
which
;

292 
Söt32
 
x
;

293 
Söt32
 
y
;

294 
Uöt32
 
dúe˘i⁄
;

295 } 
	tSDL_Mou£WhìlEvít
;

300 
	sSDL_JoyAxisEvít


302 
Uöt32
 
ty≥
;

303 
Uöt32
 
time°amp
;

304 
SDL_Joy°ickID
 
which
;

305 
Uöt8
 
axis
;

306 
Uöt8
 
∑ddög1
;

307 
Uöt8
 
∑ddög2
;

308 
Uöt8
 
∑ddög3
;

309 
Söt16
 
vÆue
;

310 
Uöt16
 
∑ddög4
;

311 } 
	tSDL_JoyAxisEvít
;

316 
	sSDL_JoyBÆlEvít


318 
Uöt32
 
ty≥
;

319 
Uöt32
 
time°amp
;

320 
SDL_Joy°ickID
 
which
;

321 
Uöt8
 
bÆl
;

322 
Uöt8
 
∑ddög1
;

323 
Uöt8
 
∑ddög2
;

324 
Uöt8
 
∑ddög3
;

325 
Söt16
 
xªl
;

326 
Söt16
 
yªl
;

327 } 
	tSDL_JoyBÆlEvít
;

332 
	sSDL_JoyH©Evít


334 
Uöt32
 
ty≥
;

335 
Uöt32
 
time°amp
;

336 
SDL_Joy°ickID
 
which
;

337 
Uöt8
 
h©
;

338 
Uöt8
 
vÆue
;

345 
Uöt8
 
∑ddög1
;

346 
Uöt8
 
∑ddög2
;

347 } 
	tSDL_JoyH©Evít
;

352 
	sSDL_JoyBuâ⁄Evít


354 
Uöt32
 
ty≥
;

355 
Uöt32
 
time°amp
;

356 
SDL_Joy°ickID
 
which
;

357 
Uöt8
 
buâ⁄
;

358 
Uöt8
 
°©e
;

359 
Uöt8
 
∑ddög1
;

360 
Uöt8
 
∑ddög2
;

361 } 
	tSDL_JoyBuâ⁄Evít
;

366 
	sSDL_JoyDevi˚Evít


368 
Uöt32
 
ty≥
;

369 
Uöt32
 
time°amp
;

370 
Söt32
 
which
;

371 } 
	tSDL_JoyDevi˚Evít
;

377 
	sSDL_C⁄åﬁÀrAxisEvít


379 
Uöt32
 
ty≥
;

380 
Uöt32
 
time°amp
;

381 
SDL_Joy°ickID
 
which
;

382 
Uöt8
 
axis
;

383 
Uöt8
 
∑ddög1
;

384 
Uöt8
 
∑ddög2
;

385 
Uöt8
 
∑ddög3
;

386 
Söt16
 
vÆue
;

387 
Uöt16
 
∑ddög4
;

388 } 
	tSDL_C⁄åﬁÀrAxisEvít
;

394 
	sSDL_C⁄åﬁÀrBuâ⁄Evít


396 
Uöt32
 
ty≥
;

397 
Uöt32
 
time°amp
;

398 
SDL_Joy°ickID
 
which
;

399 
Uöt8
 
buâ⁄
;

400 
Uöt8
 
°©e
;

401 
Uöt8
 
∑ddög1
;

402 
Uöt8
 
∑ddög2
;

403 } 
	tSDL_C⁄åﬁÀrBuâ⁄Evít
;

409 
	sSDL_C⁄åﬁÀrDevi˚Evít


411 
Uöt32
 
ty≥
;

412 
Uöt32
 
time°amp
;

413 
Söt32
 
which
;

414 } 
	tSDL_C⁄åﬁÀrDevi˚Evít
;

419 
	sSDL_AudioDevi˚Evít


421 
Uöt32
 
ty≥
;

422 
Uöt32
 
time°amp
;

423 
Uöt32
 
which
;

424 
Uöt8
 
isˇ±uª
;

425 
Uöt8
 
∑ddög1
;

426 
Uöt8
 
∑ddög2
;

427 
Uöt8
 
∑ddög3
;

428 } 
	tSDL_AudioDevi˚Evít
;

434 
	sSDL_TouchFögîEvít


436 
Uöt32
 
ty≥
;

437 
Uöt32
 
time°amp
;

438 
SDL_TouchID
 
touchId
;

439 
SDL_FögîID
 
fögîId
;

440 
x
;

441 
y
;

442 
dx
;

443 
dy
;

444 
¥essuª
;

445 
Uöt32
 
wödowID
;

446 } 
	tSDL_TouchFögîEvít
;

452 
	sSDL_Mu…iGe°uªEvít


454 
Uöt32
 
ty≥
;

455 
Uöt32
 
time°amp
;

456 
SDL_TouchID
 
touchId
;

457 
dThëa
;

458 
dDi°
;

459 
x
;

460 
y
;

461 
Uöt16
 
numFögîs
;

462 
Uöt16
 
∑ddög
;

463 } 
	tSDL_Mu…iGe°uªEvít
;

469 
	sSDL_DﬁœrGe°uªEvít


471 
Uöt32
 
ty≥
;

472 
Uöt32
 
time°amp
;

473 
SDL_TouchID
 
touchId
;

474 
SDL_Ge°uªID
 
ge°uªId
;

475 
Uöt32
 
numFögîs
;

476 
îr‹
;

477 
x
;

478 
y
;

479 } 
	tSDL_DﬁœrGe°uªEvít
;

487 
	sSDL_Dr›Evít


489 
Uöt32
 
ty≥
;

490 
Uöt32
 
time°amp
;

491 *
fûe
;

492 
Uöt32
 
wödowID
;

493 } 
	tSDL_Dr›Evít
;

499 
	sSDL_Sís‹Evít


501 
Uöt32
 
ty≥
;

502 
Uöt32
 
time°amp
;

503 
Söt32
 
which
;

504 
d©a
[6];

505 } 
	tSDL_Sís‹Evít
;

510 
	sSDL_QuôEvít


512 
Uöt32
 
ty≥
;

513 
Uöt32
 
time°amp
;

514 } 
	tSDL_QuôEvít
;

519 
	sSDL_OSEvít


521 
Uöt32
 
ty≥
;

522 
Uöt32
 
time°amp
;

523 } 
	tSDL_OSEvít
;

528 
	sSDL_U£rEvít


530 
Uöt32
 
ty≥
;

531 
Uöt32
 
time°amp
;

532 
Uöt32
 
wödowID
;

533 
Söt32
 
code
;

534 *
d©a1
;

535 *
d©a2
;

536 } 
	tSDL_U£rEvít
;

539 
SDL_SysWMmsg
;

540 
SDL_SysWMmsg
 
	tSDL_SysWMmsg
;

548 
	sSDL_SysWMEvít


550 
Uöt32
 
ty≥
;

551 
Uöt32
 
time°amp
;

552 
SDL_SysWMmsg
 *
msg
;

553 } 
	tSDL_SysWMEvít
;

558 
	uSDL_Evít


560 
Uöt32
 
ty≥
;

561 
SDL_Comm⁄Evít
 
comm⁄
;

562 
SDL_Di•œyEvít
 
di•œy
;

563 
SDL_WödowEvít
 
wödow
;

564 
SDL_KeybﬂrdEvít
 
key
;

565 
SDL_TextEdôögEvít
 
edô
;

566 
SDL_TextI≈utEvít
 
ãxt
;

567 
SDL_Mou£MŸi⁄Evít
 
mŸi⁄
;

568 
SDL_Mou£Buâ⁄Evít
 
buâ⁄
;

569 
SDL_Mou£WhìlEvít
 
whìl
;

570 
SDL_JoyAxisEvít
 
jaxis
;

571 
SDL_JoyBÆlEvít
 
jbÆl
;

572 
SDL_JoyH©Evít
 
jh©
;

573 
SDL_JoyBuâ⁄Evít
 
jbuâ⁄
;

574 
SDL_JoyDevi˚Evít
 
jdevi˚
;

575 
SDL_C⁄åﬁÀrAxisEvít
 
ˇxis
;

576 
SDL_C⁄åﬁÀrBuâ⁄Evít
 
cbuâ⁄
;

577 
SDL_C⁄åﬁÀrDevi˚Evít
 
cdevi˚
;

578 
SDL_AudioDevi˚Evít
 
adevi˚
;

579 
SDL_Sís‹Evít
 
£ns‹
;

580 
SDL_QuôEvít
 
quô
;

581 
SDL_U£rEvít
 
u£r
;

582 
SDL_SysWMEvít
 
syswm
;

583 
SDL_TouchFögîEvít
 
tfögî
;

584 
SDL_Mu…iGe°uªEvít
 
mge°uª
;

585 
SDL_DﬁœrGe°uªEvít
 
dge°uª
;

586 
SDL_Dr›Evít
 
dr›
;

595 
Uöt8
 
∑ddög
[56];

596 } 
	tSDL_Evít
;

599 
SDL_COMPILE_TIME_ASSERT
(
SDL_Evít
, (SDL_Event) == 56);

611 
DECLSPEC
 
SDLCALL
 
SDL_PumpEvíts
();

616 
	gSDL_ADDEVENT
,

617 
	gSDL_PEEKEVENT
,

618 
	gSDL_GETEVENT


619 } 
	tSDL_evíè˘i⁄
;

639 
DECLSPEC
 
SDLCALL
 
SDL_PìpEvíts
(
SDL_Evít
 * 
evíts
, 
numevíts
,

640 
SDL_evíè˘i⁄
 
a˘i⁄
,

641 
Uöt32
 
möTy≥
, Uöt32 
maxTy≥
);

647 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasEvít
(
Uöt32
 
ty≥
);

648 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasEvíts
(
Uöt32
 
möTy≥
, Uöt32 
maxTy≥
);

656 
DECLSPEC
 
SDLCALL
 
SDL_FlushEvít
(
Uöt32
 
ty≥
);

657 
DECLSPEC
 
SDLCALL
 
SDL_FlushEvíts
(
Uöt32
 
möTy≥
, Uöt32 
maxTy≥
);

667 
DECLSPEC
 
SDLCALL
 
SDL_PﬁlEvít
(
SDL_Evít
 * 
evít
);

677 
DECLSPEC
 
SDLCALL
 
SDL_WaôEvít
(
SDL_Evít
 * 
evít
);

689 
DECLSPEC
 
SDLCALL
 
SDL_WaôEvítTimeout
(
SDL_Evít
 * 
evít
,

690 
timeout
);

698 
DECLSPEC
 
SDLCALL
 
SDL_PushEvít
(
SDL_Evít
 * 
evít
);

700 (
SDLCALL
 * 
	tSDL_EvítFûãr
Ë(*
	tu£rd©a
, 
	tSDL_Evít
 * 
	tevít
);

727 
DECLSPEC
 
SDLCALL
 
SDL_SëEvítFûãr
(
SDL_EvítFûãr
 
fûãr
,

728 *
u£rd©a
);

734 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GëEvítFûãr
(
SDL_EvítFûãr
 * 
fûãr
,

735 **
u£rd©a
);

740 
DECLSPEC
 
SDLCALL
 
SDL_AddEvítW©ch
(
SDL_EvítFûãr
 
fûãr
,

741 *
u£rd©a
);

746 
DECLSPEC
 
SDLCALL
 
SDL_DñEvítW©ch
(
SDL_EvítFûãr
 
fûãr
,

747 *
u£rd©a
);

753 
DECLSPEC
 
SDLCALL
 
SDL_FûãrEvíts
(
SDL_EvítFûãr
 
fûãr
,

754 *
u£rd©a
);

757 
	#SDL_QUERY
 -1

	)

758 
	#SDL_IGNORE
 0

	)

759 
	#SDL_DISABLE
 0

	)

760 
	#SDL_ENABLE
 1

	)

771 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_EvítSèã
(
Uöt32
 
ty≥
, 
°©e
);

773 
	#SDL_GëEvítSèã
(
ty≥
Ë
	`SDL_EvítSèã
—y≥, 
SDL_QUERY
)

	)

782 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_Regi°îEvíts
(
numevíts
);

785 #ifde‡
__˝lu•lus


788 
	~"˛o£_code.h
"

	@SDL2/include/SDL_filesystem.h

28 #i‚de‡
SDL_fûesy°em_h_


29 
	#SDL_fûesy°em_h_


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


63 
DECLSPEC
 *
SDLCALL
 
SDL_GëBa£P©h
();

126 
DECLSPEC
 *
SDLCALL
 
SDL_GëPªfP©h
(c⁄° *
‹g
, c⁄° *
≠p
);

129 #ifde‡
__˝lu•lus


132 
	~"˛o£_code.h
"

	@SDL2/include/SDL_gamecontroller.h

28 #i‚de‡
SDL_gamec⁄åﬁÀr_h_


29 
	#SDL_gamec⁄åﬁÀr_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_rw›s.h
"

34 
	~"SDL_joy°ick.h
"

36 
	~"begö_code.h
"

38 #ifde‡
__˝lu•lus


57 
_SDL_GameC⁄åﬁÀr
;

58 
_SDL_GameC⁄åﬁÀr
 
	tSDL_GameC⁄åﬁÀr
;

62 
SDL_CONTROLLER_TYPE_UNKNOWN
 = 0,

63 
SDL_CONTROLLER_TYPE_XBOX360
,

64 
SDL_CONTROLLER_TYPE_XBOXONE
,

65 
SDL_CONTROLLER_TYPE_PS3
,

66 
SDL_CONTROLLER_TYPE_PS4
,

67 
SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO


68 } 
	tSDL_GameC⁄åﬁÀrTy≥
;

72 
SDL_CONTROLLER_BINDTYPE_NONE
 = 0,

73 
SDL_CONTROLLER_BINDTYPE_BUTTON
,

74 
SDL_CONTROLLER_BINDTYPE_AXIS
,

75 
SDL_CONTROLLER_BINDTYPE_HAT


76 } 
	tSDL_GameC⁄åﬁÀrBödTy≥
;

81 
	sSDL_GameC⁄åﬁÀrBuâ⁄Böd


83 
SDL_GameC⁄åﬁÀrBödTy≥
 
bödTy≥
;

86 
buâ⁄
;

87 
axis
;

89 
h©
;

90 
h©_mask
;

91 } 
h©
;

92 } 
vÆue
;

94 } 
	tSDL_GameC⁄åﬁÀrBuâ⁄Böd
;

131 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrAddM≠pögsFromRW
(
SDL_RW›s
 * 
rw
, 
‰ìrw
);

138 
	#SDL_GameC⁄åﬁÀrAddM≠pögsFromFûe
(
fûe
Ë
	`SDL_GameC⁄åﬁÀrAddM≠pögsFromRW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

145 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrAddM≠pög
(c⁄° * 
m≠pögSåög
);

152 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrNumM≠pögs
();

159 
DECLSPEC
 * 
SDLCALL
 
SDL_GameC⁄åﬁÀrM≠pögF‹Index
(
m≠pög_ödex
);

166 
DECLSPEC
 * 
SDLCALL
 
SDL_GameC⁄åﬁÀrM≠pögF‹GUID
(
SDL_Joy°ickGUID
 
guid
);

173 
DECLSPEC
 * 
SDLCALL
 
SDL_GameC⁄åﬁÀrM≠pög
(
SDL_GameC⁄åﬁÀr
 * 
gamec⁄åﬁÀr
);

178 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_IsGameC⁄åﬁÀr
(
joy°ick_ödex
);

185 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GameC⁄åﬁÀrNameF‹Index
(
joy°ick_ödex
);

191 
DECLSPEC
 
SDL_GameC⁄åﬁÀrTy≥
 
SDLCALL
 
SDL_GameC⁄åﬁÀrTy≥F‹Index
(
joy°ick_ödex
);

199 
DECLSPEC
 *
SDLCALL
 
SDL_GameC⁄åﬁÀrM≠pögF‹Devi˚Index
(
joy°ick_ödex
);

210 
DECLSPEC
 
SDL_GameC⁄åﬁÀr
 *
SDLCALL
 
SDL_GameC⁄åﬁÀrO≥n
(
joy°ick_ödex
);

215 
DECLSPEC
 
SDL_GameC⁄åﬁÀr
 *
SDLCALL
 
SDL_GameC⁄åﬁÀrFromIn°™˚ID
(
SDL_Joy°ickID
 
joyid
);

220 
DECLSPEC
 
SDL_GameC⁄åﬁÀr
 *
SDLCALL
 
SDL_GameC⁄åﬁÀrFromPœyîIndex
(
∂ayî_ödex
);

225 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GameC⁄åﬁÀrName
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
);

230 
DECLSPEC
 
SDL_GameC⁄åﬁÀrTy≥
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëTy≥
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
);

237 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëPœyîIndex
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
);

242 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrSëPœyîIndex
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
, 
∂ayî_ödex
);

248 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëVíd‹
(
SDL_GameC⁄åﬁÀr
 * 
gamec⁄åﬁÀr
);

254 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëProdu˘
(
SDL_GameC⁄åﬁÀr
 * 
gamec⁄åﬁÀr
);

260 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëProdu˘Vîsi⁄
(
SDL_GameC⁄åﬁÀr
 * 
gamec⁄åﬁÀr
);

266 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëAâached
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
);

271 
DECLSPEC
 
SDL_Joy°ick
 *
SDLCALL
 
SDL_GameC⁄åﬁÀrGëJoy°ick
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
);

282 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrEvítSèã
(
°©e
);

290 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrUpd©e
();

304 
	gSDL_CONTROLLER_AXIS_INVALID
 = -1,

305 
	gSDL_CONTROLLER_AXIS_LEFTX
,

306 
	gSDL_CONTROLLER_AXIS_LEFTY
,

307 
	gSDL_CONTROLLER_AXIS_RIGHTX
,

308 
	gSDL_CONTROLLER_AXIS_RIGHTY
,

309 
	gSDL_CONTROLLER_AXIS_TRIGGERLEFT
,

310 
	gSDL_CONTROLLER_AXIS_TRIGGERRIGHT
,

311 
	gSDL_CONTROLLER_AXIS_MAX


312 } 
	tSDL_GameC⁄åﬁÀrAxis
;

317 
DECLSPEC
 
SDL_GameC⁄åﬁÀrAxis
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëAxisFromSåög
(c⁄° *
pchSåög
);

322 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëSåögF‹Axis
(
SDL_GameC⁄åﬁÀrAxis
 
axis
);

327 
DECLSPEC
 
SDL_GameC⁄åﬁÀrBuâ⁄Böd
 
SDLCALL


328 
SDL_GameC⁄åﬁÀrGëBödF‹Axis
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
,

329 
SDL_GameC⁄åﬁÀrAxis
 
axis
);

339 
DECLSPEC
 
Söt16
 
SDLCALL


340 
SDL_GameC⁄åﬁÀrGëAxis
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
,

341 
SDL_GameC⁄åﬁÀrAxis
 
axis
);

348 
	gSDL_CONTROLLER_BUTTON_INVALID
 = -1,

349 
	gSDL_CONTROLLER_BUTTON_A
,

350 
	gSDL_CONTROLLER_BUTTON_B
,

351 
	gSDL_CONTROLLER_BUTTON_X
,

352 
	gSDL_CONTROLLER_BUTTON_Y
,

353 
	gSDL_CONTROLLER_BUTTON_BACK
,

354 
	gSDL_CONTROLLER_BUTTON_GUIDE
,

355 
	gSDL_CONTROLLER_BUTTON_START
,

356 
	gSDL_CONTROLLER_BUTTON_LEFTSTICK
,

357 
	gSDL_CONTROLLER_BUTTON_RIGHTSTICK
,

358 
	gSDL_CONTROLLER_BUTTON_LEFTSHOULDER
,

359 
	gSDL_CONTROLLER_BUTTON_RIGHTSHOULDER
,

360 
	gSDL_CONTROLLER_BUTTON_DPAD_UP
,

361 
	gSDL_CONTROLLER_BUTTON_DPAD_DOWN
,

362 
	gSDL_CONTROLLER_BUTTON_DPAD_LEFT
,

363 
	gSDL_CONTROLLER_BUTTON_DPAD_RIGHT
,

364 
	gSDL_CONTROLLER_BUTTON_MAX


365 } 
	tSDL_GameC⁄åﬁÀrBuâ⁄
;

370 
DECLSPEC
 
SDL_GameC⁄åﬁÀrBuâ⁄
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëBuâ⁄FromSåög
(c⁄° *
pchSåög
);

375 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëSåögF‹Buâ⁄
(
SDL_GameC⁄åﬁÀrBuâ⁄
 
buâ⁄
);

380 
DECLSPEC
 
SDL_GameC⁄åﬁÀrBuâ⁄Böd
 
SDLCALL


381 
SDL_GameC⁄åﬁÀrGëBödF‹Buâ⁄
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
,

382 
SDL_GameC⁄åﬁÀrBuâ⁄
 
buâ⁄
);

390 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_GameC⁄åﬁÀrGëBuâ⁄
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
,

391 
SDL_GameC⁄åﬁÀrBuâ⁄
 
buâ⁄
);

404 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrRumbÀ
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
, 
Uöt16
 
low_‰equícy_rumbÀ
, Uöt16 
high_‰equícy_rumbÀ
, 
Uöt32
 
duøti⁄_ms
);

409 
DECLSPEC
 
SDLCALL
 
SDL_GameC⁄åﬁÀrClo£
(
SDL_GameC⁄åﬁÀr
 *
gamec⁄åﬁÀr
);

413 #ifde‡
__˝lu•lus


416 
	~"˛o£_code.h
"

	@SDL2/include/SDL_gesture.h

28 #i‚de‡
SDL_ge°uª_h_


29 
	#SDL_ge°uª_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_video.h
"

35 
	~"SDL_touch.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


44 
Söt64
 
	tSDL_Ge°uªID
;

53 
DECLSPEC
 
SDLCALL
 
SDL_Rec‹dGe°uª
(
SDL_TouchID
 
touchId
);

61 
DECLSPEC
 
SDLCALL
 
SDL_SaveAŒDﬁœrTem∂©es
(
SDL_RW›s
 *
d°
);

68 
DECLSPEC
 
SDLCALL
 
SDL_SaveDﬁœrTem∂©e
(
SDL_Ge°uªID
 
ge°uªId
,
SDL_RW›s
 *
d°
);

76 
DECLSPEC
 
SDLCALL
 
SDL_LﬂdDﬁœrTem∂©es
(
SDL_TouchID
 
touchId
, 
SDL_RW›s
 *
§c
);

80 #ifde‡
__˝lu•lus


83 
	~"˛o£_code.h
"

	@SDL2/include/SDL_haptic.h

107 #i‚de‡
SDL_h≠tic_h_


108 
	#SDL_h≠tic_h_


	)

110 
	~"SDL_°döc.h
"

111 
	~"SDL_îr‹.h
"

112 
	~"SDL_joy°ick.h
"

114 
	~"begö_code.h
"

116 #ifde‡
__˝lu•lus


140 
_SDL_H≠tic
;

141 
_SDL_H≠tic
 
	tSDL_H≠tic
;

163 
	#SDL_HAPTIC_CONSTANT
 (1u<<0)

	)

172 
	#SDL_HAPTIC_SINE
 (1u<<1)

	)

183 
	#SDL_HAPTIC_LEFTRIGHT
 (1u<<2)

	)

195 
	#SDL_HAPTIC_TRIANGLE
 (1u<<3)

	)

204 
	#SDL_HAPTIC_SAWTOOTHUP
 (1u<<4)

	)

213 
	#SDL_HAPTIC_SAWTOOTHDOWN
 (1u<<5)

	)

222 
	#SDL_HAPTIC_RAMP
 (1u<<6)

	)

232 
	#SDL_HAPTIC_SPRING
 (1u<<7)

	)

242 
	#SDL_HAPTIC_DAMPER
 (1u<<8)

	)

252 
	#SDL_HAPTIC_INERTIA
 (1u<<9)

	)

262 
	#SDL_HAPTIC_FRICTION
 (1u<<10)

	)

269 
	#SDL_HAPTIC_CUSTOM
 (1u<<11)

	)

282 
	#SDL_HAPTIC_GAIN
 (1u<<12)

	)

291 
	#SDL_HAPTIC_AUTOCENTER
 (1u<<13)

	)

300 
	#SDL_HAPTIC_STATUS
 (1u<<14)

	)

310 
	#SDL_HAPTIC_PAUSE
 (1u<<15)

	)

323 
	#SDL_HAPTIC_POLAR
 0

	)

330 
	#SDL_HAPTIC_CARTESIAN
 1

	)

337 
	#SDL_HAPTIC_SPHERICAL
 2

	)

352 
	#SDL_HAPTIC_INFINITY
 4294967295U

	)

450 
	sSDL_H≠ticDúe˘i⁄


452 
Uöt8
 
ty≥
;

453 
Söt32
 
dú
[3];

454 } 
	tSDL_H≠ticDúe˘i⁄
;

468 
	sSDL_H≠ticC⁄°™t


471 
Uöt16
 
ty≥
;

472 
SDL_H≠ticDúe˘i⁄
 
dúe˘i⁄
;

475 
Uöt32
 
Àngth
;

476 
Uöt16
 
dñay
;

479 
Uöt16
 
buâ⁄
;

480 
Uöt16
 
öãrvÆ
;

483 
Söt16
 
Àvñ
;

486 
Uöt16
 
©èck_Àngth
;

487 
Uöt16
 
©èck_Àvñ
;

488 
Uöt16
 
Áde_Àngth
;

489 
Uöt16
 
Áde_Àvñ
;

490 } 
	tSDL_H≠ticC⁄°™t
;

549 
	sSDL_H≠ticPîiodic


552 
Uöt16
 
ty≥
;

555 
SDL_H≠ticDúe˘i⁄
 
dúe˘i⁄
;

558 
Uöt32
 
Àngth
;

559 
Uöt16
 
dñay
;

562 
Uöt16
 
buâ⁄
;

563 
Uöt16
 
öãrvÆ
;

566 
Uöt16
 
≥riod
;

567 
Söt16
 
magnôude
;

568 
Söt16
 
off£t
;

569 
Uöt16
 
pha£
;

572 
Uöt16
 
©èck_Àngth
;

573 
Uöt16
 
©èck_Àvñ
;

574 
Uöt16
 
Áde_Àngth
;

575 
Uöt16
 
Áde_Àvñ
;

576 } 
	tSDL_H≠ticPîiodic
;

602 
	sSDL_H≠ticC⁄dôi⁄


605 
Uöt16
 
ty≥
;

607 
SDL_H≠ticDúe˘i⁄
 
dúe˘i⁄
;

610 
Uöt32
 
Àngth
;

611 
Uöt16
 
dñay
;

614 
Uöt16
 
buâ⁄
;

615 
Uöt16
 
öãrvÆ
;

618 
Uöt16
 
right_ßt
[3];

619 
Uöt16
 
À·_ßt
[3];

620 
Söt16
 
right_c€ff
[3];

621 
Söt16
 
À·_c€ff
[3];

622 
Uöt16
 
dódb™d
[3];

623 
Söt16
 
˚¡î
[3];

624 } 
	tSDL_H≠ticC⁄dôi⁄
;

639 
	sSDL_H≠ticRamp


642 
Uöt16
 
ty≥
;

643 
SDL_H≠ticDúe˘i⁄
 
dúe˘i⁄
;

646 
Uöt32
 
Àngth
;

647 
Uöt16
 
dñay
;

650 
Uöt16
 
buâ⁄
;

651 
Uöt16
 
öãrvÆ
;

654 
Söt16
 
°¨t
;

655 
Söt16
 
íd
;

658 
Uöt16
 
©èck_Àngth
;

659 
Uöt16
 
©èck_Àvñ
;

660 
Uöt16
 
Áde_Àngth
;

661 
Uöt16
 
Áde_Àvñ
;

662 } 
	tSDL_H≠ticRamp
;

676 
	sSDL_H≠ticLe·Right


679 
Uöt16
 
ty≥
;

682 
Uöt32
 
Àngth
;

685 
Uöt16
 
œrge_magnôude
;

686 
Uöt16
 
smÆl_magnôude
;

687 } 
	tSDL_H≠ticLe·Right
;

704 
	sSDL_H≠ticCu°om


707 
Uöt16
 
ty≥
;

708 
SDL_H≠ticDúe˘i⁄
 
dúe˘i⁄
;

711 
Uöt32
 
Àngth
;

712 
Uöt16
 
dñay
;

715 
Uöt16
 
buâ⁄
;

716 
Uöt16
 
öãrvÆ
;

719 
Uöt8
 
ch™√ls
;

720 
Uöt16
 
≥riod
;

721 
Uöt16
 
ßm∂es
;

722 
Uöt16
 *
d©a
;

725 
Uöt16
 
©èck_Àngth
;

726 
Uöt16
 
©èck_Àvñ
;

727 
Uöt16
 
Áde_Àngth
;

728 
Uöt16
 
Áde_Àvñ
;

729 } 
	tSDL_H≠ticCu°om
;

800 
	uSDL_H≠ticEf„˘


803 
Uöt16
 
ty≥
;

804 
SDL_H≠ticC⁄°™t
 
c⁄°™t
;

805 
SDL_H≠ticPîiodic
 
≥riodic
;

806 
SDL_H≠ticC⁄dôi⁄
 
c⁄dôi⁄
;

807 
SDL_H≠ticRamp
 
ømp
;

808 
SDL_H≠ticLe·Right
 
À·right
;

809 
SDL_H≠ticCu°om
 
cu°om
;

810 } 
	tSDL_H≠ticEf„˘
;

819 
DECLSPEC
 
SDLCALL
 
SDL_NumH≠tics
();

832 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_H≠ticName
(
devi˚_ödex
);

856 
DECLSPEC
 
SDL_H≠tic
 *
SDLCALL
 
SDL_H≠ticO≥n
(
devi˚_ödex
);

867 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticO≥√d
(
devi˚_ödex
);

878 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticIndex
(
SDL_H≠tic
 * 
h≠tic
);

887 
DECLSPEC
 
SDLCALL
 
SDL_Mou£IsH≠tic
();

897 
DECLSPEC
 
SDL_H≠tic
 *
SDLCALL
 
SDL_H≠ticO≥nFromMou£
();

908 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickIsH≠tic
(
SDL_Joy°ick
 * 
joy°ick
);

927 
DECLSPEC
 
SDL_H≠tic
 *
SDLCALL
 
SDL_H≠ticO≥nFromJoy°ick
(
SDL_Joy°ick
 *

928 
joy°ick
);

935 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticClo£
(
SDL_H≠tic
 * 
h≠tic
);

951 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticNumEf„˘s
(
SDL_H≠tic
 * 
h≠tic
);

967 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticNumEf„˘sPœyög
(
SDL_H≠tic
 * 
h≠tic
);

985 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticQuîy
(
SDL_H≠tic
 * 
h≠tic
);

993 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticNumAxes
(
SDL_H≠tic
 * 
h≠tic
);

1005 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticEf„˘Suµ‹ãd
(
SDL_H≠tic
 * 
h≠tic
,

1006 
SDL_H≠ticEf„˘
 *

1007 
ef„˘
);

1020 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticNewEf„˘
(
SDL_H≠tic
 * 
h≠tic
,

1021 
SDL_H≠ticEf„˘
 * 
ef„˘
);

1040 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticUpd©eEf„˘
(
SDL_H≠tic
 * 
h≠tic
,

1041 
ef„˘
,

1042 
SDL_H≠ticEf„˘
 * 
d©a
);

1062 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticRunEf„˘
(
SDL_H≠tic
 * 
h≠tic
,

1063 
ef„˘
,

1064 
Uöt32
 
ôî©i⁄s
);

1076 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticSt›Ef„˘
(
SDL_H≠tic
 * 
h≠tic
,

1077 
ef„˘
);

1090 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticDe°royEf„˘
(
SDL_H≠tic
 * 
h≠tic
,

1091 
ef„˘
);

1105 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticGëEf„˘Sètus
(
SDL_H≠tic
 * 
h≠tic
,

1106 
ef„˘
);

1124 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticSëGaö
(
SDL_H≠tic
 * 
h≠tic
, 
gaö
);

1140 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticSëAuto˚¡î
(
SDL_H≠tic
 * 
h≠tic
,

1141 
auto˚¡î
);

1157 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticPau£
(
SDL_H≠tic
 * 
h≠tic
);

1169 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticU≈au£
(
SDL_H≠tic
 * 
h≠tic
);

1177 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticSt›AŒ
(
SDL_H≠tic
 * 
h≠tic
);

1189 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticRumbÀSuµ‹ãd
(
SDL_H≠tic
 * 
h≠tic
);

1202 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticRumbÀInô
(
SDL_H≠tic
 * 
h≠tic
);

1216 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticRumbÀPœy
(
SDL_H≠tic
 * 
h≠tic
, 
°ªngth
, 
Uöt32
 
Àngth
 );

1228 
DECLSPEC
 
SDLCALL
 
SDL_H≠ticRumbÀSt›
(
SDL_H≠tic
 * 
h≠tic
);

1231 #ifde‡
__˝lu•lus


1234 
	~"˛o£_code.h
"

	@SDL2/include/SDL_hints.h

39 #i‚de‡
SDL_höts_h_


40 
	#SDL_höts_h_


	)

42 
	~"SDL_°döc.h
"

44 
	~"begö_code.h
"

46 #ifde‡
__˝lu•lus


65 
	#SDL_HINT_FRAMEBUFFER_ACCELERATION
 "SDL_FRAMEBUFFER_ACCELERATION"

	)

85 
	#SDL_HINT_RENDER_DRIVER
 "SDL_RENDER_DRIVER"

	)

96 
	#SDL_HINT_RENDER_OPENGL_SHADERS
 "SDL_RENDER_OPENGL_SHADERS"

	)

107 
	#SDL_HINT_RENDER_DIRECT3D_THREADSAFE
 "SDL_RENDER_DIRECT3D_THREADSAFE"

	)

120 
	#SDL_HINT_RENDER_DIRECT3D11_DEBUG
 "SDL_RENDER_DIRECT3D11_DEBUG"

	)

131 
	#SDL_HINT_RENDER_LOGICAL_SIZE_MODE
 "SDL_RENDER_LOGICAL_SIZE_MODE"

	)

143 
	#SDL_HINT_RENDER_SCALE_QUALITY
 "SDL_RENDER_SCALE_QUALITY"

	)

154 
	#SDL_HINT_RENDER_VSYNC
 "SDL_RENDER_VSYNC"

	)

165 
	#SDL_HINT_VIDEO_ALLOW_SCREENSAVER
 "SDL_VIDEO_ALLOW_SCREENSAVER"

	)

180 
	#SDL_HINT_VIDEO_EXTERNAL_CONTEXT
 "SDL_VIDEO_EXTERNAL_CONTEXT"

	)

191 
	#SDL_HINT_VIDEO_X11_XVIDMODE
 "SDL_VIDEO_X11_XVIDMODE"

	)

202 
	#SDL_HINT_VIDEO_X11_XINERAMA
 "SDL_VIDEO_X11_XINERAMA"

	)

213 
	#SDL_HINT_VIDEO_X11_XRANDR
 "SDL_VIDEO_X11_XRANDR"

	)

219 
	#SDL_HINT_VIDEO_X11_WINDOW_VISUALID
 "SDL_VIDEO_X11_WINDOW_VISUALID"

	)

233 
	#SDL_HINT_VIDEO_X11_NET_WM_PING
 "SDL_VIDEO_X11_NET_WM_PING"

	)

245 
	#SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR
 "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR"

	)

256 
	#SDL_HINT_VIDEO_X11_FORCE_EGL
 "SDL_VIDEO_X11_FORCE_EGL"

	)

267 
	#SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN
 "SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"

	)

272 
	#SDL_HINT_WINDOWS_INTRESOURCE_ICON
 "SDL_WINDOWS_INTRESOURCE_ICON"

	)

273 
	#SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL
 "SDL_WINDOWS_INTRESOURCE_ICON_SMALL"

	)

284 
	#SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP
 "SDL_WINDOWS_ENABLE_MESSAGELOOP"

	)

295 
	#SDL_HINT_GRAB_KEYBOARD
 "SDL_GRAB_KEYBOARD"

	)

300 
	#SDL_HINT_MOUSE_DOUBLE_CLICK_TIME
 "SDL_MOUSE_DOUBLE_CLICK_TIME"

	)

305 
	#SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS
 "SDL_MOUSE_DOUBLE_CLICK_RADIUS"

	)

310 
	#SDL_HINT_MOUSE_NORMAL_SPEED_SCALE
 "SDL_MOUSE_NORMAL_SPEED_SCALE"

	)

315 
	#SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE
 "SDL_MOUSE_RELATIVE_SPEED_SCALE"

	)

326 
	#SDL_HINT_MOUSE_RELATIVE_MODE_WARP
 "SDL_MOUSE_RELATIVE_MODE_WARP"

	)

337 
	#SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH
 "SDL_MOUSE_FOCUS_CLICKTHROUGH"

	)

348 
	#SDL_HINT_TOUCH_MOUSE_EVENTS
 "SDL_TOUCH_MOUSE_EVENTS"

	)

358 
	#SDL_HINT_MOUSE_TOUCH_EVENTS
 "SDL_MOUSE_TOUCH_EVENTS"

	)

364 
	#SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS
 "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"

	)

381 
	#SDL_HINT_IDLE_TIMER_DISABLED
 "SDL_IOS_IDLE_TIMER_DISABLED"

	)

392 
	#SDL_HINT_ORIENTATIONS
 "SDL_IOS_ORIENTATIONS"

	)

410 
	#SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS
 "SDL_APPLE_TV_CONTROLLER_UI_EVENTS"

	)

420 
	#SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION
 "SDL_APPLE_TV_REMOTE_ALLOW_ROTATION"

	)

431 
	#SDL_HINT_IOS_HIDE_HOME_INDICATOR
 "SDL_IOS_HIDE_HOME_INDICATOR"

	)

441 
	#SDL_HINT_ACCELEROMETER_AS_JOYSTICK
 "SDL_ACCELEROMETER_AS_JOYSTICK"

	)

451 
	#SDL_HINT_TV_REMOTE_AS_JOYSTICK
 "SDL_TV_REMOTE_AS_JOYSTICK"

	)

460 
	#SDL_HINT_XINPUT_ENABLED
 "SDL_XINPUT_ENABLED"

	)

469 
	#SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING
 "SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING"

	)

487 
	#SDL_HINT_GAMECONTROLLERTYPE
 "SDL_GAMECONTROLLERTYPE"

	)

497 
	#SDL_HINT_GAMECONTROLLERCONFIG
 "SDL_GAMECONTROLLERCONFIG"

	)

507 
	#SDL_HINT_GAMECONTROLLERCONFIG_FILE
 "SDL_GAMECONTROLLERCONFIG_FILE"

	)

520 
	#SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES
 "SDL_GAMECONTROLLER_IGNORE_DEVICES"

	)

533 
	#SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT
 "SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT"

	)

556 
	#SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS
 "SDL_GAMECONTROLLER_USE_BUTTON_LABELS"

	)

569 
	#SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS
 "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"

	)

580 
	#SDL_HINT_JOYSTICK_HIDAPI
 "SDL_JOYSTICK_HIDAPI"

	)

591 
	#SDL_HINT_JOYSTICK_HIDAPI_PS4
 "SDL_JOYSTICK_HIDAPI_PS4"

	)

606 
	#SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE
 "SDL_JOYSTICK_HIDAPI_PS4_RUMBLE"

	)

617 
	#SDL_HINT_JOYSTICK_HIDAPI_STEAM
 "SDL_JOYSTICK_HIDAPI_STEAM"

	)

628 
	#SDL_HINT_JOYSTICK_HIDAPI_SWITCH
 "SDL_JOYSTICK_HIDAPI_SWITCH"

	)

639 
	#SDL_HINT_JOYSTICK_HIDAPI_XBOX
 "SDL_JOYSTICK_HIDAPI_XBOX"

	)

650 
	#SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE
 "SDL_JOYSTICK_HIDAPI_GAMECUBE"

	)

661 
	#SDL_HINT_ENABLE_STEAM_CONTROLLERS
 "SDL_ENABLE_STEAM_CONTROLLERS"

	)

672 
	#SDL_HINT_ALLOW_TOPMOST
 "SDL_ALLOW_TOPMOST"

	)

688 
	#SDL_HINT_TIMER_RESOLUTION
 "SDL_TIMER_RESOLUTION"

	)

706 
	#SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION
 "SDL_QTWAYLAND_CONTENT_ORIENTATION"

	)

717 
	#SDL_HINT_QTWAYLAND_WINDOW_FLAGS
 "SDL_QTWAYLAND_WINDOW_FLAGS"

	)

731 
	#SDL_HINT_THREAD_STACK_SIZE
 "SDL_THREAD_STACK_SIZE"

	)

736 
	#SDL_HINT_VIDEO_HIGHDPI_DISABLED
 "SDL_VIDEO_HIGHDPI_DISABLED"

	)

744 
	#SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK
 "SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"

	)

760 
	#SDL_HINT_VIDEO_WIN_D3DCOMPILER
 "SDL_VIDEO_WIN_D3DCOMPILER"

	)

779 
	#SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT
 "SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT"

	)

805 
	#SDL_HINT_WINRT_PRIVACY_POLICY_URL
 "SDL_WINRT_PRIVACY_POLICY_URL"

	)

826 
	#SDL_HINT_WINRT_PRIVACY_POLICY_LABEL
 "SDL_WINRT_PRIVACY_POLICY_LABEL"

	)

878 
	#SDL_HINT_WINRT_HANDLE_BACK_BUTTON
 "SDL_WINRT_HANDLE_BACK_BUTTON"

	)

897 
	#SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES
 "SDL_VIDEO_MAC_FULLSCREEN_SPACES"

	)

905 
	#SDL_HINT_MAC_BACKGROUND_APP
 "SDL_MAC_BACKGROUND_APP"

	)

917 
	#SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION
 "SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION"

	)

929 
	#SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION
 "SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION"

	)

941 
	#SDL_HINT_IME_INTERNAL_EDITING
 "SDL_IME_INTERNAL_EDITING"

	)

958 
	#SDL_HINT_ANDROID_TRAP_BACK_BUTTON
 "SDL_ANDROID_TRAP_BACK_BUTTON"

	)

969 
	#SDL_HINT_ANDROID_BLOCK_ON_PAUSE
 "SDL_ANDROID_BLOCK_ON_PAUSE"

	)

981 
	#SDL_HINT_RETURN_KEY_HIDES_IME
 "SDL_RETURN_KEY_HIDES_IME"

	)

995 
	#SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT
 "SDL_EMSCRIPTEN_KEYBOARD_ELEMENT"

	)

1007 
	#SDL_HINT_NO_SIGNAL_HANDLERS
 "SDL_NO_SIGNAL_HANDLERS"

	)

1016 
	#SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4
 "SDL_WINDOWS_NO_CLOSE_ON_ALT_F4"

	)

1035 
	#SDL_HINT_BMP_SAVE_LEGACY_FORMAT
 "SDL_BMP_SAVE_LEGACY_FORMAT"

	)

1051 
	#SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING
 "SDL_WINDOWS_DISABLE_THREAD_NAMING"

	)

1059 
	#SDL_HINT_RPI_VIDEO_LAYER
 "SDL_RPI_VIDEO_LAYER"

	)

1077 
	#SDL_HINT_VIDEO_DOUBLE_BUFFER
 "SDL_VIDEO_DOUBLE_BUFFER"

	)

1108 
	#SDL_HINT_OPENGL_ES_DRIVER
 "SDL_OPENGL_ES_DRIVER"

	)

1134 
	#SDL_HINT_AUDIO_RESAMPLING_MODE
 "SDL_AUDIO_RESAMPLING_MODE"

	)

1147 
	#SDL_HINT_AUDIO_CATEGORY
 "SDL_AUDIO_CATEGORY"

	)

1171 
	#SDL_HINT_RENDER_BATCHING
 "SDL_RENDER_BATCHING"

	)

1193 
	#SDL_HINT_EVENT_LOGGING
 "SDL_EVENT_LOGGING"

	)

1216 
	#SDL_HINT_WAVE_RIFF_CHUNK_SIZE
 "SDL_WAVE_RIFF_CHUNK_SIZE"

	)

1232 
	#SDL_HINT_WAVE_TRUNCATION
 "SDL_WAVE_TRUNCATION"

	)

1259 
	#SDL_HINT_WAVE_FACT_CHUNK
 "SDL_WAVE_FACT_CHUNK"

	)

1273 
	#SDL_HINT_DISPLAY_USABLE_BOUNDS
 "SDL_DISPLAY_USABLE_BOUNDS"

	)

1280 
SDL_HINT_DEFAULT
,

1281 
SDL_HINT_NORMAL
,

1282 
SDL_HINT_OVERRIDE


1283 } 
	tSDL_HötPri‹ôy
;

1295 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_SëHötWôhPri‹ôy
(c⁄° *
«me
,

1296 c⁄° *
vÆue
,

1297 
SDL_HötPri‹ôy
 
¥i‹ôy
);

1304 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_SëHöt
(c⁄° *
«me
,

1305 c⁄° *
vÆue
);

1312 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_GëHöt
(c⁄° *
«me
);

1319 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GëHötBoﬁón
(c⁄° *
«me
, SDL_boﬁ 
deÁu…_vÆue
);

1324 (
SDLCALL
 *
	tSDL_HötCÆlback
)(*
	tu£rd©a
, c⁄° *
	t«me
, c⁄° *
	tﬁdVÆue
, c⁄° *
	t√wVÆue
);

1333 
DECLSPEC
 
SDLCALL
 
SDL_AddHötCÆlback
(c⁄° *
«me
,

1334 
SDL_HötCÆlback
 
ˇŒback
,

1335 *
u£rd©a
);

1344 
DECLSPEC
 
SDLCALL
 
SDL_DñHötCÆlback
(c⁄° *
«me
,

1345 
SDL_HötCÆlback
 
ˇŒback
,

1346 *
u£rd©a
);

1353 
DECLSPEC
 
SDLCALL
 
SDL_CÀ¨Höts
();

1357 #ifde‡
__˝lu•lus


1360 
	~"˛o£_code.h
"

	@SDL2/include/SDL_joystick.h

39 #i‚de‡
SDL_joy°ick_h_


40 
	#SDL_joy°ick_h_


	)

42 
	~"SDL_°döc.h
"

43 
	~"SDL_îr‹.h
"

45 
	~"begö_code.h
"

47 #ifde‡
__˝lu•lus


66 
_SDL_Joy°ick
;

67 
_SDL_Joy°ick
 
	tSDL_Joy°ick
;

71 
Uöt8
 
d©a
[16];

72 } 
	tSDL_Joy°ickGUID
;

81 
Söt32
 
	tSDL_Joy°ickID
;

85 
SDL_JOYSTICK_TYPE_UNKNOWN
,

86 
SDL_JOYSTICK_TYPE_GAMECONTROLLER
,

87 
SDL_JOYSTICK_TYPE_WHEEL
,

88 
SDL_JOYSTICK_TYPE_ARCADE_STICK
,

89 
SDL_JOYSTICK_TYPE_FLIGHT_STICK
,

90 
SDL_JOYSTICK_TYPE_DANCE_PAD
,

91 
SDL_JOYSTICK_TYPE_GUITAR
,

92 
SDL_JOYSTICK_TYPE_DRUM_KIT
,

93 
SDL_JOYSTICK_TYPE_ARCADE_PAD
,

94 
SDL_JOYSTICK_TYPE_THROTTLE


95 } 
	tSDL_Joy°ickTy≥
;

99 
SDL_JOYSTICK_POWER_UNKNOWN
 = -1,

100 
SDL_JOYSTICK_POWER_EMPTY
,

101 
SDL_JOYSTICK_POWER_LOW
,

102 
SDL_JOYSTICK_POWER_MEDIUM
,

103 
SDL_JOYSTICK_POWER_FULL
,

104 
SDL_JOYSTICK_POWER_WIRED
,

105 
SDL_JOYSTICK_POWER_MAX


106 } 
	tSDL_Joy°ickPowîLevñ
;

120 
DECLSPEC
 
SDLCALL
 
SDL_LockJoy°icks
();

121 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockJoy°icks
();

126 
DECLSPEC
 
SDLCALL
 
SDL_NumJoy°icks
();

133 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_Joy°ickNameF‹Index
(
devi˚_ödex
);

139 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëDevi˚PœyîIndex
(
devi˚_ödex
);

145 
DECLSPEC
 
SDL_Joy°ickGUID
 
SDLCALL
 
SDL_Joy°ickGëDevi˚GUID
(
devi˚_ödex
);

152 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_Joy°ickGëDevi˚Víd‹
(
devi˚_ödex
);

159 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_Joy°ickGëDevi˚Produ˘
(
devi˚_ödex
);

166 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_Joy°ickGëDevi˚Produ˘Vîsi⁄
(
devi˚_ödex
);

172 
DECLSPEC
 
SDL_Joy°ickTy≥
 
SDLCALL
 
SDL_Joy°ickGëDevi˚Ty≥
(
devi˚_ödex
);

179 
DECLSPEC
 
SDL_Joy°ickID
 
SDLCALL
 
SDL_Joy°ickGëDevi˚In°™˚ID
(
devi˚_ödex
);

190 
DECLSPEC
 
SDL_Joy°ick
 *
SDLCALL
 
SDL_Joy°ickO≥n
(
devi˚_ödex
);

195 
DECLSPEC
 
SDL_Joy°ick
 *
SDLCALL
 
SDL_Joy°ickFromIn°™˚ID
(
SDL_Joy°ickID
 
ö°™˚_id
);

200 
DECLSPEC
 
SDL_Joy°ick
 *
SDLCALL
 
SDL_Joy°ickFromPœyîIndex
(
∂ayî_ödex
);

206 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_Joy°ickName
(
SDL_Joy°ick
 * 
joy°ick
);

213 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëPœyîIndex
(
SDL_Joy°ick
 * 
joy°ick
);

218 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickSëPœyîIndex
(
SDL_Joy°ick
 * 
joy°ick
, 
∂ayî_ödex
);

223 
DECLSPEC
 
SDL_Joy°ickGUID
 
SDLCALL
 
SDL_Joy°ickGëGUID
(
SDL_Joy°ick
 * 
joy°ick
);

229 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_Joy°ickGëVíd‹
(
SDL_Joy°ick
 * 
joy°ick
);

235 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_Joy°ickGëProdu˘
(
SDL_Joy°ick
 * 
joy°ick
);

241 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_Joy°ickGëProdu˘Vîsi⁄
(
SDL_Joy°ick
 * 
joy°ick
);

246 
DECLSPEC
 
SDL_Joy°ickTy≥
 
SDLCALL
 
SDL_Joy°ickGëTy≥
(
SDL_Joy°ick
 * 
joy°ick
);

252 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëGUIDSåög
(
SDL_Joy°ickGUID
 
guid
, *
pszGUID
, 
cbGUID
);

257 
DECLSPEC
 
SDL_Joy°ickGUID
 
SDLCALL
 
SDL_Joy°ickGëGUIDFromSåög
(c⁄° *
pchGUID
);

262 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Joy°ickGëAâached
(
SDL_Joy°ick
 * 
joy°ick
);

267 
DECLSPEC
 
SDL_Joy°ickID
 
SDLCALL
 
SDL_Joy°ickIn°™˚ID
(
SDL_Joy°ick
 * 
joy°ick
);

272 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumAxes
(
SDL_Joy°ick
 * 
joy°ick
);

280 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBÆls
(
SDL_Joy°ick
 * 
joy°ick
);

285 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumH©s
(
SDL_Joy°ick
 * 
joy°ick
);

290 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickNumBuâ⁄s
(
SDL_Joy°ick
 * 
joy°ick
);

298 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickUpd©e
();

309 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickEvítSèã
(
°©e
);

311 
	#SDL_JOYSTICK_AXIS_MAX
 32767

	)

312 
	#SDL_JOYSTICK_AXIS_MIN
 -32768

	)

320 
DECLSPEC
 
Söt16
 
SDLCALL
 
SDL_Joy°ickGëAxis
(
SDL_Joy°ick
 * 
joy°ick
,

321 
axis
);

332 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_Joy°ickGëAxisInôülSèã
(
SDL_Joy°ick
 * 
joy°ick
,

333 
axis
, 
Söt16
 *
°©e
);

339 
	#SDL_HAT_CENTERED
 0x00

	)

340 
	#SDL_HAT_UP
 0x01

	)

341 
	#SDL_HAT_RIGHT
 0x02

	)

342 
	#SDL_HAT_DOWN
 0x04

	)

343 
	#SDL_HAT_LEFT
 0x08

	)

344 
	#SDL_HAT_RIGHTUP
 (
SDL_HAT_RIGHT
|
SDL_HAT_UP
)

	)

345 
	#SDL_HAT_RIGHTDOWN
 (
SDL_HAT_RIGHT
|
SDL_HAT_DOWN
)

	)

346 
	#SDL_HAT_LEFTUP
 (
SDL_HAT_LEFT
|
SDL_HAT_UP
)

	)

347 
	#SDL_HAT_LEFTDOWN
 (
SDL_HAT_LEFT
|
SDL_HAT_DOWN
)

	)

366 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëH©
(
SDL_Joy°ick
 * 
joy°ick
,

367 
h©
);

376 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickGëBÆl
(
SDL_Joy°ick
 * 
joy°ick
,

377 
bÆl
, *
dx
, *
dy
);

384 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_Joy°ickGëBuâ⁄
(
SDL_Joy°ick
 * 
joy°ick
,

385 
buâ⁄
);

398 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickRumbÀ
(
SDL_Joy°ick
 * 
joy°ick
, 
Uöt16
 
low_‰equícy_rumbÀ
, Uöt16 
high_‰equícy_rumbÀ
, 
Uöt32
 
duøti⁄_ms
);

403 
DECLSPEC
 
SDLCALL
 
SDL_Joy°ickClo£
(
SDL_Joy°ick
 * 
joy°ick
);

408 
DECLSPEC
 
SDL_Joy°ickPowîLevñ
 
SDLCALL
 
SDL_Joy°ickCuºítPowîLevñ
(
SDL_Joy°ick
 * 
joy°ick
);

411 #ifde‡
__˝lu•lus


414 
	~"˛o£_code.h
"

	@SDL2/include/SDL_keyboard.h

28 #i‚de‡
SDL_keybﬂrd_h_


29 
	#SDL_keybﬂrd_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_keycode.h
"

34 
	~"SDL_video.h
"

36 
	~"begö_code.h
"

38 #ifde‡
__˝lu•lus


47 
	sSDL_Keysym


49 
SDL_Sˇncode
 
sˇncode
;

50 
SDL_Keycode
 
sym
;

51 
Uöt16
 
mod
;

52 
Uöt32
 
unu£d
;

53 } 
	tSDL_Keysym
;

60 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_GëKeybﬂrdFocus
();

77 
DECLSPEC
 c⁄° 
Uöt8
 *
SDLCALL
 
SDL_GëKeybﬂrdSèã
(*
numkeys
);

82 
DECLSPEC
 
SDL_Keymod
 
SDLCALL
 
SDL_GëModSèã
();

89 
DECLSPEC
 
SDLCALL
 
SDL_SëModSèã
(
SDL_Keymod
 
mod°©e
);

99 
DECLSPEC
 
SDL_Keycode
 
SDLCALL
 
SDL_GëKeyFromSˇncode
(
SDL_Sˇncode
 
sˇncode
);

109 
DECLSPEC
 
SDL_Sˇncode
 
SDLCALL
 
SDL_GëSˇncodeFromKey
(
SDL_Keycode
 
key
);

120 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëSˇncodeName
(
SDL_Sˇncode
 
sˇncode
);

129 
DECLSPEC
 
SDL_Sˇncode
 
SDLCALL
 
SDL_GëSˇncodeFromName
(c⁄° *
«me
);

141 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëKeyName
(
SDL_Keycode
 
key
);

150 
DECLSPEC
 
SDL_Keycode
 
SDLCALL
 
SDL_GëKeyFromName
(c⁄° *
«me
);

160 
DECLSPEC
 
SDLCALL
 
SDL_SèπTextI≈ut
();

168 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_IsTextI≈utA˘ive
();

177 
DECLSPEC
 
SDLCALL
 
SDL_St›TextI≈ut
();

185 
DECLSPEC
 
SDLCALL
 
SDL_SëTextI≈utRe˘
(
SDL_Re˘
 *
ª˘
);

196 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasS¸ìnKeybﬂrdSuµ‹t
();

207 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_IsS¸ìnKeybﬂrdShown
(
SDL_Wödow
 *
wödow
);

210 #ifde‡
__˝lu•lus


213 
	~"˛o£_code.h
"

	@SDL2/include/SDL_keycode.h

28 #i‚de‡
SDL_keycode_h_


29 
	#SDL_keycode_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_sˇncode.h
"

45 
Söt32
 
	tSDL_Keycode
;

47 
	#SDLK_SCANCODE_MASK
 (1<<30)

	)

48 
	#SDL_SCANCODE_TO_KEYCODE
(
X
Ë(X | 
SDLK_SCANCODE_MASK
)

	)

52 
	mSDLK_UNKNOWN
 = 0,

54 
	mSDLK_RETURN
 = '\r',

55 
	mSDLK_ESCAPE
 = '\033',

56 
	mSDLK_BACKSPACE
 = '\b',

57 
	mSDLK_TAB
 = '\t',

58 
	mSDLK_SPACE
 = ' ',

59 
	mSDLK_EXCLAIM
 = '!',

60 
	mSDLK_QUOTEDBL
 = '"',

61 
	mSDLK_HASH
 = '#',

62 
	mSDLK_PERCENT
 = '%',

63 
	mSDLK_DOLLAR
 = '$',

64 
	mSDLK_AMPERSAND
 = '&',

65 
	mSDLK_QUOTE
 = '\'',

66 
	mSDLK_LEFTPAREN
 = '(',

67 
	mSDLK_RIGHTPAREN
 = ')',

68 
	mSDLK_ASTERISK
 = '*',

69 
	mSDLK_PLUS
 = '+',

70 
	mSDLK_COMMA
 = ',',

71 
	mSDLK_MINUS
 = '-',

72 
	mSDLK_PERIOD
 = '.',

73 
	mSDLK_SLASH
 = '/',

74 
	mSDLK_0
 = '0',

75 
	mSDLK_1
 = '1',

76 
	mSDLK_2
 = '2',

77 
	mSDLK_3
 = '3',

78 
	mSDLK_4
 = '4',

79 
	mSDLK_5
 = '5',

80 
	mSDLK_6
 = '6',

81 
	mSDLK_7
 = '7',

82 
	mSDLK_8
 = '8',

83 
	mSDLK_9
 = '9',

84 
	mSDLK_COLON
 = ':',

85 
	mSDLK_SEMICOLON
 = ';',

86 
	mSDLK_LESS
 = '<',

87 
	mSDLK_EQUALS
 = '=',

88 
	mSDLK_GREATER
 = '>',

89 
	mSDLK_QUESTION
 = '?',

90 
	mSDLK_AT
 = '@',

94 
	mSDLK_LEFTBRACKET
 = '[',

95 
	mSDLK_BACKSLASH
 = '\\',

96 
	mSDLK_RIGHTBRACKET
 = ']',

97 
	mSDLK_CARET
 = '^',

98 
	mSDLK_UNDERSCORE
 = '_',

99 
	mSDLK_BACKQUOTE
 = '`',

100 
	mSDLK_a
 = 'a',

101 
	mSDLK_b
 = 'b',

102 
	mSDLK_c
 = 'c',

103 
	mSDLK_d
 = 'd',

104 
	mSDLK_e
 = 'e',

105 
	mSDLK_f
 = 'f',

106 
	mSDLK_g
 = 'g',

107 
	mSDLK_h
 = 'h',

108 
	mSDLK_i
 = 'i',

109 
	mSDLK_j
 = 'j',

110 
	mSDLK_k
 = 'k',

111 
	mSDLK_l
 = 'l',

112 
	mSDLK_m
 = 'm',

113 
	mSDLK_n
 = 'n',

114 
	mSDLK_o
 = 'o',

115 
	mSDLK_p
 = 'p',

116 
	mSDLK_q
 = 'q',

117 
	mSDLK_r
 = 'r',

118 
	mSDLK_s
 = 's',

119 
	mSDLK_t
 = 't',

120 
	mSDLK_u
 = 'u',

121 
	mSDLK_v
 = 'v',

122 
	mSDLK_w
 = 'w',

123 
	mSDLK_x
 = 'x',

124 
	mSDLK_y
 = 'y',

125 
	mSDLK_z
 = 'z',

127 
	mSDLK_CAPSLOCK
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CAPSLOCK
),

129 
	mSDLK_F1
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F1
),

130 
	mSDLK_F2
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F2
),

131 
	mSDLK_F3
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F3
),

132 
	mSDLK_F4
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F4
),

133 
	mSDLK_F5
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F5
),

134 
	mSDLK_F6
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F6
),

135 
	mSDLK_F7
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F7
),

136 
	mSDLK_F8
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F8
),

137 
	mSDLK_F9
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F9
),

138 
	mSDLK_F10
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F10
),

139 
	mSDLK_F11
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F11
),

140 
	mSDLK_F12
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F12
),

142 
	mSDLK_PRINTSCREEN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_PRINTSCREEN
),

143 
	mSDLK_SCROLLLOCK
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_SCROLLLOCK
),

144 
	mSDLK_PAUSE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_PAUSE
),

145 
	mSDLK_INSERT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_INSERT
),

146 
	mSDLK_HOME
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_HOME
),

147 
	mSDLK_PAGEUP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_PAGEUP
),

148 
	mSDLK_DELETE
 = '\177',

149 
	mSDLK_END
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_END
),

150 
	mSDLK_PAGEDOWN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_PAGEDOWN
),

151 
	mSDLK_RIGHT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_RIGHT
),

152 
	mSDLK_LEFT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_LEFT
),

153 
	mSDLK_DOWN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_DOWN
),

154 
	mSDLK_UP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_UP
),

156 
	mSDLK_NUMLOCKCLEAR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_NUMLOCKCLEAR
),

157 
	mSDLK_KP_DIVIDE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_DIVIDE
),

158 
	mSDLK_KP_MULTIPLY
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MULTIPLY
),

159 
	mSDLK_KP_MINUS
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MINUS
),

160 
	mSDLK_KP_PLUS
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_PLUS
),

161 
	mSDLK_KP_ENTER
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_ENTER
),

162 
	mSDLK_KP_1
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_1
),

163 
	mSDLK_KP_2
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_2
),

164 
	mSDLK_KP_3
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_3
),

165 
	mSDLK_KP_4
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_4
),

166 
	mSDLK_KP_5
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_5
),

167 
	mSDLK_KP_6
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_6
),

168 
	mSDLK_KP_7
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_7
),

169 
	mSDLK_KP_8
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_8
),

170 
	mSDLK_KP_9
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_9
),

171 
	mSDLK_KP_0
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_0
),

172 
	mSDLK_KP_PERIOD
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_PERIOD
),

174 
	mSDLK_APPLICATION
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_APPLICATION
),

175 
	mSDLK_POWER
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_POWER
),

176 
	mSDLK_KP_EQUALS
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_EQUALS
),

177 
	mSDLK_F13
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F13
),

178 
	mSDLK_F14
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F14
),

179 
	mSDLK_F15
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F15
),

180 
	mSDLK_F16
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F16
),

181 
	mSDLK_F17
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F17
),

182 
	mSDLK_F18
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F18
),

183 
	mSDLK_F19
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F19
),

184 
	mSDLK_F20
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F20
),

185 
	mSDLK_F21
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F21
),

186 
	mSDLK_F22
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F22
),

187 
	mSDLK_F23
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F23
),

188 
	mSDLK_F24
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_F24
),

189 
	mSDLK_EXECUTE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_EXECUTE
),

190 
	mSDLK_HELP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_HELP
),

191 
	mSDLK_MENU
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_MENU
),

192 
	mSDLK_SELECT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_SELECT
),

193 
	mSDLK_STOP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_STOP
),

194 
	mSDLK_AGAIN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AGAIN
),

195 
	mSDLK_UNDO
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_UNDO
),

196 
	mSDLK_CUT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CUT
),

197 
	mSDLK_COPY
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_COPY
),

198 
	mSDLK_PASTE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_PASTE
),

199 
	mSDLK_FIND
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_FIND
),

200 
	mSDLK_MUTE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_MUTE
),

201 
	mSDLK_VOLUMEUP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_VOLUMEUP
),

202 
	mSDLK_VOLUMEDOWN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_VOLUMEDOWN
),

203 
	mSDLK_KP_COMMA
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_COMMA
),

204 
	mSDLK_KP_EQUALSAS400
 =

205 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_EQUALSAS400
),

207 
	mSDLK_ALTERASE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_ALTERASE
),

208 
	mSDLK_SYSREQ
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_SYSREQ
),

209 
	mSDLK_CANCEL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CANCEL
),

210 
	mSDLK_CLEAR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CLEAR
),

211 
	mSDLK_PRIOR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_PRIOR
),

212 
	mSDLK_RETURN2
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_RETURN2
),

213 
	mSDLK_SEPARATOR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_SEPARATOR
),

214 
	mSDLK_OUT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_OUT
),

215 
	mSDLK_OPER
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_OPER
),

216 
	mSDLK_CLEARAGAIN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CLEARAGAIN
),

217 
	mSDLK_CRSEL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CRSEL
),

218 
	mSDLK_EXSEL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_EXSEL
),

220 
	mSDLK_KP_00
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_00
),

221 
	mSDLK_KP_000
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_000
),

222 
	mSDLK_THOUSANDSSEPARATOR
 =

223 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_THOUSANDSSEPARATOR
),

224 
	mSDLK_DECIMALSEPARATOR
 =

225 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_DECIMALSEPARATOR
),

226 
	mSDLK_CURRENCYUNIT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CURRENCYUNIT
),

227 
	mSDLK_CURRENCYSUBUNIT
 =

228 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CURRENCYSUBUNIT
),

229 
	mSDLK_KP_LEFTPAREN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_LEFTPAREN
),

230 
	mSDLK_KP_RIGHTPAREN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_RIGHTPAREN
),

231 
	mSDLK_KP_LEFTBRACE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_LEFTBRACE
),

232 
	mSDLK_KP_RIGHTBRACE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_RIGHTBRACE
),

233 
	mSDLK_KP_TAB
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_TAB
),

234 
	mSDLK_KP_BACKSPACE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_BACKSPACE
),

235 
	mSDLK_KP_A
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_A
),

236 
	mSDLK_KP_B
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_B
),

237 
	mSDLK_KP_C
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_C
),

238 
	mSDLK_KP_D
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_D
),

239 
	mSDLK_KP_E
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_E
),

240 
	mSDLK_KP_F
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_F
),

241 
	mSDLK_KP_XOR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_XOR
),

242 
	mSDLK_KP_POWER
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_POWER
),

243 
	mSDLK_KP_PERCENT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_PERCENT
),

244 
	mSDLK_KP_LESS
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_LESS
),

245 
	mSDLK_KP_GREATER
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_GREATER
),

246 
	mSDLK_KP_AMPERSAND
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_AMPERSAND
),

247 
	mSDLK_KP_DBLAMPERSAND
 =

248 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_DBLAMPERSAND
),

249 
	mSDLK_KP_VERTICALBAR
 =

250 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_VERTICALBAR
),

251 
	mSDLK_KP_DBLVERTICALBAR
 =

252 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_DBLVERTICALBAR
),

253 
	mSDLK_KP_COLON
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_COLON
),

254 
	mSDLK_KP_HASH
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_HASH
),

255 
	mSDLK_KP_SPACE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_SPACE
),

256 
	mSDLK_KP_AT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_AT
),

257 
	mSDLK_KP_EXCLAM
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_EXCLAM
),

258 
	mSDLK_KP_MEMSTORE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMSTORE
),

259 
	mSDLK_KP_MEMRECALL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMRECALL
),

260 
	mSDLK_KP_MEMCLEAR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMCLEAR
),

261 
	mSDLK_KP_MEMADD
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMADD
),

262 
	mSDLK_KP_MEMSUBTRACT
 =

263 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMSUBTRACT
),

264 
	mSDLK_KP_MEMMULTIPLY
 =

265 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMMULTIPLY
),

266 
	mSDLK_KP_MEMDIVIDE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_MEMDIVIDE
),

267 
	mSDLK_KP_PLUSMINUS
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_PLUSMINUS
),

268 
	mSDLK_KP_CLEAR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_CLEAR
),

269 
	mSDLK_KP_CLEARENTRY
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_CLEARENTRY
),

270 
	mSDLK_KP_BINARY
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_BINARY
),

271 
	mSDLK_KP_OCTAL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_OCTAL
),

272 
	mSDLK_KP_DECIMAL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_DECIMAL
),

273 
	mSDLK_KP_HEXADECIMAL
 =

274 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KP_HEXADECIMAL
),

276 
	mSDLK_LCTRL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_LCTRL
),

277 
	mSDLK_LSHIFT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_LSHIFT
),

278 
	mSDLK_LALT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_LALT
),

279 
	mSDLK_LGUI
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_LGUI
),

280 
	mSDLK_RCTRL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_RCTRL
),

281 
	mSDLK_RSHIFT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_RSHIFT
),

282 
	mSDLK_RALT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_RALT
),

283 
	mSDLK_RGUI
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_RGUI
),

285 
	mSDLK_MODE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_MODE
),

287 
	mSDLK_AUDIONEXT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIONEXT
),

288 
	mSDLK_AUDIOPREV
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIOPREV
),

289 
	mSDLK_AUDIOSTOP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIOSTOP
),

290 
	mSDLK_AUDIOPLAY
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIOPLAY
),

291 
	mSDLK_AUDIOMUTE
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIOMUTE
),

292 
	mSDLK_MEDIASELECT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_MEDIASELECT
),

293 
	mSDLK_WWW
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_WWW
),

294 
	mSDLK_MAIL
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_MAIL
),

295 
	mSDLK_CALCULATOR
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_CALCULATOR
),

296 
	mSDLK_COMPUTER
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_COMPUTER
),

297 
	mSDLK_AC_SEARCH
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_SEARCH
),

298 
	mSDLK_AC_HOME
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_HOME
),

299 
	mSDLK_AC_BACK
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_BACK
),

300 
	mSDLK_AC_FORWARD
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_FORWARD
),

301 
	mSDLK_AC_STOP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_STOP
),

302 
	mSDLK_AC_REFRESH
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_REFRESH
),

303 
	mSDLK_AC_BOOKMARKS
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AC_BOOKMARKS
),

305 
	mSDLK_BRIGHTNESSDOWN
 =

306 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_BRIGHTNESSDOWN
),

307 
	mSDLK_BRIGHTNESSUP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_BRIGHTNESSUP
),

308 
	mSDLK_DISPLAYSWITCH
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_DISPLAYSWITCH
),

309 
	mSDLK_KBDILLUMTOGGLE
 =

310 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KBDILLUMTOGGLE
),

311 
	mSDLK_KBDILLUMDOWN
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KBDILLUMDOWN
),

312 
	mSDLK_KBDILLUMUP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_KBDILLUMUP
),

313 
	mSDLK_EJECT
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_EJECT
),

314 
	mSDLK_SLEEP
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_SLEEP
),

315 
	mSDLK_APP1
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_APP1
),

316 
	mSDLK_APP2
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_APP2
),

318 
	mSDLK_AUDIOREWIND
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIOREWIND
),

319 
	mSDLK_AUDIOFASTFORWARD
 = 
SDL_SCANCODE_TO_KEYCODE
(
SDL_SCANCODE_AUDIOFASTFORWARD
)

320 } 
	tSDL_KeyCode
;

327 
	mKMOD_NONE
 = 0x0000,

328 
	mKMOD_LSHIFT
 = 0x0001,

329 
	mKMOD_RSHIFT
 = 0x0002,

330 
	mKMOD_LCTRL
 = 0x0040,

331 
	mKMOD_RCTRL
 = 0x0080,

332 
	mKMOD_LALT
 = 0x0100,

333 
	mKMOD_RALT
 = 0x0200,

334 
	mKMOD_LGUI
 = 0x0400,

335 
	mKMOD_RGUI
 = 0x0800,

336 
	mKMOD_NUM
 = 0x1000,

337 
	mKMOD_CAPS
 = 0x2000,

338 
	mKMOD_MODE
 = 0x4000,

339 
	mKMOD_RESERVED
 = 0x8000

340 } 
	tSDL_Keymod
;

342 
	#KMOD_CTRL
 (
KMOD_LCTRL
|
KMOD_RCTRL
)

	)

343 
	#KMOD_SHIFT
 (
KMOD_LSHIFT
|
KMOD_RSHIFT
)

	)

344 
	#KMOD_ALT
 (
KMOD_LALT
|
KMOD_RALT
)

	)

345 
	#KMOD_GUI
 (
KMOD_LGUI
|
KMOD_RGUI
)

	)

	@SDL2/include/SDL_loadso.h

41 #i‚de‡
SDL_lﬂdso_h_


42 
	#SDL_lﬂdso_h_


	)

44 
	~"SDL_°döc.h
"

45 
	~"SDL_îr‹.h
"

47 
	~"begö_code.h
"

49 #ifde‡
__˝lu•lus


58 
DECLSPEC
 *
SDLCALL
 
SDL_LﬂdObje˘
(c⁄° *
sofûe
);

65 
DECLSPEC
 *
SDLCALL
 
SDL_LﬂdFun˘i⁄
(*
h™dÀ
,

66 c⁄° *
«me
);

71 
DECLSPEC
 
SDLCALL
 
SDL_U∆ﬂdObje˘
(*
h™dÀ
);

74 #ifde‡
__˝lu•lus


77 
	~"˛o£_code.h
"

	@SDL2/include/SDL_log.h

37 #i‚de‡
SDL_log_h_


38 
	#SDL_log_h_


	)

40 
	~"SDL_°döc.h
"

42 
	~"begö_code.h
"

44 #ifde‡
__˝lu•lus


54 
	#SDL_MAX_LOG_MESSAGE
 4096

	)

66 
SDL_LOG_CATEGORY_APPLICATION
,

67 
SDL_LOG_CATEGORY_ERROR
,

68 
SDL_LOG_CATEGORY_ASSERT
,

69 
SDL_LOG_CATEGORY_SYSTEM
,

70 
SDL_LOG_CATEGORY_AUDIO
,

71 
SDL_LOG_CATEGORY_VIDEO
,

72 
SDL_LOG_CATEGORY_RENDER
,

73 
SDL_LOG_CATEGORY_INPUT
,

74 
SDL_LOG_CATEGORY_TEST
,

77 
SDL_LOG_CATEGORY_RESERVED1
,

78 
SDL_LOG_CATEGORY_RESERVED2
,

79 
SDL_LOG_CATEGORY_RESERVED3
,

80 
SDL_LOG_CATEGORY_RESERVED4
,

81 
SDL_LOG_CATEGORY_RESERVED5
,

82 
SDL_LOG_CATEGORY_RESERVED6
,

83 
SDL_LOG_CATEGORY_RESERVED7
,

84 
SDL_LOG_CATEGORY_RESERVED8
,

85 
SDL_LOG_CATEGORY_RESERVED9
,

86 
SDL_LOG_CATEGORY_RESERVED10
,

96 
SDL_LOG_CATEGORY_CUSTOM


97 } 
	tSDL_LogC©eg‹y
;

104 
SDL_LOG_PRIORITY_VERBOSE
 = 1,

105 
SDL_LOG_PRIORITY_DEBUG
,

106 
SDL_LOG_PRIORITY_INFO
,

107 
SDL_LOG_PRIORITY_WARN
,

108 
SDL_LOG_PRIORITY_ERROR
,

109 
SDL_LOG_PRIORITY_CRITICAL
,

110 
SDL_NUM_LOG_PRIORITIES


111 } 
	tSDL_LogPri‹ôy
;

117 
DECLSPEC
 
SDLCALL
 
SDL_LogSëAŒPri‹ôy
(
SDL_LogPri‹ôy
 
¥i‹ôy
);

122 
DECLSPEC
 
SDLCALL
 
SDL_LogSëPri‹ôy
(
ˇãg‹y
,

123 
SDL_LogPri‹ôy
 
¥i‹ôy
);

128 
DECLSPEC
 
SDL_LogPri‹ôy
 
SDLCALL
 
SDL_LogGëPri‹ôy
(
ˇãg‹y
);

135 
DECLSPEC
 
SDLCALL
 
SDL_LogRe£tPri‹ôõs
();

140 
DECLSPEC
 
SDLCALL
 
SDL_Log
(
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(1);

145 
DECLSPEC
 
SDLCALL
 
SDL_LogVîbo£
(
ˇãg‹y
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

150 
DECLSPEC
 
SDLCALL
 
SDL_LogDebug
(
ˇãg‹y
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

155 
DECLSPEC
 
SDLCALL
 
SDL_LogInfo
(
ˇãg‹y
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

160 
DECLSPEC
 
SDLCALL
 
SDL_LogW¨n
(
ˇãg‹y
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

165 
DECLSPEC
 
SDLCALL
 
SDL_LogEº‹
(
ˇãg‹y
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

170 
DECLSPEC
 
SDLCALL
 
SDL_LogCrôiˇl
(
ˇãg‹y
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

175 
DECLSPEC
 
SDLCALL
 
SDL_LogMesßge
(
ˇãg‹y
,

176 
SDL_LogPri‹ôy
 
¥i‹ôy
,

177 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(3);

182 
DECLSPEC
 
SDLCALL
 
SDL_LogMesßgeV
(
ˇãg‹y
,

183 
SDL_LogPri‹ôy
 
¥i‹ôy
,

184 c⁄° *
fmt
, 
va_li°
 
≠
);

189 (
SDLCALL
 *
	tSDL_LogOuçutFun˘i⁄
)(*
	tu£rd©a
, 
	tˇãg‹y
, 
	tSDL_LogPri‹ôy
 
	t¥i‹ôy
, c⁄° *
	tmesßge
);

194 
DECLSPEC
 
SDLCALL
 
SDL_LogGëOuçutFun˘i⁄
(
SDL_LogOuçutFun˘i⁄
 *
ˇŒback
, **
u£rd©a
);

200 
DECLSPEC
 
SDLCALL
 
SDL_LogSëOuçutFun˘i⁄
(
SDL_LogOuçutFun˘i⁄
 
ˇŒback
, *
u£rd©a
);

204 #ifde‡
__˝lu•lus


207 
	~"˛o£_code.h
"

	@SDL2/include/SDL_main.h

22 #i‚de‡
SDL_maö_h_


23 
	#SDL_maö_h_


	)

25 
	~"SDL_°döc.h
"

33 #i‚de‡
SDL_MAIN_HANDLED


34 #i‡
deföed
(
__WIN32__
)

40 
	#SDL_MAIN_AVAILABLE


	)

42 #ñi‡
deföed
(
__WINRT__
)

52 
	#SDL_MAIN_NEEDED


	)

54 #ñi‡
deföed
(
__IPHONEOS__
)

64 
	#SDL_MAIN_NEEDED


	)

66 #ñi‡
deföed
(
__ANDROID__
)

72 
	#SDL_MAIN_NEEDED


	)

75 
	#SDLMAIN_DECLSPEC
 
DECLSPEC


	)

77 #ñi‡
deföed
(
__NACL__
)

84 
	#SDL_MAIN_NEEDED


	)

89 #i‚de‡
SDLMAIN_DECLSPEC


90 
	#SDLMAIN_DECLSPEC


	)

108 #i‡
deföed
(
SDL_MAIN_NEEDED
Ë|| deföed(
SDL_MAIN_AVAILABLE
)

109 
	#maö
 
SDL_maö


	)

112 
	~"begö_code.h
"

113 #ifde‡
__˝lu•lus


120 (*
SDL_maö_func
)(
	t¨gc
, *
	t¨gv
[]);

121 
SDLMAIN_DECLSPEC
 
SDL_maö
(
¨gc
, *
¨gv
[]);

131 
DECLSPEC
 
SDLCALL
 
SDL_SëMaöRódy
();

133 #ifde‡
__WIN32__


138 
DECLSPEC
 
SDLCALL
 
SDL_Regi°îAµ
(*
«me
, 
Uöt32
 
°yÀ
, *
hIn°
);

139 
DECLSPEC
 
SDLCALL
 
SDL_Uƒegi°îAµ
();

144 #ifde‡
__WINRT__


154 
DECLSPEC
 
SDLCALL
 
SDL_WöRTRunAµ
(
SDL_maö_func
 
maöFun˘i⁄
, * 
ª£rved
);

158 #i‡
deföed
(
__IPHONEOS__
)

168 
DECLSPEC
 
SDLCALL
 
SDL_UIKôRunAµ
(
¨gc
, *
¨gv
[], 
SDL_maö_func
 
maöFun˘i⁄
);

173 #ifde‡
__˝lu•lus


176 
	~"˛o£_code.h
"

	@SDL2/include/SDL_messagebox.h

22 #i‚de‡
SDL_mesßgebox_h_


23 
	#SDL_mesßgebox_h_


	)

25 
	~"SDL_°döc.h
"

26 
	~"SDL_video.h
"

28 
	~"begö_code.h
"

30 #ifde‡
__˝lu•lus


39 
SDL_MESSAGEBOX_ERROR
 = 0x00000010,

40 
SDL_MESSAGEBOX_WARNING
 = 0x00000020,

41 
SDL_MESSAGEBOX_INFORMATION
 = 0x00000040,

42 
SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT
 = 0x00000080,

43 
SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT
 = 0x00000100

44 } 
	tSDL_MesßgeBoxFœgs
;

51 
SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT
 = 0x00000001,

52 
SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT
 = 0x00000002

53 } 
	tSDL_MesßgeBoxBuâ⁄Fœgs
;

60 
Uöt32
 
Êags
;

61 
buâ⁄id
;

62 c⁄° * 
ãxt
;

63 } 
	tSDL_MesßgeBoxBuâ⁄D©a
;

70 
Uöt8
 
r
, 
g
, 
b
;

71 } 
	tSDL_MesßgeBoxCﬁ‹
;

75 
SDL_MESSAGEBOX_COLOR_BACKGROUND
,

76 
SDL_MESSAGEBOX_COLOR_TEXT
,

77 
SDL_MESSAGEBOX_COLOR_BUTTON_BORDER
,

78 
SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND
,

79 
SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED
,

80 
SDL_MESSAGEBOX_COLOR_MAX


81 } 
	tSDL_MesßgeBoxCﬁ‹Ty≥
;

88 
SDL_MesßgeBoxCﬁ‹
 
cﬁ‹s
[
SDL_MESSAGEBOX_COLOR_MAX
];

89 } 
	tSDL_MesßgeBoxCﬁ‹Scheme
;

96 
Uöt32
 
Êags
;

97 
SDL_Wödow
 *
wödow
;

98 c⁄° *
tôÀ
;

99 c⁄° *
mesßge
;

101 
numbuâ⁄s
;

102 c⁄° 
SDL_MesßgeBoxBuâ⁄D©a
 *
buâ⁄s
;

104 c⁄° 
SDL_MesßgeBoxCﬁ‹Scheme
 *
cﬁ‹Scheme
;

105 } 
	tSDL_MesßgeBoxD©a
;

121 
DECLSPEC
 
SDLCALL
 
SDL_ShowMesßgeBox
(c⁄° 
SDL_MesßgeBoxD©a
 *
mesßgeboxd©a
, *
buâ⁄id
);

135 
DECLSPEC
 
SDLCALL
 
SDL_ShowSim∂eMesßgeBox
(
Uöt32
 
Êags
, c⁄° *
tôÀ
, c⁄° *
mesßge
, 
SDL_Wödow
 *
wödow
);

139 #ifde‡
__˝lu•lus


142 
	~"˛o£_code.h
"

	@SDL2/include/SDL_metal.h

28 #i‚de‡
SDL_mëÆ_h_


29 
	#SDL_mëÆ_h_


	)

31 
	~"SDL_video.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


44 *
	tSDL_MëÆVõw
;

71 
DECLSPEC
 
SDL_MëÆVõw
 
SDLCALL
 
SDL_MëÆ_Cª©eVõw
(
SDL_Wödow
 * 
wödow
);

81 
DECLSPEC
 
SDLCALL
 
SDL_MëÆ_De°royVõw
(
SDL_MëÆVõw
 
võw
);

86 #ifde‡
__˝lu•lus


89 
	~"˛o£_code.h
"

	@SDL2/include/SDL_mouse.h

28 #i‚de‡
SDL_mou£_h_


29 
	#SDL_mou£_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_video.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


41 
SDL_Curs‹
 
	tSDL_Curs‹
;

48 
SDL_SYSTEM_CURSOR_ARROW
,

49 
SDL_SYSTEM_CURSOR_IBEAM
,

50 
SDL_SYSTEM_CURSOR_WAIT
,

51 
SDL_SYSTEM_CURSOR_CROSSHAIR
,

52 
SDL_SYSTEM_CURSOR_WAITARROW
,

53 
SDL_SYSTEM_CURSOR_SIZENWSE
,

54 
SDL_SYSTEM_CURSOR_SIZENESW
,

55 
SDL_SYSTEM_CURSOR_SIZEWE
,

56 
SDL_SYSTEM_CURSOR_SIZENS
,

57 
SDL_SYSTEM_CURSOR_SIZEALL
,

58 
SDL_SYSTEM_CURSOR_NO
,

59 
SDL_SYSTEM_CURSOR_HAND
,

60 
SDL_NUM_SYSTEM_CURSORS


61 } 
	tSDL_Sy°emCurs‹
;

68 
SDL_MOUSEWHEEL_NORMAL
,

69 
SDL_MOUSEWHEEL_FLIPPED


70 } 
	tSDL_Mou£WhìlDúe˘i⁄
;

77 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_GëMou£Focus
();

87 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëMou£Sèã
(*
x
, *
y
);

112 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëGlobÆMou£Sèã
(*
x
, *
y
);

121 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëRñ©iveMou£Sèã
(*
x
, *
y
);

132 
DECLSPEC
 
SDLCALL
 
SDL_W¨pMou£InWödow
(
SDL_Wödow
 * 
wödow
,

133 
x
, 
y
);

144 
DECLSPEC
 
SDLCALL
 
SDL_W¨pMou£GlobÆ
(
x
, 
y
);

162 
DECLSPEC
 
SDLCALL
 
SDL_SëRñ©iveMou£Mode
(
SDL_boﬁ
 
íabÀd
);

193 
DECLSPEC
 
SDLCALL
 
SDL_C≠tuªMou£
(
SDL_boﬁ
 
íabÀd
);

200 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GëRñ©iveMou£Mode
();

220 
DECLSPEC
 
SDL_Curs‹
 *
SDLCALL
 
SDL_Cª©eCurs‹
(c⁄° 
Uöt8
 * 
d©a
,

221 c⁄° 
Uöt8
 * 
mask
,

222 
w
, 
h
, 
hŸ_x
,

223 
hŸ_y
);

230 
DECLSPEC
 
SDL_Curs‹
 *
SDLCALL
 
SDL_Cª©eCﬁ‹Curs‹
(
SDL_SurÁ˚
 *
surÁ˚
,

231 
hŸ_x
,

232 
hŸ_y
);

239 
DECLSPEC
 
SDL_Curs‹
 *
SDLCALL
 
SDL_Cª©eSy°emCurs‹
(
SDL_Sy°emCurs‹
 
id
);

244 
DECLSPEC
 
SDLCALL
 
SDL_SëCurs‹
(
SDL_Curs‹
 * 
curs‹
);

249 
DECLSPEC
 
SDL_Curs‹
 *
SDLCALL
 
SDL_GëCurs‹
();

254 
DECLSPEC
 
SDL_Curs‹
 *
SDLCALL
 
SDL_GëDeÁu…Curs‹
();

263 
DECLSPEC
 
SDLCALL
 
SDL_FªeCurs‹
(
SDL_Curs‹
 * 
curs‹
);

273 
DECLSPEC
 
SDLCALL
 
SDL_ShowCurs‹
(
toggÀ
);

281 
	#SDL_BUTTON
(
X
Ë(1 << ((X)-1))

	)

282 
	#SDL_BUTTON_LEFT
 1

	)

283 
	#SDL_BUTTON_MIDDLE
 2

	)

284 
	#SDL_BUTTON_RIGHT
 3

	)

285 
	#SDL_BUTTON_X1
 4

	)

286 
	#SDL_BUTTON_X2
 5

	)

287 
	#SDL_BUTTON_LMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_LEFT
)

	)

288 
	#SDL_BUTTON_MMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_MIDDLE
)

	)

289 
	#SDL_BUTTON_RMASK
 
	`SDL_BUTTON
(
SDL_BUTTON_RIGHT
)

	)

290 
	#SDL_BUTTON_X1MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X1
)

	)

291 
	#SDL_BUTTON_X2MASK
 
	`SDL_BUTTON
(
SDL_BUTTON_X2
)

	)

295 #ifde‡
__˝lu•lus


298 
	~"˛o£_code.h
"

	@SDL2/include/SDL_mutex.h

22 #i‚de‡
SDL_muãx_h_


23 
	#SDL_muãx_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


44 
	#SDL_MUTEX_TIMEDOUT
 1

	)

49 
	#SDL_MUTEX_MAXWAIT
 (~(
Uöt32
)0)

	)

58 
SDL_muãx
;

59 
SDL_muãx
 
	tSDL_muãx
;

64 
DECLSPEC
 
SDL_muãx
 *
SDLCALL
 
SDL_Cª©eMuãx
();

71 
	#SDL_muãxP
(
m
Ë
	`SDL_LockMuãx
(m)

	)

72 
DECLSPEC
 
SDLCALL
 
SDL_LockMuãx
(
SDL_muãx
 * 
muãx
);

79 
DECLSPEC
 
SDLCALL
 
SDL_TryLockMuãx
(
SDL_muãx
 * 
muãx
);

89 
	#SDL_muãxV
(
m
Ë
	`SDL_U∆ockMuãx
(m)

	)

90 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockMuãx
(
SDL_muãx
 * 
muãx
);

95 
DECLSPEC
 
SDLCALL
 
SDL_De°royMuãx
(
SDL_muãx
 * 
muãx
);

106 
	gSDL_£m≠h‹e
;

107 
SDL_£m≠h‹e
 
	tSDL_£m
;

112 
DECLSPEC
 
SDL_£m
 *
SDLCALL
 
SDL_Cª©eSem≠h‹e
(
Uöt32
 
öôül_vÆue
);

117 
DECLSPEC
 
SDLCALL
 
SDL_De°roySem≠h‹e
(
SDL_£m
 * 
£m
);

124 
DECLSPEC
 
SDLCALL
 
SDL_SemWaô
(
SDL_£m
 * 
£m
);

132 
DECLSPEC
 
SDLCALL
 
SDL_SemTryWaô
(
SDL_£m
 * 
£m
);

143 
DECLSPEC
 
SDLCALL
 
SDL_SemWaôTimeout
(
SDL_£m
 * 
£m
, 
Uöt32
 
ms
);

150 
DECLSPEC
 
SDLCALL
 
SDL_SemPo°
(
SDL_£m
 * 
£m
);

155 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_SemVÆue
(
SDL_£m
 * 
£m
);

166 
	gSDL_c⁄d
;

167 
SDL_c⁄d
 
	tSDL_c⁄d
;

197 
DECLSPEC
 
SDL_c⁄d
 *
SDLCALL
 
SDL_Cª©eC⁄d
();

202 
DECLSPEC
 
SDLCALL
 
SDL_De°royC⁄d
(
SDL_c⁄d
 * 
c⁄d
);

209 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dSig«l
(
SDL_c⁄d
 * 
c⁄d
);

216 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dBrﬂdˇ°
(
SDL_c⁄d
 * 
c⁄d
);

227 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaô
(
SDL_c⁄d
 * 
c⁄d
, 
SDL_muãx
 * 
muãx
);

237 
DECLSPEC
 
SDLCALL
 
SDL_C⁄dWaôTimeout
(
SDL_c⁄d
 * 
c⁄d
,

238 
SDL_muãx
 * 
muãx
, 
Uöt32
 
ms
);

244 #ifde‡
__˝lu•lus


247 
	~"˛o£_code.h
"

	@SDL2/include/SDL_name.h

22 #i‚de‡
SDL«me_h_


23 
	#SDL«me_h_


	)

25 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

26 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

29 
	#SDL_NAME
(
X
Ë
SDL_
##
	)
X

	@SDL2/include/SDL_opengl.h

35 #i‚de‡
SDL_›ígl_h_


36 
	#SDL_›ígl_h_


	)

38 
	~"SDL_c⁄fig.h
"

40 #i‚de‡
__IPHONEOS__


68 #i‚de‡
__gl_h_


69 
	#__gl_h_


	)

71 #i‡
deföed
(
USE_MGL_NAMESPACE
)

72 
	~"gl_m™gÀ.h
"

80 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

81 
	#__WIN32__


	)

84 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

85 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

86 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

87 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

88 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

90 
	#GLAPI
 

	)

92 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

93 
	#GLAPIENTRY


	)

95 
	#GLAPIENTRY
 
__°dˇŒ


	)

97 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

98 
	#GLAPI
 

	)

99 
	#GLAPIENTRY
 
__°dˇŒ


	)

100 #ñi‡
deföed
(
__OS2__
Ë|| deföed(
__EMX__
)

101 
	#GLAPI
 

	)

102 
	#GLAPIENTRY
 
_Sy°em


	)

103 
	#APIENTRY
 
_Sy°em


	)

104 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
_Sy°em
)

105 
	#_Sy°em


	)

107 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

108 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

109 
	#GLAPIENTRY


	)

120 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

121 #i‚de‡
WIN32_LEAN_AND_MEAN


122 
	#WIN32_LEAN_AND_MEAN
 1

	)

124 #i‚de‡
NOMINMAX


125 
	#NOMINMAX


	)

127 
	~<wödows.h
>

130 #i‚de‡
GLAPI


131 
	#GLAPI
 

	)

134 #i‚de‡
GLAPIENTRY


135 
	#GLAPIENTRY


	)

138 #i‚de‡
APIENTRY


139 
	#APIENTRY
 
GLAPIENTRY


	)

143 #i‚de‡
APIENTRYP


144 
	#APIENTRYP
 
APIENTRY
 *

	)

147 #i‚de‡
GLAPIENTRYP


148 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

151 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

152 #¥agm®
exp‹t
 
⁄


161 #ifde‡
__˝lu•lus


167 
	#GL_VERSION_1_1
 1

	)

168 
	#GL_VERSION_1_2
 1

	)

169 
	#GL_VERSION_1_3
 1

	)

170 
	#GL_ARB_imagög
 1

	)

176 
	tGLíum
;

177 
	tGLboﬁón
;

178 
	tGLbôfõld
;

179 
	tGLvoid
;

180 sig√d 
	tGLbyã
;

181 
	tGLsh‹t
;

182 
	tGLöt
;

183 
	tGLubyã
;

184 
	tGLush‹t
;

185 
	tGLuöt
;

186 
	tGLsizei
;

187 
	tGLÊﬂt
;

188 
	tGL˛ampf
;

189 
	tGLdoubÀ
;

190 
	tGL˛ampd
;

199 
	#GL_FALSE
 0

	)

200 
	#GL_TRUE
 1

	)

203 
	#GL_BYTE
 0x1400

	)

204 
	#GL_UNSIGNED_BYTE
 0x1401

	)

205 
	#GL_SHORT
 0x1402

	)

206 
	#GL_UNSIGNED_SHORT
 0x1403

	)

207 
	#GL_INT
 0x1404

	)

208 
	#GL_UNSIGNED_INT
 0x1405

	)

209 
	#GL_FLOAT
 0x1406

	)

210 
	#GL_2_BYTES
 0x1407

	)

211 
	#GL_3_BYTES
 0x1408

	)

212 
	#GL_4_BYTES
 0x1409

	)

213 
	#GL_DOUBLE
 0x140A

	)

216 
	#GL_POINTS
 0x0000

	)

217 
	#GL_LINES
 0x0001

	)

218 
	#GL_LINE_LOOP
 0x0002

	)

219 
	#GL_LINE_STRIP
 0x0003

	)

220 
	#GL_TRIANGLES
 0x0004

	)

221 
	#GL_TRIANGLE_STRIP
 0x0005

	)

222 
	#GL_TRIANGLE_FAN
 0x0006

	)

223 
	#GL_QUADS
 0x0007

	)

224 
	#GL_QUAD_STRIP
 0x0008

	)

225 
	#GL_POLYGON
 0x0009

	)

228 
	#GL_VERTEX_ARRAY
 0x8074

	)

229 
	#GL_NORMAL_ARRAY
 0x8075

	)

230 
	#GL_COLOR_ARRAY
 0x8076

	)

231 
	#GL_INDEX_ARRAY
 0x8077

	)

232 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

233 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

234 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

235 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

236 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

237 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

238 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

239 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

240 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

241 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

242 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

243 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

244 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

245 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

246 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

247 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

248 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

249 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

250 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

251 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

252 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

253 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

254 
	#GL_V2F
 0x2A20

	)

255 
	#GL_V3F
 0x2A21

	)

256 
	#GL_C4UB_V2F
 0x2A22

	)

257 
	#GL_C4UB_V3F
 0x2A23

	)

258 
	#GL_C3F_V3F
 0x2A24

	)

259 
	#GL_N3F_V3F
 0x2A25

	)

260 
	#GL_C4F_N3F_V3F
 0x2A26

	)

261 
	#GL_T2F_V3F
 0x2A27

	)

262 
	#GL_T4F_V4F
 0x2A28

	)

263 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

264 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

265 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

266 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

267 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

270 
	#GL_MATRIX_MODE
 0x0BA0

	)

271 
	#GL_MODELVIEW
 0x1700

	)

272 
	#GL_PROJECTION
 0x1701

	)

273 
	#GL_TEXTURE
 0x1702

	)

276 
	#GL_POINT_SMOOTH
 0x0B10

	)

277 
	#GL_POINT_SIZE
 0x0B11

	)

278 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

279 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

282 
	#GL_LINE_SMOOTH
 0x0B20

	)

283 
	#GL_LINE_STIPPLE
 0x0B24

	)

284 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

285 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

286 
	#GL_LINE_WIDTH
 0x0B21

	)

287 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

288 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

291 
	#GL_POINT
 0x1B00

	)

292 
	#GL_LINE
 0x1B01

	)

293 
	#GL_FILL
 0x1B02

	)

294 
	#GL_CW
 0x0900

	)

295 
	#GL_CCW
 0x0901

	)

296 
	#GL_FRONT
 0x0404

	)

297 
	#GL_BACK
 0x0405

	)

298 
	#GL_POLYGON_MODE
 0x0B40

	)

299 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

300 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

301 
	#GL_EDGE_FLAG
 0x0B43

	)

302 
	#GL_CULL_FACE
 0x0B44

	)

303 
	#GL_CULL_FACE_MODE
 0x0B45

	)

304 
	#GL_FRONT_FACE
 0x0B46

	)

305 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

306 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

307 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

308 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

309 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

312 
	#GL_COMPILE
 0x1300

	)

313 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

314 
	#GL_LIST_BASE
 0x0B32

	)

315 
	#GL_LIST_INDEX
 0x0B33

	)

316 
	#GL_LIST_MODE
 0x0B30

	)

319 
	#GL_NEVER
 0x0200

	)

320 
	#GL_LESS
 0x0201

	)

321 
	#GL_EQUAL
 0x0202

	)

322 
	#GL_LEQUAL
 0x0203

	)

323 
	#GL_GREATER
 0x0204

	)

324 
	#GL_NOTEQUAL
 0x0205

	)

325 
	#GL_GEQUAL
 0x0206

	)

326 
	#GL_ALWAYS
 0x0207

	)

327 
	#GL_DEPTH_TEST
 0x0B71

	)

328 
	#GL_DEPTH_BITS
 0x0D56

	)

329 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

330 
	#GL_DEPTH_FUNC
 0x0B74

	)

331 
	#GL_DEPTH_RANGE
 0x0B70

	)

332 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

333 
	#GL_DEPTH_COMPONENT
 0x1902

	)

336 
	#GL_LIGHTING
 0x0B50

	)

337 
	#GL_LIGHT0
 0x4000

	)

338 
	#GL_LIGHT1
 0x4001

	)

339 
	#GL_LIGHT2
 0x4002

	)

340 
	#GL_LIGHT3
 0x4003

	)

341 
	#GL_LIGHT4
 0x4004

	)

342 
	#GL_LIGHT5
 0x4005

	)

343 
	#GL_LIGHT6
 0x4006

	)

344 
	#GL_LIGHT7
 0x4007

	)

345 
	#GL_SPOT_EXPONENT
 0x1205

	)

346 
	#GL_SPOT_CUTOFF
 0x1206

	)

347 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

348 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

349 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

350 
	#GL_AMBIENT
 0x1200

	)

351 
	#GL_DIFFUSE
 0x1201

	)

352 
	#GL_SPECULAR
 0x1202

	)

353 
	#GL_SHININESS
 0x1601

	)

354 
	#GL_EMISSION
 0x1600

	)

355 
	#GL_POSITION
 0x1203

	)

356 
	#GL_SPOT_DIRECTION
 0x1204

	)

357 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

358 
	#GL_COLOR_INDEXES
 0x1603

	)

359 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

360 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

361 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

362 
	#GL_FRONT_AND_BACK
 0x0408

	)

363 
	#GL_SHADE_MODEL
 0x0B54

	)

364 
	#GL_FLAT
 0x1D00

	)

365 
	#GL_SMOOTH
 0x1D01

	)

366 
	#GL_COLOR_MATERIAL
 0x0B57

	)

367 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

368 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

369 
	#GL_NORMALIZE
 0x0BA1

	)

372 
	#GL_CLIP_PLANE0
 0x3000

	)

373 
	#GL_CLIP_PLANE1
 0x3001

	)

374 
	#GL_CLIP_PLANE2
 0x3002

	)

375 
	#GL_CLIP_PLANE3
 0x3003

	)

376 
	#GL_CLIP_PLANE4
 0x3004

	)

377 
	#GL_CLIP_PLANE5
 0x3005

	)

380 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

381 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

382 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

383 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

384 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

385 
	#GL_ACCUM
 0x0100

	)

386 
	#GL_ADD
 0x0104

	)

387 
	#GL_LOAD
 0x0101

	)

388 
	#GL_MULT
 0x0103

	)

389 
	#GL_RETURN
 0x0102

	)

392 
	#GL_ALPHA_TEST
 0x0BC0

	)

393 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

394 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

397 
	#GL_BLEND
 0x0BE2

	)

398 
	#GL_BLEND_SRC
 0x0BE1

	)

399 
	#GL_BLEND_DST
 0x0BE0

	)

400 
	#GL_ZERO
 0

	)

401 
	#GL_ONE
 1

	)

402 
	#GL_SRC_COLOR
 0x0300

	)

403 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

404 
	#GL_SRC_ALPHA
 0x0302

	)

405 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

406 
	#GL_DST_ALPHA
 0x0304

	)

407 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

408 
	#GL_DST_COLOR
 0x0306

	)

409 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

410 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

413 
	#GL_FEEDBACK
 0x1C01

	)

414 
	#GL_RENDER
 0x1C00

	)

415 
	#GL_SELECT
 0x1C02

	)

418 
	#GL_2D
 0x0600

	)

419 
	#GL_3D
 0x0601

	)

420 
	#GL_3D_COLOR
 0x0602

	)

421 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

422 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

423 
	#GL_POINT_TOKEN
 0x0701

	)

424 
	#GL_LINE_TOKEN
 0x0702

	)

425 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

426 
	#GL_POLYGON_TOKEN
 0x0703

	)

427 
	#GL_BITMAP_TOKEN
 0x0704

	)

428 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

429 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

430 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

431 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

432 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

433 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

436 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

437 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

440 
	#GL_FOG
 0x0B60

	)

441 
	#GL_FOG_MODE
 0x0B65

	)

442 
	#GL_FOG_DENSITY
 0x0B62

	)

443 
	#GL_FOG_COLOR
 0x0B66

	)

444 
	#GL_FOG_INDEX
 0x0B61

	)

445 
	#GL_FOG_START
 0x0B63

	)

446 
	#GL_FOG_END
 0x0B64

	)

447 
	#GL_LINEAR
 0x2601

	)

448 
	#GL_EXP
 0x0800

	)

449 
	#GL_EXP2
 0x0801

	)

452 
	#GL_LOGIC_OP
 0x0BF1

	)

453 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

454 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

455 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

456 
	#GL_CLEAR
 0x1500

	)

457 
	#GL_SET
 0x150F

	)

458 
	#GL_COPY
 0x1503

	)

459 
	#GL_COPY_INVERTED
 0x150C

	)

460 
	#GL_NOOP
 0x1505

	)

461 
	#GL_INVERT
 0x150A

	)

462 
	#GL_AND
 0x1501

	)

463 
	#GL_NAND
 0x150E

	)

464 
	#GL_OR
 0x1507

	)

465 
	#GL_NOR
 0x1508

	)

466 
	#GL_XOR
 0x1506

	)

467 
	#GL_EQUIV
 0x1509

	)

468 
	#GL_AND_REVERSE
 0x1502

	)

469 
	#GL_AND_INVERTED
 0x1504

	)

470 
	#GL_OR_REVERSE
 0x150B

	)

471 
	#GL_OR_INVERTED
 0x150D

	)

474 
	#GL_STENCIL_BITS
 0x0D57

	)

475 
	#GL_STENCIL_TEST
 0x0B90

	)

476 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

477 
	#GL_STENCIL_FUNC
 0x0B92

	)

478 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

479 
	#GL_STENCIL_FAIL
 0x0B94

	)

480 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

481 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

482 
	#GL_STENCIL_REF
 0x0B97

	)

483 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

484 
	#GL_STENCIL_INDEX
 0x1901

	)

485 
	#GL_KEEP
 0x1E00

	)

486 
	#GL_REPLACE
 0x1E01

	)

487 
	#GL_INCR
 0x1E02

	)

488 
	#GL_DECR
 0x1E03

	)

491 
	#GL_NONE
 0

	)

492 
	#GL_LEFT
 0x0406

	)

493 
	#GL_RIGHT
 0x0407

	)

497 
	#GL_FRONT_LEFT
 0x0400

	)

498 
	#GL_FRONT_RIGHT
 0x0401

	)

499 
	#GL_BACK_LEFT
 0x0402

	)

500 
	#GL_BACK_RIGHT
 0x0403

	)

501 
	#GL_AUX0
 0x0409

	)

502 
	#GL_AUX1
 0x040A

	)

503 
	#GL_AUX2
 0x040B

	)

504 
	#GL_AUX3
 0x040C

	)

505 
	#GL_COLOR_INDEX
 0x1900

	)

506 
	#GL_RED
 0x1903

	)

507 
	#GL_GREEN
 0x1904

	)

508 
	#GL_BLUE
 0x1905

	)

509 
	#GL_ALPHA
 0x1906

	)

510 
	#GL_LUMINANCE
 0x1909

	)

511 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

512 
	#GL_ALPHA_BITS
 0x0D55

	)

513 
	#GL_RED_BITS
 0x0D52

	)

514 
	#GL_GREEN_BITS
 0x0D53

	)

515 
	#GL_BLUE_BITS
 0x0D54

	)

516 
	#GL_INDEX_BITS
 0x0D51

	)

517 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

518 
	#GL_AUX_BUFFERS
 0x0C00

	)

519 
	#GL_READ_BUFFER
 0x0C02

	)

520 
	#GL_DRAW_BUFFER
 0x0C01

	)

521 
	#GL_DOUBLEBUFFER
 0x0C32

	)

522 
	#GL_STEREO
 0x0C33

	)

523 
	#GL_BITMAP
 0x1A00

	)

524 
	#GL_COLOR
 0x1800

	)

525 
	#GL_DEPTH
 0x1801

	)

526 
	#GL_STENCIL
 0x1802

	)

527 
	#GL_DITHER
 0x0BD0

	)

528 
	#GL_RGB
 0x1907

	)

529 
	#GL_RGBA
 0x1908

	)

532 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

533 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

534 
	#GL_MAX_LIGHTS
 0x0D31

	)

535 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

536 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

537 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

538 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

539 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

540 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

541 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

542 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

543 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

544 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

547 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

548 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

549 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

550 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

551 
	#GL_CURRENT_INDEX
 0x0B01

	)

552 
	#GL_CURRENT_COLOR
 0x0B00

	)

553 
	#GL_CURRENT_NORMAL
 0x0B02

	)

554 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

555 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

556 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

557 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

558 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

559 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

560 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

561 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

562 
	#GL_INDEX_MODE
 0x0C30

	)

563 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

564 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

565 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

566 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

567 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

568 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

569 
	#GL_RENDER_MODE
 0x0C40

	)

570 
	#GL_RGBA_MODE
 0x0C31

	)

571 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

572 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

573 
	#GL_VIEWPORT
 0x0BA2

	)

576 
	#GL_AUTO_NORMAL
 0x0D80

	)

577 
	#GL_MAP1_COLOR_4
 0x0D90

	)

578 
	#GL_MAP1_INDEX
 0x0D91

	)

579 
	#GL_MAP1_NORMAL
 0x0D92

	)

580 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

581 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

582 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

583 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

584 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

585 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

586 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

587 
	#GL_MAP2_INDEX
 0x0DB1

	)

588 
	#GL_MAP2_NORMAL
 0x0DB2

	)

589 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

590 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

591 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

592 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

593 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

594 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

595 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

596 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

597 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

598 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

599 
	#GL_COEFF
 0x0A00

	)

600 
	#GL_ORDER
 0x0A01

	)

601 
	#GL_DOMAIN
 0x0A02

	)

604 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

605 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

606 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

607 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

608 
	#GL_FOG_HINT
 0x0C54

	)

609 
	#GL_DONT_CARE
 0x1100

	)

610 
	#GL_FASTEST
 0x1101

	)

611 
	#GL_NICEST
 0x1102

	)

614 
	#GL_SCISSOR_BOX
 0x0C10

	)

615 
	#GL_SCISSOR_TEST
 0x0C11

	)

618 
	#GL_MAP_COLOR
 0x0D10

	)

619 
	#GL_MAP_STENCIL
 0x0D11

	)

620 
	#GL_INDEX_SHIFT
 0x0D12

	)

621 
	#GL_INDEX_OFFSET
 0x0D13

	)

622 
	#GL_RED_SCALE
 0x0D14

	)

623 
	#GL_RED_BIAS
 0x0D15

	)

624 
	#GL_GREEN_SCALE
 0x0D18

	)

625 
	#GL_GREEN_BIAS
 0x0D19

	)

626 
	#GL_BLUE_SCALE
 0x0D1A

	)

627 
	#GL_BLUE_BIAS
 0x0D1B

	)

628 
	#GL_ALPHA_SCALE
 0x0D1C

	)

629 
	#GL_ALPHA_BIAS
 0x0D1D

	)

630 
	#GL_DEPTH_SCALE
 0x0D1E

	)

631 
	#GL_DEPTH_BIAS
 0x0D1F

	)

632 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

633 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

634 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

635 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

636 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

637 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

638 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

639 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

640 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

641 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

642 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

643 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

644 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

645 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

646 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

647 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

648 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

649 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

650 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

651 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

652 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

653 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

654 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

655 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

656 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

657 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

658 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

659 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

660 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

661 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

662 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

663 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

664 
	#GL_ZOOM_X
 0x0D16

	)

665 
	#GL_ZOOM_Y
 0x0D17

	)

668 
	#GL_TEXTURE_ENV
 0x2300

	)

669 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

670 
	#GL_TEXTURE_1D
 0x0DE0

	)

671 
	#GL_TEXTURE_2D
 0x0DE1

	)

672 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

673 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

674 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

675 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

676 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

677 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

678 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

679 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

680 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

681 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

682 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

683 
	#GL_TEXTURE_WIDTH
 0x1000

	)

684 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

685 
	#GL_TEXTURE_BORDER
 0x1005

	)

686 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

687 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

688 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

689 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

690 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

691 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

692 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

693 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

694 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

695 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

696 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

697 
	#GL_OBJECT_LINEAR
 0x2401

	)

698 
	#GL_OBJECT_PLANE
 0x2501

	)

699 
	#GL_EYE_LINEAR
 0x2400

	)

700 
	#GL_EYE_PLANE
 0x2502

	)

701 
	#GL_SPHERE_MAP
 0x2402

	)

702 
	#GL_DECAL
 0x2101

	)

703 
	#GL_MODULATE
 0x2100

	)

704 
	#GL_NEAREST
 0x2600

	)

705 
	#GL_REPEAT
 0x2901

	)

706 
	#GL_CLAMP
 0x2900

	)

707 
	#GL_S
 0x2000

	)

708 
	#GL_T
 0x2001

	)

709 
	#GL_R
 0x2002

	)

710 
	#GL_Q
 0x2003

	)

713 
	#GL_VENDOR
 0x1F00

	)

714 
	#GL_RENDERER
 0x1F01

	)

715 
	#GL_VERSION
 0x1F02

	)

716 
	#GL_EXTENSIONS
 0x1F03

	)

719 
	#GL_NO_ERROR
 0

	)

720 
	#GL_INVALID_ENUM
 0x0500

	)

721 
	#GL_INVALID_VALUE
 0x0501

	)

722 
	#GL_INVALID_OPERATION
 0x0502

	)

723 
	#GL_STACK_OVERFLOW
 0x0503

	)

724 
	#GL_STACK_UNDERFLOW
 0x0504

	)

725 
	#GL_OUT_OF_MEMORY
 0x0505

	)

728 
	#GL_CURRENT_BIT
 0x00000001

	)

729 
	#GL_POINT_BIT
 0x00000002

	)

730 
	#GL_LINE_BIT
 0x00000004

	)

731 
	#GL_POLYGON_BIT
 0x00000008

	)

732 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

733 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

734 
	#GL_LIGHTING_BIT
 0x00000040

	)

735 
	#GL_FOG_BIT
 0x00000080

	)

736 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

737 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

738 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

739 
	#GL_VIEWPORT_BIT
 0x00000800

	)

740 
	#GL_TRANSFORM_BIT
 0x00001000

	)

741 
	#GL_ENABLE_BIT
 0x00002000

	)

742 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

743 
	#GL_HINT_BIT
 0x00008000

	)

744 
	#GL_EVAL_BIT
 0x00010000

	)

745 
	#GL_LIST_BIT
 0x00020000

	)

746 
	#GL_TEXTURE_BIT
 0x00040000

	)

747 
	#GL_SCISSOR_BIT
 0x00080000

	)

748 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

752 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

753 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

754 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

755 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

756 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

757 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

758 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

759 
	#GL_ALPHA4
 0x803B

	)

760 
	#GL_ALPHA8
 0x803C

	)

761 
	#GL_ALPHA12
 0x803D

	)

762 
	#GL_ALPHA16
 0x803E

	)

763 
	#GL_LUMINANCE4
 0x803F

	)

764 
	#GL_LUMINANCE8
 0x8040

	)

765 
	#GL_LUMINANCE12
 0x8041

	)

766 
	#GL_LUMINANCE16
 0x8042

	)

767 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

768 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

769 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

770 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

771 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

772 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

773 
	#GL_INTENSITY
 0x8049

	)

774 
	#GL_INTENSITY4
 0x804A

	)

775 
	#GL_INTENSITY8
 0x804B

	)

776 
	#GL_INTENSITY12
 0x804C

	)

777 
	#GL_INTENSITY16
 0x804D

	)

778 
	#GL_R3_G3_B2
 0x2A10

	)

779 
	#GL_RGB4
 0x804F

	)

780 
	#GL_RGB5
 0x8050

	)

781 
	#GL_RGB8
 0x8051

	)

782 
	#GL_RGB10
 0x8052

	)

783 
	#GL_RGB12
 0x8053

	)

784 
	#GL_RGB16
 0x8054

	)

785 
	#GL_RGBA2
 0x8055

	)

786 
	#GL_RGBA4
 0x8056

	)

787 
	#GL_RGB5_A1
 0x8057

	)

788 
	#GL_RGBA8
 0x8058

	)

789 
	#GL_RGB10_A2
 0x8059

	)

790 
	#GL_RGBA12
 0x805A

	)

791 
	#GL_RGBA16
 0x805B

	)

792 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

793 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

794 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

795 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

803 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

805 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

807 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

809 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

811 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

813 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

815 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

817 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

819 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

821 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

823 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

825 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

827 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

829 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

831 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

833 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

835 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

837 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

839 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

841 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

843 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

845 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

847 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

849 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

851 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

853 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

855 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

858 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

860 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

863 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

865 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

867 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

869 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

872 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

874 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

877 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

879 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

882 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

884 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

886 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

888 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

890 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

892 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

899 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

901 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

903 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

905 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

912 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

914 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

921 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

923 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

924 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

925 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

927 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

928 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

929 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

931 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

932 
GLsizei
 
width
, GLsizeò
height
 );

934 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

936 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

938 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

940 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

941 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

943 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

944 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

946 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

947 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

948 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

949 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

951 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

952 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

954 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

955 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

962 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

964 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

966 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

968 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

970 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

972 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

974 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

975 c⁄° 
GLvoid
 *
li°s
 );

977 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

984 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

986 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

989 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

990 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

991 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

992 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

994 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

995 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

996 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

997 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

999 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1000 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1001 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1002 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1004 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1005 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1006 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

1007 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

1009 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1010 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1011 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

1012 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

1014 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1015 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1016 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

1017 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

1020 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

1021 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

1022 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

1023 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

1024 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

1026 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

1027 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1028 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1029 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

1030 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

1033 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

1034 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

1035 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

1036 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

1037 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

1039 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

1040 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

1041 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

1042 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

1043 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

1045 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

1046 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

1047 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

1048 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

1049 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

1050 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1051 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1052 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1054 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1055 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1056 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1057 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1058 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1059 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1060 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1061 
GLöt
 
blue
, GLöà
Æpha
 );

1062 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1063 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1064 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1065 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1066 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1067 
GLuöt
 
blue
, GLuöà
Æpha
 );

1068 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1069 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1072 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1073 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1074 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1075 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1076 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1077 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1078 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1079 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1081 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1082 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1083 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1084 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1085 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1086 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1087 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1088 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1091 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1092 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1093 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1094 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1096 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1097 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1098 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1099 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1101 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1102 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1103 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1104 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1106 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1107 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1108 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1109 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1111 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1112 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1113 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1114 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1116 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1117 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1118 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1119 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1121 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1122 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1123 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1124 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1126 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1127 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1128 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1129 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1132 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1133 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1134 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1135 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1137 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1138 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1139 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1140 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1142 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1143 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1144 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1145 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1147 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1148 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1149 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1150 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1152 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1153 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1154 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1155 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1157 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1158 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1159 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1160 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1163 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1164 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1165 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1166 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1169 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1170 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1171 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1172 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1179 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1180 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1182 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1183 c⁄° 
GLvoid
 *
±r
 );

1185 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1186 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1188 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1189 c⁄° 
GLvoid
 *
±r
 );

1191 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1192 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1194 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1196 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1198 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1200 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1202 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1203 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1205 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1206 c⁄° 
GLvoid
 *
poöãr
 );

1212 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1214 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1215 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1216 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1217 c⁄° 
GLÊﬂt
 *
∑øms
 );

1218 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1219 c⁄° 
GLöt
 *
∑øms
 );

1221 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1222 
GLÊﬂt
 *
∑øms
 );

1223 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1224 
GLöt
 *
∑øms
 );

1226 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1227 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1228 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1229 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1231 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1232 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1233 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1234 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1236 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1237 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1239 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1246 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1248 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1249 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1251 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1252 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1254 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1255 c⁄° 
GLÊﬂt
 *
vÆues
 );

1256 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1257 c⁄° 
GLuöt
 *
vÆues
 );

1258 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1259 c⁄° 
GLush‹t
 *
vÆues
 );

1261 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1262 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1263 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1265 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1266 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1267 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1268 c⁄° 
GLubyã
 *
bôm≠
 );

1270 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1271 
GLsizei
 
width
, GLsizeò
height
,

1272 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1273 
GLvoid
 *
pixñs
 );

1275 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1276 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1277 c⁄° 
GLvoid
 *
pixñs
 );

1279 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1280 
GLsizei
 
width
, GLsizeò
height
,

1281 
GLíum
 
ty≥
 );

1287 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1289 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1291 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1293 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1301 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1302 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1303 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1305 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1306 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1307 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1309 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1310 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1311 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1314 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1315 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1317 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1318 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1320 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1321 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1324 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1325 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1327 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1328 c⁄° 
GLÊﬂt
 *
∑øms
 );

1329 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1330 c⁄° 
GLöt
 *
∑øms
 );

1332 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1333 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1334 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1335 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1337 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1338 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1339 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1340 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1343 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1344 
GLöt
 
öã∫ÆF‹m©
,

1345 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1346 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1347 c⁄° 
GLvoid
 *
pixñs
 );

1349 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1350 
GLöt
 
öã∫ÆF‹m©
,

1351 
GLsizei
 
width
, GLsizeò
height
,

1352 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1353 c⁄° 
GLvoid
 *
pixñs
 );

1355 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1356 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1357 
GLvoid
 *
pixñs
 );

1362 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1364 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1366 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1368 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1369 c⁄° 
GLuöt
 *
ãxtuªs
,

1370 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1372 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1373 c⁄° 
GLuöt
 *
ãxtuªs
,

1374 
GLboﬁón
 *
ªsidí˚s
 );

1376 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1379 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1380 
GLöt
 
xoff£t
,

1381 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1382 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1385 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1386 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1387 
GLsizei
 
width
, GLsizeò
height
,

1388 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1389 c⁄° 
GLvoid
 *
pixñs
 );

1392 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1393 
GLíum
 
öã∫Æf‹m©
,

1394 
GLöt
 
x
, GLöà
y
,

1395 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1398 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1399 
GLíum
 
öã∫Æf‹m©
,

1400 
GLöt
 
x
, GLöà
y
,

1401 
GLsizei
 
width
, GLsizeò
height
,

1402 
GLöt
 
b‹dî
 );

1405 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1406 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1407 
GLsizei
 
width
 );

1410 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1411 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1412 
GLöt
 
x
, GLöà
y
,

1413 
GLsizei
 
width
, GLsizeò
height
 );

1420 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1421 
GLöt
 
°ride
,

1422 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1423 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1424 
GLöt
 
°ride
,

1425 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1427 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1428 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1429 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1430 c⁄° 
GLdoubÀ
 *
poöts
 );

1431 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1432 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1433 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1434 c⁄° 
GLÊﬂt
 *
poöts
 );

1436 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1437 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1438 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1440 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1441 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1443 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1444 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1446 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1447 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1449 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1450 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1452 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1453 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1455 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1456 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1457 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1458 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1460 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1462 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1464 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1466 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1473 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1475 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1477 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1479 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1486 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1488 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1490 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1492 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1494 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1496 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1498 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1506 
	#GL_RESCALE_NORMAL
 0x803A

	)

1507 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1508 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1509 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1510 
	#GL_BGR
 0x80E0

	)

1511 
	#GL_BGRA
 0x80E1

	)

1512 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1513 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1514 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1515 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1516 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1517 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1518 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1519 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1520 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1521 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1522 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1523 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1524 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1525 
	#GL_SINGLE_COLOR
 0x81F9

	)

1526 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1527 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1528 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1529 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1530 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1531 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1532 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1533 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1534 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1535 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1536 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1537 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1538 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1539 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1540 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1541 
	#GL_TEXTURE_3D
 0x806F

	)

1542 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1543 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1544 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1545 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1546 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1548 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1549 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1551 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1552 
GLöt
 
öã∫ÆF‹m©
,

1553 
GLsizei
 
width
, GLsizeò
height
,

1554 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1555 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1556 c⁄° 
GLvoid
 *
pixñs
 );

1558 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1559 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1560 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1561 
GLsizei
 
height
, GLsizeò
dïth
,

1562 
GLíum
 
f‹m©
,

1563 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1565 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1566 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1567 
GLöt
 
zoff£t
, GLöà
x
,

1568 
GLöt
 
y
, 
GLsizei
 
width
,

1569 
GLsizei
 
height
 );

1571 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1572 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1573 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1574 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1581 
	#GL_CONSTANT_COLOR
 0x8001

	)

1582 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1583 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1584 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1585 
	#GL_COLOR_TABLE
 0x80D0

	)

1586 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1587 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1588 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1589 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1590 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1591 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1592 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1593 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1594 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1595 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1596 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1597 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1598 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1599 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1600 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1601 
	#GL_CONVOLUTION_1D
 0x8010

	)

1602 
	#GL_CONVOLUTION_2D
 0x8011

	)

1603 
	#GL_SEPARABLE_2D
 0x8012

	)

1604 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1605 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1606 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1607 
	#GL_REDUCE
 0x8016

	)

1608 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1609 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1610 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1611 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1612 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1613 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1614 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1615 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1616 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1617 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1618 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1619 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1620 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1621 
	#GL_CONSTANT_BORDER
 0x8151

	)

1622 
	#GL_REPLICATE_BORDER
 0x8153

	)

1623 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1624 
	#GL_COLOR_MATRIX
 0x80B1

	)

1625 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1626 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1627 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1628 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1629 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1630 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1631 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1632 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1633 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1634 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1635 
	#GL_HISTOGRAM
 0x8024

	)

1636 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1637 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1638 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1639 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1640 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1641 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1642 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1643 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1644 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1645 
	#GL_MINMAX
 0x802E

	)

1646 
	#GL_MINMAX_FORMAT
 0x802F

	)

1647 
	#GL_MINMAX_SINK
 0x8030

	)

1648 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1649 
	#GL_BLEND_EQUATION
 0x8009

	)

1650 
	#GL_MIN
 0x8007

	)

1651 
	#GL_MAX
 0x8008

	)

1652 
	#GL_FUNC_ADD
 0x8006

	)

1653 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1654 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1655 
	#GL_BLEND_COLOR
 0x8005

	)

1658 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1659 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1660 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1662 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1663 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1664 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1665 c⁄° 
GLvoid
 *
d©a
 );

1667 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1668 c⁄° 
GLöt
 *
∑øms
);

1670 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1671 c⁄° 
GLÊﬂt
 *
∑øms
);

1673 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1674 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1676 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1677 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1679 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1680 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1682 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1683 
GLÊﬂt
 *
∑øms
 );

1685 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1686 
GLöt
 *
∑øms
 );

1688 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1690 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1691 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1693 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1694 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1696 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1698 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1699 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1700 
GLvoid
 *
vÆues
 );

1702 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1703 
GLÊﬂt
 *
∑øms
 );

1705 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1706 
GLöt
 *
∑øms
 );

1708 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1709 
GLboﬁón
 
sök
 );

1711 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1713 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1714 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1715 
GLvoid
 *
vÆues
 );

1717 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1718 
GLÊﬂt
 *
∑øms
 );

1720 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1721 
GLöt
 *
∑øms
 );

1723 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1724 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1725 c⁄° 
GLvoid
 *
image
 );

1727 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1728 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1729 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1731 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1732 
GLÊﬂt
 
∑øms
 );

1734 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1735 c⁄° 
GLÊﬂt
 *
∑øms
 );

1737 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1738 
GLöt
 
∑øms
 );

1740 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1741 c⁄° 
GLöt
 *
∑øms
 );

1743 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1744 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1746 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1747 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1748 
GLsizei
 
height
);

1750 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1751 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1753 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1754 
GLÊﬂt
 *
∑øms
 );

1756 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1757 
GLöt
 *
∑øms
 );

1759 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1760 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1761 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1763 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1764 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1774 
	#GL_TEXTURE0
 0x84C0

	)

1775 
	#GL_TEXTURE1
 0x84C1

	)

1776 
	#GL_TEXTURE2
 0x84C2

	)

1777 
	#GL_TEXTURE3
 0x84C3

	)

1778 
	#GL_TEXTURE4
 0x84C4

	)

1779 
	#GL_TEXTURE5
 0x84C5

	)

1780 
	#GL_TEXTURE6
 0x84C6

	)

1781 
	#GL_TEXTURE7
 0x84C7

	)

1782 
	#GL_TEXTURE8
 0x84C8

	)

1783 
	#GL_TEXTURE9
 0x84C9

	)

1784 
	#GL_TEXTURE10
 0x84CA

	)

1785 
	#GL_TEXTURE11
 0x84CB

	)

1786 
	#GL_TEXTURE12
 0x84CC

	)

1787 
	#GL_TEXTURE13
 0x84CD

	)

1788 
	#GL_TEXTURE14
 0x84CE

	)

1789 
	#GL_TEXTURE15
 0x84CF

	)

1790 
	#GL_TEXTURE16
 0x84D0

	)

1791 
	#GL_TEXTURE17
 0x84D1

	)

1792 
	#GL_TEXTURE18
 0x84D2

	)

1793 
	#GL_TEXTURE19
 0x84D3

	)

1794 
	#GL_TEXTURE20
 0x84D4

	)

1795 
	#GL_TEXTURE21
 0x84D5

	)

1796 
	#GL_TEXTURE22
 0x84D6

	)

1797 
	#GL_TEXTURE23
 0x84D7

	)

1798 
	#GL_TEXTURE24
 0x84D8

	)

1799 
	#GL_TEXTURE25
 0x84D9

	)

1800 
	#GL_TEXTURE26
 0x84DA

	)

1801 
	#GL_TEXTURE27
 0x84DB

	)

1802 
	#GL_TEXTURE28
 0x84DC

	)

1803 
	#GL_TEXTURE29
 0x84DD

	)

1804 
	#GL_TEXTURE30
 0x84DE

	)

1805 
	#GL_TEXTURE31
 0x84DF

	)

1806 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1807 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1808 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1810 
	#GL_NORMAL_MAP
 0x8511

	)

1811 
	#GL_REFLECTION_MAP
 0x8512

	)

1812 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1813 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1814 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1815 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1816 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1817 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1818 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1819 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1820 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1821 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1823 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1824 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1825 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1826 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1827 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1828 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1829 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1830 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1831 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1832 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1833 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1835 
	#GL_MULTISAMPLE
 0x809D

	)

1836 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1837 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1838 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1839 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1840 
	#GL_SAMPLES
 0x80A9

	)

1841 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1842 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1843 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1845 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1846 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1847 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1848 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1850 
	#GL_COMBINE
 0x8570

	)

1851 
	#GL_COMBINE_RGB
 0x8571

	)

1852 
	#GL_COMBINE_ALPHA
 0x8572

	)

1853 
	#GL_SOURCE0_RGB
 0x8580

	)

1854 
	#GL_SOURCE1_RGB
 0x8581

	)

1855 
	#GL_SOURCE2_RGB
 0x8582

	)

1856 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1857 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1858 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1859 
	#GL_OPERAND0_RGB
 0x8590

	)

1860 
	#GL_OPERAND1_RGB
 0x8591

	)

1861 
	#GL_OPERAND2_RGB
 0x8592

	)

1862 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1863 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1864 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1865 
	#GL_RGB_SCALE
 0x8573

	)

1866 
	#GL_ADD_SIGNED
 0x8574

	)

1867 
	#GL_INTERPOLATE
 0x8575

	)

1868 
	#GL_SUBTRACT
 0x84E7

	)

1869 
	#GL_CONSTANT
 0x8576

	)

1870 
	#GL_PRIMARY_COLOR
 0x8577

	)

1871 
	#GL_PREVIOUS
 0x8578

	)

1873 
	#GL_DOT3_RGB
 0x86AE

	)

1874 
	#GL_DOT3_RGBA
 0x86AF

	)

1876 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1878 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1880 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1882 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1884 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1886 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1888 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1890 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1892 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1894 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1896 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1898 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1900 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1902 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1904 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1906 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1908 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1910 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1912 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1914 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1916 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1918 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1920 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1922 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1924 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1926 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1928 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1930 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1932 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1934 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1936 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1938 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1940 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1942 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1944 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1946 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1948 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1950 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1952 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1954 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1956 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1958 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1961 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1963 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1965 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1967 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1969 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1972 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1973 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1974 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1975 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1976 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1977 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1978 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1979 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1980 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1987 #i‚de‡
GL_ARB_mu…ôextuª


1988 
	#GL_ARB_mu…ôextuª
 1

	)

1990 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1991 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1992 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1993 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1994 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1995 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1996 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1997 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1998 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1999 
	#GL_TEXTURE9_ARB
 0x84C9

	)

2000 
	#GL_TEXTURE10_ARB
 0x84CA

	)

2001 
	#GL_TEXTURE11_ARB
 0x84CB

	)

2002 
	#GL_TEXTURE12_ARB
 0x84CC

	)

2003 
	#GL_TEXTURE13_ARB
 0x84CD

	)

2004 
	#GL_TEXTURE14_ARB
 0x84CE

	)

2005 
	#GL_TEXTURE15_ARB
 0x84CF

	)

2006 
	#GL_TEXTURE16_ARB
 0x84D0

	)

2007 
	#GL_TEXTURE17_ARB
 0x84D1

	)

2008 
	#GL_TEXTURE18_ARB
 0x84D2

	)

2009 
	#GL_TEXTURE19_ARB
 0x84D3

	)

2010 
	#GL_TEXTURE20_ARB
 0x84D4

	)

2011 
	#GL_TEXTURE21_ARB
 0x84D5

	)

2012 
	#GL_TEXTURE22_ARB
 0x84D6

	)

2013 
	#GL_TEXTURE23_ARB
 0x84D7

	)

2014 
	#GL_TEXTURE24_ARB
 0x84D8

	)

2015 
	#GL_TEXTURE25_ARB
 0x84D9

	)

2016 
	#GL_TEXTURE26_ARB
 0x84DA

	)

2017 
	#GL_TEXTURE27_ARB
 0x84DB

	)

2018 
	#GL_TEXTURE28_ARB
 0x84DC

	)

2019 
	#GL_TEXTURE29_ARB
 0x84DD

	)

2020 
	#GL_TEXTURE30_ARB
 0x84DE

	)

2021 
	#GL_TEXTURE31_ARB
 0x84DF

	)

2022 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

2023 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

2024 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

2026 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2027 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

2028 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

2029 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2030 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

2031 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2032 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

2033 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2034 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

2035 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2036 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

2037 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2038 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

2039 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2040 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

2041 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2042 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

2043 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2044 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

2045 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2046 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

2047 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2048 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

2049 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2050 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2051 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2052 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2053 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2054 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2055 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2056 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2057 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2058 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2059 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2061 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2062 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2063 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2064 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2065 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2066 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2067 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2068 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2069 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2070 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2071 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2072 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2073 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2074 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2075 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2076 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2077 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2078 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2079 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2080 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2081 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2082 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2083 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2084 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2085 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2086 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2087 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2088 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2089 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2090 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2091 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2092 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2093 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2094 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2104 #i‡!
deföed
(
NO_SDL_GLEXT
Ë&& !deföed(
GL_GLEXT_LEGACY
)

2105 
	~"SDL_›ígl_gÀxt.h
"

2114 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2115 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2117 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2118 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2119 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2120 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2121 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2126 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2127 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2129 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2131 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2132 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2138 #i‚de‡
GL_OES_EGL_image


2139 * 
	tGLeglImageOES
;

2142 #i‚de‡
GL_OES_EGL_image


2143 
	#GL_OES_EGL_image
 1

	)

2144 #ifde‡
GL_GLEXT_PROTOTYPES


2145 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2146 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2148 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2149 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2164 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2165 #¥agm®
exp‹t
 
off


2173 #ifde‡
__˝lu•lus


	@SDL2/include/SDL_opengl_glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 #i‚de‡
NOMINMAX


44 
	#NOMINMAX


	)

46 
	~<wödows.h
>

49 #i‚de‡
APIENTRY


50 
	#APIENTRY


	)

52 #i‚de‡
APIENTRYP


53 
	#APIENTRYP
 
APIENTRY
 *

	)

55 #i‚de‡
GLAPI


56 
	#GLAPI
 

	)

59 
	#GL_GLEXT_VERSION
 20140521

	)

71 #i‚de‡
GL_VERSION_1_2


72 
	#GL_VERSION_1_2
 1

	)

73 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

74 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

75 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

76 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

77 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

78 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

79 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

80 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

81 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

82 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

83 
	#GL_TEXTURE_3D
 0x806F

	)

84 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

85 
	#GL_TEXTURE_DEPTH
 0x8071

	)

86 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

87 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

88 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

89 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

90 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

91 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

92 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

93 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

94 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

95 
	#GL_BGR
 0x80E0

	)

96 
	#GL_BGRA
 0x80E1

	)

97 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

98 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

99 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

100 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

101 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

102 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

103 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

104 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

105 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

106 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

107 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

108 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

109 
	#GL_RESCALE_NORMAL
 0x803A

	)

110 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

111 
	#GL_SINGLE_COLOR
 0x81F9

	)

112 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

113 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

114 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

115 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

116 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

117 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

118 #ifde‡
GL_GLEXT_PROTOTYPES


119 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

120 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

121 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

122 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

126 #i‚de‡
GL_VERSION_1_3


127 
	#GL_VERSION_1_3
 1

	)

128 
	#GL_TEXTURE0
 0x84C0

	)

129 
	#GL_TEXTURE1
 0x84C1

	)

130 
	#GL_TEXTURE2
 0x84C2

	)

131 
	#GL_TEXTURE3
 0x84C3

	)

132 
	#GL_TEXTURE4
 0x84C4

	)

133 
	#GL_TEXTURE5
 0x84C5

	)

134 
	#GL_TEXTURE6
 0x84C6

	)

135 
	#GL_TEXTURE7
 0x84C7

	)

136 
	#GL_TEXTURE8
 0x84C8

	)

137 
	#GL_TEXTURE9
 0x84C9

	)

138 
	#GL_TEXTURE10
 0x84CA

	)

139 
	#GL_TEXTURE11
 0x84CB

	)

140 
	#GL_TEXTURE12
 0x84CC

	)

141 
	#GL_TEXTURE13
 0x84CD

	)

142 
	#GL_TEXTURE14
 0x84CE

	)

143 
	#GL_TEXTURE15
 0x84CF

	)

144 
	#GL_TEXTURE16
 0x84D0

	)

145 
	#GL_TEXTURE17
 0x84D1

	)

146 
	#GL_TEXTURE18
 0x84D2

	)

147 
	#GL_TEXTURE19
 0x84D3

	)

148 
	#GL_TEXTURE20
 0x84D4

	)

149 
	#GL_TEXTURE21
 0x84D5

	)

150 
	#GL_TEXTURE22
 0x84D6

	)

151 
	#GL_TEXTURE23
 0x84D7

	)

152 
	#GL_TEXTURE24
 0x84D8

	)

153 
	#GL_TEXTURE25
 0x84D9

	)

154 
	#GL_TEXTURE26
 0x84DA

	)

155 
	#GL_TEXTURE27
 0x84DB

	)

156 
	#GL_TEXTURE28
 0x84DC

	)

157 
	#GL_TEXTURE29
 0x84DD

	)

158 
	#GL_TEXTURE30
 0x84DE

	)

159 
	#GL_TEXTURE31
 0x84DF

	)

160 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

161 
	#GL_MULTISAMPLE
 0x809D

	)

162 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

163 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

164 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

165 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

166 
	#GL_SAMPLES
 0x80A9

	)

167 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

168 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

169 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

170 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

171 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

172 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

173 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

174 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

175 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

176 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

177 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

178 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

179 
	#GL_COMPRESSED_RGB
 0x84ED

	)

180 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

181 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

182 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

183 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

184 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

185 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

186 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

187 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

188 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

189 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

190 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

191 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

192 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

193 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

194 
	#GL_NORMAL_MAP
 0x8511

	)

195 
	#GL_REFLECTION_MAP
 0x8512

	)

196 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

197 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

198 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

199 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

200 
	#GL_COMBINE
 0x8570

	)

201 
	#GL_COMBINE_RGB
 0x8571

	)

202 
	#GL_COMBINE_ALPHA
 0x8572

	)

203 
	#GL_SOURCE0_RGB
 0x8580

	)

204 
	#GL_SOURCE1_RGB
 0x8581

	)

205 
	#GL_SOURCE2_RGB
 0x8582

	)

206 
	#GL_SOURCE0_ALPHA
 0x8588

	)

207 
	#GL_SOURCE1_ALPHA
 0x8589

	)

208 
	#GL_SOURCE2_ALPHA
 0x858A

	)

209 
	#GL_OPERAND0_RGB
 0x8590

	)

210 
	#GL_OPERAND1_RGB
 0x8591

	)

211 
	#GL_OPERAND2_RGB
 0x8592

	)

212 
	#GL_OPERAND0_ALPHA
 0x8598

	)

213 
	#GL_OPERAND1_ALPHA
 0x8599

	)

214 
	#GL_OPERAND2_ALPHA
 0x859A

	)

215 
	#GL_RGB_SCALE
 0x8573

	)

216 
	#GL_ADD_SIGNED
 0x8574

	)

217 
	#GL_INTERPOLATE
 0x8575

	)

218 
	#GL_SUBTRACT
 0x84E7

	)

219 
	#GL_CONSTANT
 0x8576

	)

220 
	#GL_PRIMARY_COLOR
 0x8577

	)

221 
	#GL_PREVIOUS
 0x8578

	)

222 
	#GL_DOT3_RGB
 0x86AE

	)

223 
	#GL_DOT3_RGBA
 0x86AF

	)

224 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

225 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

226 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

227 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

228 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

229 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

230 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

231 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

232 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

233 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

263 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

264 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

265 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

266 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

267 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

268 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

269 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

270 #ifde‡
GL_GLEXT_PROTOTYPES


271 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

272 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

273 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

276 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

277 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

278 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

279 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

280 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

281 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

282 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

283 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

284 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

285 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

286 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

287 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

288 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

289 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

290 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

291 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

292 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

293 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

294 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

295 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

296 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

297 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

298 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

299 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

300 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

301 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

302 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

303 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

304 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

305 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

306 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

307 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

308 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

309 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

310 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

311 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

312 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

313 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

314 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

315 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

316 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

320 #i‚de‡
GL_VERSION_1_4


321 
	#GL_VERSION_1_4
 1

	)

322 
	#GL_BLEND_DST_RGB
 0x80C8

	)

323 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

324 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

325 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

326 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

327 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

328 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

329 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

330 
	#GL_MIRRORED_REPEAT
 0x8370

	)

331 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

332 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

333 
	#GL_INCR_WRAP
 0x8507

	)

334 
	#GL_DECR_WRAP
 0x8508

	)

335 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

336 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

337 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

338 
	#GL_POINT_SIZE_MIN
 0x8126

	)

339 
	#GL_POINT_SIZE_MAX
 0x8127

	)

340 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

341 
	#GL_GENERATE_MIPMAP
 0x8191

	)

342 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

343 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

344 
	#GL_FOG_COORDINATE
 0x8451

	)

345 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

346 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

347 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

348 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

349 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

350 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

351 
	#GL_COLOR_SUM
 0x8458

	)

352 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

353 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

354 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

355 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

356 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

357 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

358 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

359 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

360 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

361 
	#GL_FUNC_ADD
 0x8006

	)

362 
	#GL_FUNC_SUBTRACT
 0x800A

	)

363 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

364 
	#GL_MIN
 0x8007

	)

365 
	#GL_MAX
 0x8008

	)

366 
	#GL_CONSTANT_COLOR
 0x8001

	)

367 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

368 
	#GL_CONSTANT_ALPHA
 0x8003

	)

369 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

370 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

371 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

372 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

373 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

374 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

375 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

376 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

377 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

378 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

379 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

380 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

381 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

382 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

383 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

384 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

387 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

388 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

389 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

390 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

396 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

397 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

398 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

399 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

400 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

401 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

402 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

403 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

404 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

405 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

406 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

407 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

408 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

409 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

410 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

411 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

412 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

413 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

414 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

415 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

416 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

417 #ifde‡
GL_GLEXT_PROTOTYPES


418 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

419 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

420 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

421 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

422 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

423 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

424 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

425 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

426 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

427 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

428 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

429 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

430 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

431 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

433 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

434 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

435 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

436 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

437 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

438 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

439 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

440 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

441 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

442 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

444 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

445 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

446 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

447 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

448 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

449 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

450 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

451 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

452 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

453 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

454 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

455 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

456 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

457 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

458 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

459 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

460 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

461 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

462 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

463 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

464 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

468 #i‚de‡
GL_VERSION_1_5


469 
	#GL_VERSION_1_5
 1

	)

470 
	~<°ddef.h
>

471 #ifde‡
__MACOSX__


472 
	tGLsizeùå
;

473 
	tGLöçå
;

475 
±rdiff_t
 
	tGLsizeùå
;

476 
±rdiff_t
 
	tGLöçå
;

478 
	#GL_BUFFER_SIZE
 0x8764

	)

479 
	#GL_BUFFER_USAGE
 0x8765

	)

480 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

481 
	#GL_CURRENT_QUERY
 0x8865

	)

482 
	#GL_QUERY_RESULT
 0x8866

	)

483 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

484 
	#GL_ARRAY_BUFFER
 0x8892

	)

485 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

486 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

487 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

488 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

489 
	#GL_READ_ONLY
 0x88B8

	)

490 
	#GL_WRITE_ONLY
 0x88B9

	)

491 
	#GL_READ_WRITE
 0x88BA

	)

492 
	#GL_BUFFER_ACCESS
 0x88BB

	)

493 
	#GL_BUFFER_MAPPED
 0x88BC

	)

494 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

495 
	#GL_STREAM_DRAW
 0x88E0

	)

496 
	#GL_STREAM_READ
 0x88E1

	)

497 
	#GL_STREAM_COPY
 0x88E2

	)

498 
	#GL_STATIC_DRAW
 0x88E4

	)

499 
	#GL_STATIC_READ
 0x88E5

	)

500 
	#GL_STATIC_COPY
 0x88E6

	)

501 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

502 
	#GL_DYNAMIC_READ
 0x88E9

	)

503 
	#GL_DYNAMIC_COPY
 0x88EA

	)

504 
	#GL_SAMPLES_PASSED
 0x8914

	)

505 
	#GL_SRC1_ALPHA
 0x8589

	)

506 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

507 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

508 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

509 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

510 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

511 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

512 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

513 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

514 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

515 
	#GL_FOG_COORD_SRC
 0x8450

	)

516 
	#GL_FOG_COORD
 0x8451

	)

517 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

518 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

519 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

520 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

521 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

522 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

523 
	#GL_SRC0_RGB
 0x8580

	)

524 
	#GL_SRC1_RGB
 0x8581

	)

525 
	#GL_SRC2_RGB
 0x8582

	)

526 
	#GL_SRC0_ALPHA
 0x8588

	)

527 
	#GL_SRC2_ALPHA
 0x858A

	)

528 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

529 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

530 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

531 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

532 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

533 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

534 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

535 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

536 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

537 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

538 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

539 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

540 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

541 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

542 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

543 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

544 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

545 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

546 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

547 #ifde‡
GL_GLEXT_PROTOTYPES


548 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

549 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

550 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

551 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

552 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

553 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

554 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

555 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

556 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

557 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

558 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

559 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

560 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

561 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

562 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

563 
GLAPI
 *
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

564 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

565 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

566 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

570 #i‚de‡
GL_VERSION_2_0


571 
	#GL_VERSION_2_0
 1

	)

572 
	tGLch¨
;

573 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

574 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

575 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

576 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

577 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

578 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

579 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

580 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

581 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

582 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

583 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

584 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

585 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

586 
	#GL_DRAW_BUFFER0
 0x8825

	)

587 
	#GL_DRAW_BUFFER1
 0x8826

	)

588 
	#GL_DRAW_BUFFER2
 0x8827

	)

589 
	#GL_DRAW_BUFFER3
 0x8828

	)

590 
	#GL_DRAW_BUFFER4
 0x8829

	)

591 
	#GL_DRAW_BUFFER5
 0x882A

	)

592 
	#GL_DRAW_BUFFER6
 0x882B

	)

593 
	#GL_DRAW_BUFFER7
 0x882C

	)

594 
	#GL_DRAW_BUFFER8
 0x882D

	)

595 
	#GL_DRAW_BUFFER9
 0x882E

	)

596 
	#GL_DRAW_BUFFER10
 0x882F

	)

597 
	#GL_DRAW_BUFFER11
 0x8830

	)

598 
	#GL_DRAW_BUFFER12
 0x8831

	)

599 
	#GL_DRAW_BUFFER13
 0x8832

	)

600 
	#GL_DRAW_BUFFER14
 0x8833

	)

601 
	#GL_DRAW_BUFFER15
 0x8834

	)

602 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

603 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

604 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

605 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

606 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

607 
	#GL_VERTEX_SHADER
 0x8B31

	)

608 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

609 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

610 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

611 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

612 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

613 
	#GL_SHADER_TYPE
 0x8B4F

	)

614 
	#GL_FLOAT_VEC2
 0x8B50

	)

615 
	#GL_FLOAT_VEC3
 0x8B51

	)

616 
	#GL_FLOAT_VEC4
 0x8B52

	)

617 
	#GL_INT_VEC2
 0x8B53

	)

618 
	#GL_INT_VEC3
 0x8B54

	)

619 
	#GL_INT_VEC4
 0x8B55

	)

620 
	#GL_BOOL
 0x8B56

	)

621 
	#GL_BOOL_VEC2
 0x8B57

	)

622 
	#GL_BOOL_VEC3
 0x8B58

	)

623 
	#GL_BOOL_VEC4
 0x8B59

	)

624 
	#GL_FLOAT_MAT2
 0x8B5A

	)

625 
	#GL_FLOAT_MAT3
 0x8B5B

	)

626 
	#GL_FLOAT_MAT4
 0x8B5C

	)

627 
	#GL_SAMPLER_1D
 0x8B5D

	)

628 
	#GL_SAMPLER_2D
 0x8B5E

	)

629 
	#GL_SAMPLER_3D
 0x8B5F

	)

630 
	#GL_SAMPLER_CUBE
 0x8B60

	)

631 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

632 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

633 
	#GL_DELETE_STATUS
 0x8B80

	)

634 
	#GL_COMPILE_STATUS
 0x8B81

	)

635 
	#GL_LINK_STATUS
 0x8B82

	)

636 
	#GL_VALIDATE_STATUS
 0x8B83

	)

637 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

638 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

639 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

640 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

641 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

642 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

643 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

644 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

645 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

646 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

647 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

648 
	#GL_LOWER_LEFT
 0x8CA1

	)

649 
	#GL_UPPER_LEFT
 0x8CA2

	)

650 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

651 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

652 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

653 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

654 
	#GL_POINT_SPRITE
 0x8861

	)

655 
	#GL_COORD_REPLACE
 0x8862

	)

656 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

657 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

658 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

659 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

660 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

661 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

662 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

663 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

664 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

665 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

666 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

667 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

668 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

669 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

670 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

671 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

672 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

673 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

674 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

675 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

676 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

677 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

678 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

679 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

680 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

681 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

682 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

683 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

684 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

685 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

686 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

687 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

688 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

689 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

690 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

691 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

692 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

693 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

694 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

695 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

696 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

697 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

698 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

699 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

700 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

701 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

702 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

703 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

704 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

705 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

706 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

707 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

708 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

709 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

710 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

711 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

712 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

742 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

743 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

744 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

745 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

746 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

747 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

748 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

749 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

750 #ifde‡
GL_GLEXT_PROTOTYPES


751 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

752 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

753 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

754 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

755 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

756 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

757 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

758 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

759 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

760 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

761 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

762 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

763 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

764 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

765 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

766 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

767 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

768 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

769 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

770 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

771 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

772 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

773 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

774 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

775 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

776 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

777 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

778 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

779 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

780 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

781 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

782 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

783 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

784 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

785 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

786 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

787 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

788 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

789 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

790 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

791 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

792 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

793 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

794 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

795 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

796 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

797 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

798 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

799 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

800 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

801 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

802 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

803 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

804 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

805 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

806 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

807 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

808 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

809 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

810 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

811 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

812 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

813 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

814 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

815 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

816 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

817 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

818 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

819 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

820 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

821 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

822 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

823 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

824 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

825 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

826 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

827 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

828 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

829 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

830 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

831 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

832 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

833 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

834 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

835 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

836 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

837 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

838 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

839 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

840 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

841 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

842 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

843 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

847 #i‚de‡
GL_VERSION_2_1


848 
	#GL_VERSION_2_1
 1

	)

849 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

850 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

851 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

852 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

853 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

854 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

855 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

856 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

857 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

858 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

859 
	#GL_SRGB
 0x8C40

	)

860 
	#GL_SRGB8
 0x8C41

	)

861 
	#GL_SRGB_ALPHA
 0x8C42

	)

862 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

863 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

864 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

865 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

866 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

867 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

868 
	#GL_SLUMINANCE
 0x8C46

	)

869 
	#GL_SLUMINANCE8
 0x8C47

	)

870 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

871 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

872 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

873 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

874 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

875 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

876 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

877 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

878 #ifde‡
GL_GLEXT_PROTOTYPES


879 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

880 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

881 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

882 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

883 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

884 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

888 #i‚de‡
GL_VERSION_3_0


889 
	#GL_VERSION_3_0
 1

	)

890 
	tGLhÆf
;

891 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

892 
	#GL_CLIP_DISTANCE0
 0x3000

	)

893 
	#GL_CLIP_DISTANCE1
 0x3001

	)

894 
	#GL_CLIP_DISTANCE2
 0x3002

	)

895 
	#GL_CLIP_DISTANCE3
 0x3003

	)

896 
	#GL_CLIP_DISTANCE4
 0x3004

	)

897 
	#GL_CLIP_DISTANCE5
 0x3005

	)

898 
	#GL_CLIP_DISTANCE6
 0x3006

	)

899 
	#GL_CLIP_DISTANCE7
 0x3007

	)

900 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

901 
	#GL_MAJOR_VERSION
 0x821B

	)

902 
	#GL_MINOR_VERSION
 0x821C

	)

903 
	#GL_NUM_EXTENSIONS
 0x821D

	)

904 
	#GL_CONTEXT_FLAGS
 0x821E

	)

905 
	#GL_COMPRESSED_RED
 0x8225

	)

906 
	#GL_COMPRESSED_RG
 0x8226

	)

907 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

908 
	#GL_RGBA32F
 0x8814

	)

909 
	#GL_RGB32F
 0x8815

	)

910 
	#GL_RGBA16F
 0x881A

	)

911 
	#GL_RGB16F
 0x881B

	)

912 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

913 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

914 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

915 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

916 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

917 
	#GL_FIXED_ONLY
 0x891D

	)

918 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

919 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

920 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

921 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

922 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

923 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

924 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

925 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

926 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

927 
	#GL_RGB9_E5
 0x8C3D

	)

928 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

929 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

930 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

931 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

932 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

933 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

934 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

935 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

936 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

937 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

938 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

939 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

940 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

941 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

942 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

943 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

944 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

945 
	#GL_RGBA32UI
 0x8D70

	)

946 
	#GL_RGB32UI
 0x8D71

	)

947 
	#GL_RGBA16UI
 0x8D76

	)

948 
	#GL_RGB16UI
 0x8D77

	)

949 
	#GL_RGBA8UI
 0x8D7C

	)

950 
	#GL_RGB8UI
 0x8D7D

	)

951 
	#GL_RGBA32I
 0x8D82

	)

952 
	#GL_RGB32I
 0x8D83

	)

953 
	#GL_RGBA16I
 0x8D88

	)

954 
	#GL_RGB16I
 0x8D89

	)

955 
	#GL_RGBA8I
 0x8D8E

	)

956 
	#GL_RGB8I
 0x8D8F

	)

957 
	#GL_RED_INTEGER
 0x8D94

	)

958 
	#GL_GREEN_INTEGER
 0x8D95

	)

959 
	#GL_BLUE_INTEGER
 0x8D96

	)

960 
	#GL_RGB_INTEGER
 0x8D98

	)

961 
	#GL_RGBA_INTEGER
 0x8D99

	)

962 
	#GL_BGR_INTEGER
 0x8D9A

	)

963 
	#GL_BGRA_INTEGER
 0x8D9B

	)

964 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

965 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

966 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

967 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

968 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

969 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

970 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

971 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

972 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

973 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

974 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

975 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

976 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

977 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

978 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

979 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

980 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

981 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

982 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

983 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

984 
	#GL_QUERY_WAIT
 0x8E13

	)

985 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

986 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

987 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

988 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

989 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

990 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

991 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

992 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

993 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

994 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

995 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

996 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

997 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

998 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

999 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1000 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1001 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1002 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1003 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1004 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1005 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1006 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1007 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1008 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1009 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1010 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1011 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1012 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1013 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1014 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1015 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1016 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1017 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1018 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1019 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1020 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1021 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1022 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1023 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1024 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1025 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1026 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1027 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1028 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1029 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1030 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1031 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1032 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1033 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1034 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1035 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1036 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1037 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1038 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1039 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1040 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1041 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1042 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1043 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1044 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1045 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1046 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1047 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1048 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1049 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1050 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1051 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1052 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1053 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1054 
	#GL_FRAMEBUFFER
 0x8D40

	)

1055 
	#GL_RENDERBUFFER
 0x8D41

	)

1056 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1057 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1058 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1059 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1060 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1061 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1062 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1063 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1064 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1065 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1066 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1067 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1068 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1069 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1070 
	#GL_MAX_SAMPLES
 0x8D57

	)

1071 
	#GL_INDEX
 0x8222

	)

1072 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1073 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1074 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1075 
	#GL_HALF_FLOAT
 0x140B

	)

1076 
	#GL_MAP_READ_BIT
 0x0001

	)

1077 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1078 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1079 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1080 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1081 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1082 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1083 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1084 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1085 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1086 
	#GL_RG
 0x8227

	)

1087 
	#GL_RG_INTEGER
 0x8228

	)

1088 
	#GL_R8
 0x8229

	)

1089 
	#GL_R16
 0x822A

	)

1090 
	#GL_RG8
 0x822B

	)

1091 
	#GL_RG16
 0x822C

	)

1092 
	#GL_R16F
 0x822D

	)

1093 
	#GL_R32F
 0x822E

	)

1094 
	#GL_RG16F
 0x822F

	)

1095 
	#GL_RG32F
 0x8230

	)

1096 
	#GL_R8I
 0x8231

	)

1097 
	#GL_R8UI
 0x8232

	)

1098 
	#GL_R16I
 0x8233

	)

1099 
	#GL_R16UI
 0x8234

	)

1100 
	#GL_R32I
 0x8235

	)

1101 
	#GL_R32UI
 0x8236

	)

1102 
	#GL_RG8I
 0x8237

	)

1103 
	#GL_RG8UI
 0x8238

	)

1104 
	#GL_RG16I
 0x8239

	)

1105 
	#GL_RG16UI
 0x823A

	)

1106 
	#GL_RG32I
 0x823B

	)

1107 
	#GL_RG32UI
 0x823C

	)

1108 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1109 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

1110 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

1111 
	#GL_ALPHA_INTEGER
 0x8D97

	)

1112 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1113 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1114 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1115 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1116 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1117 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1118 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1119 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1120 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1121 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1122 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1123 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1124 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1125 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1126 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1127 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1128 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1129 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1130 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1131 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1132 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1133 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1134 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1136 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1137 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1142 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1143 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1144 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1145 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1146 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1147 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1148 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1149 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1150 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1151 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1152 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1153 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1154 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1155 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1156 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1157 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1158 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1159 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1160 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1161 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1162 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1163 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1164 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1165 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1166 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1167 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1168 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1169 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1170 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1171 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1172 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1173 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1174 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1175 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1176 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1177 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1178 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1179 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1180 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1181 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1182 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1183 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1184 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1185 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1186 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1187 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1188 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1189 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1190 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1191 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1192 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1193 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1194 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1195 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1196 #ifde‡
GL_GLEXT_PROTOTYPES


1197 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1198 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1199 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1200 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1201 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1202 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1203 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1204 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

1205 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1206 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1207 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1208 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1209 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1210 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1211 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

1212 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1213 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1214 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1215 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1216 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1217 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1218 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1219 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1220 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1221 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1222 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1223 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1224 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1225 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1226 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1227 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1228 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1229 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1230 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1231 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1232 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1233 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1234 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1235 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1236 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1237 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1238 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1239 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1240 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1241 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1242 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1243 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1244 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1245 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1246 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1247 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1248 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1249 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1250 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1251 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1252 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1253 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1254 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1255 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1256 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1257 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1258 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1259 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1260 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1261 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1262 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1263 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1264 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1265 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1266 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1267 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1268 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1269 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1270 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1271 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1272 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1273 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1274 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1275 
GLAPI
 *
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1276 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1277 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1278 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1279 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1280 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1284 #i‚de‡
GL_VERSION_3_1


1285 
	#GL_VERSION_3_1
 1

	)

1286 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1287 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1288 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1289 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1290 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1291 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1292 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1293 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1294 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1295 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1296 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1297 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1298 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1299 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1300 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1301 
	#GL_R8_SNORM
 0x8F94

	)

1302 
	#GL_RG8_SNORM
 0x8F95

	)

1303 
	#GL_RGB8_SNORM
 0x8F96

	)

1304 
	#GL_RGBA8_SNORM
 0x8F97

	)

1305 
	#GL_R16_SNORM
 0x8F98

	)

1306 
	#GL_RG16_SNORM
 0x8F99

	)

1307 
	#GL_RGB16_SNORM
 0x8F9A

	)

1308 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1309 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1310 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1311 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1312 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1313 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1314 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1315 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1316 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1317 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1318 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1319 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1320 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1321 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1322 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1323 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1324 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1325 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1326 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1327 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1328 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1329 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1330 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1331 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1332 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1333 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1334 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1335 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1336 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1337 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1338 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1339 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1340 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1341 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1342 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1343 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1344 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1345 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1346 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1347 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1348 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1349 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1350 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1351 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1352 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1353 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1354 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1355 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1356 #ifde‡
GL_GLEXT_PROTOTYPES


1357 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1358 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1359 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1360 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1361 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1362 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1363 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1364 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1365 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1366 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1367 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1368 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1372 #i‚de‡
GL_VERSION_3_2


1373 
	#GL_VERSION_3_2
 1

	)

1374 
__GLsync
 *
	tGLsync
;

1375 #i‚de‡
GLEXT_64_TYPES_DEFINED


1377 
	#GLEXT_64_TYPES_DEFINED


	)

1380 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1381 
	~<öây≥s.h
>

1382 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1383 
	~<öây≥s.h
>

1384 #i‡
deföed
(
__STDC__
)

1385 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1386 
	töt64_t
;

1387 
	tuöt64_t
;

1389 
	töt64_t
;

1390 
	tuöt64_t
;

1393 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

1394 
	~<öây≥s.h
>

1395 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1396 
	~<°döt.h
>

1397 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1398 
	töt32_t
;

1399 
	töt64_t
;

1400 
	tuöt64_t
;

1401 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1402 
	~<°döt.h
>

1403 #ñi‡
deföed
(
_WIN32
)

1404 
__öt32
 
	töt32_t
;

1405 
__öt64
 
	töt64_t
;

1406 
	t__öt64
 
	tuöt64_t
;

1409 
	~<öây≥s.h
>

1412 
uöt64_t
 
	tGLuöt64
;

1413 
öt64_t
 
	tGLöt64
;

1414 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1415 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1416 
	#GL_LINES_ADJACENCY
 0x000A

	)

1417 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1418 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1419 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1420 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1421 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1422 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1423 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1424 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1425 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1426 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1427 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1428 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1429 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1430 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1431 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1432 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1433 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1434 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1435 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1436 
	#GL_DEPTH_CLAMP
 0x864F

	)

1437 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1438 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1439 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1440 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1441 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1442 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1443 
	#GL_OBJECT_TYPE
 0x9112

	)

1444 
	#GL_SYNC_CONDITION
 0x9113

	)

1445 
	#GL_SYNC_STATUS
 0x9114

	)

1446 
	#GL_SYNC_FLAGS
 0x9115

	)

1447 
	#GL_SYNC_FENCE
 0x9116

	)

1448 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1449 
	#GL_UNSIGNALED
 0x9118

	)

1450 
	#GL_SIGNALED
 0x9119

	)

1451 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1452 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1453 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1454 
	#GL_WAIT_FAILED
 0x911D

	)

1455 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1456 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1457 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1458 
	#GL_SAMPLE_MASK
 0x8E51

	)

1459 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1460 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1461 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1462 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1463 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1464 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1465 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1466 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1467 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1468 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1469 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1470 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1471 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1472 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1473 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1474 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1475 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1476 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1477 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1478 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1479 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1480 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1481 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1482 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1483 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1484 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1485 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1486 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1487 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1488 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1489 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1490 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1491 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1492 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1493 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1494 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1495 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1496 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tmaskNumbî
, 
	tGLbôfõld
 
	tmask
);

1497 #ifde‡
GL_GLEXT_PROTOTYPES


1498 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1499 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1500 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1501 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1502 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

1503 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1504 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

1505 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

1506 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1507 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1508 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1509 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1510 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1511 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1512 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1513 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1514 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1515 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1516 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
maskNumbî
, 
GLbôfõld
 
mask
);

1520 #i‚de‡
GL_VERSION_3_3


1521 
	#GL_VERSION_3_3
 1

	)

1522 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1523 
	#GL_SRC1_COLOR
 0x88F9

	)

1524 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1525 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1526 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1527 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1528 
	#GL_SAMPLER_BINDING
 0x8919

	)

1529 
	#GL_RGB10_A2UI
 0x906F

	)

1530 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1531 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1532 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1533 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1534 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1535 
	#GL_TIME_ELAPSED
 0x88BF

	)

1536 
	#GL_TIMESTAMP
 0x8E28

	)

1537 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1538 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1539 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1540 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1541 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1542 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1543 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1544 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1545 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1546 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1547 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1548 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1549 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1550 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1551 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1552 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1553 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1554 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1555 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1556 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1557 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1558 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1559 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1560 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1561 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1562 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1563 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1564 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1565 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1566 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1567 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1568 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1569 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1570 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1571 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1572 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1573 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1574 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1575 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1576 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1577 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1578 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1579 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1580 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1581 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1582 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1583 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1584 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1585 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1586 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1587 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1588 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1589 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1590 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1591 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1592 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1593 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1594 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1595 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1596 #ifde‡
GL_GLEXT_PROTOTYPES


1597 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1598 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1599 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1600 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1601 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1602 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1603 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1604 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1605 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1606 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1607 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1608 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1609 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1610 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1611 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1612 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1613 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1614 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1615 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1616 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1617 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1618 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1619 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1620 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1621 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1622 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1623 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1624 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1625 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1626 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1627 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1628 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1629 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1630 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1631 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1632 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1633 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1634 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1635 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1636 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1637 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1638 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1639 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1640 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1641 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1642 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1643 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1644 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1645 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1646 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1647 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1648 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1649 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1650 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1651 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1652 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1653 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1654 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1658 #i‚de‡
GL_VERSION_4_0


1659 
	#GL_VERSION_4_0
 1

	)

1660 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1661 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1662 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1663 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1664 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1665 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1666 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1667 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1668 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1669 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1670 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1671 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1672 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1673 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1674 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1675 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1676 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1677 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1678 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1679 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1680 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1681 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1682 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1683 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1684 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1685 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1686 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1687 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1688 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1689 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1690 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1691 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1692 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1693 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1694 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1695 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1696 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1697 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1698 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1699 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1700 
	#GL_PATCHES
 0x000E

	)

1701 
	#GL_PATCH_VERTICES
 0x8E72

	)

1702 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1703 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1704 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1705 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1706 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1707 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1708 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1709 
	#GL_ISOLINES
 0x8E7A

	)

1710 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1711 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1712 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1713 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1714 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1715 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1716 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1717 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1718 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1719 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1720 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1721 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1722 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1723 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1724 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1725 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1726 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1727 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1728 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1729 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1730 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1731 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1732 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1733 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1734 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1735 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1736 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1737 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1738 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1739 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1740 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1741 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1742 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1743 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1744 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1745 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1746 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1747 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1748 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1749 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1750 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1751 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1752 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1753 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1754 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1755 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1756 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1757 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1758 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1759 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1760 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1761 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1762 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1763 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1764 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1765 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1766 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1767 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1768 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1769 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1770 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1771 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1772 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1773 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1774 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1775 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1776 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1777 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1778 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1779 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1780 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1781 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1782 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1783 #ifde‡
GL_GLEXT_PROTOTYPES


1784 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1785 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1786 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1787 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1788 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1789 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1790 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1791 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1792 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1793 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1794 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1795 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1796 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1797 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1798 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1799 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1800 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1801 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1802 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1803 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1804 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1805 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1806 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1807 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1808 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1809 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1810 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1811 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1812 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1813 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1814 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1815 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1816 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1817 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1818 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1819 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1820 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1821 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1822 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1823 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

1824 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

1825 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1826 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1827 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1828 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1829 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1833 #i‚de‡
GL_VERSION_4_1


1834 
	#GL_VERSION_4_1
 1

	)

1835 
	#GL_FIXED
 0x140C

	)

1836 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1837 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1838 
	#GL_LOW_FLOAT
 0x8DF0

	)

1839 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1840 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1841 
	#GL_LOW_INT
 0x8DF3

	)

1842 
	#GL_MEDIUM_INT
 0x8DF4

	)

1843 
	#GL_HIGH_INT
 0x8DF5

	)

1844 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1845 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1846 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1847 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1848 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1849 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1850 
	#GL_RGB565
 0x8D62

	)

1851 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1852 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1853 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1854 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1855 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1856 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1857 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1858 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1859 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1860 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1861 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1862 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1863 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1864 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1865 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1866 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1867 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1868 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1869 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1870 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1871 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1872 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1873 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1874 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1875 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1876 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1877 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1878 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1879 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1880 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1881 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1882 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1883 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1884 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1885 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1896 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1909 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1910 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1911 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1912 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1913 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1916 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1917 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1918 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1919 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1920 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1921 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1922 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1923 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1924 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1925 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1926 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1927 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1928 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1929 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1930 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1931 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1932 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1933 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1934 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1935 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1936 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1937 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1938 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1939 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1940 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1941 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1942 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1943 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1944 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1945 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1946 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1947 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

1948 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1949 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

1950 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1951 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

1952 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1953 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1954 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1955 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

1956 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

1957 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

1958 #ifde‡
GL_GLEXT_PROTOTYPES


1959 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

1960 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

1961 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

1962 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

1963 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

1964 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

1965 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

1966 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1967 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1968 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1969 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

1970 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

1971 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1972 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1973 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

1974 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1975 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

1976 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1977 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

1978 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1979 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

1980 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1981 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

1982 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1983 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

1984 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1985 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

1986 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1987 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

1988 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1989 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

1990 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1991 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

1992 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1993 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

1994 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1995 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

1996 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1997 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

1998 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1999 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

2000 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2001 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

2002 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2003 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

2004 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2005 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

2006 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2007 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2008 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2009 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2010 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2011 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2012 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2013 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2014 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2015 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2016 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2017 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2018 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2019 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2020 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2021 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2022 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2023 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2024 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2025 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2026 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2027 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2028 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2029 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2030 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2031 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2032 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2033 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2034 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2035 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2036 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2037 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2038 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2039 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2040 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2041 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2042 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2043 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2044 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2045 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2046 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2050 #i‚de‡
GL_VERSION_4_2


2051 
	#GL_VERSION_4_2
 1

	)

2052 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2053 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2054 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2055 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2056 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2057 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2058 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2059 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2060 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2061 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2062 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2063 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2064 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2065 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2066 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2067 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2068 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2069 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2070 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2071 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2072 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2073 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2074 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2075 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2076 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2077 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2078 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2079 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2080 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2081 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2082 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2083 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2084 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2085 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2086 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2087 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2088 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2089 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2090 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2091 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2092 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2093 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2094 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2095 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2096 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2097 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2098 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2099 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2100 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2101 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2102 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2103 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2104 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2105 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2106 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2107 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2108 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2109 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2110 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2111 
	#GL_IMAGE_1D
 0x904C

	)

2112 
	#GL_IMAGE_2D
 0x904D

	)

2113 
	#GL_IMAGE_3D
 0x904E

	)

2114 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2115 
	#GL_IMAGE_CUBE
 0x9050

	)

2116 
	#GL_IMAGE_BUFFER
 0x9051

	)

2117 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2118 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2119 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2120 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2121 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2122 
	#GL_INT_IMAGE_1D
 0x9057

	)

2123 
	#GL_INT_IMAGE_2D
 0x9058

	)

2124 
	#GL_INT_IMAGE_3D
 0x9059

	)

2125 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2126 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2127 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2128 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2129 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2130 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2131 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2132 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2133 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2134 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2135 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2136 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2137 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2138 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2139 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2140 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2141 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2142 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2143 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2144 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2145 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2146 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2147 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2148 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2149 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2150 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2151 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2152 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2153 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2154 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2155 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2156 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2157 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2158 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2159 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2160 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2161 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2162 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2163 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2164 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2165 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2166 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2167 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2168 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2169 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2170 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2171 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2172 #ifde‡
GL_GLEXT_PROTOTYPES


2173 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2174 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2175 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2176 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2177 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2178 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2179 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2180 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2181 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2182 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2183 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2184 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2188 #i‚de‡
GL_VERSION_4_3


2189 
	#GL_VERSION_4_3
 1

	)

2190 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2191 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2192 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2193 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2194 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2195 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2196 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2197 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2198 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2199 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2200 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2201 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2202 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2203 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2204 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2205 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2206 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2207 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2208 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2209 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2210 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2211 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2212 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2213 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2214 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2215 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2216 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2217 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2218 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2219 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2220 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2221 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2222 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2223 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2224 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2225 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2226 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2227 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2228 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2229 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2230 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2231 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2232 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2233 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2234 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2235 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2236 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2237 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2238 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2239 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2240 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2241 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2242 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2243 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2244 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2245 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2246 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2247 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2248 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2249 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2250 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2251 
	#GL_BUFFER
 0x82E0

	)

2252 
	#GL_SHADER
 0x82E1

	)

2253 
	#GL_PROGRAM
 0x82E2

	)

2254 
	#GL_QUERY
 0x82E3

	)

2255 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2256 
	#GL_SAMPLER
 0x82E6

	)

2257 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2258 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2259 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2260 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2261 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2262 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2263 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2264 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2265 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2266 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2267 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2268 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2269 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2270 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2271 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2272 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2273 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2274 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2275 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2276 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2277 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2278 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2279 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2280 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2281 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2282 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2283 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2284 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2285 
	#GL_MAX_WIDTH
 0x827E

	)

2286 
	#GL_MAX_HEIGHT
 0x827F

	)

2287 
	#GL_MAX_DEPTH
 0x8280

	)

2288 
	#GL_MAX_LAYERS
 0x8281

	)

2289 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2290 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2291 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2292 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2293 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2294 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2295 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2296 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2297 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2298 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2299 
	#GL_READ_PIXELS
 0x828C

	)

2300 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2301 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2302 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2303 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2304 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2305 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2306 
	#GL_MIPMAP
 0x8293

	)

2307 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2308 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2309 
	#GL_COLOR_ENCODING
 0x8296

	)

2310 
	#GL_SRGB_READ
 0x8297

	)

2311 
	#GL_SRGB_WRITE
 0x8298

	)

2312 
	#GL_FILTER
 0x829A

	)

2313 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2314 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2315 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2316 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2317 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2318 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2319 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2320 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2321 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2322 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2323 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2324 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2325 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2326 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2327 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2328 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2329 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2330 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2331 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2332 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2333 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2334 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2335 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2336 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2337 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2338 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2339 
	#GL_FULL_SUPPORT
 0x82B7

	)

2340 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2341 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2342 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2343 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2344 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2345 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2346 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2347 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2348 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2349 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2350 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2351 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2352 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2353 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2354 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2355 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2356 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2357 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2358 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2359 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2360 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2361 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2362 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2363 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2364 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2365 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2366 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2367 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2368 
	#GL_UNIFORM
 0x92E1

	)

2369 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2370 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2371 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2372 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2373 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2374 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2375 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2376 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2377 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2378 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2379 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2380 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2381 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2382 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2383 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2384 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2385 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2386 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2387 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2388 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2389 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2390 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2391 
	#GL_NAME_LENGTH
 0x92F9

	)

2392 
	#GL_TYPE
 0x92FA

	)

2393 
	#GL_ARRAY_SIZE
 0x92FB

	)

2394 
	#GL_OFFSET
 0x92FC

	)

2395 
	#GL_BLOCK_INDEX
 0x92FD

	)

2396 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2397 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2398 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2399 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2400 
	#GL_BUFFER_BINDING
 0x9302

	)

2401 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2402 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2403 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2404 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2405 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2406 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2407 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2408 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2409 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2410 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2411 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2412 
	#GL_LOCATION
 0x930E

	)

2413 
	#GL_LOCATION_INDEX
 0x930F

	)

2414 
	#GL_IS_PER_PATCH
 0x92E7

	)

2415 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2416 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2417 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2418 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2419 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2420 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2421 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2422 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2423 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2424 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2425 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2426 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2427 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2428 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2429 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2430 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2431 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2432 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2433 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2434 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2435 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2436 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2437 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2438 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2439 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2440 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2441 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2442 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2443 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2444 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2445 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2446 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2447 
	#GL_VERTEX_BINDING_BUFFER
 0x8F4F

	)

2448 
	#GL_DISPLAY_LIST
 0x82E7

	)

2449 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2450 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2451 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2452 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2453 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2454 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2455 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2456 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2457 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2458 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2459 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2460 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2461 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2462 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2463 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2464 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2465 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2466 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2467 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2468 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2469 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2470 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2471 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2472 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2473 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2474 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2475 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2476 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2477 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2478 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2479 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2480 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2481 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2482 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2483 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2484 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2485 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2486 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2487 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2488 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2489 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2490 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2491 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2492 #ifde‡
GL_GLEXT_PROTOTYPES


2493 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2494 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2495 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2496 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2497 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2498 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2499 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2500 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2501 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2502 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2503 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2504 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2505 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2506 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2507 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2508 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2509 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2510 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2511 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2512 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2513 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2514 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2515 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2516 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2517 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2518 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2519 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2520 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2521 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2522 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2523 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2524 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2525 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2526 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2527 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2528 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2529 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2530 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2531 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

2532 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2533 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2534 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2535 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2539 #i‚de‡
GL_VERSION_4_4


2540 
	#GL_VERSION_4_4
 1

	)

2541 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2542 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2543 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2544 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2545 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2546 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2547 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2548 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2549 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2550 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2551 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2552 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2553 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2554 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2555 
	#GL_QUERY_BUFFER
 0x9192

	)

2556 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2557 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2558 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2559 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2560 (
APIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2561 (
APIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2562 (
APIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2563 (
APIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2564 (
APIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2565 (
APIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2566 (
APIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2567 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2568 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2569 #ifde‡
GL_GLEXT_PROTOTYPES


2570 
GLAPI
 
APIENTRY
 
glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2571 
GLAPI
 
APIENTRY
 
glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2572 
GLAPI
 
APIENTRY
 
glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2573 
GLAPI
 
APIENTRY
 
glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2574 
GLAPI
 
APIENTRY
 
glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2575 
GLAPI
 
APIENTRY
 
glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2576 
GLAPI
 
APIENTRY
 
glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2577 
GLAPI
 
APIENTRY
 
glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2578 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2582 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2583 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2586 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2587 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2590 #i‚de‡
GL_ARB_¨øys_of_¨øys


2591 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2594 #i‚de‡
GL_ARB_ba£_ö°™˚


2595 
	#GL_ARB_ba£_ö°™˚
 1

	)

2598 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2599 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2600 
uöt64_t
 
	tGLuöt64EXT
;

2601 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2602 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2603 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2604 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2605 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2606 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2607 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2608 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2609 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2610 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2611 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2612 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2613 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2614 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2615 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2616 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2617 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2618 #ifde‡
GL_GLEXT_PROTOTYPES


2619 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2620 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2621 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2622 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2623 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2624 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2625 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2626 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2627 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2628 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2629 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2630 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2631 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2632 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2633 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2634 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2638 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2639 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2642 #i‚de‡
GL_ARB_buf„r_°‹age


2643 
	#GL_ARB_buf„r_°‹age
 1

	)

2646 #i‚de‡
GL_ARB_˛_evít


2647 
	#GL_ARB_˛_evít
 1

	)

2648 
_˛_c⁄ãxt
;

2649 
_˛_evít
;

2650 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2651 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2652 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2653 #ifde‡
GL_GLEXT_PROTOTYPES


2654 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2658 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2659 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2662 #i‚de‡
GL_ARB_˛ór_ãxtuª


2663 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2666 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


2667 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

2668 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

2669 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

2670 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

2671 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

2672 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

2673 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

2674 #ifde‡
GL_GLEXT_PROTOTYPES


2675 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

2679 #i‚de‡
GL_ARB_com∑tibûôy


2680 
	#GL_ARB_com∑tibûôy
 1

	)

2683 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2684 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2687 #i‚de‡
GL_ARB_compuã_shadî


2688 
	#GL_ARB_compuã_shadî
 1

	)

2689 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2692 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2693 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

2694 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

2695 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

2696 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

2697 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

2698 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

2699 #ifde‡
GL_GLEXT_PROTOTYPES


2700 
GLAPI
 
APIENTRY
 
glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

2704 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


2705 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

2708 #i‚de‡
GL_ARB_c›y_buf„r


2709 
	#GL_ARB_c›y_buf„r
 1

	)

2710 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2711 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2714 #i‚de‡
GL_ARB_c›y_image


2715 
	#GL_ARB_c›y_image
 1

	)

2718 #i‚de‡
GL_ARB_debug_ouçut


2719 
	#GL_ARB_debug_ouçut
 1

	)

2720 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2721 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

2722 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

2723 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

2724 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

2725 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

2726 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

2727 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

2728 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

2729 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

2730 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

2731 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

2732 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

2733 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

2734 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

2735 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

2736 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

2737 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

2738 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

2739 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

2740 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

2741 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

2742 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

2743 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2744 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2745 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2746 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2747 #ifde‡
GL_GLEXT_PROTOTYPES


2748 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2749 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2750 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

2751 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2755 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


2756 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

2759 #i‚de‡
GL_ARB_dïth_˛amp


2760 
	#GL_ARB_dïth_˛amp
 1

	)

2763 #i‚de‡
GL_ARB_dïth_ãxtuª


2764 
	#GL_ARB_dïth_ãxtuª
 1

	)

2765 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

2766 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

2767 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

2768 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

2769 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

2772 #i‚de‡
GL_ARB_døw_buf„rs


2773 
	#GL_ARB_døw_buf„rs
 1

	)

2774 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

2775 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

2776 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

2777 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

2778 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

2779 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

2780 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

2781 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

2782 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

2783 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

2784 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

2785 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

2786 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

2787 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

2788 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

2789 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

2790 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

2791 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2792 #ifde‡
GL_GLEXT_PROTOTYPES


2793 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2797 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


2798 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

2799 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

2800 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

2801 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

2802 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

2803 #ifde‡
GL_GLEXT_PROTOTYPES


2804 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

2805 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

2806 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

2807 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

2811 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


2812 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

2815 #i‚de‡
GL_ARB_døw_ödúe˘


2816 
	#GL_ARB_døw_ödúe˘
 1

	)

2819 #i‚de‡
GL_ARB_døw_ö°™˚d


2820 
	#GL_ARB_døw_ö°™˚d
 1

	)

2821 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

2822 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

2823 #ifde‡
GL_GLEXT_PROTOTYPES


2824 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

2825 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

2829 #i‚de‡
GL_ARB_íh™˚d_œyouts


2830 
	#GL_ARB_íh™˚d_œyouts
 1

	)

2833 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


2834 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

2837 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


2838 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

2841 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


2842 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

2845 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


2846 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

2849 #i‚de‡
GL_ARB_‰agmít_¥ogøm


2850 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

2851 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

2852 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

2853 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

2854 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

2855 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

2856 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

2857 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

2858 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

2859 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

2860 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

2861 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

2862 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

2863 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

2864 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

2865 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

2866 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

2867 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

2868 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

2869 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

2870 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

2871 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

2872 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

2873 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

2874 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

2875 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

2876 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

2877 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

2878 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

2879 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

2880 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

2881 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

2882 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

2883 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

2884 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

2885 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

2886 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

2887 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

2888 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

2889 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

2890 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

2891 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

2892 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

2893 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

2894 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

2895 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

2896 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

2897 
	#GL_MATRIX0_ARB
 0x88C0

	)

2898 
	#GL_MATRIX1_ARB
 0x88C1

	)

2899 
	#GL_MATRIX2_ARB
 0x88C2

	)

2900 
	#GL_MATRIX3_ARB
 0x88C3

	)

2901 
	#GL_MATRIX4_ARB
 0x88C4

	)

2902 
	#GL_MATRIX5_ARB
 0x88C5

	)

2903 
	#GL_MATRIX6_ARB
 0x88C6

	)

2904 
	#GL_MATRIX7_ARB
 0x88C7

	)

2905 
	#GL_MATRIX8_ARB
 0x88C8

	)

2906 
	#GL_MATRIX9_ARB
 0x88C9

	)

2907 
	#GL_MATRIX10_ARB
 0x88CA

	)

2908 
	#GL_MATRIX11_ARB
 0x88CB

	)

2909 
	#GL_MATRIX12_ARB
 0x88CC

	)

2910 
	#GL_MATRIX13_ARB
 0x88CD

	)

2911 
	#GL_MATRIX14_ARB
 0x88CE

	)

2912 
	#GL_MATRIX15_ARB
 0x88CF

	)

2913 
	#GL_MATRIX16_ARB
 0x88D0

	)

2914 
	#GL_MATRIX17_ARB
 0x88D1

	)

2915 
	#GL_MATRIX18_ARB
 0x88D2

	)

2916 
	#GL_MATRIX19_ARB
 0x88D3

	)

2917 
	#GL_MATRIX20_ARB
 0x88D4

	)

2918 
	#GL_MATRIX21_ARB
 0x88D5

	)

2919 
	#GL_MATRIX22_ARB
 0x88D6

	)

2920 
	#GL_MATRIX23_ARB
 0x88D7

	)

2921 
	#GL_MATRIX24_ARB
 0x88D8

	)

2922 
	#GL_MATRIX25_ARB
 0x88D9

	)

2923 
	#GL_MATRIX26_ARB
 0x88DA

	)

2924 
	#GL_MATRIX27_ARB
 0x88DB

	)

2925 
	#GL_MATRIX28_ARB
 0x88DC

	)

2926 
	#GL_MATRIX29_ARB
 0x88DD

	)

2927 
	#GL_MATRIX30_ARB
 0x88DE

	)

2928 
	#GL_MATRIX31_ARB
 0x88DF

	)

2929 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

2930 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

2931 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

2932 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

2933 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

2934 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

2935 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

2936 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

2937 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

2938 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

2939 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

2940 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

2941 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

2942 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

2943 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

2944 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

2945 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2946 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

2947 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

2948 #ifde‡
GL_GLEXT_PROTOTYPES


2949 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

2950 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

2951 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

2952 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

2953 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2954 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

2955 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

2956 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

2957 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2958 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

2959 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

2960 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

2961 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

2962 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

2963 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

2964 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

2965 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2966 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

2967 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

2971 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


2972 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

2975 #i‚de‡
GL_ARB_‰agmít_shadî


2976 
	#GL_ARB_‰agmít_shadî
 1

	)

2977 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

2978 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

2979 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

2982 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


2983 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

2986 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


2987 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

2990 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


2991 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

2994 #i‚de‡
GL_KHR_c⁄ãxt_Êush_c⁄åﬁ


2995 
	#GL_CONTEXT_RELEASE_BEHAVIOR
 0x82FB

	)

2996 
	#GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 0x82FC

	)

2999 #i‚de‡
GL_ARB_geomëry_shadî4


3000 
	#GL_ARB_geomëry_shadî4
 1

	)

3001 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

3002 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

3003 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

3004 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

3005 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

3006 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

3007 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

3008 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

3009 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

3010 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

3011 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

3012 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

3013 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3014 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3015 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3016 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3017 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3018 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3019 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3020 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3021 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3022 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3023 #ifde‡
GL_GLEXT_PROTOTYPES


3024 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

3025 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

3026 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

3027 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

3031 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3032 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3035 #i‚de‡
GL_ARB_gpu_shadî5


3036 
	#GL_ARB_gpu_shadî5
 1

	)

3039 #i‚de‡
GL_ARB_gpu_shadî_Â64


3040 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3043 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3044 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3045 
	tGLhÆfARB
;

3046 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3049 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3050 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3053 #i‚de‡
GL_ARB_imagög


3054 
	#GL_ARB_imagög
 1

	)

3055 
	#GL_BLEND_COLOR
 0x8005

	)

3056 
	#GL_BLEND_EQUATION
 0x8009

	)

3057 
	#GL_CONVOLUTION_1D
 0x8010

	)

3058 
	#GL_CONVOLUTION_2D
 0x8011

	)

3059 
	#GL_SEPARABLE_2D
 0x8012

	)

3060 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3061 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3062 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3063 
	#GL_REDUCE
 0x8016

	)

3064 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3065 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3066 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3067 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3068 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3069 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3070 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3071 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3072 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3073 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3074 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3075 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3076 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3077 
	#GL_HISTOGRAM
 0x8024

	)

3078 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3079 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3080 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

3081 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

3082 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

3083 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

3084 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

3085 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

3086 
	#GL_HISTOGRAM_SINK
 0x802D

	)

3087 
	#GL_MINMAX
 0x802E

	)

3088 
	#GL_MINMAX_FORMAT
 0x802F

	)

3089 
	#GL_MINMAX_SINK
 0x8030

	)

3090 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

3091 
	#GL_COLOR_MATRIX
 0x80B1

	)

3092 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

3093 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

3094 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

3095 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

3096 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

3097 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

3098 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

3099 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

3100 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

3101 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

3102 
	#GL_COLOR_TABLE
 0x80D0

	)

3103 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

3104 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

3105 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

3106 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

3107 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

3108 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

3109 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

3110 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

3111 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

3112 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

3113 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

3114 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

3115 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

3116 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

3117 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

3118 
	#GL_CONSTANT_BORDER
 0x8151

	)

3119 
	#GL_REPLICATE_BORDER
 0x8153

	)

3120 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

3121 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

3122 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3123 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3124 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3125 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

3126 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3127 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3128 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

3129 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3130 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3131 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3132 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3133 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3134 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3135 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3136 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3137 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3138 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

3139 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3140 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3141 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

3142 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

3143 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3144 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3145 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3146 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3147 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3148 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3149 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3150 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3151 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3152 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3153 #ifde‡
GL_GLEXT_PROTOTYPES


3154 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

3155 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3156 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3157 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3158 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

3159 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3160 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3161 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

3162 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

3163 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3164 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3165 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

3166 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3167 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

3168 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3169 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3170 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

3171 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

3172 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3173 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3174 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

3175 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

3176 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3177 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3178 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3179 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3180 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3181 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3182 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3183 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3184 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

3185 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

3189 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3190 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3191 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3192 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3193 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3194 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3195 #ifde‡
GL_GLEXT_PROTOTYPES


3196 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3197 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3201 #i‚de‡
GL_ARB_ö°™˚d_¨øys


3202 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

3203 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

3204 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

3205 #ifde‡
GL_GLEXT_PROTOTYPES


3206 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

3210 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3211 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3214 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3215 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3216 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3219 #i‚de‡
GL_ARB_övÆid©e_subd©a


3220 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3223 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3224 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3227 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3228 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3231 #i‚de‡
GL_ARB_m©rix_∑Àâe


3232 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3233 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

3234 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

3235 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

3236 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

3237 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

3238 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

3239 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

3240 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

3241 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

3242 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

3243 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3244 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3245 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3246 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3247 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

3248 #ifde‡
GL_GLEXT_PROTOTYPES


3249 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

3250 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

3251 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

3252 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

3253 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

3257 #i‚de‡
GL_ARB_mu…i_böd


3258 
	#GL_ARB_mu…i_böd
 1

	)

3261 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3262 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3265 #i‚de‡
GL_ARB_mu…ißm∂e


3266 
	#GL_ARB_mu…ißm∂e
 1

	)

3267 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

3268 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

3269 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

3270 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

3271 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

3272 
	#GL_SAMPLES_ARB
 0x80A9

	)

3273 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

3274 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

3275 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

3276 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3277 #ifde‡
GL_GLEXT_PROTOTYPES


3278 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

3282 #i‚de‡
GL_ARB_mu…ôextuª


3283 
	#GL_ARB_mu…ôextuª
 1

	)

3284 
	#GL_TEXTURE0_ARB
 0x84C0

	)

3285 
	#GL_TEXTURE1_ARB
 0x84C1

	)

3286 
	#GL_TEXTURE2_ARB
 0x84C2

	)

3287 
	#GL_TEXTURE3_ARB
 0x84C3

	)

3288 
	#GL_TEXTURE4_ARB
 0x84C4

	)

3289 
	#GL_TEXTURE5_ARB
 0x84C5

	)

3290 
	#GL_TEXTURE6_ARB
 0x84C6

	)

3291 
	#GL_TEXTURE7_ARB
 0x84C7

	)

3292 
	#GL_TEXTURE8_ARB
 0x84C8

	)

3293 
	#GL_TEXTURE9_ARB
 0x84C9

	)

3294 
	#GL_TEXTURE10_ARB
 0x84CA

	)

3295 
	#GL_TEXTURE11_ARB
 0x84CB

	)

3296 
	#GL_TEXTURE12_ARB
 0x84CC

	)

3297 
	#GL_TEXTURE13_ARB
 0x84CD

	)

3298 
	#GL_TEXTURE14_ARB
 0x84CE

	)

3299 
	#GL_TEXTURE15_ARB
 0x84CF

	)

3300 
	#GL_TEXTURE16_ARB
 0x84D0

	)

3301 
	#GL_TEXTURE17_ARB
 0x84D1

	)

3302 
	#GL_TEXTURE18_ARB
 0x84D2

	)

3303 
	#GL_TEXTURE19_ARB
 0x84D3

	)

3304 
	#GL_TEXTURE20_ARB
 0x84D4

	)

3305 
	#GL_TEXTURE21_ARB
 0x84D5

	)

3306 
	#GL_TEXTURE22_ARB
 0x84D6

	)

3307 
	#GL_TEXTURE23_ARB
 0x84D7

	)

3308 
	#GL_TEXTURE24_ARB
 0x84D8

	)

3309 
	#GL_TEXTURE25_ARB
 0x84D9

	)

3310 
	#GL_TEXTURE26_ARB
 0x84DA

	)

3311 
	#GL_TEXTURE27_ARB
 0x84DB

	)

3312 
	#GL_TEXTURE28_ARB
 0x84DC

	)

3313 
	#GL_TEXTURE29_ARB
 0x84DD

	)

3314 
	#GL_TEXTURE30_ARB
 0x84DE

	)

3315 
	#GL_TEXTURE31_ARB
 0x84DF

	)

3316 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

3317 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

3318 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

3319 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3320 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3321 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3322 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3323 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3324 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3325 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3326 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3327 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3328 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3329 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3330 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3331 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3332 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3333 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3334 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3335 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3336 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3337 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3338 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3339 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3340 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3341 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3342 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3343 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3344 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3345 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3346 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3347 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3348 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3349 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3350 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3351 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3352 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3353 #ifde‡
GL_GLEXT_PROTOTYPES


3354 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3355 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3356 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

3357 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3358 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

3359 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3360 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

3361 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3362 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

3363 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3364 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

3365 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3366 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

3367 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3368 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

3369 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3370 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

3371 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3372 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

3373 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3374 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

3375 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3376 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

3377 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3378 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

3379 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3380 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

3381 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3382 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

3383 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3384 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

3385 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3386 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

3387 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3391 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


3392 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

3393 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

3394 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

3395 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

3396 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

3397 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

3398 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3399 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3400 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

3401 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3402 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

3403 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3404 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3405 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3406 #ifde‡
GL_GLEXT_PROTOTYPES


3407 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

3408 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

3409 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

3410 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

3411 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

3412 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3413 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3414 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

3418 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3419 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3422 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


3423 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

3424 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

3425 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

3426 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

3427 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

3430 #i‚de‡
GL_ARB_poöt_∑ømëîs


3431 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3432 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

3433 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

3434 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

3435 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

3436 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3437 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3438 #ifde‡
GL_GLEXT_PROTOTYPES


3439 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

3440 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3444 #i‚de‡
GL_ARB_poöt_•rôe


3445 
	#GL_ARB_poöt_•rôe
 1

	)

3446 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

3447 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

3450 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3451 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3454 #i‚de‡
GL_ARB_¥ovokög_vîãx


3455 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3458 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3459 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3462 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3463 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3466 #i‚de‡
GL_ARB_robu°√ss


3467 
	#GL_ARB_robu°√ss
 1

	)

3468 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3469 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3470 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3471 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3472 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3473 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3474 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3475 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3476 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3477 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3478 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3479 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3480 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3481 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3482 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3483 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

3484 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

3485 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

3486 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

3487 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

3488 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

3489 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

3490 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

3491 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

3492 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

3493 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3494 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3495 #ifde‡
GL_GLEXT_PROTOTYPES


3496 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

3497 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3498 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3499 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3500 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3501 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3502 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3503 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3504 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

3505 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

3506 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

3507 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

3508 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

3509 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

3510 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

3511 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

3512 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

3513 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

3514 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3515 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3519 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3520 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3523 #i‚de‡
GL_ARB_ßm∂e_shadög


3524 
	#GL_ARB_ßm∂e_shadög
 1

	)

3525 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3526 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3527 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3528 #ifde‡
GL_GLEXT_PROTOTYPES


3529 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3533 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3534 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3537 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3538 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3541 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3542 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

3545 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


3546 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

3549 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


3550 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

3553 #i‚de‡
GL_ARB_shadî_bô_ícodög


3554 
	#GL_ARB_shadî_bô_ícodög
 1

	)

3557 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


3558 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

3561 #i‚de‡
GL_ARB_shadî_group_vŸe


3562 
	#GL_ARB_shadî_group_vŸe
 1

	)

3565 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


3566 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

3569 #i‚de‡
GL_ARB_shadî_image_size


3570 
	#GL_ARB_shadî_image_size
 1

	)

3573 #i‚de‡
GL_ARB_shadî_obje˘s


3574 
	#GL_ARB_shadî_obje˘s
 1

	)

3575 #ifde‡
__APPLE__


3576 *
	tGLh™dÀARB
;

3578 
	tGLh™dÀARB
;

3580 
	tGLch¨ARB
;

3581 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

3582 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

3583 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

3584 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

3585 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

3586 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

3587 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

3588 
	#GL_INT_VEC2_ARB
 0x8B53

	)

3589 
	#GL_INT_VEC3_ARB
 0x8B54

	)

3590 
	#GL_INT_VEC4_ARB
 0x8B55

	)

3591 
	#GL_BOOL_ARB
 0x8B56

	)

3592 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

3593 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

3594 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

3595 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

3596 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

3597 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

3598 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

3599 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

3600 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

3601 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

3602 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

3603 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

3604 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

3605 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

3606 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

3607 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

3608 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

3609 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

3610 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

3611 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

3612 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

3613 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

3614 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

3615 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

3616 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

3617 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

3618 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

3619 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 **
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

3620 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

3621 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

3622 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

3623 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

3624 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

3625 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

3626 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

3627 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

3628 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

3629 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

3630 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

3631 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

3632 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

3633 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

3634 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3635 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3636 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3637 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3638 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3639 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3640 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3641 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3642 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3643 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3644 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3645 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3646 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3647 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

3648 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

3649 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

3650 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

3651 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

3652 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

3653 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

3654 #ifde‡
GL_GLEXT_PROTOTYPES


3655 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

3656 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

3657 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

3658 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

3659 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
 **
°rög
, c⁄° 
GLöt
 *
Àngth
);

3660 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

3661 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

3662 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

3663 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

3664 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

3665 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

3666 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

3667 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

3668 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

3669 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

3670 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

3671 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

3672 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

3673 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

3674 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3675 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3676 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3677 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3678 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3679 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3680 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3681 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3682 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

3683 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

3684 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

3685 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3686 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3687 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

3688 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

3689 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

3690 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

3691 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

3692 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

3693 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

3697 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


3698 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

3701 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


3702 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

3705 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


3706 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

3709 #i‚de‡
GL_ARB_shadî_subroutöe


3710 
	#GL_ARB_shadî_subroutöe
 1

	)

3713 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


3714 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

3717 #i‚de‡
GL_ARB_shadög_œnguage_100


3718 
	#GL_ARB_shadög_œnguage_100
 1

	)

3719 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

3722 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


3723 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

3726 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


3727 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

3728 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

3729 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

3730 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

3731 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

3732 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

3733 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

3734 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

3735 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

3736 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

3737 #ifde‡
GL_GLEXT_PROTOTYPES


3738 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

3739 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

3740 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

3741 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

3742 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

3743 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

3747 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


3748 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

3751 #i‚de‡
GL_ARB_shadow


3752 
	#GL_ARB_shadow
 1

	)

3753 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

3754 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

3755 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

3758 #i‚de‡
GL_ARB_shadow_ambõ¡


3759 
	#GL_ARB_shadow_ambõ¡
 1

	)

3760 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

3763 #i‚de‡
GL_ARB_•¨£_ãxtuª


3764 
	#GL_ARB_•¨£_ãxtuª
 1

	)

3765 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

3766 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

3767 
	#GL_MIN_SPARSE_LEVEL_ARB
 0x919B

	)

3768 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

3769 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

3770 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

3771 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

3772 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

3773 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

3774 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

3775 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

3776 (
APIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tªsidít
);

3777 #ifde‡
GL_GLEXT_PROTOTYPES


3778 
GLAPI
 
APIENTRY
 
glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
ªsidít
);

3782 #i‚de‡
GL_ARB_°ícû_ãxturög


3783 
	#GL_ARB_°ícû_ãxturög
 1

	)

3786 #i‚de‡
GL_ARB_sync


3787 
	#GL_ARB_sync
 1

	)

3790 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


3791 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

3794 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


3795 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

3796 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

3799 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


3800 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

3801 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

3802 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

3803 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

3804 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

3805 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

3806 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

3807 #ifde‡
GL_GLEXT_PROTOTYPES


3808 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

3812 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


3813 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

3816 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


3817 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

3820 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


3821 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

3822 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

3823 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

3824 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

3825 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

3826 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

3827 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

3828 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

3829 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

3830 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

3831 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

3832 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

3833 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3834 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3835 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3836 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3837 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3838 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3839 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

3840 #ifde‡
GL_GLEXT_PROTOTYPES


3841 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

3842 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

3843 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

3844 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

3845 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

3846 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

3847 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

3851 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


3852 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

3853 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

3854 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

3855 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

3856 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

3859 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


3860 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

3863 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


3864 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

3865 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

3866 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

3867 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

3868 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

3869 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

3870 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

3871 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

3872 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

3873 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

3874 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

3875 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

3876 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

3879 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


3880 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

3881 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

3882 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

3883 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

3884 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

3885 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

3886 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

3887 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

3890 #i‚de‡
GL_ARB_ãxtuª_ív_add


3891 
	#GL_ARB_ãxtuª_ív_add
 1

	)

3894 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


3895 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

3896 
	#GL_COMBINE_ARB
 0x8570

	)

3897 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

3898 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

3899 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

3900 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

3901 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

3902 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

3903 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

3904 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

3905 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

3906 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

3907 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

3908 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

3909 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

3910 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

3911 
	#GL_RGB_SCALE_ARB
 0x8573

	)

3912 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

3913 
	#GL_INTERPOLATE_ARB
 0x8575

	)

3914 
	#GL_SUBTRACT_ARB
 0x84E7

	)

3915 
	#GL_CONSTANT_ARB
 0x8576

	)

3916 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

3917 
	#GL_PREVIOUS_ARB
 0x8578

	)

3920 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


3921 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

3924 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


3925 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

3926 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

3927 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

3930 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


3931 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

3932 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

3933 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

3934 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

3935 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

3936 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

3937 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

3938 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

3939 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

3940 
	#GL_RGBA32F_ARB
 0x8814

	)

3941 
	#GL_RGB32F_ARB
 0x8815

	)

3942 
	#GL_ALPHA32F_ARB
 0x8816

	)

3943 
	#GL_INTENSITY32F_ARB
 0x8817

	)

3944 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

3945 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

3946 
	#GL_RGBA16F_ARB
 0x881A

	)

3947 
	#GL_RGB16F_ARB
 0x881B

	)

3948 
	#GL_ALPHA16F_ARB
 0x881C

	)

3949 
	#GL_INTENSITY16F_ARB
 0x881D

	)

3950 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

3951 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

3954 #i‚de‡
GL_ARB_ãxtuª_g©hî


3955 
	#GL_ARB_ãxtuª_g©hî
 1

	)

3956 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

3957 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

3958 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

3961 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


3962 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

3965 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


3966 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

3967 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

3970 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


3971 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

3974 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


3975 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

3978 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


3979 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

3982 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


3983 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

3986 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


3987 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

3988 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

3989 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

3990 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

3991 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

3994 #i‚de‡
GL_ARB_ãxtuª_rg


3995 
	#GL_ARB_ãxtuª_rg
 1

	)

3998 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


3999 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

4002 #i‚de‡
GL_ARB_ãxtuª_°ícû8


4003 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

4006 #i‚de‡
GL_ARB_ãxtuª_°‹age


4007 
	#GL_ARB_ãxtuª_°‹age
 1

	)

4010 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


4011 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

4014 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


4015 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

4018 #i‚de‡
GL_ARB_ãxtuª_võw


4019 
	#GL_ARB_ãxtuª_võw
 1

	)

4022 #i‚de‡
GL_ARB_timî_quîy


4023 
	#GL_ARB_timî_quîy
 1

	)

4026 #i‚de‡
GL_ARB_å™sf‹m_„edback2


4027 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

4028 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

4029 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

4032 #i‚de‡
GL_ARB_å™sf‹m_„edback3


4033 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

4036 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


4037 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

4040 #i‚de‡
GL_ARB_å™•o£_m©rix


4041 
	#GL_ARB_å™•o£_m©rix
 1

	)

4042 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

4043 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

4044 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

4045 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

4046 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4047 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4048 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4049 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4050 #ifde‡
GL_GLEXT_PROTOTYPES


4051 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4052 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4053 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4054 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4058 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


4059 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

4060 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

4061 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

4062 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

4065 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


4066 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

4069 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4070 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4073 #i‚de‡
GL_ARB_vîãx_©åib_64bô


4074 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

4077 #i‚de‡
GL_ARB_vîãx_©åib_bödög


4078 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

4081 #i‚de‡
GL_ARB_vîãx_bÀnd


4082 
	#GL_ARB_vîãx_bÀnd
 1

	)

4083 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

4084 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

4085 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

4086 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

4087 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

4088 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

4089 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

4090 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

4091 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

4092 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

4093 
	#GL_MODELVIEW0_ARB
 0x1700

	)

4094 
	#GL_MODELVIEW1_ARB
 0x850A

	)

4095 
	#GL_MODELVIEW2_ARB
 0x8722

	)

4096 
	#GL_MODELVIEW3_ARB
 0x8723

	)

4097 
	#GL_MODELVIEW4_ARB
 0x8724

	)

4098 
	#GL_MODELVIEW5_ARB
 0x8725

	)

4099 
	#GL_MODELVIEW6_ARB
 0x8726

	)

4100 
	#GL_MODELVIEW7_ARB
 0x8727

	)

4101 
	#GL_MODELVIEW8_ARB
 0x8728

	)

4102 
	#GL_MODELVIEW9_ARB
 0x8729

	)

4103 
	#GL_MODELVIEW10_ARB
 0x872A

	)

4104 
	#GL_MODELVIEW11_ARB
 0x872B

	)

4105 
	#GL_MODELVIEW12_ARB
 0x872C

	)

4106 
	#GL_MODELVIEW13_ARB
 0x872D

	)

4107 
	#GL_MODELVIEW14_ARB
 0x872E

	)

4108 
	#GL_MODELVIEW15_ARB
 0x872F

	)

4109 
	#GL_MODELVIEW16_ARB
 0x8730

	)

4110 
	#GL_MODELVIEW17_ARB
 0x8731

	)

4111 
	#GL_MODELVIEW18_ARB
 0x8732

	)

4112 
	#GL_MODELVIEW19_ARB
 0x8733

	)

4113 
	#GL_MODELVIEW20_ARB
 0x8734

	)

4114 
	#GL_MODELVIEW21_ARB
 0x8735

	)

4115 
	#GL_MODELVIEW22_ARB
 0x8736

	)

4116 
	#GL_MODELVIEW23_ARB
 0x8737

	)

4117 
	#GL_MODELVIEW24_ARB
 0x8738

	)

4118 
	#GL_MODELVIEW25_ARB
 0x8739

	)

4119 
	#GL_MODELVIEW26_ARB
 0x873A

	)

4120 
	#GL_MODELVIEW27_ARB
 0x873B

	)

4121 
	#GL_MODELVIEW28_ARB
 0x873C

	)

4122 
	#GL_MODELVIEW29_ARB
 0x873D

	)

4123 
	#GL_MODELVIEW30_ARB
 0x873E

	)

4124 
	#GL_MODELVIEW31_ARB
 0x873F

	)

4125 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4126 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4127 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4128 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4129 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4130 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4131 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4132 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4133 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4134 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4135 #ifde‡
GL_GLEXT_PROTOTYPES


4136 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

4137 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

4138 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

4139 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

4140 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

4141 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

4142 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

4143 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

4144 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4145 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

4149 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4150 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4151 #ifde‡
__MACOSX__


4152 
	tGLsizeùåARB
;

4153 
	tGLöçåARB
;

4155 
±rdiff_t
 
	tGLsizeùåARB
;

4156 
±rdiff_t
 
	tGLöçåARB
;

4158 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

4159 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

4160 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

4161 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

4162 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

4163 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

4164 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

4165 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

4166 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

4167 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

4168 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

4169 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

4170 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

4171 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

4172 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

4173 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

4174 
	#GL_READ_ONLY_ARB
 0x88B8

	)

4175 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

4176 
	#GL_READ_WRITE_ARB
 0x88BA

	)

4177 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

4178 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

4179 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

4180 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

4181 
	#GL_STREAM_READ_ARB
 0x88E1

	)

4182 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

4183 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

4184 
	#GL_STATIC_READ_ARB
 0x88E5

	)

4185 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

4186 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

4187 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

4188 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

4189 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4190 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4191 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4192 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4193 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

4194 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
);

4195 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, *
	td©a
);

4196 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4197 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4198 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4199 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

4200 #ifde‡
GL_GLEXT_PROTOTYPES


4201 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

4202 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

4203 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

4204 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

4205 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

4206 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
);

4207 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, *
d©a
);

4208 
GLAPI
 *
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

4209 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

4210 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

4211 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

4215 #i‚de‡
GL_ARB_vîãx_¥ogøm


4216 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4217 
	#GL_COLOR_SUM_ARB
 0x8458

	)

4218 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

4219 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

4220 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

4221 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

4222 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

4223 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

4224 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4225 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

4226 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

4227 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

4228 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

4229 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

4230 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

4231 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

4232 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

4233 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4234 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4235 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4236 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4237 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4238 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4239 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4240 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4241 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4242 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4243 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4244 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4245 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4246 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4247 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4248 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4249 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4250 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4251 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4252 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4253 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4254 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4255 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4256 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4257 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4258 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4259 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4260 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4261 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4262 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4263 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4264 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4265 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4266 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4267 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4268 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4269 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4270 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4271 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4272 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4273 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4274 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4275 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

4276 #ifde‡
GL_GLEXT_PROTOTYPES


4277 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

4278 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4279 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

4280 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4281 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

4282 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4283 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4284 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4285 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

4286 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4287 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

4288 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4289 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4290 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4291 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4292 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4293 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4294 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4295 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4296 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4297 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4298 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

4299 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4300 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4301 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4302 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4303 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

4304 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4305 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

4306 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4307 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4308 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

4309 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4310 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4311 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4312 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4313 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4314 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4315 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4316 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

4317 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4318 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4319 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

4323 #i‚de‡
GL_ARB_vîãx_shadî


4324 
	#GL_ARB_vîãx_shadî
 1

	)

4325 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

4326 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

4327 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

4328 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

4329 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

4330 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

4331 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

4332 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4333 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4334 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4335 #ifde‡
GL_GLEXT_PROTOTYPES


4336 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

4337 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4338 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4342 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


4343 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

4346 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


4347 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

4350 #i‚de‡
GL_ARB_võwp‹t_¨øy


4351 
	#GL_ARB_võwp‹t_¨øy
 1

	)

4354 #i‚de‡
GL_ARB_wödow_pos


4355 
	#GL_ARB_wödow_pos
 1

	)

4356 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4357 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4358 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4359 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4360 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4361 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4362 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4363 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4364 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4365 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4366 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4367 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4368 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4369 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4370 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4371 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4372 #ifde‡
GL_GLEXT_PROTOTYPES


4373 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4374 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4375 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

4376 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4377 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

4378 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

4379 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

4380 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

4381 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4382 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4383 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4384 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4385 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

4386 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

4387 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4388 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

4392 #i‚de‡
GL_KHR_debug


4393 
	#GL_KHR_debug
 1

	)

4396 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


4397 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

4398 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

4399 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

4400 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

4401 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

4402 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

4403 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

4404 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

4405 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

4406 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

4407 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

4408 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

4409 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

4410 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

4411 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

4412 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

4413 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

4414 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

4415 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

4416 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

4417 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

4418 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

4419 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

4420 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

4421 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

4422 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

4423 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

4424 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

4425 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

4428 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


4429 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

4432 #i‚de‡
GL_OES_byã_co‹dö©es


4433 
	#GL_OES_byã_co‹dö©es
 1

	)

4434 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
);

4435 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4436 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4437 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4438 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4439 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4440 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

4441 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4442 (
APIENTRYP
 
	tPFNGLTEXCOORD1BOESPROC
Ë(
	tGLbyã
 
	ts
);

4443 (
APIENTRYP
 
	tPFNGLTEXCOORD1BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4444 (
APIENTRYP
 
	tPFNGLTEXCOORD2BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4445 (
APIENTRYP
 
	tPFNGLTEXCOORD2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4446 (
APIENTRYP
 
	tPFNGLTEXCOORD3BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4447 (
APIENTRYP
 
	tPFNGLTEXCOORD3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4448 (
APIENTRYP
 
	tPFNGLTEXCOORD4BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

4449 (
APIENTRYP
 
	tPFNGLTEXCOORD4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4450 (
APIENTRYP
 
	tPFNGLVERTEX2BOESPROC
Ë(
	tGLbyã
 
	tx
);

4451 (
APIENTRYP
 
	tPFNGLVERTEX2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4452 (
APIENTRYP
 
	tPFNGLVERTEX3BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
);

4453 (
APIENTRYP
 
	tPFNGLVERTEX3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4454 (
APIENTRYP
 
	tPFNGLVERTEX4BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

4455 (
APIENTRYP
 
	tPFNGLVERTEX4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4456 #ifde‡
GL_GLEXT_PROTOTYPES


4457 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
);

4458 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4459 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
);

4460 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4461 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

4462 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4463 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

4464 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4465 
GLAPI
 
APIENTRY
 
glTexCo‹d1bOES
 (
GLbyã
 
s
);

4466 
GLAPI
 
APIENTRY
 
glTexCo‹d1bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4467 
GLAPI
 
APIENTRY
 
glTexCo‹d2bOES
 (
GLbyã
 
s
, GLbyã 
t
);

4468 
GLAPI
 
APIENTRY
 
glTexCo‹d2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4469 
GLAPI
 
APIENTRY
 
glTexCo‹d3bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

4470 
GLAPI
 
APIENTRY
 
glTexCo‹d3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4471 
GLAPI
 
APIENTRY
 
glTexCo‹d4bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

4472 
GLAPI
 
APIENTRY
 
glTexCo‹d4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4473 
GLAPI
 
APIENTRY
 
glVîãx2bOES
 (
GLbyã
 
x
);

4474 
GLAPI
 
APIENTRY
 
glVîãx2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4475 
GLAPI
 
APIENTRY
 
glVîãx3bOES
 (
GLbyã
 
x
, GLbyã 
y
);

4476 
GLAPI
 
APIENTRY
 
glVîãx3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4477 
GLAPI
 
APIENTRY
 
glVîãx4bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
);

4478 
GLAPI
 
APIENTRY
 
glVîãx4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4482 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


4483 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

4484 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

4485 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

4486 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

4487 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

4488 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

4489 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

4490 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

4491 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

4492 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

4493 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

4496 #i‚de‡
GL_OES_fixed_poöt


4497 
	#GL_OES_fixed_poöt
 1

	)

4498 
GLöt
 
	tGLfixed
;

4499 
	#GL_FIXED_OES
 0x140C

	)

4500 (
APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLfixed
 
	tªf
);

4501 (
APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4502 (
APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGLfixed
 
	tdïth
);

4503 (
APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

4504 (
APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4505 (
APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGLfixed
 
	tn
, GLfixed 
	tf
);

4506 (
APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4507 (
APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

4508 (
APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

4509 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLfixed
 *
	tequ©i⁄
);

4510 (
APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4511 (
APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4512 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4513 (
APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4514 (
APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

4515 (
APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4516 (
APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4517 (
APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

4518 (
APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4519 (
APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4520 (
APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

4521 (
APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4522 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

4523 (
APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

4524 (
APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

4525 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4526 (
APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

4527 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

4528 (
APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4529 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEOESPROC
Ë(
	tGLfixed
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4530 (
APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4531 (
APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4532 (
APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4533 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4534 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4535 (
APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4536 (
APIENTRYP
 
	tPFNGLACCUMXOESPROC
Ë(
	tGLíum
 
	t›
, 
	tGLfixed
 
	tvÆue
);

4537 (
APIENTRYP
 
	tPFNGLBITMAPXOESPROC
Ë(
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLfixed
 
	tx‹ig
, GLfixed 
	ty‹ig
, GLfixed 
	txmove
, GLfixed 
	tymove
, c⁄° 
	tGLubyã
 *
	tbôm≠
);

4538 (
APIENTRYP
 
	tPFNGLBLENDCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4539 (
APIENTRYP
 
	tPFNGLCLEARACCUMXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4540 (
APIENTRYP
 
	tPFNGLCOLOR3XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
);

4541 (
APIENTRYP
 
	tPFNGLCOLOR3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

4542 (
APIENTRYP
 
	tPFNGLCOLOR4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

4543 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4544 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4545 (
APIENTRYP
 
	tPFNGLEVALCOORD1XOESPROC
Ë(
	tGLfixed
 
	tu
);

4546 (
APIENTRYP
 
	tPFNGLEVALCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4547 (
APIENTRYP
 
	tPFNGLEVALCOORD2XOESPROC
Ë(
	tGLfixed
 
	tu
, GLfixed 
	tv
);

4548 (
APIENTRYP
 
	tPFNGLEVALCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4549 (
APIENTRYP
 
	tPFNGLFEEDBACKBUFFERXOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLfixed
 *
	tbuf„r
);

4550 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4551 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4552 (
APIENTRYP
 
	tPFNGLGETLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4553 (
APIENTRYP
 
	tPFNGLGETMAPXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLfixed
 *
	tv
);

4554 (
APIENTRYP
 
	tPFNGLGETMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4555 (
APIENTRYP
 
	tPFNGLGETPIXELMAPXVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, 
	tGLfixed
 *
	tvÆues
);

4556 (
APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4557 (
APIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4558 (
APIENTRYP
 
	tPFNGLINDEXXOESPROC
Ë(
	tGLfixed
 
	tcomp⁄ít
);

4559 (
APIENTRYP
 
	tPFNGLINDEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄ít
);

4560 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4561 (
APIENTRYP
 
	tPFNGLMAP1XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, GLfixed 
	tpoöts
);

4562 (
APIENTRYP
 
	tPFNGLMAP2XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLfixed 
	tv1
, GLfixed 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLfixed 
	tpoöts
);

4563 (
APIENTRYP
 
	tPFNGLMAPGRID1XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
);

4564 (
APIENTRYP
 
	tPFNGLMAPGRID2XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, GLfixed 
	tv1
, GLfixed 
	tv2
);

4565 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4566 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
);

4567 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4568 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
);

4569 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4570 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

4571 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4572 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4573 (
APIENTRYP
 
	tPFNGLNORMAL3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4574 (
APIENTRYP
 
	tPFNGLPASSTHROUGHXOESPROC
Ë(
	tGLfixed
 
	ttokí
);

4575 (
APIENTRYP
 
	tPFNGLPIXELMAPXPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, c⁄° 
	tGLfixed
 *
	tvÆues
);

4576 (
APIENTRYP
 
	tPFNGLPIXELSTOREXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4577 (
APIENTRYP
 
	tPFNGLPIXELTRANSFERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4578 (
APIENTRYP
 
	tPFNGLPIXELZOOMXOESPROC
Ë(
	tGLfixed
 
	txÁ˘‹
, GLfixed 
	tyÁ˘‹
);

4579 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESXOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGLfixed
 *
	t¥i‹ôõs
);

4580 (
APIENTRYP
 
	tPFNGLRASTERPOS2XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

4581 (
APIENTRYP
 
	tPFNGLRASTERPOS2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4582 (
APIENTRYP
 
	tPFNGLRASTERPOS3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4583 (
APIENTRYP
 
	tPFNGLRASTERPOS3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4584 (
APIENTRYP
 
	tPFNGLRASTERPOS4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	tw
);

4585 (
APIENTRYP
 
	tPFNGLRASTERPOS4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4586 (
APIENTRYP
 
	tPFNGLRECTXOESPROC
Ë(
	tGLfixed
 
	tx1
, GLfixed 
	ty1
, GLfixed 
	tx2
, GLfixed 
	ty2
);

4587 (
APIENTRYP
 
	tPFNGLRECTXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tv1
, c⁄° GLfixed *
	tv2
);

4588 (
APIENTRYP
 
	tPFNGLTEXCOORD1XOESPROC
Ë(
	tGLfixed
 
	ts
);

4589 (
APIENTRYP
 
	tPFNGLTEXCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4590 (
APIENTRYP
 
	tPFNGLTEXCOORD2XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
);

4591 (
APIENTRYP
 
	tPFNGLTEXCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4592 (
APIENTRYP
 
	tPFNGLTEXCOORD3XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

4593 (
APIENTRYP
 
	tPFNGLTEXCOORD3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4594 (
APIENTRYP
 
	tPFNGLTEXCOORD4XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

4595 (
APIENTRYP
 
	tPFNGLTEXCOORD4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4596 (
APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4597 (
APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4598 (
APIENTRYP
 
	tPFNGLVERTEX2XOESPROC
Ë(
	tGLfixed
 
	tx
);

4599 (
APIENTRYP
 
	tPFNGLVERTEX2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4600 (
APIENTRYP
 
	tPFNGLVERTEX3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

4601 (
APIENTRYP
 
	tPFNGLVERTEX3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4602 (
APIENTRYP
 
	tPFNGLVERTEX4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4603 (
APIENTRYP
 
	tPFNGLVERTEX4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4604 #ifde‡
GL_GLEXT_PROTOTYPES


4605 
GLAPI
 
APIENTRY
 
glAÕhaFuncxOES
 (
GLíum
 
func
, 
GLfixed
 
ªf
);

4606 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4607 
GLAPI
 
APIENTRY
 
glCÀ¨DïthxOES
 (
GLfixed
 
dïth
);

4608 
GLAPI
 
APIENTRY
 
glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

4609 
GLAPI
 
APIENTRY
 
glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4610 
GLAPI
 
APIENTRY
 
glDïthR™gexOES
 (
GLfixed
 
n
, GLfixed 
f
);

4611 
GLAPI
 
APIENTRY
 
glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4612 
GLAPI
 
APIENTRY
 
glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

4613 
GLAPI
 
APIENTRY
 
glFru°umxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

4614 
GLAPI
 
APIENTRY
 
glGëClùPœ√xOES
 (
GLíum
 
∂™e
, 
GLfixed
 *
equ©i⁄
);

4615 
GLAPI
 
APIENTRY
 
glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

4616 
GLAPI
 
APIENTRY
 
glGëTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4617 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4618 
GLAPI
 
APIENTRY
 
glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4619 
GLAPI
 
APIENTRY
 
glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

4620 
GLAPI
 
APIENTRY
 
glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4621 
GLAPI
 
APIENTRY
 
glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4622 
GLAPI
 
APIENTRY
 
glLöeWidthxOES
 (
GLfixed
 
width
);

4623 
GLAPI
 
APIENTRY
 
glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4624 
GLAPI
 
APIENTRY
 
glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4625 
GLAPI
 
APIENTRY
 
glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

4626 
GLAPI
 
APIENTRY
 
glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4627 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

4628 
GLAPI
 
APIENTRY
 
glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

4629 
GLAPI
 
APIENTRY
 
glOπhoxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

4630 
GLAPI
 
APIENTRY
 
glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4631 
GLAPI
 
APIENTRY
 
glPoötSizexOES
 (
GLfixed
 
size
);

4632 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

4633 
GLAPI
 
APIENTRY
 
glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

4634 
GLAPI
 
APIENTRY
 
glSam∂eCovîageOES
 (
GLfixed
 
vÆue
, 
GLboﬁón
 
övît
);

4635 
GLAPI
 
APIENTRY
 
glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4636 
GLAPI
 
APIENTRY
 
glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4637 
GLAPI
 
APIENTRY
 
glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4638 
GLAPI
 
APIENTRY
 
glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4639 
GLAPI
 
APIENTRY
 
glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4640 
GLAPI
 
APIENTRY
 
glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4641 
GLAPI
 
APIENTRY
 
glAccumxOES
 (
GLíum
 
›
, 
GLfixed
 
vÆue
);

4642 
GLAPI
 
APIENTRY
 
glBôm≠xOES
 (
GLsizei
 
width
, GLsizeò
height
, 
GLfixed
 
x‹ig
, GLfixed 
y‹ig
, GLfixed 
xmove
, GLfixed 
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

4643 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4644 
GLAPI
 
APIENTRY
 
glCÀ¨AccumxOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4645 
GLAPI
 
APIENTRY
 
glCﬁ‹3xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
);

4646 
GLAPI
 
APIENTRY
 
glCﬁ‹3xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

4647 
GLAPI
 
APIENTRY
 
glCﬁ‹4xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

4648 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4649 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4650 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xOES
 (
GLfixed
 
u
);

4651 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4652 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xOES
 (
GLfixed
 
u
, GLfixed 
v
);

4653 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4654 
GLAPI
 
APIENTRY
 
glFìdbackBuf„rxOES
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLfixed
 *
buf„r
);

4655 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4656 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4657 
GLAPI
 
APIENTRY
 
glGëLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4658 
GLAPI
 
APIENTRY
 
glGëM≠xvOES
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLfixed
 *
v
);

4659 
GLAPI
 
APIENTRY
 
glGëM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4660 
GLAPI
 
APIENTRY
 
glGëPixñM≠xv
 (
GLíum
 
m≠
, 
GLöt
 
size
, 
GLfixed
 *
vÆues
);

4661 
GLAPI
 
APIENTRY
 
glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4662 
GLAPI
 
APIENTRY
 
glGëTexLevñP¨amëîxvOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4663 
GLAPI
 
APIENTRY
 
glIndexxOES
 (
GLfixed
 
comp⁄ít
);

4664 
GLAPI
 
APIENTRY
 
glIndexxvOES
 (c⁄° 
GLfixed
 *
comp⁄ít
);

4665 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4666 
GLAPI
 
APIENTRY
 
glM≠1xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, GLfixed 
poöts
);

4667 
GLAPI
 
APIENTRY
 
glM≠2xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLfixed 
v1
, GLfixed 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLfixed 
poöts
);

4668 
GLAPI
 
APIENTRY
 
glM≠Grid1xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
);

4669 
GLAPI
 
APIENTRY
 
glM≠Grid2xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
, GLfixed 
v1
, GLfixed 
v2
);

4670 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4671 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
);

4672 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4673 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
);

4674 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4675 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

4676 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4677 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4678 
GLAPI
 
APIENTRY
 
glN‹mÆ3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4679 
GLAPI
 
APIENTRY
 
glPassThroughxOES
 (
GLfixed
 
tokí
);

4680 
GLAPI
 
APIENTRY
 
glPixñM≠x
 (
GLíum
 
m≠
, 
GLöt
 
size
, c⁄° 
GLfixed
 *
vÆues
);

4681 
GLAPI
 
APIENTRY
 
glPixñSt‹ex
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4682 
GLAPI
 
APIENTRY
 
glPixñTøns„rxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4683 
GLAPI
 
APIENTRY
 
glPixñZoomxOES
 (
GLfixed
 
xÁ˘‹
, GLfixed 
yÁ˘‹
);

4684 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsxOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GLfixed
 *
¥i‹ôõs
);

4685 
GLAPI
 
APIENTRY
 
glRa°îPos2xOES
 (
GLfixed
 
x
, GLfixed 
y
);

4686 
GLAPI
 
APIENTRY
 
glRa°îPos2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4687 
GLAPI
 
APIENTRY
 
glRa°îPos3xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4688 
GLAPI
 
APIENTRY
 
glRa°îPos3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4689 
GLAPI
 
APIENTRY
 
glRa°îPos4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
w
);

4690 
GLAPI
 
APIENTRY
 
glRa°îPos4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4691 
GLAPI
 
APIENTRY
 
glRe˘xOES
 (
GLfixed
 
x1
, GLfixed 
y1
, GLfixed 
x2
, GLfixed 
y2
);

4692 
GLAPI
 
APIENTRY
 
glRe˘xvOES
 (c⁄° 
GLfixed
 *
v1
, c⁄° GLfixed *
v2
);

4693 
GLAPI
 
APIENTRY
 
glTexCo‹d1xOES
 (
GLfixed
 
s
);

4694 
GLAPI
 
APIENTRY
 
glTexCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4695 
GLAPI
 
APIENTRY
 
glTexCo‹d2xOES
 (
GLfixed
 
s
, GLfixed 
t
);

4696 
GLAPI
 
APIENTRY
 
glTexCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4697 
GLAPI
 
APIENTRY
 
glTexCo‹d3xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

4698 
GLAPI
 
APIENTRY
 
glTexCo‹d3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4699 
GLAPI
 
APIENTRY
 
glTexCo‹d4xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

4700 
GLAPI
 
APIENTRY
 
glTexCo‹d4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4701 
GLAPI
 
APIENTRY
 
glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4702 
GLAPI
 
APIENTRY
 
glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4703 
GLAPI
 
APIENTRY
 
glVîãx2xOES
 (
GLfixed
 
x
);

4704 
GLAPI
 
APIENTRY
 
glVîãx2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4705 
GLAPI
 
APIENTRY
 
glVîãx3xOES
 (
GLfixed
 
x
, GLfixed 
y
);

4706 
GLAPI
 
APIENTRY
 
glVîãx3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4707 
GLAPI
 
APIENTRY
 
glVîãx4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4708 
GLAPI
 
APIENTRY
 
glVîãx4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4712 #i‚de‡
GL_OES_quîy_m©rix


4713 
	#GL_OES_quîy_m©rix
 1

	)

4714 
GLbôfõld
 (
	tAPIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 *
	tm™tisß
, 
	tGLöt
 *
	texp⁄ít
);

4715 #ifde‡
GL_GLEXT_PROTOTYPES


4716 
GLAPI
 
GLbôfõld
 
APIENTRY
 
glQuîyM©rixxOES
 (
GLfixed
 *
m™tisß
, 
GLöt
 *
exp⁄ít
);

4720 #i‚de‡
GL_OES_ªad_f‹m©


4721 
	#GL_OES_ªad_f‹m©
 1

	)

4722 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

4723 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

4726 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


4727 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

4728 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

4729 (
APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

4730 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

4731 (
APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

4732 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
 *
	tequ©i⁄
);

4733 (
APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

4734 #ifde‡
GL_GLEXT_PROTOTYPES


4735 
GLAPI
 
APIENTRY
 
glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

4736 
GLAPI
 
APIENTRY
 
glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

4737 
GLAPI
 
APIENTRY
 
glDïthR™gefOES
 (
GL˛ampf
 
n
, GL˛amp‡
f
);

4738 
GLAPI
 
APIENTRY
 
glFru°umfOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

4739 
GLAPI
 
APIENTRY
 
glGëClùPœ√fOES
 (
GLíum
 
∂™e
, 
GLÊﬂt
 *
equ©i⁄
);

4740 
GLAPI
 
APIENTRY
 
glOπhofOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

4744 #i‚de‡
GL_3DFX_mu…ißm∂e


4745 
	#GL_3DFX_mu…ißm∂e
 1

	)

4746 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

4747 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

4748 
	#GL_SAMPLES_3DFX
 0x86B4

	)

4749 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

4752 #i‚de‡
GL_3DFX_tbuf„r


4753 
	#GL_3DFX_tbuf„r
 1

	)

4754 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

4755 #ifde‡
GL_GLEXT_PROTOTYPES


4756 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

4760 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


4761 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

4762 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

4763 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

4766 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


4767 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

4768 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

4769 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

4772 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


4773 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

4776 #i‚de‡
GL_AMD_debug_ouçut


4777 
	#GL_AMD_debug_ouçut
 1

	)

4778 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,*
	tu£rP¨am
);

4779 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

4780 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

4781 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

4782 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

4783 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

4784 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

4785 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

4786 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

4787 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

4788 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

4789 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

4790 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

4791 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

4792 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

4793 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

4794 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

4795 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, *
	tu£rP¨am
);

4796 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

4797 #ifde‡
GL_GLEXT_PROTOTYPES


4798 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

4799 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

4800 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, *
u£rP¨am
);

4801 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

4805 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


4806 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

4807 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

4808 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

4811 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


4812 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

4813 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

4814 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

4815 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

4816 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

4817 #ifde‡
GL_GLEXT_PROTOTYPES


4818 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

4819 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

4820 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

4821 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

4825 #i‚de‡
GL_AMD_g˙_shadî


4826 
	#GL_AMD_g˙_shadî
 1

	)

4829 #i‚de‡
GL_AMD_gpu_shadî_öt64


4830 
	#GL_AMD_gpu_shadî_öt64
 1

	)

4831 
öt64_t
 
	tGLöt64EXT
;

4832 
	#GL_INT64_NV
 0x140E

	)

4833 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

4834 
	#GL_INT8_NV
 0x8FE0

	)

4835 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

4836 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

4837 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

4838 
	#GL_INT16_NV
 0x8FE4

	)

4839 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

4840 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

4841 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

4842 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

4843 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

4844 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

4845 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

4846 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

4847 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

4848 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

4849 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

4850 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

4851 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

4852 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

4853 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

4854 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

4855 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

4856 
	#GL_FLOAT16_NV
 0x8FF8

	)

4857 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

4858 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

4859 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

4860 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

4861 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

4862 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

4863 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

4864 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4865 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4866 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4867 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4868 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

4869 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

4870 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

4871 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

4872 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4873 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4874 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4875 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4876 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

4877 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

4878 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

4879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

4880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

4881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

4882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

4886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

4887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

4888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

4889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

4890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

4894 #ifde‡
GL_GLEXT_PROTOTYPES


4895 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

4896 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

4897 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

4898 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

4899 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4900 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4901 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4902 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4903 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

4904 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

4905 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

4906 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

4907 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4908 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4909 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4910 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4911 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

4912 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

4913 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

4914 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

4915 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

4916 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

4917 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4918 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4919 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4920 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

4921 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

4922 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

4923 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

4924 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

4925 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4926 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4927 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4928 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

4932 #i‚de‡
GL_AMD_öãæóved_ñemíts


4933 
	#GL_AMD_öãæóved_ñemíts
 1

	)

4934 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

4935 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

4936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4937 #ifde‡
GL_GLEXT_PROTOTYPES


4938 
GLAPI
 
APIENTRY
 
glVîãxAâribP¨amëîiAMD
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

4942 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


4943 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

4944 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4945 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4946 #ifde‡
GL_GLEXT_PROTOTYPES


4947 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

4948 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

4952 #i‚de‡
GL_AMD_«me_gí_dñëe


4953 
	#GL_AMD_«me_gí_dñëe
 1

	)

4954 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

4955 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

4956 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

4957 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

4958 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

4959 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

4960 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

4961 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

4962 #ifde‡
GL_GLEXT_PROTOTYPES


4963 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

4964 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

4965 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

4969 #i‚de‡
GL_AMD_oc˛usi⁄_quîy_evít


4970 
	#GL_AMD_oc˛usi⁄_quîy_evít
 1

	)

4971 
	#GL_OCCLUSION_QUERY_EVENT_MASK_AMD
 0x874F

	)

4972 
	#GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
 0x00000001

	)

4973 
	#GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
 0x00000002

	)

4974 
	#GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
 0x00000004

	)

4975 
	#GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
 0x00000008

	)

4976 
	#GL_QUERY_ALL_EVENT_BITS_AMD
 0xFFFFFFFF

	)

4977 (
APIENTRYP
 
	tPFNGLQUERYOBJECTPARAMETERUIAMDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, GLíum 
	t≤ame
, GLuöà
	t∑øm
);

4978 #ifde‡
GL_GLEXT_PROTOTYPES


4979 
GLAPI
 
APIENTRY
 
glQuîyObje˘P¨amëîuiAMD
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, GLíum 
≤ame
, GLuöà
∑øm
);

4983 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


4984 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

4985 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

4986 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

4987 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

4988 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

4989 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

4990 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

4991 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

4992 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

4993 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

4994 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

4995 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

4996 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

4997 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

4998 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

4999 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

5000 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5001 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

5002 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

5003 #ifde‡
GL_GLEXT_PROTOTYPES


5004 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

5005 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

5006 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

5007 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

5008 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, *
d©a
);

5009 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5010 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

5011 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

5012 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5013 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

5014 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

5018 #i‚de‡
GL_AMD_pö√d_mem‹y


5019 
	#GL_AMD_pö√d_mem‹y
 1

	)

5020 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

5023 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


5024 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

5025 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

5026 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

5027 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

5030 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


5031 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

5032 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

5033 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

5034 #ifde‡
GL_GLEXT_PROTOTYPES


5035 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

5039 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


5040 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

5043 #i‚de‡
GL_AMD_shadî_©omic_cou¡î_›s


5044 
	#GL_AMD_shadî_©omic_cou¡î_›s
 1

	)

5047 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


5048 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

5051 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


5052 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

5055 #i‚de‡
GL_AMD_•¨£_ãxtuª


5056 
	#GL_AMD_•¨£_ãxtuª
 1

	)

5057 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

5058 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

5059 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

5060 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

5061 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

5062 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

5063 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

5064 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

5065 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

5066 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5067 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

5068 #ifde‡
GL_GLEXT_PROTOTYPES


5069 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5070 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

5074 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


5075 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

5076 
	#GL_SET_AMD
 0x874A

	)

5077 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

5078 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

5079 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

5080 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

5081 #ifde‡
GL_GLEXT_PROTOTYPES


5082 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

5086 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


5087 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

5090 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


5091 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

5094 #i‚de‡
GL_AMD_å™sf‹m_„edback4


5095 
	#GL_AMD_å™sf‹m_„edback4
 1

	)

5096 
	#GL_STREAM_RASTERIZATION_AMD
 0x91A0

	)

5099 #i‚de‡
GL_AMD_vîãx_shadî_œyî


5100 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

5103 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


5104 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

5105 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

5106 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

5107 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

5108 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

5109 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

5110 
	#GL_DISCRETE_AMD
 0x9006

	)

5111 
	#GL_CONTINUOUS_AMD
 0x9007

	)

5112 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

5113 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

5114 #ifde‡
GL_GLEXT_PROTOTYPES


5115 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

5116 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

5120 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


5121 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

5124 #i‚de‡
GL_APPLE_aux_dïth_°ícû


5125 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

5126 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

5129 #i‚de‡
GL_APPLE_˛õ¡_°‹age


5130 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

5131 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

5134 #i‚de‡
GL_APPLE_ñemít_¨øy


5135 
	#GL_APPLE_ñemít_¨øy
 1

	)

5136 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

5137 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

5138 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

5139 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5140 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5141 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5142 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5143 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5144 #ifde‡
GL_GLEXT_PROTOTYPES


5145 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5146 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5147 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5148 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5149 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5153 #i‚de‡
GL_APPLE_„n˚


5154 
	#GL_APPLE_„n˚
 1

	)

5155 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

5156 
	#GL_FENCE_APPLE
 0x8A0B

	)

5157 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5158 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5159 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5160 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5161 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5162 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5163 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

5164 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

5165 #ifde‡
GL_GLEXT_PROTOTYPES


5166 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

5167 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

5168 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

5169 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

5170 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

5171 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

5172 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

5173 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

5177 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5178 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

5179 
	#GL_HALF_APPLE
 0x140B

	)

5180 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5181 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5182 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5183 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5184 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5185 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5186 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5187 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5188 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5189 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5190 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5191 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5192 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5195 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5196 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

5197 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5198 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5199 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5200 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5201 #ifde‡
GL_GLEXT_PROTOTYPES


5202 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

5203 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

5207 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5208 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

5209 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5210 
	#GL_RELEASED_APPLE
 0x8A19

	)

5211 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5212 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5213 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5214 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5215 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5216 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5217 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5218 #ifde‡
GL_GLEXT_PROTOTYPES


5219 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5220 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5221 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5225 #i‚de‡
GL_APPLE_rgb_422


5226 
	#GL_APPLE_rgb_422
 1

	)

5227 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5228 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

5229 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

5230 
	#GL_RGB_RAW_422_APPLE
 0x8A51

	)

5233 #i‚de‡
GL_APPLE_row_byãs


5234 
	#GL_APPLE_row_byãs
 1

	)

5235 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5236 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5239 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5240 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5241 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

5244 #i‚de‡
GL_APPLE_ãxtuª_ønge


5245 
	#GL_APPLE_ãxtuª_ønge
 1

	)

5246 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5247 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5248 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5249 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5250 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

5251 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

5252 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

5253 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

5254 #ifde‡
GL_GLEXT_PROTOTYPES


5255 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

5256 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

5260 #i‚de‡
GL_APPLE_å™sf‹m_höt


5261 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5262 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

5265 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


5266 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

5267 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

5268 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5269 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5270 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5271 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5272 #ifde‡
GL_GLEXT_PROTOTYPES


5273 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5274 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

5275 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

5276 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5280 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


5281 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

5282 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

5283 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

5284 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

5285 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

5286 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

5287 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5288 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5289 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5290 #ifde‡
GL_GLEXT_PROTOTYPES


5291 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5292 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5293 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5297 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5298 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

5299 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5300 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5301 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5302 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5303 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5304 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5305 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5306 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5307 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5308 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5309 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5310 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5311 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5312 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5313 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5314 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5315 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5316 #ifde‡
GL_GLEXT_PROTOTYPES


5317 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5318 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5319 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5320 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

5321 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

5322 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

5323 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

5327 #i‚de‡
GL_APPLE_ycb¸_422


5328 
	#GL_APPLE_ycb¸_422
 1

	)

5329 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

5332 #i‚de‡
GL_ATI_døw_buf„rs


5333 
	#GL_ATI_døw_buf„rs
 1

	)

5334 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

5335 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

5336 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

5337 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

5338 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

5339 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

5340 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

5341 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

5342 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

5343 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

5344 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

5345 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

5346 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

5347 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

5348 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

5349 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

5350 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

5351 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5352 #ifde‡
GL_GLEXT_PROTOTYPES


5353 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

5357 #i‚de‡
GL_ATI_ñemít_¨øy


5358 
	#GL_ATI_ñemít_¨øy
 1

	)

5359 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

5360 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

5361 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

5362 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5363 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

5364 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

5365 #ifde‡
GL_GLEXT_PROTOTYPES


5366 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5367 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

5368 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

5372 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5373 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5374 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

5375 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

5376 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

5377 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

5378 
	#GL_DUDV_ATI
 0x8779

	)

5379 
	#GL_DU8DV8_ATI
 0x877A

	)

5380 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

5381 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

5382 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5383 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5384 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5385 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5386 #ifde‡
GL_GLEXT_PROTOTYPES


5387 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

5388 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

5389 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

5390 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

5394 #i‚de‡
GL_ATI_‰agmít_shadî


5395 
	#GL_ATI_‰agmít_shadî
 1

	)

5396 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

5397 
	#GL_REG_0_ATI
 0x8921

	)

5398 
	#GL_REG_1_ATI
 0x8922

	)

5399 
	#GL_REG_2_ATI
 0x8923

	)

5400 
	#GL_REG_3_ATI
 0x8924

	)

5401 
	#GL_REG_4_ATI
 0x8925

	)

5402 
	#GL_REG_5_ATI
 0x8926

	)

5403 
	#GL_REG_6_ATI
 0x8927

	)

5404 
	#GL_REG_7_ATI
 0x8928

	)

5405 
	#GL_REG_8_ATI
 0x8929

	)

5406 
	#GL_REG_9_ATI
 0x892A

	)

5407 
	#GL_REG_10_ATI
 0x892B

	)

5408 
	#GL_REG_11_ATI
 0x892C

	)

5409 
	#GL_REG_12_ATI
 0x892D

	)

5410 
	#GL_REG_13_ATI
 0x892E

	)

5411 
	#GL_REG_14_ATI
 0x892F

	)

5412 
	#GL_REG_15_ATI
 0x8930

	)

5413 
	#GL_REG_16_ATI
 0x8931

	)

5414 
	#GL_REG_17_ATI
 0x8932

	)

5415 
	#GL_REG_18_ATI
 0x8933

	)

5416 
	#GL_REG_19_ATI
 0x8934

	)

5417 
	#GL_REG_20_ATI
 0x8935

	)

5418 
	#GL_REG_21_ATI
 0x8936

	)

5419 
	#GL_REG_22_ATI
 0x8937

	)

5420 
	#GL_REG_23_ATI
 0x8938

	)

5421 
	#GL_REG_24_ATI
 0x8939

	)

5422 
	#GL_REG_25_ATI
 0x893A

	)

5423 
	#GL_REG_26_ATI
 0x893B

	)

5424 
	#GL_REG_27_ATI
 0x893C

	)

5425 
	#GL_REG_28_ATI
 0x893D

	)

5426 
	#GL_REG_29_ATI
 0x893E

	)

5427 
	#GL_REG_30_ATI
 0x893F

	)

5428 
	#GL_REG_31_ATI
 0x8940

	)

5429 
	#GL_CON_0_ATI
 0x8941

	)

5430 
	#GL_CON_1_ATI
 0x8942

	)

5431 
	#GL_CON_2_ATI
 0x8943

	)

5432 
	#GL_CON_3_ATI
 0x8944

	)

5433 
	#GL_CON_4_ATI
 0x8945

	)

5434 
	#GL_CON_5_ATI
 0x8946

	)

5435 
	#GL_CON_6_ATI
 0x8947

	)

5436 
	#GL_CON_7_ATI
 0x8948

	)

5437 
	#GL_CON_8_ATI
 0x8949

	)

5438 
	#GL_CON_9_ATI
 0x894A

	)

5439 
	#GL_CON_10_ATI
 0x894B

	)

5440 
	#GL_CON_11_ATI
 0x894C

	)

5441 
	#GL_CON_12_ATI
 0x894D

	)

5442 
	#GL_CON_13_ATI
 0x894E

	)

5443 
	#GL_CON_14_ATI
 0x894F

	)

5444 
	#GL_CON_15_ATI
 0x8950

	)

5445 
	#GL_CON_16_ATI
 0x8951

	)

5446 
	#GL_CON_17_ATI
 0x8952

	)

5447 
	#GL_CON_18_ATI
 0x8953

	)

5448 
	#GL_CON_19_ATI
 0x8954

	)

5449 
	#GL_CON_20_ATI
 0x8955

	)

5450 
	#GL_CON_21_ATI
 0x8956

	)

5451 
	#GL_CON_22_ATI
 0x8957

	)

5452 
	#GL_CON_23_ATI
 0x8958

	)

5453 
	#GL_CON_24_ATI
 0x8959

	)

5454 
	#GL_CON_25_ATI
 0x895A

	)

5455 
	#GL_CON_26_ATI
 0x895B

	)

5456 
	#GL_CON_27_ATI
 0x895C

	)

5457 
	#GL_CON_28_ATI
 0x895D

	)

5458 
	#GL_CON_29_ATI
 0x895E

	)

5459 
	#GL_CON_30_ATI
 0x895F

	)

5460 
	#GL_CON_31_ATI
 0x8960

	)

5461 
	#GL_MOV_ATI
 0x8961

	)

5462 
	#GL_ADD_ATI
 0x8963

	)

5463 
	#GL_MUL_ATI
 0x8964

	)

5464 
	#GL_SUB_ATI
 0x8965

	)

5465 
	#GL_DOT3_ATI
 0x8966

	)

5466 
	#GL_DOT4_ATI
 0x8967

	)

5467 
	#GL_MAD_ATI
 0x8968

	)

5468 
	#GL_LERP_ATI
 0x8969

	)

5469 
	#GL_CND_ATI
 0x896A

	)

5470 
	#GL_CND0_ATI
 0x896B

	)

5471 
	#GL_DOT2_ADD_ATI
 0x896C

	)

5472 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

5473 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

5474 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

5475 
	#GL_NUM_PASSES_ATI
 0x8970

	)

5476 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

5477 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

5478 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

5479 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

5480 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

5481 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

5482 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

5483 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

5484 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

5485 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

5486 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

5487 
	#GL_RED_BIT_ATI
 0x00000001

	)

5488 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

5489 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

5490 
	#GL_2X_BIT_ATI
 0x00000001

	)

5491 
	#GL_4X_BIT_ATI
 0x00000002

	)

5492 
	#GL_8X_BIT_ATI
 0x00000004

	)

5493 
	#GL_HALF_BIT_ATI
 0x00000008

	)

5494 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

5495 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

5496 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

5497 
	#GL_COMP_BIT_ATI
 0x00000002

	)

5498 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

5499 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

5500 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

5501 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5502 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5503 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

5504 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

5505 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

5506 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

5507 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5508 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5509 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5510 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5511 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5512 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5513 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5514 #ifde‡
GL_GLEXT_PROTOTYPES


5515 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

5516 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

5517 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

5518 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

5519 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

5520 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

5521 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

5522 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

5523 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

5524 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

5525 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

5526 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

5527 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

5528 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

5532 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


5533 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

5534 *(
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5535 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5536 #ifde‡
GL_GLEXT_PROTOTYPES


5537 
GLAPI
 *
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5538 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5542 #i‚de‡
GL_ATI_memöfo


5543 
	#GL_ATI_memöfo
 1

	)

5544 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

5545 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

5546 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

5549 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


5550 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

5551 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

5552 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

5555 #i‚de‡
GL_ATI_≤_åüngÀs


5556 
	#GL_ATI_≤_åüngÀs
 1

	)

5557 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

5558 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

5559 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

5560 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

5561 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

5562 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

5563 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

5564 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

5565 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

5566 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5567 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5568 #ifde‡
GL_GLEXT_PROTOTYPES


5569 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5570 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

5574 #i‚de‡
GL_ATI_£∑øã_°ícû


5575 
	#GL_ATI_£∑øã_°ícû
 1

	)

5576 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

5577 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

5578 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

5579 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

5580 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

5581 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

5582 #ifde‡
GL_GLEXT_PROTOTYPES


5583 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

5584 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

5588 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


5589 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

5590 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

5593 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


5594 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

5595 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

5596 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

5597 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

5600 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


5601 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

5602 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

5603 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

5604 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

5605 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

5606 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

5607 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

5608 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

5609 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

5610 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

5611 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

5612 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

5613 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

5616 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


5617 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

5618 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

5619 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

5622 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


5623 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

5624 
	#GL_STATIC_ATI
 0x8760

	)

5625 
	#GL_DYNAMIC_ATI
 0x8761

	)

5626 
	#GL_PRESERVE_ATI
 0x8762

	)

5627 
	#GL_DISCARD_ATI
 0x8763

	)

5628 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

5629 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

5630 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

5631 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

5632 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	tußge
);

5633 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5634 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

5635 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5636 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5637 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5638 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

5639 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5640 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5641 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5642 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5643 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5644 #ifde‡
GL_GLEXT_PROTOTYPES


5645 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
ußge
);

5646 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5647 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
¥e£rve
);

5648 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5649 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

5650 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5651 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

5652 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5653 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5654 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

5655 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5656 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

5660 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


5661 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

5662 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5663 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5664 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5665 #ifde‡
GL_GLEXT_PROTOTYPES


5666 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

5667 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5668 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

5672 #i‚de‡
GL_ATI_vîãx_°ªams


5673 
	#GL_ATI_vîãx_°ªams
 1

	)

5674 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

5675 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

5676 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

5677 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

5678 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

5679 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

5680 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

5681 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

5682 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

5683 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

5684 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

5685 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5686 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

5687 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5688 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

5689 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5690 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

5691 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5692 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5693 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5694 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

5695 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5696 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5697 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5698 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5699 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5700 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5701 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5702 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5703 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5704 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5705 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5706 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5707 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5708 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5709 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5710 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5711 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5712 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5713 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5714 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5715 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5716 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

5717 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

5718 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

5719 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5720 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

5721 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5722 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

5723 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5724 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

5725 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5726 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

5727 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5728 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5729 #ifde‡
GL_GLEXT_PROTOTYPES


5730 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

5731 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5732 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

5733 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5734 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

5735 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5736 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

5737 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5738 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

5739 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5740 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

5741 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5742 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

5743 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5744 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

5745 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5746 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

5747 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5748 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

5749 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5750 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

5751 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5752 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

5753 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5754 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

5755 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5756 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

5757 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5758 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

5759 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5760 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

5761 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5762 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

5763 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

5764 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

5765 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5766 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

5767 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5768 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

5769 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5770 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

5771 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5772 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

5773 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5774 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

5778 #i‚de‡
GL_EXT_422_pixñs


5779 
	#GL_EXT_422_pixñs
 1

	)

5780 
	#GL_422_EXT
 0x80CC

	)

5781 
	#GL_422_REV_EXT
 0x80CD

	)

5782 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

5783 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

5786 #i‚de‡
GL_EXT_abgr


5787 
	#GL_EXT_abgr
 1

	)

5788 
	#GL_ABGR_EXT
 0x8000

	)

5791 #i‚de‡
GL_EXT_bgø


5792 
	#GL_EXT_bgø
 1

	)

5793 
	#GL_BGR_EXT
 0x80E0

	)

5794 
	#GL_BGRA_EXT
 0x80E1

	)

5797 #i‚de‡
GL_EXT_bödabÀ_unif‹m


5798 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

5799 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

5800 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

5801 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

5802 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

5803 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

5804 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

5805 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

5806 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

5807 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

5808 #ifde‡
GL_GLEXT_PROTOTYPES


5809 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

5810 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

5811 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

5815 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


5816 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

5817 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

5818 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

5819 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

5820 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

5821 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

5822 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

5823 #ifde‡
GL_GLEXT_PROTOTYPES


5824 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

5828 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


5829 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

5830 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

5831 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

5832 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

5833 #ifde‡
GL_GLEXT_PROTOTYPES


5834 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

5838 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


5839 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

5840 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

5841 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

5842 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

5843 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

5844 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5845 #ifde‡
GL_GLEXT_PROTOTYPES


5846 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

5850 #i‚de‡
GL_EXT_bÀnd_logic_›


5851 
	#GL_EXT_bÀnd_logic_›
 1

	)

5854 #i‚de‡
GL_EXT_bÀnd_mömax


5855 
	#GL_EXT_bÀnd_mömax
 1

	)

5856 
	#GL_MIN_EXT
 0x8007

	)

5857 
	#GL_MAX_EXT
 0x8008

	)

5858 
	#GL_FUNC_ADD_EXT
 0x8006

	)

5859 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

5860 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

5861 #ifde‡
GL_GLEXT_PROTOTYPES


5862 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

5866 #i‚de‡
GL_EXT_bÀnd_subåa˘


5867 
	#GL_EXT_bÀnd_subåa˘
 1

	)

5868 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

5869 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

5872 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


5873 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

5874 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

5877 #i‚de‡
GL_EXT_cmyka


5878 
	#GL_EXT_cmyka
 1

	)

5879 
	#GL_CMYK_EXT
 0x800C

	)

5880 
	#GL_CMYKA_EXT
 0x800D

	)

5881 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

5882 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

5885 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


5886 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

5887 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

5888 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

5889 #ifde‡
GL_GLEXT_PROTOTYPES


5890 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

5891 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

5895 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


5896 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

5897 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

5898 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

5899 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5900 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

5901 #ifde‡
GL_GLEXT_PROTOTYPES


5902 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5903 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

5907 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


5908 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

5909 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

5910 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

5911 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

5912 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

5913 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

5914 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

5915 
	#GL_REDUCE_EXT
 0x8016

	)

5916 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

5917 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

5918 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

5919 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

5920 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

5921 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

5922 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

5923 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

5924 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

5925 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

5926 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

5927 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

5928 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

5929 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

5930 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

5931 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

5932 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5933 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

5934 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5935 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5936 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5937 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

5938 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5939 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5940 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

5941 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

5942 #ifde‡
GL_GLEXT_PROTOTYPES


5943 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

5944 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

5945 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

5946 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

5947 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

5948 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

5949 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

5950 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

5951 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

5952 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5953 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5954 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

5955 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

5959 #i‚de‡
GL_EXT_co‹dö©e_‰ame


5960 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

5961 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

5962 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

5963 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

5964 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

5965 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

5966 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

5967 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

5968 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

5969 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

5970 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

5971 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

5972 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

5973 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

5974 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

5975 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

5976 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5977 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

5978 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5979 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

5980 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5981 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

5982 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5983 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

5984 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5985 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

5986 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5987 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

5988 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5989 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

5990 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5991 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

5992 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5993 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

5994 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5995 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

5996 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

5997 #ifde‡
GL_GLEXT_PROTOTYPES


5998 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

5999 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6000 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

6001 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6002 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

6003 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6004 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

6005 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

6006 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

6007 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6008 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

6009 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

6010 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

6011 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

6012 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

6013 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

6014 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

6015 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

6016 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

6017 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

6018 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6019 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6023 #i‚de‡
GL_EXT_c›y_ãxtuª


6024 
	#GL_EXT_c›y_ãxtuª
 1

	)

6025 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6026 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6027 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6028 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6029 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6030 #ifde‡
GL_GLEXT_PROTOTYPES


6031 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6032 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6033 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6034 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6035 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6039 #i‚de‡
GL_EXT_cuŒ_vîãx


6040 
	#GL_EXT_cuŒ_vîãx
 1

	)

6041 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

6042 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

6043 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

6044 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6045 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6046 #ifde‡
GL_GLEXT_PROTOTYPES


6047 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6048 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6052 #i‚de‡
GL_EXT_debug_œbñ


6053 
	#GL_EXT_debug_œbñ
 1

	)

6054 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

6055 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

6056 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

6057 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

6058 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

6059 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

6060 (
APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

6061 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

6062 #ifde‡
GL_GLEXT_PROTOTYPES


6063 
GLAPI
 
APIENTRY
 
glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

6064 
GLAPI
 
APIENTRY
 
glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

6068 #i‚de‡
GL_EXT_debug_m¨kî


6069 
	#GL_EXT_debug_m¨kî
 1

	)

6070 (
APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6071 (
APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

6072 (
APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

6073 #ifde‡
GL_GLEXT_PROTOTYPES


6074 
GLAPI
 
APIENTRY
 
glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6075 
GLAPI
 
APIENTRY
 
glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

6076 
GLAPI
 
APIENTRY
 
glP›GroupM¨kîEXT
 ();

6080 #i‚de‡
GL_EXT_dïth_bounds_ã°


6081 
	#GL_EXT_dïth_bounds_ã°
 1

	)

6082 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

6083 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

6084 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

6085 #ifde‡
GL_GLEXT_PROTOTYPES


6086 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

6090 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


6091 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

6092 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

6093 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

6094 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

6095 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6096 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6097 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6098 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6099 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

6100 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6101 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6102 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6103 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6104 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

6105 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6106 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6107 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

6108 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

6109 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

6110 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6111 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

6112 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6113 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6114 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6115 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6116 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6117 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6118 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6119 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6120 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6121 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6122 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6123 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6124 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6125 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6126 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6127 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6128 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6129 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6130 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6131 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6132 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6133 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6134 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6135 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6136 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6137 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6138 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

6139 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6140 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6141 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6142 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6143 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6144 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6145 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6146 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6147 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6148 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6149 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6150 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6151 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6152 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6153 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6154 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6155 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6156 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6157 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6158 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6159 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6160 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6161 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6162 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6163 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6164 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6165 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6166 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6167 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6168 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6169 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6170 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6171 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

6172 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

6173 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, **
	td©a
);

6174 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6175 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6176 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6177 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6178 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6179 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6180 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6181 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6182 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6183 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6184 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6185 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6186 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6187 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6188 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6189 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6190 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6191 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6192 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6193 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6194 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6195 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6196 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6197 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

6198 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

6199 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

6200 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6201 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6202 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

6203 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

6204 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6205 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6206 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6207 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6208 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6209 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6210 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6211 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6212 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6213 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6214 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6215 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6216 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6217 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6218 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6219 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6220 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6221 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6222 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6223 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6224 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6225 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6226 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6227 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6228 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6229 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

6230 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6231 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6232 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

6233 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6234 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

6235 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6236 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6237 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6238 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6239 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

6240 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

6241 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6242 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6243 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6244 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6245 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6246 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6247 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6248 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6249 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

6250 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

6251 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6252 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

6253 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

6254 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

6255 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

6256 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6257 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6258 (
APIENTRYP
 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6259 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6260 (
APIENTRYP
 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, **
	t∑øms
);

6261 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

6262 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6263 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6264 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6265 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6266 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6267 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6268 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6269 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

6270 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6271 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6272 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6273 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6274 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

6275 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6276 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6277 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6278 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

6279 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6280 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

6281 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

6282 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6283 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6284 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6285 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6286 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

6287 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6288 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

6289 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

6290 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

6291 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6292 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6293 (
APIENTRYP
 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6294 (
APIENTRYP
 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6295 (
APIENTRYP
 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6296 (
APIENTRYP
 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6297 (
APIENTRYP
 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6298 (
APIENTRYP
 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6299 (
APIENTRYP
 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6300 (
APIENTRYP
 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6301 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6302 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6303 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6304 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6305 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6306 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6307 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6308 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6309 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6310 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6311 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

6312 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

6313 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

6314 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6315 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6316 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6317 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6318 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

6319 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6320 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6321 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6322 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6323 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6324 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6325 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6326 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6327 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6328 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6329 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6330 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6331 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6332 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6333 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6334 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6335 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6336 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6337 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6338 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6339 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6340 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6341 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6342 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6343 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6344 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6345 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

6346 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

6347 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6348 (
APIENTRYP
 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tªsidít
);

6349 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, GLuöà
	tdivis‹
);

6350 #ifde‡
GL_GLEXT_PROTOTYPES


6351 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6352 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6353 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6354 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6355 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

6356 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6357 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6358 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6359 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6360 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6361 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6362 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6363 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6364 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

6365 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

6366 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6367 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6368 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6369 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6370 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6371 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6372 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6373 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6374 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6375 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6376 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6377 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6378 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6379 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6380 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6381 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6382 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6383 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6384 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6385 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6386 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6387 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6388 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

6389 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6390 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6391 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6392 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6393 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6394 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

6395 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

6396 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6397 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6398 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6399 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6400 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6401 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6402 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6403 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6404 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6405 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6406 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6407 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6408 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6409 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6410 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6411 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6412 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6413 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6414 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6415 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6416 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6417 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6418 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6419 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6420 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6421 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6422 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6423 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6424 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6425 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6426 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6427 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

6428 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

6429 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, **
d©a
);

6430 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6431 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6432 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6433 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6434 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6435 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6436 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6437 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6438 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6439 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6440 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6441 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, *
img
);

6442 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6443 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6444 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6445 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6446 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6447 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6448 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, *
img
);

6449 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6450 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6451 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6452 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6453 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

6454 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

6455 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

6456 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

6457 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6458 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

6459 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

6460 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

6461 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

6462 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

6463 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

6464 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

6465 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

6466 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

6467 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

6468 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6469 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6470 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6471 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6472 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6473 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6474 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6475 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6476 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6477 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6478 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6479 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6480 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6481 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6482 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6483 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6484 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6485 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

6486 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

6487 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6488 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

6489 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6490 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

6491 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6492 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

6493 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6494 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

6495 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

6496 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

6497 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

6498 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6499 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6500 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6501 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6502 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6503 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

6504 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6505 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

6506 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

6507 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

6508 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

6509 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

6510 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

6511 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

6512 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6513 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6514 
GLAPI
 
APIENTRY
 
glGëFlﬂti_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

6515 
GLAPI
 
APIENTRY
 
glGëDoubÀi_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

6516 
GLAPI
 
APIENTRY
 
glGëPoöãri_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, **
∑øms
);

6517 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

6518 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6519 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

6520 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6521 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

6522 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

6523 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

6524 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6525 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

6526 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

6527 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6528 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6529 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6530 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

6531 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

6532 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

6533 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

6534 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

6535 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6536 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

6537 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

6538 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

6539 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

6540 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

6541 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6542 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

6543 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

6544 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

6545 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

6546 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

6547 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

6548 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6549 
GLAPI
 
APIENTRY
 
glVîãxAºayCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6550 
GLAPI
 
APIENTRY
 
glVîãxAºayEdgeFœgOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6551 
GLAPI
 
APIENTRY
 
glVîãxAºayIndexOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6552 
GLAPI
 
APIENTRY
 
glVîãxAºayN‹mÆOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6553 
GLAPI
 
APIENTRY
 
glVîãxAºayTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6554 
GLAPI
 
APIENTRY
 
glVîãxAºayMu…iTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6555 
GLAPI
 
APIENTRY
 
glVîãxAºayFogCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6556 
GLAPI
 
APIENTRY
 
glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6557 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6558 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6559 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

6560 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

6561 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

6562 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

6563 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

6564 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãrvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, **
∑øm
);

6565 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîi_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

6566 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãri_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, **
∑øm
);

6567 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

6568 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

6569 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹ageEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

6570 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6571 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6572 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6573 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6574 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

6575 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6576 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6577 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6578 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6579 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6580 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6581 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6582 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6583 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6584 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6585 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6586 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6587 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6588 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6589 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6590 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6591 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

6592 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

6593 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6594 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

6595 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

6596 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

6597 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

6598 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

6599 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

6600 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

6601 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

6602 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

6603 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6604 
GLAPI
 
APIENTRY
 
glTextuªPageCommômítEXT
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
ªsidít
);

6605 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, GLuöà
divis‹
);

6609 #i‚de‡
GL_EXT_døw_buf„rs2


6610 
	#GL_EXT_døw_buf„rs2
 1

	)

6611 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

6612 #ifde‡
GL_GLEXT_PROTOTYPES


6613 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

6617 #i‚de‡
GL_EXT_døw_ö°™˚d


6618 
	#GL_EXT_døw_ö°™˚d
 1

	)

6619 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

6620 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

6621 #ifde‡
GL_GLEXT_PROTOTYPES


6622 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

6623 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

6627 #i‚de‡
GL_EXT_døw_ønge_ñemíts


6628 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

6629 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

6630 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

6631 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

6632 #ifde‡
GL_GLEXT_PROTOTYPES


6633 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

6637 #i‚de‡
GL_EXT_fog_co‹d


6638 
	#GL_EXT_fog_co‹d
 1

	)

6639 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

6640 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

6641 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

6642 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

6643 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

6644 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

6645 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

6646 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

6647 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

6648 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

6649 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

6650 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

6651 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6652 #ifde‡
GL_GLEXT_PROTOTYPES


6653 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

6654 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

6655 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

6656 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

6657 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6661 #i‚de‡
GL_EXT_‰amebuf„r_blô


6662 
	#GL_EXT_‰amebuf„r_blô
 1

	)

6663 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

6664 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

6665 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

6666 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

6667 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

6668 #ifde‡
GL_GLEXT_PROTOTYPES


6669 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

6673 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


6674 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

6675 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

6676 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

6677 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

6678 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6679 #ifde‡
GL_GLEXT_PROTOTYPES


6680 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6684 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


6685 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

6686 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

6687 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

6690 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


6691 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

6692 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

6693 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

6694 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

6695 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

6696 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

6697 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

6698 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

6699 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

6700 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

6701 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

6702 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

6703 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

6704 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

6705 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

6706 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

6707 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

6708 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

6709 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

6710 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

6711 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

6712 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

6713 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

6714 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

6715 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

6716 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

6717 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

6718 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

6719 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

6720 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

6721 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

6722 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

6723 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

6724 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

6725 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

6726 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

6727 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

6728 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

6729 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

6730 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

6731 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

6732 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

6733 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

6734 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

6735 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

6736 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

6737 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

6738 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

6739 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

6740 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

6741 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

6742 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

6743 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

6744 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6745 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

6746 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

6747 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6748 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6749 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

6750 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

6751 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

6752 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

6753 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6754 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6755 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6756 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6757 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

6758 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6759 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6760 #ifde‡
GL_GLEXT_PROTOTYPES


6761 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

6762 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

6763 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

6764 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

6765 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

6766 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6767 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

6768 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

6769 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

6770 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

6771 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

6772 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6773 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6774 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

6775 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

6776 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6777 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

6781 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


6782 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

6783 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

6784 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

6787 #i‚de‡
GL_EXT_geomëry_shadî4


6788 
	#GL_EXT_geomëry_shadî4
 1

	)

6789 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

6790 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

6791 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

6792 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

6793 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

6794 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

6795 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

6796 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

6797 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

6798 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

6799 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

6800 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

6801 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

6802 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

6803 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

6804 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

6805 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

6806 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

6807 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

6808 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

6809 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

6810 #ifde‡
GL_GLEXT_PROTOTYPES


6811 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

6815 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


6816 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

6817 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6818 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6819 #ifde‡
GL_GLEXT_PROTOTYPES


6820 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

6821 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

6825 #i‚de‡
GL_EXT_gpu_shadî4


6826 
	#GL_EXT_gpu_shadî4
 1

	)

6827 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

6828 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

6829 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

6830 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

6831 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

6832 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

6833 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

6834 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

6835 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

6836 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

6837 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

6838 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

6839 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

6840 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

6841 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

6842 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

6843 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

6844 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

6845 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

6846 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

6847 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

6848 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

6849 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

6850 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

6851 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

6852 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

6853 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
 0x8904

	)

6854 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
 0x8905

	)

6855 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

6856 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

6857 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6858 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

6859 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

6860 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6861 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6862 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6863 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6864 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6865 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6866 #ifde‡
GL_GLEXT_PROTOTYPES


6867 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

6868 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

6869 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6870 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

6871 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

6872 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

6873 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6874 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6875 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6876 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6877 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6881 #i‚de‡
GL_EXT_hi°ogøm


6882 
	#GL_EXT_hi°ogøm
 1

	)

6883 
	#GL_HISTOGRAM_EXT
 0x8024

	)

6884 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

6885 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

6886 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

6887 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

6888 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

6889 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

6890 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

6891 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

6892 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

6893 
	#GL_MINMAX_EXT
 0x802E

	)

6894 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

6895 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

6896 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

6897 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

6898 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6899 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6900 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

6901 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6902 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6903 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6904 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6905 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6906 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6907 #ifde‡
GL_GLEXT_PROTOTYPES


6908 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

6909 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6910 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6911 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

6912 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6913 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6914 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6915 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6916 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

6917 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

6921 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


6922 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

6923 
	#GL_IUI_V2F_EXT
 0x81AD

	)

6924 
	#GL_IUI_V3F_EXT
 0x81AE

	)

6925 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

6926 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

6927 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

6928 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

6929 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

6930 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

6933 #i‚de‡
GL_EXT_ödex_func


6934 
	#GL_EXT_ödex_func
 1

	)

6935 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

6936 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

6937 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

6938 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

6939 #ifde‡
GL_GLEXT_PROTOTYPES


6940 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

6944 #i‚de‡
GL_EXT_ödex_m©îül


6945 
	#GL_EXT_ödex_m©îül
 1

	)

6946 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

6947 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

6948 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

6949 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6950 #ifde‡
GL_GLEXT_PROTOTYPES


6951 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

6955 #i‚de‡
GL_EXT_ödex_ãxtuª


6956 
	#GL_EXT_ödex_ãxtuª
 1

	)

6959 #i‚de‡
GL_EXT_light_ãxtuª


6960 
	#GL_EXT_light_ãxtuª
 1

	)

6961 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

6962 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

6963 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

6964 
	#GL_ATTENUATION_EXT
 0x834D

	)

6965 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

6966 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

6967 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

6968 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

6969 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

6970 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

6971 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

6972 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6973 #ifde‡
GL_GLEXT_PROTOTYPES


6974 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

6975 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

6976 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

6980 #i‚de‡
GL_EXT_misc_©åibuã


6981 
	#GL_EXT_misc_©åibuã
 1

	)

6984 #i‚de‡
GL_EXT_mu…i_døw_¨øys


6985 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

6986 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6987 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
);

6988 #ifde‡
GL_GLEXT_PROTOTYPES


6989 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

6990 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
);

6994 #i‚de‡
GL_EXT_mu…ißm∂e


6995 
	#GL_EXT_mu…ißm∂e
 1

	)

6996 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

6997 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

6998 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

6999 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

7000 
	#GL_1PASS_EXT
 0x80A1

	)

7001 
	#GL_2PASS_0_EXT
 0x80A2

	)

7002 
	#GL_2PASS_1_EXT
 0x80A3

	)

7003 
	#GL_4PASS_0_EXT
 0x80A4

	)

7004 
	#GL_4PASS_1_EXT
 0x80A5

	)

7005 
	#GL_4PASS_2_EXT
 0x80A6

	)

7006 
	#GL_4PASS_3_EXT
 0x80A7

	)

7007 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

7008 
	#GL_SAMPLES_EXT
 0x80A9

	)

7009 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

7010 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

7011 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

7012 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

7013 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

7014 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

7015 #ifde‡
GL_GLEXT_PROTOTYPES


7016 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

7017 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

7021 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


7022 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

7023 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

7024 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

7025 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

7026 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

7029 #i‚de‡
GL_EXT_∑cked_Êﬂt


7030 
	#GL_EXT_∑cked_Êﬂt
 1

	)

7031 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

7032 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

7033 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

7036 #i‚de‡
GL_EXT_∑cked_pixñs


7037 
	#GL_EXT_∑cked_pixñs
 1

	)

7038 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

7039 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

7040 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

7041 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

7042 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

7045 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


7046 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

7047 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

7048 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

7049 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

7050 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

7051 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

7052 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

7053 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

7054 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

7055 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	td©a
);

7056 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7057 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7058 #ifde‡
GL_GLEXT_PROTOTYPES


7059 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

7060 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
d©a
);

7061 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7062 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7066 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


7067 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

7068 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

7069 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

7070 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

7071 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

7074 #i‚de‡
GL_EXT_pixñ_å™sf‹m


7075 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

7076 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

7077 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

7078 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

7079 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

7080 
	#GL_CUBIC_EXT
 0x8334

	)

7081 
	#GL_AVERAGE_EXT
 0x8335

	)

7082 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

7083 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

7084 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

7085 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7086 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7087 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7088 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7089 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7090 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7091 #ifde‡
GL_GLEXT_PROTOTYPES


7092 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

7093 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

7094 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7095 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7096 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7097 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7101 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


7102 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

7105 #i‚de‡
GL_EXT_poöt_∑ømëîs


7106 
	#GL_EXT_poöt_∑ømëîs
 1

	)

7107 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

7108 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

7109 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

7110 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

7111 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7112 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7113 #ifde‡
GL_GLEXT_PROTOTYPES


7114 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

7115 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7119 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


7120 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

7121 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

7122 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

7123 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

7124 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

7125 #ifde‡
GL_GLEXT_PROTOTYPES


7126 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

7130 #i‚de‡
GL_EXT_¥ovokög_vîãx


7131 
	#GL_EXT_¥ovokög_vîãx
 1

	)

7132 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

7133 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

7134 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

7135 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

7136 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

7137 #ifde‡
GL_GLEXT_PROTOTYPES


7138 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

7142 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


7143 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

7144 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

7147 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


7148 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

7149 
	#GL_COLOR_SUM_EXT
 0x8458

	)

7150 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

7151 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

7152 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

7153 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

7154 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

7155 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

7156 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

7157 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

7158 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

7159 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7160 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

7161 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7162 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

7163 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7164 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

7165 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7166 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

7167 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

7168 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

7169 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

7170 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

7171 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

7172 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7173 #ifde‡
GL_GLEXT_PROTOTYPES


7174 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

7175 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

7176 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

7177 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

7178 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

7179 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

7180 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

7181 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

7182 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

7183 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

7184 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

7185 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

7186 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

7187 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

7188 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

7189 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

7190 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7194 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


7195 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

7196 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

7197 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

7198 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7199 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

7200 #ifde‡
GL_GLEXT_PROTOTYPES


7201 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

7202 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

7203 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

7207 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


7208 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

7209 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

7210 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

7211 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

7214 #i‚de‡
GL_EXT_shadî_image_lﬂd_f‹m©ãd


7215 
	#GL_EXT_shadî_image_lﬂd_f‹m©ãd
 1

	)

7218 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


7219 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

7220 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

7221 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

7222 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

7223 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

7224 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

7225 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

7226 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

7227 
	#GL_IMAGE_1D_EXT
 0x904C

	)

7228 
	#GL_IMAGE_2D_EXT
 0x904D

	)

7229 
	#GL_IMAGE_3D_EXT
 0x904E

	)

7230 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

7231 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

7232 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

7233 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

7234 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

7235 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

7236 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

7237 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

7238 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

7239 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

7240 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

7241 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

7242 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

7243 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

7244 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

7245 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

7246 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

7247 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

7248 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

7249 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

7250 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

7251 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

7252 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

7253 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

7254 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

7255 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

7256 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

7257 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

7258 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

7259 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

7260 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

7261 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

7262 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

7263 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

7264 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

7265 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

7266 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

7267 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

7268 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

7269 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

7270 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

7271 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

7272 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

7273 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

7274 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

7275 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

7276 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

7277 #ifde‡
GL_GLEXT_PROTOTYPES


7278 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

7279 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

7283 #i‚de‡
GL_EXT_shadî_öãgî_mix


7284 
	#GL_EXT_shadî_öãgî_mix
 1

	)

7287 #i‚de‡
GL_EXT_shadow_funcs


7288 
	#GL_EXT_shadow_funcs
 1

	)

7291 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


7292 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

7293 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

7296 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7297 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7298 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

7299 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

7300 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7301 #ifde‡
GL_GLEXT_PROTOTYPES


7302 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

7306 #i‚de‡
GL_EXT_°ícû_two_side


7307 
	#GL_EXT_°ícû_two_side
 1

	)

7308 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

7309 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

7310 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7311 #ifde‡
GL_GLEXT_PROTOTYPES


7312 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

7316 #i‚de‡
GL_EXT_°ícû_wøp


7317 
	#GL_EXT_°ícû_wøp
 1

	)

7318 
	#GL_INCR_WRAP_EXT
 0x8507

	)

7319 
	#GL_DECR_WRAP_EXT
 0x8508

	)

7322 #i‚de‡
GL_EXT_subãxtuª


7323 
	#GL_EXT_subãxtuª
 1

	)

7324 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7325 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7326 #ifde‡
GL_GLEXT_PROTOTYPES


7327 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7328 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7332 #i‚de‡
GL_EXT_ãxtuª


7333 
	#GL_EXT_ãxtuª
 1

	)

7334 
	#GL_ALPHA4_EXT
 0x803B

	)

7335 
	#GL_ALPHA8_EXT
 0x803C

	)

7336 
	#GL_ALPHA12_EXT
 0x803D

	)

7337 
	#GL_ALPHA16_EXT
 0x803E

	)

7338 
	#GL_LUMINANCE4_EXT
 0x803F

	)

7339 
	#GL_LUMINANCE8_EXT
 0x8040

	)

7340 
	#GL_LUMINANCE12_EXT
 0x8041

	)

7341 
	#GL_LUMINANCE16_EXT
 0x8042

	)

7342 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

7343 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

7344 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

7345 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

7346 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

7347 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

7348 
	#GL_INTENSITY_EXT
 0x8049

	)

7349 
	#GL_INTENSITY4_EXT
 0x804A

	)

7350 
	#GL_INTENSITY8_EXT
 0x804B

	)

7351 
	#GL_INTENSITY12_EXT
 0x804C

	)

7352 
	#GL_INTENSITY16_EXT
 0x804D

	)

7353 
	#GL_RGB2_EXT
 0x804E

	)

7354 
	#GL_RGB4_EXT
 0x804F

	)

7355 
	#GL_RGB5_EXT
 0x8050

	)

7356 
	#GL_RGB8_EXT
 0x8051

	)

7357 
	#GL_RGB10_EXT
 0x8052

	)

7358 
	#GL_RGB12_EXT
 0x8053

	)

7359 
	#GL_RGB16_EXT
 0x8054

	)

7360 
	#GL_RGBA2_EXT
 0x8055

	)

7361 
	#GL_RGBA4_EXT
 0x8056

	)

7362 
	#GL_RGB5_A1_EXT
 0x8057

	)

7363 
	#GL_RGBA8_EXT
 0x8058

	)

7364 
	#GL_RGB10_A2_EXT
 0x8059

	)

7365 
	#GL_RGBA12_EXT
 0x805A

	)

7366 
	#GL_RGBA16_EXT
 0x805B

	)

7367 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

7368 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

7369 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

7370 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

7371 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

7372 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

7373 
	#GL_REPLACE_EXT
 0x8062

	)

7374 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

7375 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

7376 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

7379 #i‚de‡
GL_EXT_ãxtuª3D


7380 
	#GL_EXT_ãxtuª3D
 1

	)

7381 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

7382 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

7383 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

7384 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

7385 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

7386 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

7387 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

7388 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

7389 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

7390 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7391 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7392 #ifde‡
GL_GLEXT_PROTOTYPES


7393 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7394 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7398 #i‚de‡
GL_EXT_ãxtuª_¨øy


7399 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7400 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

7401 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

7402 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

7403 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

7404 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

7405 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

7406 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

7407 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

7410 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


7411 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

7412 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

7413 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

7414 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

7415 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

7416 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

7417 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7418 #ifde‡
GL_GLEXT_PROTOTYPES


7419 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7423 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


7424 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

7425 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

7426 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

7427 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

7428 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

7431 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


7432 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

7433 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

7434 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

7435 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

7436 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

7439 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


7440 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

7441 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

7442 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

7443 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

7444 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

7447 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


7448 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

7449 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

7450 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

7451 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

7452 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

7453 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

7454 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

7455 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

7456 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

7457 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

7458 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

7459 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

7460 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

7463 #i‚de‡
GL_EXT_ãxtuª_ív_add


7464 
	#GL_EXT_ãxtuª_ív_add
 1

	)

7467 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


7468 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

7469 
	#GL_COMBINE_EXT
 0x8570

	)

7470 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

7471 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

7472 
	#GL_RGB_SCALE_EXT
 0x8573

	)

7473 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

7474 
	#GL_INTERPOLATE_EXT
 0x8575

	)

7475 
	#GL_CONSTANT_EXT
 0x8576

	)

7476 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

7477 
	#GL_PREVIOUS_EXT
 0x8578

	)

7478 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

7479 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

7480 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

7481 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

7482 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

7483 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

7484 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

7485 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

7486 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

7487 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

7488 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

7489 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

7492 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


7493 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

7494 
	#GL_DOT3_RGB_EXT
 0x8740

	)

7495 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

7498 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


7499 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

7500 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

7501 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

7504 #i‚de‡
GL_EXT_ãxtuª_öãgî


7505 
	#GL_EXT_ãxtuª_öãgî
 1

	)

7506 
	#GL_RGBA32UI_EXT
 0x8D70

	)

7507 
	#GL_RGB32UI_EXT
 0x8D71

	)

7508 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

7509 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

7510 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

7511 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

7512 
	#GL_RGBA16UI_EXT
 0x8D76

	)

7513 
	#GL_RGB16UI_EXT
 0x8D77

	)

7514 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

7515 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

7516 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

7517 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

7518 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

7519 
	#GL_RGB8UI_EXT
 0x8D7D

	)

7520 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

7521 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

7522 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

7523 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

7524 
	#GL_RGBA32I_EXT
 0x8D82

	)

7525 
	#GL_RGB32I_EXT
 0x8D83

	)

7526 
	#GL_ALPHA32I_EXT
 0x8D84

	)

7527 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

7528 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

7529 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

7530 
	#GL_RGBA16I_EXT
 0x8D88

	)

7531 
	#GL_RGB16I_EXT
 0x8D89

	)

7532 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

7533 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

7534 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

7535 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

7536 
	#GL_RGBA8I_EXT
 0x8D8E

	)

7537 
	#GL_RGB8I_EXT
 0x8D8F

	)

7538 
	#GL_ALPHA8I_EXT
 0x8D90

	)

7539 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

7540 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

7541 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

7542 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

7543 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

7544 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

7545 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

7546 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

7547 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

7548 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

7549 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

7550 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

7551 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

7552 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

7553 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7554 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

7555 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7556 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

7557 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

7558 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

7559 #ifde‡
GL_GLEXT_PROTOTYPES


7560 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7561 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

7562 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7563 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

7564 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

7565 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

7569 #i‚de‡
GL_EXT_ãxtuª_lod_büs


7570 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

7571 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

7572 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

7573 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

7576 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


7577 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

7578 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

7579 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

7580 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

7583 #i‚de‡
GL_EXT_ãxtuª_obje˘


7584 
	#GL_EXT_ãxtuª_obje˘
 1

	)

7585 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

7586 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

7587 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

7588 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

7589 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

7590 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

7591 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

7592 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

7593 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

7594 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

7595 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

7596 #ifde‡
GL_GLEXT_PROTOTYPES


7597 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

7598 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

7599 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

7600 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

7601 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

7602 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

7606 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


7607 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

7608 
	#GL_PERTURB_EXT
 0x85AE

	)

7609 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

7610 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

7611 #ifde‡
GL_GLEXT_PROTOTYPES


7612 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

7616 #i‚de‡
GL_EXT_ãxtuª_sRGB


7617 
	#GL_EXT_ãxtuª_sRGB
 1

	)

7618 
	#GL_SRGB_EXT
 0x8C40

	)

7619 
	#GL_SRGB8_EXT
 0x8C41

	)

7620 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

7621 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

7622 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

7623 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

7624 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

7625 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

7626 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

7627 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

7628 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

7629 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

7630 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

7631 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

7632 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

7633 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

7636 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


7637 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

7638 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

7639 
	#GL_DECODE_EXT
 0x8A49

	)

7640 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

7643 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


7644 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

7645 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

7646 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

7647 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

7650 #i‚de‡
GL_EXT_ãxtuª_¢‹m


7651 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

7652 
	#GL_ALPHA_SNORM
 0x9010

	)

7653 
	#GL_LUMINANCE_SNORM
 0x9011

	)

7654 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

7655 
	#GL_INTENSITY_SNORM
 0x9013

	)

7656 
	#GL_ALPHA8_SNORM
 0x9014

	)

7657 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

7658 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

7659 
	#GL_INTENSITY8_SNORM
 0x9017

	)

7660 
	#GL_ALPHA16_SNORM
 0x9018

	)

7661 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

7662 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

7663 
	#GL_INTENSITY16_SNORM
 0x901B

	)

7664 
	#GL_RED_SNORM
 0x8F90

	)

7665 
	#GL_RG_SNORM
 0x8F91

	)

7666 
	#GL_RGB_SNORM
 0x8F92

	)

7667 
	#GL_RGBA_SNORM
 0x8F93

	)

7670 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


7671 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

7672 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

7673 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

7674 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

7675 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

7676 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

7679 #i‚de‡
GL_EXT_timî_quîy


7680 
	#GL_EXT_timî_quîy
 1

	)

7681 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

7682 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7683 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

7684 #ifde‡
GL_GLEXT_PROTOTYPES


7685 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7686 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

7690 #i‚de‡
GL_EXT_å™sf‹m_„edback


7691 
	#GL_EXT_å™sf‹m_„edback
 1

	)

7692 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

7693 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

7694 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

7695 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

7696 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

7697 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

7698 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

7699 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

7700 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

7701 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

7702 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

7703 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

7704 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

7705 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

7706 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

7707 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

7708 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

7709 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

7710 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

7711 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

7712 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

7713 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

7714 #ifde‡
GL_GLEXT_PROTOTYPES


7715 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

7716 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

7717 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

7718 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

7719 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

7720 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

7721 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

7725 #i‚de‡
GL_EXT_vîãx_¨øy


7726 
	#GL_EXT_vîãx_¨øy
 1

	)

7727 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

7728 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

7729 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

7730 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

7731 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

7732 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

7733 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

7734 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

7735 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

7736 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

7737 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

7738 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

7739 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

7740 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

7741 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

7742 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

7743 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

7744 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

7745 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

7746 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

7747 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

7748 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

7749 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

7750 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

7751 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

7752 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

7753 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

7754 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

7755 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

7756 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

7757 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

7758 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

7759 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

7760 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7761 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

7762 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

7763 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

7764 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7765 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7766 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7767 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7768 #ifde‡
GL_GLEXT_PROTOTYPES


7769 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

7770 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7771 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

7772 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

7773 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, **
∑øms
);

7774 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7775 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7776 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7777 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7781 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


7782 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

7785 #i‚de‡
GL_EXT_vîãx_©åib_64bô


7786 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

7787 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

7788 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

7789 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

7790 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

7791 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

7792 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

7793 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

7794 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

7795 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

7796 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

7797 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

7798 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

7799 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7800 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7801 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7802 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7803 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7804 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7805 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7806 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7807 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7808 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7809 #ifde‡
GL_GLEXT_PROTOTYPES


7810 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

7811 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7812 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7813 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7814 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7815 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7816 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7817 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7818 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7819 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

7823 #i‚de‡
GL_EXT_vîãx_shadî


7824 
	#GL_EXT_vîãx_shadî
 1

	)

7825 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

7826 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

7827 
	#GL_OP_INDEX_EXT
 0x8782

	)

7828 
	#GL_OP_NEGATE_EXT
 0x8783

	)

7829 
	#GL_OP_DOT3_EXT
 0x8784

	)

7830 
	#GL_OP_DOT4_EXT
 0x8785

	)

7831 
	#GL_OP_MUL_EXT
 0x8786

	)

7832 
	#GL_OP_ADD_EXT
 0x8787

	)

7833 
	#GL_OP_MADD_EXT
 0x8788

	)

7834 
	#GL_OP_FRAC_EXT
 0x8789

	)

7835 
	#GL_OP_MAX_EXT
 0x878A

	)

7836 
	#GL_OP_MIN_EXT
 0x878B

	)

7837 
	#GL_OP_SET_GE_EXT
 0x878C

	)

7838 
	#GL_OP_SET_LT_EXT
 0x878D

	)

7839 
	#GL_OP_CLAMP_EXT
 0x878E

	)

7840 
	#GL_OP_FLOOR_EXT
 0x878F

	)

7841 
	#GL_OP_ROUND_EXT
 0x8790

	)

7842 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

7843 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

7844 
	#GL_OP_POWER_EXT
 0x8793

	)

7845 
	#GL_OP_RECIP_EXT
 0x8794

	)

7846 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

7847 
	#GL_OP_SUB_EXT
 0x8796

	)

7848 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

7849 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

7850 
	#GL_OP_MOV_EXT
 0x8799

	)

7851 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

7852 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

7853 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

7854 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

7855 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

7856 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

7857 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

7858 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

7859 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

7860 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

7861 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

7862 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

7863 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

7864 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

7865 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

7866 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

7867 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

7868 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

7869 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

7870 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

7871 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

7872 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

7873 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

7874 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

7875 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

7876 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

7877 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

7878 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

7879 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

7880 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

7881 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

7882 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

7883 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

7884 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

7885 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

7886 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

7887 
	#GL_SCALAR_EXT
 0x87BE

	)

7888 
	#GL_VECTOR_EXT
 0x87BF

	)

7889 
	#GL_MATRIX_EXT
 0x87C0

	)

7890 
	#GL_VARIANT_EXT
 0x87C1

	)

7891 
	#GL_INVARIANT_EXT
 0x87C2

	)

7892 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

7893 
	#GL_LOCAL_EXT
 0x87C4

	)

7894 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

7895 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

7896 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

7897 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

7898 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

7899 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

7900 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

7901 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

7902 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

7903 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

7904 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

7905 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

7906 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

7907 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

7908 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

7909 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

7910 
	#GL_X_EXT
 0x87D5

	)

7911 
	#GL_Y_EXT
 0x87D6

	)

7912 
	#GL_Z_EXT
 0x87D7

	)

7913 
	#GL_W_EXT
 0x87D8

	)

7914 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

7915 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

7916 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

7917 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

7918 
	#GL_ZERO_EXT
 0x87DD

	)

7919 
	#GL_ONE_EXT
 0x87DE

	)

7920 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

7921 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

7922 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

7923 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

7924 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

7925 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

7926 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

7927 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

7928 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

7929 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

7930 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

7931 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

7932 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

7933 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

7934 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

7935 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

7936 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

7937 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

7938 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

7939 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

7940 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

7941 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

7942 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

7943 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

7944 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

7945 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

7946 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

7947 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

7948 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

7949 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

7950 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

7951 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

7952 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

7953 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

7954 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

7955 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

7956 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

7957 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

7958 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° *
	taddr
);

7959 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

7960 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

7961 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

7962 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

7963 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

7964 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

7965 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

7966 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

7967 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7968 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7969 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7970 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, **
	td©a
);

7971 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7972 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7973 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7974 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7975 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7976 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7977 #ifde‡
GL_GLEXT_PROTOTYPES


7978 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

7979 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

7980 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

7981 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

7982 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

7983 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

7984 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

7985 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

7986 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

7987 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

7988 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

7989 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

7990 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

7991 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

7992 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

7993 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

7994 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

7995 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

7996 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

7997 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

7998 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

7999 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

8000 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

8001 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° *
addr
);

8002 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8003 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

8004 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

8005 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

8006 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

8007 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

8008 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

8009 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

8010 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8011 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8012 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8013 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, **
d©a
);

8014 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8015 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8016 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8017 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

8018 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

8019 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

8023 #i‚de‡
GL_EXT_vîãx_weightög


8024 
	#GL_EXT_vîãx_weightög
 1

	)

8025 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

8026 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

8027 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

8028 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

8029 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

8030 
	#GL_MODELVIEW0_EXT
 0x1700

	)

8031 
	#GL_MODELVIEW1_EXT
 0x850A

	)

8032 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

8033 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

8034 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

8035 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

8036 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

8037 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

8038 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

8039 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

8040 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

8041 #ifde‡
GL_GLEXT_PROTOTYPES


8042 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

8043 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

8044 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

8048 #i‚de‡
GL_EXT_x11_sync_obje˘


8049 
	#GL_EXT_x11_sync_obje˘
 1

	)

8050 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

8051 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

8052 #ifde‡
GL_GLEXT_PROTOTYPES


8053 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

8057 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


8058 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

8059 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

8060 #ifde‡
GL_GLEXT_PROTOTYPES


8061 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

8065 #i‚de‡
GL_GREMEDY_°rög_m¨kî


8066 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

8067 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

8068 #ifde‡
GL_GLEXT_PROTOTYPES


8069 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° *
°rög
);

8073 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


8074 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

8075 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

8076 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

8077 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

8078 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

8081 #i‚de‡
GL_HP_image_å™sf‹m


8082 
	#GL_HP_image_å™sf‹m
 1

	)

8083 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

8084 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

8085 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

8086 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

8087 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

8088 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

8089 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

8090 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

8091 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

8092 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

8093 
	#GL_CUBIC_HP
 0x815F

	)

8094 
	#GL_AVERAGE_HP
 0x8160

	)

8095 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

8096 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

8097 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

8098 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8099 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8100 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8101 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8102 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8103 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8104 #ifde‡
GL_GLEXT_PROTOTYPES


8105 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

8106 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

8107 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8108 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8109 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8110 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8114 #i‚de‡
GL_HP_oc˛usi⁄_ã°


8115 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

8116 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

8117 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

8120 #i‚de‡
GL_HP_ãxtuª_lightög


8121 
	#GL_HP_ãxtuª_lightög
 1

	)

8122 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

8123 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

8124 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

8127 #i‚de‡
GL_IBM_cuŒ_vîãx


8128 
	#GL_IBM_cuŒ_vîãx
 1

	)

8129 
	#GL_CULL_VERTEX_IBM
 103050

	)

8132 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


8133 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

8134 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

8135 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

8136 #ifde‡
GL_GLEXT_PROTOTYPES


8137 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

8138 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

8142 #i‚de‡
GL_IBM_ø°îpos_˛ù


8143 
	#GL_IBM_ø°îpos_˛ù
 1

	)

8144 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

8147 #i‚de‡
GL_IBM_°©ic_d©a


8148 
	#GL_IBM_°©ic_d©a
 1

	)

8149 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

8150 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

8151 (
APIENTRYP
 
	tPFNGLFLUSHSTATICDATAIBMPROC
Ë(
	tGLíum
 
	tèrgë
);

8152 #ifde‡
GL_GLEXT_PROTOTYPES


8153 
GLAPI
 
APIENTRY
 
glFlushSèticD©aIBM
 (
GLíum
 
èrgë
);

8157 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


8158 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

8159 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

8162 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


8163 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

8164 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

8165 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

8166 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

8167 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

8168 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

8169 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

8170 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

8171 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

8172 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

8173 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

8174 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

8175 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

8176 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

8177 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

8178 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

8179 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

8180 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8181 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8182 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 **
	tpoöãr
, GLöà
	t±r°ride
);

8183 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8184 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8185 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8186 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8187 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8188 #ifde‡
GL_GLEXT_PROTOTYPES


8189 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8190 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8191 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
 **
poöãr
, GLöà
±r°ride
);

8192 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8193 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8194 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8195 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8196 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8200 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


8201 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

8202 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8203 #ifde‡
GL_GLEXT_PROTOTYPES


8204 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

8208 #i‚de‡
GL_INGR_cﬁ‹_˛amp


8209 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

8210 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

8211 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

8212 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

8213 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

8214 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

8215 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

8216 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

8217 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

8220 #i‚de‡
GL_INGR_öãæa˚_ªad


8221 
	#GL_INGR_öãæa˚_ªad
 1

	)

8222 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

8225 #i‚de‡
GL_INTEL_‰agmít_shadî_‹dîög


8226 
	#GL_INTEL_‰agmít_shadî_‹dîög
 1

	)

8229 #i‚de‡
GL_INTEL_m≠_ãxtuª


8230 
	#GL_INTEL_m≠_ãxtuª
 1

	)

8231 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

8232 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

8233 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

8234 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

8235 (
APIENTRYP
 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8236 (
APIENTRYP
 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8237 *(
	tAPIENTRYP
 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöà*
	t°ride
, 
	tGLíum
 *
	tœyout
);

8238 #ifde‡
GL_GLEXT_PROTOTYPES


8239 
GLAPI
 
APIENTRY
 
glSyncTextuªINTEL
 (
GLuöt
 
ãxtuª
);

8240 
GLAPI
 
APIENTRY
 
glUnm≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8241 
GLAPI
 *
APIENTRY
 
glM≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLbôfõld
 
ac˚ss
, GLöà*
°ride
, 
GLíum
 *
œyout
);

8245 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


8246 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

8247 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

8248 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

8249 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

8250 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

8251 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

8252 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8253 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8254 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8255 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8256 #ifde‡
GL_GLEXT_PROTOTYPES


8257 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8258 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° **
poöãr
);

8259 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8260 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8264 #i‚de‡
GL_INTEL_≥rf‹m™˚_quîy


8265 
	#GL_INTEL_≥rf‹m™˚_quîy
 1

	)

8266 
	#GL_PERFQUERY_SINGLE_CONTEXT_INTEL
 0x00000000

	)

8267 
	#GL_PERFQUERY_GLOBAL_CONTEXT_INTEL
 0x00000001

	)

8268 
	#GL_PERFQUERY_WAIT_INTEL
 0x83FB

	)

8269 
	#GL_PERFQUERY_FLUSH_INTEL
 0x83FA

	)

8270 
	#GL_PERFQUERY_DONOT_FLUSH_INTEL
 0x83F9

	)

8271 
	#GL_PERFQUERY_COUNTER_EVENT_INTEL
 0x94F0

	)

8272 
	#GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL
 0x94F1

	)

8273 
	#GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL
 0x94F2

	)

8274 
	#GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL
 0x94F3

	)

8275 
	#GL_PERFQUERY_COUNTER_RAW_INTEL
 0x94F4

	)

8276 
	#GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL
 0x94F5

	)

8277 
	#GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL
 0x94F8

	)

8278 
	#GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL
 0x94F9

	)

8279 
	#GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL
 0x94FA

	)

8280 
	#GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL
 0x94FB

	)

8281 
	#GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL
 0x94FC

	)

8282 
	#GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL
 0x94FD

	)

8283 
	#GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL
 0x94FE

	)

8284 
	#GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL
 0x94FF

	)

8285 
	#GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL
 0x9500

	)

8286 (
APIENTRYP
 
	tPFNGLBEGINPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8287 (
APIENTRYP
 
	tPFNGLCREATEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	tquîyH™dÀ
);

8288 (
APIENTRYP
 
	tPFNGLDELETEPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8289 (
APIENTRYP
 
	tPFNGLENDPERFQUERYINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
);

8290 (
APIENTRYP
 
	tPFNGLGETFIRSTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 *
	tquîyId
);

8291 (
APIENTRYP
 
	tPFNGLGETNEXTPERFQUERYIDINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà*
	t√xtQuîyId
);

8292 (
APIENTRYP
 
	tPFNGLGETPERFCOUNTERINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tcou¡îId
, GLuöà
	tcou¡îNameLígth
, 
	tGLch¨
 *
	tcou¡îName
, GLuöà
	tcou¡îDescLígth
, GLch¨ *
	tcou¡îDesc
, GLuöà*
	tcou¡îOff£t
, GLuöà*
	tcou¡îD©aSize
, GLuöà*
	tcou¡îTy≥Enum
, GLuöà*
	tcou¡îD©aTy≥Enum
, 
	tGLuöt64
 *
	tøwCou¡îMaxVÆue
);

8293 (
APIENTRYP
 
	tPFNGLGETPERFQUERYDATAINTELPROC
Ë(
	tGLuöt
 
	tquîyH™dÀ
, GLuöà
	tÊags
, 
	tGLsizei
 
	td©aSize
, 
	tGLvoid
 *
	td©a
, GLuöà*
	tbyãsWrôãn
);

8294 (
APIENTRYP
 
	tPFNGLGETPERFQUERYIDBYNAMEINTELPROC
Ë(
	tGLch¨
 *
	tquîyName
, 
	tGLuöt
 *
	tquîyId
);

8295 (
APIENTRYP
 
	tPFNGLGETPERFQUERYINFOINTELPROC
Ë(
	tGLuöt
 
	tquîyId
, GLuöà
	tquîyNameLígth
, 
	tGLch¨
 *
	tquîyName
, GLuöà*
	td©aSize
, GLuöà*
	tnoCou¡îs
, GLuöà*
	tnoIn°™˚s
, GLuöà*
	tˇpsMask
);

8296 #ifde‡
GL_GLEXT_PROTOTYPES


8297 
GLAPI
 
APIENTRY
 
glBegöPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8298 
GLAPI
 
APIENTRY
 
glCª©ePîfQuîyINTEL
 (
GLuöt
 
quîyId
, GLuöà*
quîyH™dÀ
);

8299 
GLAPI
 
APIENTRY
 
glDñëePîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8300 
GLAPI
 
APIENTRY
 
glEndPîfQuîyINTEL
 (
GLuöt
 
quîyH™dÀ
);

8301 
GLAPI
 
APIENTRY
 
glGëFú°PîfQuîyIdINTEL
 (
GLuöt
 *
quîyId
);

8302 
GLAPI
 
APIENTRY
 
glGëNextPîfQuîyIdINTEL
 (
GLuöt
 
quîyId
, GLuöà*
√xtQuîyId
);

8303 
GLAPI
 
APIENTRY
 
glGëPîfCou¡îInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
cou¡îId
, GLuöà
cou¡îNameLígth
, 
GLch¨
 *
cou¡îName
, GLuöà
cou¡îDescLígth
, GLch¨ *
cou¡îDesc
, GLuöà*
cou¡îOff£t
, GLuöà*
cou¡îD©aSize
, GLuöà*
cou¡îTy≥Enum
, GLuöà*
cou¡îD©aTy≥Enum
, 
GLuöt64
 *
øwCou¡îMaxVÆue
);

8304 
GLAPI
 
APIENTRY
 
glGëPîfQuîyD©aINTEL
 (
GLuöt
 
quîyH™dÀ
, GLuöà
Êags
, 
GLsizei
 
d©aSize
, 
GLvoid
 *
d©a
, GLuöà*
byãsWrôãn
);

8305 
GLAPI
 
APIENTRY
 
glGëPîfQuîyIdByNameINTEL
 (
GLch¨
 *
quîyName
, 
GLuöt
 *
quîyId
);

8306 
GLAPI
 
APIENTRY
 
glGëPîfQuîyInfoINTEL
 (
GLuöt
 
quîyId
, GLuöà
quîyNameLígth
, 
GLch¨
 *
quîyName
, GLuöà*
d©aSize
, GLuöà*
noCou¡îs
, GLuöà*
noIn°™˚s
, GLuöà*
ˇpsMask
);

8310 #i‚de‡
GL_MESAX_ãxtuª_°ack


8311 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8312 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

8313 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

8314 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

8315 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

8316 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

8317 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

8320 #i‚de‡
GL_MESA_∑ck_övît


8321 
	#GL_MESA_∑ck_övît
 1

	)

8322 
	#GL_PACK_INVERT_MESA
 0x8758

	)

8325 #i‚de‡
GL_MESA_ªsize_buf„rs


8326 
	#GL_MESA_ªsize_buf„rs
 1

	)

8327 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

8328 #ifde‡
GL_GLEXT_PROTOTYPES


8329 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

8333 #i‚de‡
GL_MESA_wödow_pos


8334 
	#GL_MESA_wödow_pos
 1

	)

8335 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8336 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8337 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

8338 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8339 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

8340 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8341 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

8342 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8343 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8344 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8345 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8346 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8347 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8348 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8349 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

8350 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8351 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8352 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8353 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8354 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8355 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8356 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8357 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

8358 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8359 #ifde‡
GL_GLEXT_PROTOTYPES


8360 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8361 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8362 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

8363 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8364 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

8365 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

8366 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

8367 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8368 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8369 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8370 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

8371 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8372 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

8373 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

8374 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

8375 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8376 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8377 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8378 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

8379 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8380 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8381 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

8382 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

8383 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8387 #i‚de‡
GL_MESA_ycb¸_ãxtuª


8388 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

8389 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

8390 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

8391 
	#GL_YCBCR_MESA
 0x8757

	)

8394 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


8395 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

8396 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

8397 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

8398 #ifde‡
GL_GLEXT_PROTOTYPES


8399 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNVX
 (
GLuöt
 
id
);

8400 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNVX
 ();

8404 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


8405 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

8406 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

8407 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

8408 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

8409 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

8410 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

8413 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


8414 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

8415 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

8416 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

8417 #ifde‡
GL_GLEXT_PROTOTYPES


8418 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssNV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

8419 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssNV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

8423 #i‚de‡
GL_NV_bödÀss_ãxtuª


8424 
	#GL_NV_bödÀss_ãxtuª
 1

	)

8425 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8426 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

8427 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8428 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8429 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

8430 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

8431 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8432 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

8433 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

8434 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

8435 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

8436 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8437 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8438 #ifde‡
GL_GLEXT_PROTOTYPES


8439 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

8440 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

8441 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

8442 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

8443 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

8444 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

8445 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

8446 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

8447 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

8448 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

8449 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

8450 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

8451 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

8455 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


8456 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

8457 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

8458 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

8459 
	#GL_BLUE_NV
 0x1905

	)

8460 
	#GL_COLORBURN_NV
 0x929A

	)

8461 
	#GL_COLORDODGE_NV
 0x9299

	)

8462 
	#GL_CONJOINT_NV
 0x9284

	)

8463 
	#GL_CONTRAST_NV
 0x92A1

	)

8464 
	#GL_DARKEN_NV
 0x9297

	)

8465 
	#GL_DIFFERENCE_NV
 0x929E

	)

8466 
	#GL_DISJOINT_NV
 0x9283

	)

8467 
	#GL_DST_ATOP_NV
 0x928F

	)

8468 
	#GL_DST_IN_NV
 0x928B

	)

8469 
	#GL_DST_NV
 0x9287

	)

8470 
	#GL_DST_OUT_NV
 0x928D

	)

8471 
	#GL_DST_OVER_NV
 0x9289

	)

8472 
	#GL_EXCLUSION_NV
 0x92A0

	)

8473 
	#GL_GREEN_NV
 0x1904

	)

8474 
	#GL_HARDLIGHT_NV
 0x929B

	)

8475 
	#GL_HARDMIX_NV
 0x92A9

	)

8476 
	#GL_HSL_COLOR_NV
 0x92AF

	)

8477 
	#GL_HSL_HUE_NV
 0x92AD

	)

8478 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

8479 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

8480 
	#GL_INVERT_OVG_NV
 0x92B4

	)

8481 
	#GL_INVERT_RGB_NV
 0x92A3

	)

8482 
	#GL_LIGHTEN_NV
 0x9298

	)

8483 
	#GL_LINEARBURN_NV
 0x92A5

	)

8484 
	#GL_LINEARDODGE_NV
 0x92A4

	)

8485 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

8486 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

8487 
	#GL_MINUS_NV
 0x929F

	)

8488 
	#GL_MULTIPLY_NV
 0x9294

	)

8489 
	#GL_OVERLAY_NV
 0x9296

	)

8490 
	#GL_PINLIGHT_NV
 0x92A8

	)

8491 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

8492 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

8493 
	#GL_PLUS_DARKER_NV
 0x9292

	)

8494 
	#GL_PLUS_NV
 0x9291

	)

8495 
	#GL_RED_NV
 0x1903

	)

8496 
	#GL_SCREEN_NV
 0x9295

	)

8497 
	#GL_SOFTLIGHT_NV
 0x929C

	)

8498 
	#GL_SRC_ATOP_NV
 0x928E

	)

8499 
	#GL_SRC_IN_NV
 0x928A

	)

8500 
	#GL_SRC_NV
 0x9286

	)

8501 
	#GL_SRC_OUT_NV
 0x928C

	)

8502 
	#GL_SRC_OVER_NV
 0x9288

	)

8503 
	#GL_UNCORRELATED_NV
 0x9282

	)

8504 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

8505 
	#GL_XOR_NV
 0x1506

	)

8506 (
APIENTRYP
 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8507 (
APIENTRYP
 
	tPFNGLBLENDBARRIERNVPROC
) ();

8508 #ifde‡
GL_GLEXT_PROTOTYPES


8509 
GLAPI
 
APIENTRY
 
glBÀndP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8510 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrNV
 ();

8514 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


8515 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

8516 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

8519 #i‚de‡
GL_NV_bÀnd_squ¨e


8520 
	#GL_NV_bÀnd_squ¨e
 1

	)

8523 #i‚de‡
GL_NV_compuã_¥ogøm5


8524 
	#GL_NV_compuã_¥ogøm5
 1

	)

8525 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

8526 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

8529 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


8530 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

8531 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

8532 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

8533 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

8534 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

8535 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

8536 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

8537 #ifde‡
GL_GLEXT_PROTOTYPES


8538 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

8539 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

8543 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


8544 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

8545 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

8546 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

8549 #i‚de‡
GL_NV_c›y_image


8550 
	#GL_NV_c›y_image
 1

	)

8551 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8552 #ifde‡
GL_GLEXT_PROTOTYPES


8553 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

8557 #i‚de‡
GL_NV_dìp_ãxtuª3D


8558 
	#GL_NV_dìp_ãxtuª3D
 1

	)

8559 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

8560 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

8563 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


8564 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

8565 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

8566 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

8567 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

8568 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

8569 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

8570 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

8571 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

8572 #ifde‡
GL_GLEXT_PROTOTYPES


8573 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

8574 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

8575 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

8579 #i‚de‡
GL_NV_dïth_˛amp


8580 
	#GL_NV_dïth_˛amp
 1

	)

8581 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

8584 #i‚de‡
GL_NV_døw_ãxtuª


8585 
	#GL_NV_døw_ãxtuª
 1

	)

8586 (
APIENTRYP
 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

8587 #ifde‡
GL_GLEXT_PROTOTYPES


8588 
GLAPI
 
APIENTRY
 
glDøwTextuªNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
, 
GLÊﬂt
 
x0
, GLÊﬂà
y0
, GLÊﬂà
x1
, GLÊﬂà
y1
, GLÊﬂà
z
, GLÊﬂà
s0
, GLÊﬂà
t0
, GLÊﬂà
s1
, GLÊﬂà
t1
);

8592 #i‚de‡
GL_NV_evÆu©‹s


8593 
	#GL_NV_evÆu©‹s
 1

	)

8594 
	#GL_EVAL_2D_NV
 0x86C0

	)

8595 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

8596 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

8597 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

8598 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

8599 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

8600 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

8601 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

8602 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

8603 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

8604 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

8605 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

8606 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

8607 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

8608 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

8609 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

8610 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

8611 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

8612 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

8613 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

8614 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

8615 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

8616 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

8617 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

8618 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° *
	tpoöts
);

8619 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8620 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8621 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, *
	tpoöts
);

8622 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8623 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8624 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8625 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8626 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

8627 #ifde‡
GL_GLEXT_PROTOTYPES


8628 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° *
poöts
);

8629 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8630 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8631 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, *
poöts
);

8632 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8633 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8634 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8635 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8636 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

8640 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


8641 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

8642 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

8643 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

8644 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

8645 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

8646 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

8647 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

8648 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

8649 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

8650 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

8651 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

8652 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

8653 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

8654 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

8655 #ifde‡
GL_GLEXT_PROTOTYPES


8656 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

8657 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

8658 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

8662 #i‚de‡
GL_NV_„n˚


8663 
	#GL_NV_„n˚
 1

	)

8664 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

8665 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

8666 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

8667 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

8668 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

8669 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

8670 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

8671 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8672 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

8673 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

8674 #ifde‡
GL_GLEXT_PROTOTYPES


8675 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

8676 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

8677 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

8678 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

8679 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8680 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

8681 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

8685 #i‚de‡
GL_NV_Êﬂt_buf„r


8686 
	#GL_NV_Êﬂt_buf„r
 1

	)

8687 
	#GL_FLOAT_R_NV
 0x8880

	)

8688 
	#GL_FLOAT_RG_NV
 0x8881

	)

8689 
	#GL_FLOAT_RGB_NV
 0x8882

	)

8690 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

8691 
	#GL_FLOAT_R16_NV
 0x8884

	)

8692 
	#GL_FLOAT_R32_NV
 0x8885

	)

8693 
	#GL_FLOAT_RG16_NV
 0x8886

	)

8694 
	#GL_FLOAT_RG32_NV
 0x8887

	)

8695 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

8696 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

8697 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

8698 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

8699 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

8700 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

8701 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

8704 #i‚de‡
GL_NV_fog_di°™˚


8705 
	#GL_NV_fog_di°™˚
 1

	)

8706 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

8707 
	#GL_EYE_RADIAL_NV
 0x855B

	)

8708 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

8711 #i‚de‡
GL_NV_‰agmít_¥ogøm


8712 
	#GL_NV_‰agmít_¥ogøm
 1

	)

8713 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

8714 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

8715 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

8716 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

8717 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

8718 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

8719 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8720 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8721 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8722 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8723 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

8724 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

8725 #ifde‡
GL_GLEXT_PROTOTYPES


8726 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

8727 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

8728 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8729 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

8730 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

8731 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

8735 #i‚de‡
GL_NV_‰agmít_¥ogøm2


8736 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

8737 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

8738 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

8739 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

8740 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

8741 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

8744 #i‚de‡
GL_NV_‰agmít_¥ogøm4


8745 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

8748 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


8749 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

8752 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


8753 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

8754 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

8755 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

8756 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

8757 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

8758 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8759 #ifde‡
GL_GLEXT_PROTOTYPES


8760 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8764 #i‚de‡
GL_NV_geomëry_¥ogøm4


8765 
	#GL_NV_geomëry_¥ogøm4
 1

	)

8766 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

8767 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

8768 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

8769 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

8770 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8771 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8772 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

8773 #ifde‡
GL_GLEXT_PROTOTYPES


8774 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

8775 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8776 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

8777 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

8781 #i‚de‡
GL_NV_geomëry_shadî4


8782 
	#GL_NV_geomëry_shadî4
 1

	)

8785 #i‚de‡
GL_NV_gpu_¥ogøm4


8786 
	#GL_NV_gpu_¥ogøm4
 1

	)

8787 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

8788 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

8789 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

8790 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

8791 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

8792 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

8793 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

8794 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

8795 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8796 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

8797 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8798 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8799 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

8800 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8801 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8802 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

8803 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8804 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8805 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

8806 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8807 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

8808 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

8809 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

8810 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

8811 #ifde‡
GL_GLEXT_PROTOTYPES


8812 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8813 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

8814 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

8815 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

8816 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

8817 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

8818 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8819 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

8820 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

8821 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

8822 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

8823 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

8824 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

8825 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

8826 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

8827 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

8831 #i‚de‡
GL_NV_gpu_¥ogøm5


8832 
	#GL_NV_gpu_¥ogøm5
 1

	)

8833 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

8834 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

8835 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

8836 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

8837 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

8838 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

8839 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

8840 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

8841 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8842 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

8843 #ifde‡
GL_GLEXT_PROTOTYPES


8844 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

8845 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

8849 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


8850 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

8853 #i‚de‡
GL_NV_gpu_shadî5


8854 
	#GL_NV_gpu_shadî5
 1

	)

8857 #i‚de‡
GL_NV_hÆf_Êﬂt


8858 
	#GL_NV_hÆf_Êﬂt
 1

	)

8859 
	tGLhÆfNV
;

8860 
	#GL_HALF_FLOAT_NV
 0x140B

	)

8861 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

8862 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8863 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

8864 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8865 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

8866 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8867 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

8868 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8869 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

8870 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8871 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

8872 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8873 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

8874 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8875 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

8876 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8877 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

8878 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8879 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

8880 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8881 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

8882 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8883 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

8884 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8885 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

8886 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8887 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

8888 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8889 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

8890 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

8891 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

8892 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8893 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

8894 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

8895 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

8896 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8897 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

8898 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8899 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

8900 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8901 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

8902 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8903 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8904 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8905 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8906 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8907 #ifde‡
GL_GLEXT_PROTOTYPES


8908 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

8909 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8910 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

8911 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8912 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

8913 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8914 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

8915 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8916 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

8917 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8918 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

8919 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8920 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

8921 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8922 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

8923 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8924 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

8925 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8926 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

8927 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8928 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

8929 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8930 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

8931 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8932 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

8933 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8934 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

8935 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8936 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

8937 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

8938 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

8939 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8940 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

8941 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

8942 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

8943 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8944 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

8945 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8946 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

8947 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8948 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

8949 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8950 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8951 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8952 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8953 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8957 #i‚de‡
GL_NV_light_max_exp⁄ít


8958 
	#GL_NV_light_max_exp⁄ít
 1

	)

8959 
	#GL_MAX_SHININESS_NV
 0x8504

	)

8960 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

8963 #i‚de‡
GL_NV_mu…ißm∂e_covîage


8964 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

8965 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

8968 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


8969 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

8970 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

8973 #i‚de‡
GL_NV_oc˛usi⁄_quîy


8974 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

8975 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

8976 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

8977 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

8978 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

8979 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

8980 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

8981 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

8982 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

8983 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

8984 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8985 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

8986 #ifde‡
GL_GLEXT_PROTOTYPES


8987 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

8988 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

8989 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

8990 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

8991 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

8992 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8993 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

8997 #i‚de‡
GL_NV_∑cked_dïth_°ícû


8998 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

8999 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

9000 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

9003 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


9004 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

9005 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

9006 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

9007 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

9008 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

9009 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

9010 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9011 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

9012 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

9013 #ifde‡
GL_GLEXT_PROTOTYPES


9014 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

9015 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

9016 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

9020 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


9021 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

9024 #i‚de‡
GL_NV_∑th_ªndîög


9025 
	#GL_NV_∑th_ªndîög
 1

	)

9026 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

9027 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

9028 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

9029 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

9030 
	#GL_FILE_NAME_NV
 0x9074

	)

9031 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

9032 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

9033 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

9034 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

9035 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

9036 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

9037 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

9038 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

9039 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

9040 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

9041 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

9042 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

9043 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

9044 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

9045 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

9046 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

9047 
	#GL_COUNT_UP_NV
 0x9088

	)

9048 
	#GL_COUNT_DOWN_NV
 0x9089

	)

9049 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

9050 
	#GL_CONVEX_HULL_NV
 0x908B

	)

9051 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

9052 
	#GL_TRANSLATE_X_NV
 0x908E

	)

9053 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

9054 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

9055 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

9056 
	#GL_AFFINE_2D_NV
 0x9092

	)

9057 
	#GL_AFFINE_3D_NV
 0x9094

	)

9058 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

9059 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

9060 
	#GL_UTF8_NV
 0x909A

	)

9061 
	#GL_UTF16_NV
 0x909B

	)

9062 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

9063 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

9064 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

9065 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

9066 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

9067 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

9068 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

9069 
	#GL_SQUARE_NV
 0x90A3

	)

9070 
	#GL_ROUND_NV
 0x90A4

	)

9071 
	#GL_TRIANGULAR_NV
 0x90A5

	)

9072 
	#GL_BEVEL_NV
 0x90A6

	)

9073 
	#GL_MITER_REVERT_NV
 0x90A7

	)

9074 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

9075 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

9076 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

9077 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

9078 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

9079 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

9080 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

9081 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

9082 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

9083 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

9084 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

9085 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

9086 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

9087 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

9088 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

9089 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

9090 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

9091 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

9092 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

9093 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

9094 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

9095 
	#GL_CLOSE_PATH_NV
 0x00

	)

9096 
	#GL_MOVE_TO_NV
 0x02

	)

9097 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

9098 
	#GL_LINE_TO_NV
 0x04

	)

9099 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

9100 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

9101 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

9102 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

9103 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

9104 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

9105 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

9106 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

9107 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

9108 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

9109 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

9110 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

9111 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

9112 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

9113 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

9114 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

9115 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

9116 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

9117 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

9118 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

9119 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

9120 
	#GL_RESTART_PATH_NV
 0xF0

	)

9121 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

9122 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

9123 
	#GL_RECT_NV
 0xF6

	)

9124 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

9125 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

9126 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

9127 
	#GL_ARC_TO_NV
 0xFE

	)

9128 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

9129 
	#GL_BOLD_BIT_NV
 0x01

	)

9130 
	#GL_ITALIC_BIT_NV
 0x02

	)

9131 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

9132 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

9133 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

9134 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

9135 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

9136 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

9137 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

9138 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

9139 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

9140 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

9141 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

9142 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

9143 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

9144 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

9145 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

9146 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

9147 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

9148 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

9149 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

9150 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

9151 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

9152 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

9153 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

9154 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

9155 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

9156 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

9157 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

9158 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9159 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9160 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9161 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9162 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	t∑thSåög
);

9163 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9164 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9165 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

9166 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

9167 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

9168 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9169 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

9170 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9171 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9172 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9173 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

9174 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

9175 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

9176 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

9177 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

9178 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9179 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9180 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

9181 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9182 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9183 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

9184 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

9185 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

9186 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9187 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9188 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9189 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9190 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

9191 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

9192 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

9193 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

9194 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

9195 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

9196 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9197 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9198 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9199 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9200 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9201 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9202 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

9203 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

9204 #ifde‡
GL_GLEXT_PROTOTYPES


9205 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

9206 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

9207 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

9208 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9209 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9210 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9211 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9212 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° *
∑thSåög
);

9213 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

9214 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

9215 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

9216 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

9217 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

9218 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9219 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

9220 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

9221 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

9222 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

9223 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

9224 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

9225 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

9226 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

9227 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

9228 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9229 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9230 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

9231 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

9232 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

9233 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

9234 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

9235 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

9236 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9237 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9238 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

9239 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

9240 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

9241 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

9242 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

9243 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

9244 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

9245 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

9246 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

9247 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

9248 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

9249 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

9250 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9251 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9252 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

9253 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

9257 #i‚de‡
GL_NV_pixñ_d©a_ønge


9258 
	#GL_NV_pixñ_d©a_ønge
 1

	)

9259 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

9260 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

9261 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

9262 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

9263 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

9264 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

9265 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

9266 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

9267 #ifde‡
GL_GLEXT_PROTOTYPES


9268 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

9269 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

9273 #i‚de‡
GL_NV_poöt_•rôe


9274 
	#GL_NV_poöt_•rôe
 1

	)

9275 
	#GL_POINT_SPRITE_NV
 0x8861

	)

9276 
	#GL_COORD_REPLACE_NV
 0x8862

	)

9277 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

9278 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9279 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9280 #ifde‡
GL_GLEXT_PROTOTYPES


9281 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9282 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9286 #i‚de‡
GL_NV_¥e£¡_video


9287 
	#GL_NV_¥e£¡_video
 1

	)

9288 
	#GL_FRAME_NV
 0x8E26

	)

9289 
	#GL_FIELDS_NV
 0x8E27

	)

9290 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

9291 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

9292 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

9293 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

9294 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

9295 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

9296 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9297 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9298 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

9299 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9300 #ifde‡
GL_GLEXT_PROTOTYPES


9301 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

9302 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

9303 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9304 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

9305 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

9306 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9310 #i‚de‡
GL_NV_¥imôive_ª°¨t


9311 
	#GL_NV_¥imôive_ª°¨t
 1

	)

9312 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

9313 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

9314 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

9315 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

9316 #ifde‡
GL_GLEXT_PROTOTYPES


9317 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

9318 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

9322 #i‚de‡
GL_NV_ªgi°î_comböîs


9323 
	#GL_NV_ªgi°î_comböîs
 1

	)

9324 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

9325 
	#GL_VARIABLE_A_NV
 0x8523

	)

9326 
	#GL_VARIABLE_B_NV
 0x8524

	)

9327 
	#GL_VARIABLE_C_NV
 0x8525

	)

9328 
	#GL_VARIABLE_D_NV
 0x8526

	)

9329 
	#GL_VARIABLE_E_NV
 0x8527

	)

9330 
	#GL_VARIABLE_F_NV
 0x8528

	)

9331 
	#GL_VARIABLE_G_NV
 0x8529

	)

9332 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

9333 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

9334 
	#GL_SPARE0_NV
 0x852E

	)

9335 
	#GL_SPARE1_NV
 0x852F

	)

9336 
	#GL_DISCARD_NV
 0x8530

	)

9337 
	#GL_E_TIMES_F_NV
 0x8531

	)

9338 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

9339 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

9340 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

9341 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

9342 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

9343 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

9344 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

9345 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

9346 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

9347 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

9348 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

9349 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

9350 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

9351 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

9352 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

9353 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

9354 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

9355 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

9356 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

9357 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

9358 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

9359 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

9360 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

9361 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

9362 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

9363 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

9364 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

9365 
	#GL_COMBINER0_NV
 0x8550

	)

9366 
	#GL_COMBINER1_NV
 0x8551

	)

9367 
	#GL_COMBINER2_NV
 0x8552

	)

9368 
	#GL_COMBINER3_NV
 0x8553

	)

9369 
	#GL_COMBINER4_NV
 0x8554

	)

9370 
	#GL_COMBINER5_NV
 0x8555

	)

9371 
	#GL_COMBINER6_NV
 0x8556

	)

9372 
	#GL_COMBINER7_NV
 0x8557

	)

9373 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9374 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9375 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9376 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9377 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9378 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

9379 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9380 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9381 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9382 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9383 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9384 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9385 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9386 #ifde‡
GL_GLEXT_PROTOTYPES


9387 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9388 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9389 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9390 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9391 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9392 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

9393 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9394 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9395 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9396 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9397 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9398 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9399 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9403 #i‚de‡
GL_NV_ªgi°î_comböîs2


9404 
	#GL_NV_ªgi°î_comböîs2
 1

	)

9405 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

9406 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9407 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9408 #ifde‡
GL_GLEXT_PROTOTYPES


9409 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9410 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9414 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


9415 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

9418 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


9419 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

9422 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


9423 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

9424 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

9425 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

9426 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

9427 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

9428 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

9429 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

9430 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

9431 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9432 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9433 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9434 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9435 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

9436 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

9437 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

9438 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

9439 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

9440 #ifde‡
GL_GLEXT_PROTOTYPES


9441 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

9442 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

9443 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

9444 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

9445 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

9446 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

9447 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9448 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9449 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

9450 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

9451 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

9452 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

9453 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

9457 #i‚de‡
GL_NV_shadî_buf„r_°‹e


9458 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

9459 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

9462 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


9463 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

9466 #i‚de‡
GL_NV_shadî_thªad_group


9467 
	#GL_NV_shadî_thªad_group
 1

	)

9468 
	#GL_WARP_SIZE_NV
 0x9339

	)

9469 
	#GL_WARPS_PER_SM_NV
 0x933A

	)

9470 
	#GL_SM_COUNT_NV
 0x933B

	)

9473 #i‚de‡
GL_NV_shadî_thªad_shufÊe


9474 
	#GL_NV_shadî_thªad_shufÊe
 1

	)

9477 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


9478 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

9479 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

9480 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

9481 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

9482 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

9483 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

9486 #i‚de‡
GL_NV_ãxgí_emboss


9487 
	#GL_NV_ãxgí_emboss
 1

	)

9488 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

9489 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

9490 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

9493 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


9494 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

9495 
	#GL_NORMAL_MAP_NV
 0x8511

	)

9496 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

9499 #i‚de‡
GL_NV_ãxtuª_b¨rõr


9500 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

9501 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

9502 #ifde‡
GL_GLEXT_PROTOTYPES


9503 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

9507 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


9508 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

9511 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


9512 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

9513 
	#GL_COMBINE4_NV
 0x8503

	)

9514 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

9515 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

9516 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

9517 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

9520 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


9521 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

9522 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

9525 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


9526 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

9527 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

9528 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

9529 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9530 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9531 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9532 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9533 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9534 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9535 #ifde‡
GL_GLEXT_PROTOTYPES


9536 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9537 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9538 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9539 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9540 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9541 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9545 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


9546 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

9547 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

9548 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

9549 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

9550 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

9553 #i‚de‡
GL_NV_ãxtuª_shadî


9554 
	#GL_NV_ãxtuª_shadî
 1

	)

9555 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

9556 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

9557 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

9558 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

9559 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

9560 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

9561 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

9562 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

9563 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

9564 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

9565 
	#GL_CULL_MODES_NV
 0x86E0

	)

9566 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

9567 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

9568 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

9569 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

9570 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

9571 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

9572 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

9573 
	#GL_CONST_EYE_NV
 0x86E5

	)

9574 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

9575 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

9576 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

9577 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

9578 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

9579 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

9580 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

9581 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

9582 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

9583 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

9584 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

9585 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

9586 
	#GL_HILO_NV
 0x86F4

	)

9587 
	#GL_DSDT_NV
 0x86F5

	)

9588 
	#GL_DSDT_MAG_NV
 0x86F6

	)

9589 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

9590 
	#GL_HILO16_NV
 0x86F8

	)

9591 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

9592 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

9593 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

9594 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

9595 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

9596 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

9597 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

9598 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

9599 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

9600 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

9601 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

9602 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

9603 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

9604 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

9605 
	#GL_DSDT8_NV
 0x8709

	)

9606 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

9607 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

9608 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

9609 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

9610 
	#GL_HI_SCALE_NV
 0x870E

	)

9611 
	#GL_LO_SCALE_NV
 0x870F

	)

9612 
	#GL_DS_SCALE_NV
 0x8710

	)

9613 
	#GL_DT_SCALE_NV
 0x8711

	)

9614 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

9615 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

9616 
	#GL_HI_BIAS_NV
 0x8714

	)

9617 
	#GL_LO_BIAS_NV
 0x8715

	)

9618 
	#GL_DS_BIAS_NV
 0x8716

	)

9619 
	#GL_DT_BIAS_NV
 0x8717

	)

9620 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

9621 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

9622 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

9623 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

9624 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

9625 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

9626 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

9627 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

9630 #i‚de‡
GL_NV_ãxtuª_shadî2


9631 
	#GL_NV_ãxtuª_shadî2
 1

	)

9632 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

9635 #i‚de‡
GL_NV_ãxtuª_shadî3


9636 
	#GL_NV_ãxtuª_shadî3
 1

	)

9637 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

9638 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

9639 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

9640 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

9641 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

9642 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

9643 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

9644 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

9645 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

9646 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

9647 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

9648 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

9649 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

9650 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

9651 
	#GL_HILO8_NV
 0x885E

	)

9652 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

9653 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

9656 #i‚de‡
GL_NV_å™sf‹m_„edback


9657 
	#GL_NV_å™sf‹m_„edback
 1

	)

9658 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

9659 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

9660 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

9661 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

9662 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

9663 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

9664 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

9665 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

9666 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

9667 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

9668 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

9669 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

9670 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

9671 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

9672 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

9673 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

9674 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

9675 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

9676 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

9677 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

9678 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

9679 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

9680 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

9681 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

9682 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

9683 
	#GL_LAYER_NV
 0x8DAA

	)

9684 
	#GL_NEXT_BUFFER_NV
 -2

	)

9685 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

9686 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

9687 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

9688 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

9689 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

9690 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

9691 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

9692 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

9693 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

9694 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

9695 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

9696 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

9697 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

9698 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

9699 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

9700 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

9701 #ifde‡
GL_GLEXT_PROTOTYPES


9702 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

9703 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

9704 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

9705 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

9706 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

9707 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

9708 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

9709 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

9710 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

9711 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

9712 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

9713 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

9717 #i‚de‡
GL_NV_å™sf‹m_„edback2


9718 
	#GL_NV_å™sf‹m_„edback2
 1

	)

9719 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

9720 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

9721 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

9722 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

9723 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

9724 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9725 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9726 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

9727 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

9728 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

9729 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

9730 #ifde‡
GL_GLEXT_PROTOTYPES


9731 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

9732 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

9733 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

9734 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

9735 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

9736 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

9737 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

9741 #i‚de‡
GL_NV_vd∑u_öãr›


9742 
	#GL_NV_vd∑u_öãr›
 1

	)

9743 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

9744 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

9745 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

9746 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

9747 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

9748 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° *
	tvdpDevi˚
, c⁄° *
	tgëProcAddªss
);

9749 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

9750 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

9751 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

9752 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

9753 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

9754 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

9755 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

9756 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

9757 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

9758 #ifde‡
GL_GLEXT_PROTOTYPES


9759 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° *
vdpDevi˚
, c⁄° *
gëProcAddªss
);

9760 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

9761 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

9762 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

9763 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

9764 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

9765 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

9766 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

9767 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

9768 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

9772 #i‚de‡
GL_NV_vîãx_¨øy_ønge


9773 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

9774 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

9775 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

9776 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

9777 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

9778 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

9779 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

9780 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

9781 #ifde‡
GL_GLEXT_PROTOTYPES


9782 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

9783 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° *
poöãr
);

9787 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


9788 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

9789 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

9792 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


9793 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

9794 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

9795 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

9796 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

9797 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

9798 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9799 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9800 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9801 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9802 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

9803 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

9804 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

9805 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

9806 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9807 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9808 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9809 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9810 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

9811 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9812 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9813 #ifde‡
GL_GLEXT_PROTOTYPES


9814 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

9815 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

9816 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

9817 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

9818 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9819 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9820 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9821 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9822 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

9823 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

9824 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

9825 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

9826 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9827 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9828 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9829 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9830 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

9831 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9832 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9836 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


9837 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

9838 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

9839 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

9840 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

9841 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

9842 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

9843 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

9844 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

9845 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

9846 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

9847 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

9848 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

9849 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

9850 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

9851 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

9852 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

9853 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

9854 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

9855 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

9856 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

9857 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

9858 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

9859 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

9860 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

9861 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

9862 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

9863 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

9864 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9865 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9866 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9867 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9868 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9869 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

9870 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9871 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9872 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

9873 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9874 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

9875 #ifde‡
GL_GLEXT_PROTOTYPES


9876 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

9877 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9878 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9879 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9880 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9881 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9882 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

9883 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9884 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9885 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

9886 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9887 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

9891 #i‚de‡
GL_NV_vîãx_¥ogøm


9892 
	#GL_NV_vîãx_¥ogøm
 1

	)

9893 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

9894 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

9895 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

9896 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

9897 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

9898 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

9899 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

9900 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

9901 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

9902 
	#GL_IDENTITY_NV
 0x862A

	)

9903 
	#GL_INVERSE_NV
 0x862B

	)

9904 
	#GL_TRANSPOSE_NV
 0x862C

	)

9905 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

9906 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

9907 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

9908 
	#GL_MATRIX0_NV
 0x8630

	)

9909 
	#GL_MATRIX1_NV
 0x8631

	)

9910 
	#GL_MATRIX2_NV
 0x8632

	)

9911 
	#GL_MATRIX3_NV
 0x8633

	)

9912 
	#GL_MATRIX4_NV
 0x8634

	)

9913 
	#GL_MATRIX5_NV
 0x8635

	)

9914 
	#GL_MATRIX6_NV
 0x8636

	)

9915 
	#GL_MATRIX7_NV
 0x8637

	)

9916 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

9917 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

9918 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

9919 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

9920 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

9921 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

9922 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

9923 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

9924 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

9925 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

9926 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

9927 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

9928 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

9929 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

9930 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

9931 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

9932 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

9933 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

9934 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

9935 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

9936 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

9937 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

9938 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

9939 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

9940 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

9941 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

9942 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

9943 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

9944 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

9945 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

9946 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

9947 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

9948 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

9949 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

9950 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

9951 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

9952 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

9953 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

9954 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

9955 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

9956 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

9957 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

9958 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

9959 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

9960 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

9961 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

9962 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

9963 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

9964 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

9965 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

9966 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

9967 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

9968 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

9969 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

9970 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

9971 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

9972 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

9973 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

9974 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

9975 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

9976 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

9977 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

9978 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

9979 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9980 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

9981 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9982 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9983 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9984 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

9985 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9986 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9987 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9988 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9989 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

9990 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

9991 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

9992 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9993 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9994 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9995 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9996 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9997 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9998 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

9999 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

10000 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10001 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10002 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10003 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

10004 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10005 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

10006 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10007 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10008 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10009 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10010 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10011 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

10012 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10013 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10014 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10015 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10016 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10017 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

10018 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10019 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10020 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10021 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10022 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10023 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

10024 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10025 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

10026 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10027 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10028 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10029 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10030 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10031 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10032 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10033 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10034 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10035 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10036 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

10037 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10038 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

10039 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

10040 #ifde‡
GL_GLEXT_PROTOTYPES


10041 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

10042 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

10043 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10044 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

10045 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

10046 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10047 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10048 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10049 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

10050 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10051 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10052 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10053 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10054 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

10055 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

10056 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

10057 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10058 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10059 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10060 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10061 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10062 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10063 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

10064 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

10065 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10066 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

10067 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10068 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

10069 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10070 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

10071 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10072 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

10073 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10074 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

10075 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10076 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

10077 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10078 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

10079 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10080 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

10081 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10082 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

10083 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10084 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

10085 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

10086 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

10087 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

10088 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

10089 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10090 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

10091 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10092 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10093 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10094 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10095 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10096 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10097 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10098 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10099 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10100 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10101 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10102 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10103 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10104 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

10108 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


10109 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

10112 #i‚de‡
GL_NV_vîãx_¥ogøm2


10113 
	#GL_NV_vîãx_¥ogøm2
 1

	)

10116 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


10117 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

10120 #i‚de‡
GL_NV_vîãx_¥ogøm3


10121 
	#GL_NV_vîãx_¥ogøm3
 1

	)

10124 #i‚de‡
GL_NV_vîãx_¥ogøm4


10125 
	#GL_NV_vîãx_¥ogøm4
 1

	)

10126 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

10127 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

10128 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

10129 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10130 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10131 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

10132 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

10133 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

10134 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

10135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10136 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10137 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10142 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10143 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

10144 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10145 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10146 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

10147 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10148 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10149 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10150 #ifde‡
GL_GLEXT_PROTOTYPES


10151 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

10152 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

10153 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

10154 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

10155 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

10156 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

10157 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

10158 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

10159 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10160 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10161 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10162 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10163 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10164 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10165 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10166 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10167 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

10168 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10169 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10170 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

10171 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10172 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10173 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10177 #i‚de‡
GL_NV_video_ˇ±uª


10178 
	#GL_NV_video_ˇ±uª
 1

	)

10179 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

10180 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

10181 
	#GL_FIELD_UPPER_NV
 0x9022

	)

10182 
	#GL_FIELD_LOWER_NV
 0x9023

	)

10183 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

10184 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

10185 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

10186 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

10187 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

10188 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

10189 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

10190 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

10191 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

10192 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

10193 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

10194 
	#GL_SUCCESS_NV
 0x902F

	)

10195 
	#GL_FAILURE_NV
 0x9030

	)

10196 
	#GL_YCBYCR8_422_NV
 0x9031

	)

10197 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

10198 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

10199 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

10200 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

10201 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

10202 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

10203 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

10204 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

10205 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

10206 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

10207 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

10208 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

10209 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

10210 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

10211 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

10212 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10213 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10214 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10215 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10216 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

10217 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10218 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10219 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

10220 #ifde‡
GL_GLEXT_PROTOTYPES


10221 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

10222 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

10223 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

10224 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

10225 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10226 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10227 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10228 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10229 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

10230 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10231 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10232 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

10236 #i‚de‡
GL_OML_öãæa˚


10237 
	#GL_OML_öãæa˚
 1

	)

10238 
	#GL_INTERLACE_OML
 0x8980

	)

10239 
	#GL_INTERLACE_READ_OML
 0x8981

	)

10242 #i‚de‡
GL_OML_ªßm∂e


10243 
	#GL_OML_ªßm∂e
 1

	)

10244 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

10245 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

10246 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

10247 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

10248 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

10249 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

10252 #i‚de‡
GL_OML_subßm∂e


10253 
	#GL_OML_subßm∂e
 1

	)

10254 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

10255 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

10258 #i‚de‡
GL_PGI_misc_höts


10259 
	#GL_PGI_misc_höts
 1

	)

10260 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

10261 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

10262 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

10263 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

10264 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

10265 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

10266 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

10267 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

10268 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

10269 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

10270 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

10271 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

10272 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

10273 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

10274 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

10275 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

10276 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

10277 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

10278 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

10279 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

10280 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

10281 #ifde‡
GL_GLEXT_PROTOTYPES


10282 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

10286 #i‚de‡
GL_PGI_vîãx_höts


10287 
	#GL_PGI_vîãx_höts
 1

	)

10288 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

10289 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

10290 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

10291 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

10292 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

10293 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

10294 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

10295 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

10296 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

10297 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

10298 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

10299 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

10300 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

10301 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

10302 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

10303 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

10304 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

10305 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

10306 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

10307 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

10308 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

10309 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

10312 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


10313 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

10314 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

10315 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

10318 #i‚de‡
GL_S3_s3tc


10319 
	#GL_S3_s3tc
 1

	)

10320 
	#GL_RGB_S3TC
 0x83A0

	)

10321 
	#GL_RGB4_S3TC
 0x83A1

	)

10322 
	#GL_RGBA_S3TC
 0x83A2

	)

10323 
	#GL_RGBA4_S3TC
 0x83A3

	)

10324 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

10325 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

10328 #i‚de‡
GL_SGIS_dëaû_ãxtuª


10329 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

10330 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

10331 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

10332 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

10333 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

10334 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

10335 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

10336 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

10337 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

10338 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

10339 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

10340 #ifde‡
GL_GLEXT_PROTOTYPES


10341 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

10342 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

10346 #i‚de‡
GL_SGIS_fog_fun˘i⁄


10347 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

10348 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

10349 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

10350 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

10351 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

10352 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

10353 #ifde‡
GL_GLEXT_PROTOTYPES


10354 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

10355 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

10359 #i‚de‡
GL_SGIS_gíî©e_mùm≠


10360 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

10361 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

10362 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

10365 #i‚de‡
GL_SGIS_mu…ißm∂e


10366 
	#GL_SGIS_mu…ißm∂e
 1

	)

10367 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

10368 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

10369 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

10370 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

10371 
	#GL_1PASS_SGIS
 0x80A1

	)

10372 
	#GL_2PASS_0_SGIS
 0x80A2

	)

10373 
	#GL_2PASS_1_SGIS
 0x80A3

	)

10374 
	#GL_4PASS_0_SGIS
 0x80A4

	)

10375 
	#GL_4PASS_1_SGIS
 0x80A5

	)

10376 
	#GL_4PASS_2_SGIS
 0x80A6

	)

10377 
	#GL_4PASS_3_SGIS
 0x80A7

	)

10378 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

10379 
	#GL_SAMPLES_SGIS
 0x80A9

	)

10380 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

10381 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

10382 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

10383 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

10384 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

10385 #ifde‡
GL_GLEXT_PROTOTYPES


10386 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

10387 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

10391 #i‚de‡
GL_SGIS_pixñ_ãxtuª


10392 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

10393 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

10394 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

10395 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

10396 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

10397 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10398 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10399 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10400 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10401 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10402 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10403 #ifde‡
GL_GLEXT_PROTOTYPES


10404 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10405 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10406 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10407 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10408 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10409 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10413 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


10414 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

10415 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

10416 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

10417 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

10418 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

10419 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

10420 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

10421 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

10422 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

10425 #i‚de‡
GL_SGIS_poöt_∑ømëîs


10426 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

10427 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

10428 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

10429 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

10430 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

10431 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10432 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10433 #ifde‡
GL_GLEXT_PROTOTYPES


10434 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10435 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10439 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


10440 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

10441 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

10442 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

10443 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

10444 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

10445 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

10446 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

10447 #ifde‡
GL_GLEXT_PROTOTYPES


10448 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

10449 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

10453 #i‚de‡
GL_SGIS_ãxtuª4D


10454 
	#GL_SGIS_ãxtuª4D
 1

	)

10455 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

10456 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

10457 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

10458 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

10459 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

10460 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

10461 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

10462 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

10463 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

10464 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

10465 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

10466 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

10467 #ifde‡
GL_GLEXT_PROTOTYPES


10468 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

10469 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

10473 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


10474 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

10475 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

10478 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


10479 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

10480 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

10481 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

10482 #ifde‡
GL_GLEXT_PROTOTYPES


10483 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

10487 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


10488 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

10489 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

10492 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


10493 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

10494 
	#GL_FILTER4_SGIS
 0x8146

	)

10495 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

10496 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

10497 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

10498 #ifde‡
GL_GLEXT_PROTOTYPES


10499 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

10500 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

10504 #i‚de‡
GL_SGIS_ãxtuª_lod


10505 
	#GL_SGIS_ãxtuª_lod
 1

	)

10506 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

10507 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

10508 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

10509 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

10512 #i‚de‡
GL_SGIS_ãxtuª_£À˘


10513 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

10514 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

10515 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

10516 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

10517 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

10518 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

10519 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

10520 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

10521 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

10522 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

10523 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

10524 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

10525 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

10526 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

10527 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

10528 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

10529 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

10530 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

10531 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

10532 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

10533 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

10534 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

10535 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

10538 #i‚de‡
GL_SGIX_async


10539 
	#GL_SGIX_async
 1

	)

10540 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

10541 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

10542 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

10543 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

10544 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

10545 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

10546 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

10547 #ifde‡
GL_GLEXT_PROTOTYPES


10548 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

10549 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

10550 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

10551 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

10552 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

10553 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

10557 #i‚de‡
GL_SGIX_async_hi°ogøm


10558 
	#GL_SGIX_async_hi°ogøm
 1

	)

10559 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

10560 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

10563 #i‚de‡
GL_SGIX_async_pixñ


10564 
	#GL_SGIX_async_pixñ
 1

	)

10565 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

10566 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

10567 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

10568 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

10569 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

10570 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

10573 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


10574 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

10575 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

10576 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

10579 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


10580 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

10581 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

10584 #i‚de‡
GL_SGIX_˛ùm≠


10585 
	#GL_SGIX_˛ùm≠
 1

	)

10586 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

10587 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

10588 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

10589 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

10590 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

10591 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

10592 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

10593 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

10594 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

10595 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

10596 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

10597 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

10600 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


10601 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

10602 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

10605 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


10606 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

10609 #i‚de‡
GL_SGIX_dïth_ãxtuª


10610 
	#GL_SGIX_dïth_ãxtuª
 1

	)

10611 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

10612 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

10613 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

10616 #i‚de‡
GL_SGIX_Êush_ø°î


10617 
	#GL_SGIX_Êush_ø°î
 1

	)

10618 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

10619 #ifde‡
GL_GLEXT_PROTOTYPES


10620 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

10624 #i‚de‡
GL_SGIX_fog_off£t


10625 
	#GL_SGIX_fog_off£t
 1

	)

10626 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

10627 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

10630 #i‚de‡
GL_SGIX_‰agmít_lightög


10631 
	#GL_SGIX_‰agmít_lightög
 1

	)

10632 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

10633 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

10634 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

10635 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

10636 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

10637 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

10638 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

10639 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

10640 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

10641 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

10642 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

10643 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

10644 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

10645 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

10646 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

10647 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

10648 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

10649 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

10650 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

10651 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

10652 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

10653 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10654 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10655 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10656 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10657 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10658 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10659 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10660 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10661 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10662 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10663 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10664 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10665 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10666 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10667 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10668 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10669 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10670 #ifde‡
GL_GLEXT_PROTOTYPES


10671 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

10672 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

10673 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10674 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

10675 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10676 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10677 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10678 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10679 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10680 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

10681 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10682 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

10683 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10684 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10685 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10686 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10687 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10688 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10692 #i‚de‡
GL_SGIX_‰amezoom


10693 
	#GL_SGIX_‰amezoom
 1

	)

10694 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

10695 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

10696 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

10697 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

10698 #ifde‡
GL_GLEXT_PROTOTYPES


10699 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

10703 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


10704 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

10705 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° *
	t∑øms
);

10706 #ifde‡
GL_GLEXT_PROTOTYPES


10707 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° *
∑øms
);

10711 #i‚de‡
GL_SGIX_ö°rumíts


10712 
	#GL_SGIX_ö°rumíts
 1

	)

10713 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

10714 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

10715 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

10716 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

10717 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

10718 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

10719 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

10720 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

10721 #ifde‡
GL_GLEXT_PROTOTYPES


10722 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

10723 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

10724 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

10725 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

10726 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

10727 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

10731 #i‚de‡
GL_SGIX_öãæa˚


10732 
	#GL_SGIX_öãæa˚
 1

	)

10733 
	#GL_INTERLACE_SGIX
 0x8094

	)

10736 #i‚de‡
GL_SGIX_ú_ö°rumít1


10737 
	#GL_SGIX_ú_ö°rumít1
 1

	)

10738 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

10741 #i‚de‡
GL_SGIX_li°_¥i‹ôy


10742 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

10743 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

10744 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10745 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10746 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10747 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10748 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10749 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10750 #ifde‡
GL_GLEXT_PROTOTYPES


10751 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10752 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10753 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10754 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10755 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10756 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10760 #i‚de‡
GL_SGIX_pixñ_ãxtuª


10761 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

10762 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

10763 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

10764 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

10765 #ifde‡
GL_GLEXT_PROTOTYPES


10766 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

10770 #i‚de‡
GL_SGIX_pixñ_tûes


10771 
	#GL_SGIX_pixñ_tûes
 1

	)

10772 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

10773 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

10774 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

10775 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

10776 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

10777 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

10778 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

10779 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

10782 #i‚de‡
GL_SGIX_pﬁynomül_ffd


10783 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

10784 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

10785 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

10786 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

10787 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

10788 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

10789 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

10790 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

10791 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

10792 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

10793 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

10794 #ifde‡
GL_GLEXT_PROTOTYPES


10795 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

10796 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

10797 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

10798 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

10802 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


10803 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

10804 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

10805 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

10806 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

10807 #ifde‡
GL_GLEXT_PROTOTYPES


10808 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

10812 #i‚de‡
GL_SGIX_ªßm∂e


10813 
	#GL_SGIX_ªßm∂e
 1

	)

10814 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

10815 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

10816 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

10817 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

10818 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

10821 #i‚de‡
GL_SGIX_sˇÀbüs_höt


10822 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

10823 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

10826 #i‚de‡
GL_SGIX_shadow


10827 
	#GL_SGIX_shadow
 1

	)

10828 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

10829 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

10830 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

10831 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

10834 #i‚de‡
GL_SGIX_shadow_ambõ¡


10835 
	#GL_SGIX_shadow_ambõ¡
 1

	)

10836 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

10839 #i‚de‡
GL_SGIX_•rôe


10840 
	#GL_SGIX_•rôe
 1

	)

10841 
	#GL_SPRITE_SGIX
 0x8148

	)

10842 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

10843 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

10844 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

10845 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

10846 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

10847 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

10848 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10849 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10850 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10851 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10852 #ifde‡
GL_GLEXT_PROTOTYPES


10853 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10854 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10855 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10856 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10860 #i‚de‡
GL_SGIX_subßm∂e


10861 
	#GL_SGIX_subßm∂e
 1

	)

10862 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

10863 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

10864 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

10865 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

10866 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

10869 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


10870 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

10871 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

10872 #ifde‡
GL_GLEXT_PROTOTYPES


10873 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

10877 #i‚de‡
GL_SGIX_ãxtuª_add_ív


10878 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

10879 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

10882 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


10883 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

10884 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

10885 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

10886 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

10889 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


10890 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

10891 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

10892 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

10893 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

10896 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


10897 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

10898 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

10901 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


10902 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

10903 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

10904 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

10905 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

10906 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

10909 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


10910 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

10911 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

10912 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

10915 #i‚de‡
GL_SGIX_y¸cb


10916 
	#GL_SGIX_y¸cb
 1

	)

10917 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

10918 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

10921 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


10922 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

10925 #i‚de‡
GL_SGIX_y¸cba


10926 
	#GL_SGIX_y¸cba
 1

	)

10927 
	#GL_YCRCB_SGIX
 0x8318

	)

10928 
	#GL_YCRCBA_SGIX
 0x8319

	)

10931 #i‚de‡
GL_SGI_cﬁ‹_m©rix


10932 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

10933 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

10934 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

10935 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

10936 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

10937 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

10938 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

10939 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

10940 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

10941 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

10942 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

10943 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

10946 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


10947 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

10948 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

10949 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

10950 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

10951 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

10952 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

10953 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

10954 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

10955 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

10956 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

10957 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

10958 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

10959 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

10960 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

10961 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

10962 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

10963 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

10964 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

10965 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10966 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10967 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

10968 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

10969 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10970 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10971 #ifde‡
GL_GLEXT_PROTOTYPES


10972 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

10973 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10974 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10975 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

10976 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

10977 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10978 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10982 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


10983 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

10984 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

10985 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

10988 #i‚de‡
GL_SUNX_c⁄°™t_d©a


10989 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

10990 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

10991 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

10992 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

10993 #ifde‡
GL_GLEXT_PROTOTYPES


10994 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

10998 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


10999 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

11000 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

11003 #i‚de‡
GL_SUN_globÆ_Æpha


11004 
	#GL_SUN_globÆ_Æpha
 1

	)

11005 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

11006 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

11007 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

11008 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

11009 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

11010 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

11011 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

11012 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

11013 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

11014 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

11015 #ifde‡
GL_GLEXT_PROTOTYPES


11016 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

11017 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

11018 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

11019 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

11020 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

11021 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

11022 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

11023 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

11027 #i‚de‡
GL_SUN_mesh_¨øy


11028 
	#GL_SUN_mesh_¨øy
 1

	)

11029 
	#GL_QUAD_MESH_SUN
 0x8614

	)

11030 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

11031 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

11032 #ifde‡
GL_GLEXT_PROTOTYPES


11033 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

11037 #i‚de‡
GL_SUN_¶i˚_accum


11038 
	#GL_SUN_¶i˚_accum
 1

	)

11039 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

11042 #i‚de‡
GL_SUN_åüngÀ_li°


11043 
	#GL_SUN_åüngÀ_li°
 1

	)

11044 
	#GL_RESTART_SUN
 0x0001

	)

11045 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

11046 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

11047 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

11048 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

11049 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

11050 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

11051 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

11052 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

11053 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

11054 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

11055 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

11056 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

11057 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

11058 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

11059 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

11060 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

11061 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

11062 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

11063 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

11064 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

11065 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

11066 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

11067 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° **
	tpoöãr
);

11068 #ifde‡
GL_GLEXT_PROTOTYPES


11069 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

11070 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

11071 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

11072 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

11073 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

11074 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

11075 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° **
poöãr
);

11079 #i‚de‡
GL_SUN_vîãx


11080 
	#GL_SUN_vîãx
 1

	)

11081 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

11082 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11083 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11084 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11085 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11086 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11087 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11088 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

11089 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11090 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11091 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11092 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11093 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11094 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11095 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11096 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11097 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11098 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

11099 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11100 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11101 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11102 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11103 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11104 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11105 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11106 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11107 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11108 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11109 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11110 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11111 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11112 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

11113 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11114 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11115 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11116 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11117 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11118 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11119 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11120 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11121 #ifde‡
GL_GLEXT_PROTOTYPES


11122 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

11123 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11124 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11125 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11126 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11127 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

11128 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11129 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

11130 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11131 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11132 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11133 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

11134 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11135 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

11136 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11137 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

11138 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11139 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

11140 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11141 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11142 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11143 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11144 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11145 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11146 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11147 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

11148 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11149 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11150 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11151 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

11152 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11153 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

11154 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11155 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11156 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11157 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

11158 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11159 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11160 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11161 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11165 #i‚de‡
GL_WIN_ph⁄g_shadög


11166 
	#GL_WIN_ph⁄g_shadög
 1

	)

11167 
	#GL_PHONG_WIN
 0x80EA

	)

11168 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

11171 #i‚de‡
GL_WIN_•ecuœr_fog


11172 
	#GL_WIN_•ecuœr_fog
 1

	)

11173 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

11176 #ifde‡
__˝lu•lus


	@SDL2/include/SDL_opengles.h

27 
	~"SDL_c⁄fig.h
"

29 #ifde‡
__IPHONEOS__


30 
	~<O≥nGLES/ES1/gl.h
>

31 
	~<O≥nGLES/ES1/gÀxt.h
>

33 
	~<GLES/gl.h
>

34 
	~<GLES/gÀxt.h
>

37 #i‚de‡
APIENTRY


38 
	#APIENTRY


	)

	@SDL2/include/SDL_opengles2.h

27 
	~"SDL_c⁄fig.h
"

29 #i‚de‡
_MSC_VER


31 #ifde‡
__IPHONEOS__


32 
	~<O≥nGLES/ES2/gl.h
>

33 
	~<O≥nGLES/ES2/gÀxt.h
>

35 
	~<GLES2/gl2∂©f‹m.h
>

36 
	~<GLES2/gl2.h
>

37 
	~<GLES2/gl2ext.h
>

43 
	~"SDL_›ígÀs2_khΩœtf‹m.h
"

44 
	~"SDL_›ígÀs2_gl2∂©f‹m.h
"

45 
	~"SDL_›ígÀs2_gl2.h
"

46 
	~"SDL_›ígÀs2_gl2ext.h
"

50 #i‚de‡
APIENTRY


51 
	#APIENTRY
 
GL_APIENTRY


	)

	@SDL2/include/SDL_opengles2_gl2.h

1 #i‚de‡
__gl2_h_


2 
	#__gl2_h_


	)

8 #ifde‡
__˝lu•lus


21 
	tGLvoid
;

22 
	tGLch¨
;

23 
	tGLíum
;

24 
	tGLboﬁón
;

25 
	tGLbôfõld
;

26 
khr⁄os_öt8_t
 
	tGLbyã
;

27 
	tGLsh‹t
;

28 
	tGLöt
;

29 
	tGLsizei
;

30 
khr⁄os_uöt8_t
 
	tGLubyã
;

31 
	tGLush‹t
;

32 
	tGLuöt
;

33 
khr⁄os_Êﬂt_t
 
	tGLÊﬂt
;

34 
khr⁄os_Êﬂt_t
 
	tGL˛ampf
;

35 
khr⁄os_öt32_t
 
	tGLfixed
;

38 
khr⁄os_öçå_t
 
	tGLöçå
;

39 
khr⁄os_ssize_t
 
	tGLsizeùå
;

42 
	#GL_ES_VERSION_2_0
 1

	)

45 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

46 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

47 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

50 
	#GL_FALSE
 0

	)

51 
	#GL_TRUE
 1

	)

54 
	#GL_POINTS
 0x0000

	)

55 
	#GL_LINES
 0x0001

	)

56 
	#GL_LINE_LOOP
 0x0002

	)

57 
	#GL_LINE_STRIP
 0x0003

	)

58 
	#GL_TRIANGLES
 0x0004

	)

59 
	#GL_TRIANGLE_STRIP
 0x0005

	)

60 
	#GL_TRIANGLE_FAN
 0x0006

	)

73 
	#GL_ZERO
 0

	)

74 
	#GL_ONE
 1

	)

75 
	#GL_SRC_COLOR
 0x0300

	)

76 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

77 
	#GL_SRC_ALPHA
 0x0302

	)

78 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

79 
	#GL_DST_ALPHA
 0x0304

	)

80 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

85 
	#GL_DST_COLOR
 0x0306

	)

86 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

87 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

94 
	#GL_FUNC_ADD
 0x8006

	)

95 
	#GL_BLEND_EQUATION
 0x8009

	)

96 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

97 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

100 
	#GL_FUNC_SUBTRACT
 0x800A

	)

101 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

104 
	#GL_BLEND_DST_RGB
 0x80C8

	)

105 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

106 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

107 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

108 
	#GL_CONSTANT_COLOR
 0x8001

	)

109 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

110 
	#GL_CONSTANT_ALPHA
 0x8003

	)

111 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

112 
	#GL_BLEND_COLOR
 0x8005

	)

115 
	#GL_ARRAY_BUFFER
 0x8892

	)

116 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

117 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

118 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

120 
	#GL_STREAM_DRAW
 0x88E0

	)

121 
	#GL_STATIC_DRAW
 0x88E4

	)

122 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

124 
	#GL_BUFFER_SIZE
 0x8764

	)

125 
	#GL_BUFFER_USAGE
 0x8765

	)

127 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

130 
	#GL_FRONT
 0x0404

	)

131 
	#GL_BACK
 0x0405

	)

132 
	#GL_FRONT_AND_BACK
 0x0408

	)

145 
	#GL_TEXTURE_2D
 0x0DE1

	)

146 
	#GL_CULL_FACE
 0x0B44

	)

147 
	#GL_BLEND
 0x0BE2

	)

148 
	#GL_DITHER
 0x0BD0

	)

149 
	#GL_STENCIL_TEST
 0x0B90

	)

150 
	#GL_DEPTH_TEST
 0x0B71

	)

151 
	#GL_SCISSOR_TEST
 0x0C11

	)

152 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

153 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

154 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

157 
	#GL_NO_ERROR
 0

	)

158 
	#GL_INVALID_ENUM
 0x0500

	)

159 
	#GL_INVALID_VALUE
 0x0501

	)

160 
	#GL_INVALID_OPERATION
 0x0502

	)

161 
	#GL_OUT_OF_MEMORY
 0x0505

	)

164 
	#GL_CW
 0x0900

	)

165 
	#GL_CCW
 0x0901

	)

168 
	#GL_LINE_WIDTH
 0x0B21

	)

169 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

170 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

171 
	#GL_CULL_FACE_MODE
 0x0B45

	)

172 
	#GL_FRONT_FACE
 0x0B46

	)

173 
	#GL_DEPTH_RANGE
 0x0B70

	)

174 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

175 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

176 
	#GL_DEPTH_FUNC
 0x0B74

	)

177 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

178 
	#GL_STENCIL_FUNC
 0x0B92

	)

179 
	#GL_STENCIL_FAIL
 0x0B94

	)

180 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

181 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

182 
	#GL_STENCIL_REF
 0x0B97

	)

183 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

184 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

185 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

186 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

187 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

188 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

189 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

190 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

191 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

192 
	#GL_VIEWPORT
 0x0BA2

	)

193 
	#GL_SCISSOR_BOX
 0x0C10

	)

195 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

196 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

197 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

198 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

199 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

200 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

201 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

202 
	#GL_RED_BITS
 0x0D52

	)

203 
	#GL_GREEN_BITS
 0x0D53

	)

204 
	#GL_BLUE_BITS
 0x0D54

	)

205 
	#GL_ALPHA_BITS
 0x0D55

	)

206 
	#GL_DEPTH_BITS
 0x0D56

	)

207 
	#GL_STENCIL_BITS
 0x0D57

	)

208 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

210 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

211 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

212 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

213 
	#GL_SAMPLES
 0x80A9

	)

214 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

215 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

223 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

224 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

227 
	#GL_DONT_CARE
 0x1100

	)

228 
	#GL_FASTEST
 0x1101

	)

229 
	#GL_NICEST
 0x1102

	)

232 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

235 
	#GL_BYTE
 0x1400

	)

236 
	#GL_UNSIGNED_BYTE
 0x1401

	)

237 
	#GL_SHORT
 0x1402

	)

238 
	#GL_UNSIGNED_SHORT
 0x1403

	)

239 
	#GL_INT
 0x1404

	)

240 
	#GL_UNSIGNED_INT
 0x1405

	)

241 
	#GL_FLOAT
 0x1406

	)

242 
	#GL_FIXED
 0x140C

	)

245 
	#GL_DEPTH_COMPONENT
 0x1902

	)

246 
	#GL_ALPHA
 0x1906

	)

247 
	#GL_RGB
 0x1907

	)

248 
	#GL_RGBA
 0x1908

	)

249 
	#GL_LUMINANCE
 0x1909

	)

250 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

254 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

255 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

256 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

259 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

260 
	#GL_VERTEX_SHADER
 0x8B31

	)

261 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

262 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

263 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

264 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

265 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

266 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

267 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

268 
	#GL_SHADER_TYPE
 0x8B4F

	)

269 
	#GL_DELETE_STATUS
 0x8B80

	)

270 
	#GL_LINK_STATUS
 0x8B82

	)

271 
	#GL_VALIDATE_STATUS
 0x8B83

	)

272 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

273 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

274 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

275 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

276 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

277 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

278 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

281 
	#GL_NEVER
 0x0200

	)

282 
	#GL_LESS
 0x0201

	)

283 
	#GL_EQUAL
 0x0202

	)

284 
	#GL_LEQUAL
 0x0203

	)

285 
	#GL_GREATER
 0x0204

	)

286 
	#GL_NOTEQUAL
 0x0205

	)

287 
	#GL_GEQUAL
 0x0206

	)

288 
	#GL_ALWAYS
 0x0207

	)

292 
	#GL_KEEP
 0x1E00

	)

293 
	#GL_REPLACE
 0x1E01

	)

294 
	#GL_INCR
 0x1E02

	)

295 
	#GL_DECR
 0x1E03

	)

296 
	#GL_INVERT
 0x150A

	)

297 
	#GL_INCR_WRAP
 0x8507

	)

298 
	#GL_DECR_WRAP
 0x8508

	)

301 
	#GL_VENDOR
 0x1F00

	)

302 
	#GL_RENDERER
 0x1F01

	)

303 
	#GL_VERSION
 0x1F02

	)

304 
	#GL_EXTENSIONS
 0x1F03

	)

307 
	#GL_NEAREST
 0x2600

	)

308 
	#GL_LINEAR
 0x2601

	)

313 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

314 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

315 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

316 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

319 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

320 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

321 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

322 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

326 
	#GL_TEXTURE
 0x1702

	)

328 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

329 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

330 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

331 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

332 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

333 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

334 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

335 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

336 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

339 
	#GL_TEXTURE0
 0x84C0

	)

340 
	#GL_TEXTURE1
 0x84C1

	)

341 
	#GL_TEXTURE2
 0x84C2

	)

342 
	#GL_TEXTURE3
 0x84C3

	)

343 
	#GL_TEXTURE4
 0x84C4

	)

344 
	#GL_TEXTURE5
 0x84C5

	)

345 
	#GL_TEXTURE6
 0x84C6

	)

346 
	#GL_TEXTURE7
 0x84C7

	)

347 
	#GL_TEXTURE8
 0x84C8

	)

348 
	#GL_TEXTURE9
 0x84C9

	)

349 
	#GL_TEXTURE10
 0x84CA

	)

350 
	#GL_TEXTURE11
 0x84CB

	)

351 
	#GL_TEXTURE12
 0x84CC

	)

352 
	#GL_TEXTURE13
 0x84CD

	)

353 
	#GL_TEXTURE14
 0x84CE

	)

354 
	#GL_TEXTURE15
 0x84CF

	)

355 
	#GL_TEXTURE16
 0x84D0

	)

356 
	#GL_TEXTURE17
 0x84D1

	)

357 
	#GL_TEXTURE18
 0x84D2

	)

358 
	#GL_TEXTURE19
 0x84D3

	)

359 
	#GL_TEXTURE20
 0x84D4

	)

360 
	#GL_TEXTURE21
 0x84D5

	)

361 
	#GL_TEXTURE22
 0x84D6

	)

362 
	#GL_TEXTURE23
 0x84D7

	)

363 
	#GL_TEXTURE24
 0x84D8

	)

364 
	#GL_TEXTURE25
 0x84D9

	)

365 
	#GL_TEXTURE26
 0x84DA

	)

366 
	#GL_TEXTURE27
 0x84DB

	)

367 
	#GL_TEXTURE28
 0x84DC

	)

368 
	#GL_TEXTURE29
 0x84DD

	)

369 
	#GL_TEXTURE30
 0x84DE

	)

370 
	#GL_TEXTURE31
 0x84DF

	)

371 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

374 
	#GL_REPEAT
 0x2901

	)

375 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

376 
	#GL_MIRRORED_REPEAT
 0x8370

	)

379 
	#GL_FLOAT_VEC2
 0x8B50

	)

380 
	#GL_FLOAT_VEC3
 0x8B51

	)

381 
	#GL_FLOAT_VEC4
 0x8B52

	)

382 
	#GL_INT_VEC2
 0x8B53

	)

383 
	#GL_INT_VEC3
 0x8B54

	)

384 
	#GL_INT_VEC4
 0x8B55

	)

385 
	#GL_BOOL
 0x8B56

	)

386 
	#GL_BOOL_VEC2
 0x8B57

	)

387 
	#GL_BOOL_VEC3
 0x8B58

	)

388 
	#GL_BOOL_VEC4
 0x8B59

	)

389 
	#GL_FLOAT_MAT2
 0x8B5A

	)

390 
	#GL_FLOAT_MAT3
 0x8B5B

	)

391 
	#GL_FLOAT_MAT4
 0x8B5C

	)

392 
	#GL_SAMPLER_2D
 0x8B5E

	)

393 
	#GL_SAMPLER_CUBE
 0x8B60

	)

396 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

397 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

398 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

399 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

400 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

401 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

402 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

405 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

406 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

409 
	#GL_COMPILE_STATUS
 0x8B81

	)

410 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

411 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

412 
	#GL_SHADER_COMPILER
 0x8DFA

	)

415 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

416 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

419 
	#GL_LOW_FLOAT
 0x8DF0

	)

420 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

421 
	#GL_HIGH_FLOAT
 0x8DF2

	)

422 
	#GL_LOW_INT
 0x8DF3

	)

423 
	#GL_MEDIUM_INT
 0x8DF4

	)

424 
	#GL_HIGH_INT
 0x8DF5

	)

427 
	#GL_FRAMEBUFFER
 0x8D40

	)

428 
	#GL_RENDERBUFFER
 0x8D41

	)

430 
	#GL_RGBA4
 0x8056

	)

431 
	#GL_RGB5_A1
 0x8057

	)

432 
	#GL_RGB565
 0x8D62

	)

433 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

434 
	#GL_STENCIL_INDEX8
 0x8D48

	)

436 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

437 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

438 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

439 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

440 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

441 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

442 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

443 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

444 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

446 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

447 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

448 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

449 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

451 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

452 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

453 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

455 
	#GL_NONE
 0

	)

457 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

458 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

459 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

460 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
 0x8CD9

	)

461 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

463 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

464 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

465 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

467 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

473 
GL_APICALL
 
GL_APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

474 
GL_APICALL
 
GL_APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

475 
GL_APICALL
 
GL_APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
* 
«me
);

476 
GL_APICALL
 
GL_APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

477 
GL_APICALL
 
GL_APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

478 
GL_APICALL
 
GL_APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

479 
GL_APICALL
 
GL_APIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

480 
GL_APICALL
 
GL_APIENTRY
 
glBÀndCﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

481 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄
 ( 
GLíum
 
mode
 );

482 
GL_APICALL
 
GL_APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

483 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

484 
GL_APICALL
 
GL_APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

485 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
, GLíum 
ußge
);

486 
GL_APICALL
 
GL_APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° 
GLvoid
* 
d©a
);

487 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

488 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

489 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

490 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Dïthf
 (
GL˛ampf
 
dïth
);

491 
GL_APICALL
 
GL_APIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

492 
GL_APICALL
 
GL_APIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

493 
GL_APICALL
 
GL_APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

494 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

495 
GL_APICALL
 
GL_APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

496 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

497 
GL_APICALL
 
GL_APIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

498 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eProgøm
 ();

499 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

500 
GL_APICALL
 
GL_APIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

501 
GL_APICALL
 
GL_APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
buf„rs
);

502 
GL_APICALL
 
GL_APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
‰amebuf„rs
);

503 
GL_APICALL
 
GL_APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

504 
GL_APICALL
 
GL_APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ªndîbuf„rs
);

505 
GL_APICALL
 
GL_APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

506 
GL_APICALL
 
GL_APIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
ãxtuªs
);

507 
GL_APICALL
 
GL_APIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

508 
GL_APICALL
 
GL_APIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

509 
GL_APICALL
 
GL_APIENTRY
 
glDïthR™gef
 (
GL˛ampf
 
zNór
, GL˛amp‡
zF¨
);

510 
GL_APICALL
 
GL_APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

511 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

512 
GL_APICALL
 
GL_APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

513 
GL_APICALL
 
GL_APIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

514 
GL_APICALL
 
GL_APIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
ödi˚s
);

515 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

516 
GL_APICALL
 
GL_APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

517 
GL_APICALL
 
GL_APIENTRY
 
glFöish
 ();

518 
GL_APICALL
 
GL_APIENTRY
 
glFlush
 ();

519 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

520 
GL_APICALL
 
GL_APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

521 
GL_APICALL
 
GL_APIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

522 
GL_APICALL
 
GL_APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
buf„rs
);

523 
GL_APICALL
 
GL_APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

524 
GL_APICALL
 
GL_APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
‰amebuf„rs
);

525 
GL_APICALL
 
GL_APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
* 
ªndîbuf„rs
);

526 
GL_APICALL
 
GL_APIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
* 
ãxtuªs
);

527 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

528 
GL_APICALL
 
GL_APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLöt
* 
size
, 
GLíum
* 
ty≥
, 
GLch¨
* 
«me
);

529 
GL_APICALL
 
GL_APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxcou¡
, GLsizei* 
cou¡
, GLuöt* 
shadîs
);

530 
GL_APICALL
 
GLöt
 
GL_APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

531 
GL_APICALL
 
GL_APIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
* 
∑øms
);

532 
GL_APICALL
 
GL_APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

533 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
glGëEº‹
 ();

534 
GL_APICALL
 
GL_APIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

535 
GL_APICALL
 
GL_APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

536 
GL_APICALL
 
GL_APIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

537 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

538 
GL_APICALL
 
GL_APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

539 
GL_APICALL
 
GL_APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

540 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

541 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
öfﬁog
);

542 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
* 
ønge
, GLöt* 
¥ecisi⁄
);

543 
GL_APICALL
 
GL_APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizei* 
Àngth
, 
GLch¨
* 
sour˚
);

544 
GL_APICALL
 c⁄° 
GLubyã
* 
GL_APIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

545 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
* 
∑øms
);

546 
GL_APICALL
 
GL_APIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
* 
∑øms
);

547 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
* 
∑øms
);

548 
GL_APICALL
 
GL_APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöt* 
∑øms
);

549 
GL_APICALL
 
GLöt
 
GL_APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
* 
«me
);

550 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
* 
∑øms
);

551 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
* 
∑øms
);

552 
GL_APICALL
 
GL_APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLvoid
** 
poöãr
);

553 
GL_APICALL
 
GL_APIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

554 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

555 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

556 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

557 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

558 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

559 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

560 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

561 
GL_APICALL
 
GL_APIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

562 
GL_APICALL
 
GL_APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

563 
GL_APICALL
 
GL_APIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

564 
GL_APICALL
 
GL_APIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

565 
GL_APICALL
 
GL_APIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
* 
pixñs
);

566 
GL_APICALL
 
GL_APIENTRY
 
glRñó£ShadîCompûî
 ();

567 
GL_APICALL
 
GL_APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

568 
GL_APICALL
 
GL_APIENTRY
 
glSam∂eCovîage
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

569 
GL_APICALL
 
GL_APIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

570 
GL_APICALL
 
GL_APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
n
, c⁄° 
GLuöt
* 
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° 
GLvoid
* 
bö¨y
, GLsizeò
Àngth
);

571 
GL_APICALL
 
GL_APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
* c⁄°* 
°rög
, c⁄° 
GLöt
* 
Àngth
);

572 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

573 
GL_APICALL
 
GL_APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

574 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

575 
GL_APICALL
 
GL_APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

576 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

577 
GL_APICALL
 
GL_APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

578 
GL_APICALL
 
GL_APIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

579 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

580 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
* 
∑øms
);

581 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

582 
GL_APICALL
 
GL_APIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
* 
∑øms
);

583 
GL_APICALL
 
GL_APIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

584 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
);

585 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

586 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
x
);

587 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

588 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

589 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

590 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
);

591 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

592 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

593 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

594 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
);

595 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

596 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

597 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
* 
v
);

598 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
, GLöà
w
);

599 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöt* 
v
);

600 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

601 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

602 
GL_APICALL
 
GL_APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
* 
vÆue
);

603 
GL_APICALL
 
GL_APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

604 
GL_APICALL
 
GL_APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

605 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
);

606 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

607 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

608 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

609 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

610 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

611 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödx
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

612 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödx
, c⁄° 
GLÊﬂt
* 
vÆues
);

613 
GL_APICALL
 
GL_APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödx
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
* 
±r
);

614 
GL_APICALL
 
GL_APIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

616 #ifde‡
__˝lu•lus


	@SDL2/include/SDL_opengles2_gl2ext.h

1 #i‚de‡
__gl2ext_h_


2 
	#__gl2ext_h_


	)

6 #ifde‡
__˝lu•lus


15 #i‚de‡
GL_APIENTRYP


16 
	#GL_APIENTRYP
 
GL_APIENTRY
*

	)

21 #i‚de‡
__gl3_h_


27 
khr⁄os_öt64_t
 
	tGLöt64
;

28 
khr⁄os_uöt64_t
 
	tGLuöt64
;

29 
__GLsync
 *
	tGLsync
;

38 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


39 
	#GL_ETC1_RGB8_OES
 0x8D64

	)

43 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


44 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

45 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

46 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

47 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

48 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

49 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

50 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

51 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

52 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

53 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

57 #i‚de‡
GL_OES_dïth24


58 
	#GL_DEPTH_COMPONENT24_OES
 0x81A6

	)

62 #i‚de‡
GL_OES_dïth32


63 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

70 #i‚de‡
GL_OES_EGL_image


71 * 
	tGLeglImageOES
;

75 #i‚de‡
GL_OES_EGL_image_exã∫Æ


77 
	#GL_TEXTURE_EXTERNAL_OES
 0x8D65

	)

78 
	#GL_SAMPLER_EXTERNAL_OES
 0x8D66

	)

79 
	#GL_TEXTURE_BINDING_EXTERNAL_OES
 0x8D67

	)

80 
	#GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES
 0x8D68

	)

84 #i‚de‡
GL_OES_ñemít_ödex_uöt


85 
	#GL_UNSIGNED_INT
 0x1405

	)

89 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


90 
	#GL_PROGRAM_BINARY_LENGTH_OES
 0x8741

	)

91 
	#GL_NUM_PROGRAM_BINARY_FORMATS_OES
 0x87FE

	)

92 
	#GL_PROGRAM_BINARY_FORMATS_OES
 0x87FF

	)

96 #i‚de‡
GL_OES_m≠buf„r


97 
	#GL_WRITE_ONLY_OES
 0x88B9

	)

98 
	#GL_BUFFER_ACCESS_OES
 0x88BB

	)

99 
	#GL_BUFFER_MAPPED_OES
 0x88BC

	)

100 
	#GL_BUFFER_MAP_POINTER_OES
 0x88BD

	)

104 #i‚de‡
GL_OES_∑cked_dïth_°ícû


105 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

106 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

107 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

111 #i‚de‡
GL_OES_ªquúed_öã∫Æf‹m©


112 
	#GL_ALPHA8_OES
 0x803C

	)

113 
	#GL_DEPTH_COMPONENT16_OES
 0x81A5

	)

117 
	#GL_LUMINANCE4_ALPHA4_OES
 0x8043

	)

118 
	#GL_LUMINANCE8_ALPHA8_OES
 0x8045

	)

119 
	#GL_LUMINANCE8_OES
 0x8040

	)

120 
	#GL_RGBA4_OES
 0x8056

	)

121 
	#GL_RGB5_A1_OES
 0x8057

	)

122 
	#GL_RGB565_OES
 0x8D62

	)

130 #i‚de‡
GL_OES_rgb8_rgba8


131 
	#GL_RGB8_OES
 0x8051

	)

132 
	#GL_RGBA8_OES
 0x8058

	)

136 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


137 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES
 0x8B8B

	)

141 #i‚de‡
GL_OES_°ícû1


142 
	#GL_STENCIL_INDEX1_OES
 0x8D46

	)

146 #i‚de‡
GL_OES_°ícû4


147 
	#GL_STENCIL_INDEX4_OES
 0x8D47

	)

150 #i‚de‡
GL_OES_surÁ˚Àss_c⁄ãxt


151 
	#GL_FRAMEBUFFER_UNDEFINED_OES
 0x8219

	)

155 #i‚de‡
GL_OES_ãxtuª_3D


156 
	#GL_TEXTURE_WRAP_R_OES
 0x8072

	)

157 
	#GL_TEXTURE_3D_OES
 0x806F

	)

158 
	#GL_TEXTURE_BINDING_3D_OES
 0x806A

	)

159 
	#GL_MAX_3D_TEXTURE_SIZE_OES
 0x8073

	)

160 
	#GL_SAMPLER_3D_OES
 0x8B5F

	)

161 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES
 0x8CD4

	)

171 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


172 
	#GL_HALF_FLOAT_OES
 0x8D61

	)

182 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


183 
	#GL_VERTEX_ARRAY_BINDING_OES
 0x85B5

	)

190 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


191 
	#GL_UNSIGNED_INT_10_10_10_2_OES
 0x8DF6

	)

192 
	#GL_INT_10_10_10_2_OES
 0x8DF7

	)

199 #i‚de‡
GL_KHR_debug


200 (
	tGL_APIENTRYP
 
	tGLDEBUGPROCKHR
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

201 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR
 0x8242

	)

202 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR
 0x8243

	)

203 
	#GL_DEBUG_CALLBACK_FUNCTION_KHR
 0x8244

	)

204 
	#GL_DEBUG_CALLBACK_USER_PARAM_KHR
 0x8245

	)

205 
	#GL_DEBUG_SOURCE_API_KHR
 0x8246

	)

206 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR
 0x8247

	)

207 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_KHR
 0x8248

	)

208 
	#GL_DEBUG_SOURCE_THIRD_PARTY_KHR
 0x8249

	)

209 
	#GL_DEBUG_SOURCE_APPLICATION_KHR
 0x824A

	)

210 
	#GL_DEBUG_SOURCE_OTHER_KHR
 0x824B

	)

211 
	#GL_DEBUG_TYPE_ERROR_KHR
 0x824C

	)

212 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR
 0x824D

	)

213 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR
 0x824E

	)

214 
	#GL_DEBUG_TYPE_PORTABILITY_KHR
 0x824F

	)

215 
	#GL_DEBUG_TYPE_PERFORMANCE_KHR
 0x8250

	)

216 
	#GL_DEBUG_TYPE_OTHER_KHR
 0x8251

	)

217 
	#GL_DEBUG_TYPE_MARKER_KHR
 0x8268

	)

218 
	#GL_DEBUG_TYPE_PUSH_GROUP_KHR
 0x8269

	)

219 
	#GL_DEBUG_TYPE_POP_GROUP_KHR
 0x826A

	)

220 
	#GL_DEBUG_SEVERITY_NOTIFICATION_KHR
 0x826B

	)

221 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR
 0x826C

	)

222 
	#GL_DEBUG_GROUP_STACK_DEPTH_KHR
 0x826D

	)

223 
	#GL_BUFFER_KHR
 0x82E0

	)

224 
	#GL_SHADER_KHR
 0x82E1

	)

225 
	#GL_PROGRAM_KHR
 0x82E2

	)

226 
	#GL_QUERY_KHR
 0x82E3

	)

228 
	#GL_SAMPLER_KHR
 0x82E6

	)

230 
	#GL_MAX_LABEL_LENGTH_KHR
 0x82E8

	)

231 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_KHR
 0x9143

	)

232 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_KHR
 0x9144

	)

233 
	#GL_DEBUG_LOGGED_MESSAGES_KHR
 0x9145

	)

234 
	#GL_DEBUG_SEVERITY_HIGH_KHR
 0x9146

	)

235 
	#GL_DEBUG_SEVERITY_MEDIUM_KHR
 0x9147

	)

236 
	#GL_DEBUG_SEVERITY_LOW_KHR
 0x9148

	)

237 
	#GL_DEBUG_OUTPUT_KHR
 0x92E0

	)

238 
	#GL_CONTEXT_FLAG_DEBUG_BIT_KHR
 0x00000002

	)

239 
	#GL_STACK_OVERFLOW_KHR
 0x0503

	)

240 
	#GL_STACK_UNDERFLOW_KHR
 0x0504

	)

243 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


244 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

245 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

246 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

247 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

248 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

249 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

250 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

251 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

252 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

253 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

254 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

255 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

256 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

257 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

258 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

259 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

260 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

261 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

262 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

263 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

264 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

265 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

266 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

267 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

268 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

269 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

270 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

271 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

279 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


280 
	#GL_3DC_X_AMD
 0x87F9

	)

281 
	#GL_3DC_XY_AMD
 0x87FA

	)

285 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


286 
	#GL_ATC_RGB_AMD
 0x8C92

	)

287 
	#GL_ATC_RGBA_EXPLICIT_ALPHA_AMD
 0x8C93

	)

288 
	#GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD
 0x87EE

	)

292 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


293 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

294 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

295 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

296 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

297 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

298 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

299 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

303 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


304 
	#GL_Z400_BINARY_AMD
 0x8740

	)

312 #i‚de‡
GL_ANGLE_dïth_ãxtuª


313 
	#GL_DEPTH_COMPONENT
 0x1902

	)

314 
	#GL_DEPTH_STENCIL_OES
 0x84F9

	)

315 
	#GL_UNSIGNED_SHORT
 0x1403

	)

316 
	#GL_UNSIGNED_INT
 0x1405

	)

317 
	#GL_UNSIGNED_INT_24_8_OES
 0x84FA

	)

318 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

319 
	#GL_DEPTH_COMPONENT32_OES
 0x81A7

	)

320 
	#GL_DEPTH24_STENCIL8_OES
 0x88F0

	)

324 #i‚de‡
GL_ANGLE_‰amebuf„r_blô


325 
	#GL_READ_FRAMEBUFFER_ANGLE
 0x8CA8

	)

326 
	#GL_DRAW_FRAMEBUFFER_ANGLE
 0x8CA9

	)

327 
	#GL_DRAW_FRAMEBUFFER_BINDING_ANGLE
 0x8CA6

	)

328 
	#GL_READ_FRAMEBUFFER_BINDING_ANGLE
 0x8CAA

	)

332 #i‚de‡
GL_ANGLE_‰amebuf„r_mu…ißm∂e


333 
	#GL_RENDERBUFFER_SAMPLES_ANGLE
 0x8CAB

	)

334 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
 0x8D56

	)

335 
	#GL_MAX_SAMPLES_ANGLE
 0x8D57

	)

339 #i‚de‡
GL_ANGLE_ö°™˚d_¨øys


340 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
 0x88FE

	)

344 #i‚de‡
GL_ANGLE_∑ck_ªvî£_row_‹dî


345 
	#GL_PACK_REVERSE_ROW_ORDER_ANGLE
 0x93A4

	)

349 #i‚de‡
GL_ANGLE_¥ogøm_bö¨y


350 
	#GL_PROGRAM_BINARY_ANGLE
 0x93A6

	)

354 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt3


355 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
 0x83F2

	)

359 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt5


360 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
 0x83F3

	)

364 #i‚de‡
GL_ANGLE_ãxtuª_ußge


365 
	#GL_TEXTURE_USAGE_ANGLE
 0x93A2

	)

366 
	#GL_FRAMEBUFFER_ATTACHMENT_ANGLE
 0x93A3

	)

370 #i‚de‡
GL_ANGLE_å™¶©ed_shadî_sour˚


371 
	#GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
 0x93A0

	)

382 #i‚de‡
GL_APPLE_‰amebuf„r_mu…ißm∂e


383 
	#GL_RENDERBUFFER_SAMPLES_APPLE
 0x8CAB

	)

384 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE
 0x8D56

	)

385 
	#GL_MAX_SAMPLES_APPLE
 0x8D57

	)

386 
	#GL_READ_FRAMEBUFFER_APPLE
 0x8CA8

	)

387 
	#GL_DRAW_FRAMEBUFFER_APPLE
 0x8CA9

	)

388 
	#GL_DRAW_FRAMEBUFFER_BINDING_APPLE
 0x8CA6

	)

389 
	#GL_READ_FRAMEBUFFER_BINDING_APPLE
 0x8CAA

	)

393 #i‚de‡
GL_APPLE_rgb_422


394 
	#GL_RGB_422_APPLE
 0x8A1F

	)

395 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

396 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

400 #i‚de‡
GL_APPLE_sync


402 
	#GL_SYNC_OBJECT_APPLE
 0x8A53

	)

403 
	#GL_MAX_SERVER_WAIT_TIMEOUT_APPLE
 0x9111

	)

404 
	#GL_OBJECT_TYPE_APPLE
 0x9112

	)

405 
	#GL_SYNC_CONDITION_APPLE
 0x9113

	)

406 
	#GL_SYNC_STATUS_APPLE
 0x9114

	)

407 
	#GL_SYNC_FLAGS_APPLE
 0x9115

	)

408 
	#GL_SYNC_FENCE_APPLE
 0x9116

	)

409 
	#GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE
 0x9117

	)

410 
	#GL_UNSIGNALED_APPLE
 0x9118

	)

411 
	#GL_SIGNALED_APPLE
 0x9119

	)

412 
	#GL_ALREADY_SIGNALED_APPLE
 0x911A

	)

413 
	#GL_TIMEOUT_EXPIRED_APPLE
 0x911B

	)

414 
	#GL_CONDITION_SATISFIED_APPLE
 0x911C

	)

415 
	#GL_WAIT_FAILED_APPLE
 0x911D

	)

416 
	#GL_SYNC_FLUSH_COMMANDS_BIT_APPLE
 0x00000001

	)

417 
	#GL_TIMEOUT_IGNORED_APPLE
 0xFFFFFFFFFFFFFFFFuŒ

	)

421 #i‚de‡
GL_APPLE_ãxtuª_f‹m©_BGRA8888


422 
	#GL_BGRA_EXT
 0x80E1

	)

426 #i‚de‡
GL_APPLE_ãxtuª_max_Àvñ


427 
	#GL_TEXTURE_MAX_LEVEL_APPLE
 0x813D

	)

435 #i‚de‡
GL_ARM_mÆi_¥ogøm_bö¨y


436 
	#GL_MALI_PROGRAM_BINARY_ARM
 0x8F61

	)

440 #i‚de‡
GL_ARM_mÆi_shadî_bö¨y


441 
	#GL_MALI_SHADER_BINARY_ARM
 0x8F60

	)

452 #i‚de‡
GL_EXT_bÀnd_mömax


453 
	#GL_MIN_EXT
 0x8007

	)

454 
	#GL_MAX_EXT
 0x8008

	)

458 #i‚de‡
GL_EXT_cﬁ‹_buf„r_hÆf_Êﬂt


459 
	#GL_RGBA16F_EXT
 0x881A

	)

460 
	#GL_RGB16F_EXT
 0x881B

	)

461 
	#GL_RG16F_EXT
 0x822F

	)

462 
	#GL_R16F_EXT
 0x822D

	)

463 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT
 0x8211

	)

464 
	#GL_UNSIGNED_NORMALIZED_EXT
 0x8C17

	)

468 #i‚de‡
GL_EXT_debug_œbñ


469 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

470 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

471 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

472 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

473 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

474 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

481 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


482 
	#GL_COLOR_EXT
 0x1800

	)

483 
	#GL_DEPTH_EXT
 0x1801

	)

484 
	#GL_STENCIL_EXT
 0x1802

	)

487 #i‚de‡
GL_EXT_disjoöt_timî_quîy


488 
	#GL_QUERY_COUNTER_BITS_EXT
 0x8864

	)

489 
	#GL_CURRENT_QUERY_EXT
 0x8865

	)

490 
	#GL_QUERY_RESULT_EXT
 0x8866

	)

491 
	#GL_QUERY_RESULT_AVAILABLE_EXT
 0x8867

	)

492 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

493 
	#GL_TIMESTAMP_EXT
 0x8E28

	)

494 
	#GL_GPU_DISJOINT_EXT
 0x8FBB

	)

497 #i‚de‡
GL_EXT_døw_buf„rs


498 
	#GL_EXT_døw_buf„rs
 1

	)

499 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

500 
	#GL_MAX_DRAW_BUFFERS_EXT
 0x8824

	)

501 
	#GL_DRAW_BUFFER0_EXT
 0x8825

	)

502 
	#GL_DRAW_BUFFER1_EXT
 0x8826

	)

503 
	#GL_DRAW_BUFFER2_EXT
 0x8827

	)

504 
	#GL_DRAW_BUFFER3_EXT
 0x8828

	)

505 
	#GL_DRAW_BUFFER4_EXT
 0x8829

	)

506 
	#GL_DRAW_BUFFER5_EXT
 0x882A

	)

507 
	#GL_DRAW_BUFFER6_EXT
 0x882B

	)

508 
	#GL_DRAW_BUFFER7_EXT
 0x882C

	)

509 
	#GL_DRAW_BUFFER8_EXT
 0x882D

	)

510 
	#GL_DRAW_BUFFER9_EXT
 0x882E

	)

511 
	#GL_DRAW_BUFFER10_EXT
 0x882F

	)

512 
	#GL_DRAW_BUFFER11_EXT
 0x8830

	)

513 
	#GL_DRAW_BUFFER12_EXT
 0x8831

	)

514 
	#GL_DRAW_BUFFER13_EXT
 0x8832

	)

515 
	#GL_DRAW_BUFFER14_EXT
 0x8833

	)

516 
	#GL_DRAW_BUFFER15_EXT
 0x8834

	)

517 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

518 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

519 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

520 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

521 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

522 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

523 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

524 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

525 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

526 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

527 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

528 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

529 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

530 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

531 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

532 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

536 #i‚de‡
GL_EXT_m≠_buf„r_ønge


537 
	#GL_MAP_READ_BIT_EXT
 0x0001

	)

538 
	#GL_MAP_WRITE_BIT_EXT
 0x0002

	)

539 
	#GL_MAP_INVALIDATE_RANGE_BIT_EXT
 0x0004

	)

540 
	#GL_MAP_INVALIDATE_BUFFER_BIT_EXT
 0x0008

	)

541 
	#GL_MAP_FLUSH_EXPLICIT_BIT_EXT
 0x0010

	)

542 
	#GL_MAP_UNSYNCHRONIZED_BIT_EXT
 0x0020

	)

546 #i‚de‡
GL_EXT_mu…ißm∂ed_ªndî_to_ãxtuª


547 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT
 0x8D6C

	)

549 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

550 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

551 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

555 #i‚de‡
GL_EXT_mu…ivõw_døw_buf„rs


556 
	#GL_COLOR_ATTACHMENT_EXT
 0x90F0

	)

557 
	#GL_MULTIVIEW_EXT
 0x90F1

	)

558 
	#GL_DRAW_BUFFER_EXT
 0x0C01

	)

559 
	#GL_READ_BUFFER_EXT
 0x0C02

	)

560 
	#GL_MAX_MULTIVIEW_BUFFERS_EXT
 0x90F2

	)

567 #i‚de‡
GL_EXT_oc˛usi⁄_quîy_boﬁón


568 
	#GL_ANY_SAMPLES_PASSED_EXT
 0x8C2F

	)

569 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT
 0x8D6A

	)

570 
	#GL_CURRENT_QUERY_EXT
 0x8865

	)

571 
	#GL_QUERY_RESULT_EXT
 0x8866

	)

572 
	#GL_QUERY_RESULT_AVAILABLE_EXT
 0x8867

	)

576 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


577 
	#GL_BGRA_EXT
 0x80E1

	)

578 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT
 0x8365

	)

579 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT
 0x8366

	)

583 #i‚de‡
GL_EXT_robu°√ss


585 
	#GL_GUILTY_CONTEXT_RESET_EXT
 0x8253

	)

586 
	#GL_INNOCENT_CONTEXT_RESET_EXT
 0x8254

	)

587 
	#GL_UNKNOWN_CONTEXT_RESET_EXT
 0x8255

	)

588 
	#GL_CONTEXT_ROBUST_ACCESS_EXT
 0x90F3

	)

589 
	#GL_RESET_NOTIFICATION_STRATEGY_EXT
 0x8256

	)

590 
	#GL_LOSE_CONTEXT_ON_RESET_EXT
 0x8252

	)

591 
	#GL_NO_RESET_NOTIFICATION_EXT
 0x8261

	)

595 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


596 
	#GL_VERTEX_SHADER_BIT_EXT
 0x00000001

	)

597 
	#GL_FRAGMENT_SHADER_BIT_EXT
 0x00000002

	)

598 
	#GL_ALL_SHADER_BITS_EXT
 0xFFFFFFFF

	)

599 
	#GL_PROGRAM_SEPARABLE_EXT
 0x8258

	)

600 
	#GL_ACTIVE_PROGRAM_EXT
 0x8259

	)

601 
	#GL_PROGRAM_PIPELINE_BINDING_EXT
 0x825A

	)

605 #i‚de‡
GL_EXT_shadî_‰amebuf„r_„tch


606 
	#GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT
 0x8A52

	)

613 #i‚de‡
GL_EXT_shadow_ßm∂îs


614 
	#GL_TEXTURE_COMPARE_MODE_EXT
 0x884C

	)

615 
	#GL_TEXTURE_COMPARE_FUNC_EXT
 0x884D

	)

616 
	#GL_COMPARE_REF_TO_TEXTURE_EXT
 0x884E

	)

617 
	#GL_SAMPLER_2D_SHADOW_EXT
 0x8B62

	)

621 #i‚de‡
GL_EXT_sRGB


622 
	#GL_SRGB_EXT
 0x8C40

	)

623 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

624 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

625 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT
 0x8210

	)

629 #i‚de‡
GL_EXT_sRGB_wrôe_c⁄åﬁ


630 
	#GL_EXT_sRGB_wrôe_c⁄åﬁ
 1

	)

631 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

635 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


636 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

637 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

641 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


642 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

643 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

647 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


648 
	#GL_BGRA_EXT
 0x80E1

	)

652 #i‚de‡
GL_EXT_ãxtuª_rg


653 
	#GL_RED_EXT
 0x1903

	)

654 
	#GL_RG_EXT
 0x8227

	)

655 
	#GL_R8_EXT
 0x8229

	)

656 
	#GL_RG8_EXT
 0x822B

	)

660 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


661 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

662 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

663 
	#GL_DECODE_EXT
 0x8A49

	)

664 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

668 #i‚de‡
GL_EXT_ãxtuª_°‹age


669 
	#GL_TEXTURE_IMMUTABLE_FORMAT_EXT
 0x912F

	)

670 
	#GL_ALPHA8_EXT
 0x803C

	)

671 
	#GL_LUMINANCE8_EXT
 0x8040

	)

672 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

673 
	#GL_RGBA32F_EXT
 0x8814

	)

674 
	#GL_RGB32F_EXT
 0x8815

	)

675 
	#GL_ALPHA32F_EXT
 0x8816

	)

676 
	#GL_LUMINANCE32F_EXT
 0x8818

	)

677 
	#GL_LUMINANCE_ALPHA32F_EXT
 0x8819

	)

680 
	#GL_ALPHA16F_EXT
 0x881C

	)

681 
	#GL_LUMINANCE16F_EXT
 0x881E

	)

682 
	#GL_LUMINANCE_ALPHA16F_EXT
 0x881F

	)

683 
	#GL_RGB10_A2_EXT
 0x8059

	)

684 
	#GL_RGB10_EXT
 0x8052

	)

685 
	#GL_BGRA8_EXT
 0x93A1

	)

686 
	#GL_R8_EXT
 0x8229

	)

687 
	#GL_RG8_EXT
 0x822B

	)

688 
	#GL_R32F_EXT
 0x822E

	)

689 
	#GL_RG32F_EXT
 0x8230

	)

690 
	#GL_R16F_EXT
 0x822D

	)

691 
	#GL_RG16F_EXT
 0x822F

	)

695 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


696 
	#GL_UNSIGNED_INT_2_10_10_10_REV_EXT
 0x8368

	)

700 #i‚de‡
GL_EXT_u≈ack_subimage


701 
	#GL_UNPACK_ROW_LENGTH_EXT
 0x0CF2

	)

702 
	#GL_UNPACK_SKIP_ROWS_EXT
 0x0CF3

	)

703 
	#GL_UNPACK_SKIP_PIXELS_EXT
 0x0CF4

	)

711 #i‚de‡
GL_DMP_shadî_bö¨y


712 
	#GL_SHADER_BINARY_DMP
 0x9250

	)

720 #i‚de‡
GL_FJ_shadî_bö¨y_GCCSO


721 
	#GL_GCCSO_SHADER_BINARY_FJ
 0x9260

	)

729 #i‚de‡
GL_IMG_¥ogøm_bö¨y


730 
	#GL_SGX_PROGRAM_BINARY_IMG
 0x9130

	)

734 #i‚de‡
GL_IMG_ªad_f‹m©


735 
	#GL_BGRA_IMG
 0x80E1

	)

736 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG
 0x8365

	)

740 #i‚de‡
GL_IMG_shadî_bö¨y


741 
	#GL_SGX_BINARY_IMG
 0x8C0A

	)

745 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


746 
	#GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
 0x8C00

	)

747 
	#GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
 0x8C01

	)

748 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
 0x8C02

	)

749 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
 0x8C03

	)

753 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc2


754 
	#GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG
 0x9137

	)

755 
	#GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG
 0x9138

	)

759 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


760 
	#GL_RENDERBUFFER_SAMPLES_IMG
 0x9133

	)

761 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG
 0x9134

	)

762 
	#GL_MAX_SAMPLES_IMG
 0x9135

	)

763 
	#GL_TEXTURE_SAMPLES_IMG
 0x9136

	)

771 #i‚de‡
GL_NV_covîage_ßm∂e


772 
	#GL_COVERAGE_COMPONENT_NV
 0x8ED0

	)

773 
	#GL_COVERAGE_COMPONENT4_NV
 0x8ED1

	)

774 
	#GL_COVERAGE_ATTACHMENT_NV
 0x8ED2

	)

775 
	#GL_COVERAGE_BUFFERS_NV
 0x8ED3

	)

776 
	#GL_COVERAGE_SAMPLES_NV
 0x8ED4

	)

777 
	#GL_COVERAGE_ALL_FRAGMENTS_NV
 0x8ED5

	)

778 
	#GL_COVERAGE_EDGE_FRAGMENTS_NV
 0x8ED6

	)

779 
	#GL_COVERAGE_AUTOMATIC_NV
 0x8ED7

	)

780 
	#GL_COVERAGE_BUFFER_BIT_NV
 0x00008000

	)

784 #i‚de‡
GL_NV_dïth_n⁄löór


785 
	#GL_DEPTH_COMPONENT16_NONLINEAR_NV
 0x8E2C

	)

789 #i‚de‡
GL_NV_døw_buf„rs


790 
	#GL_MAX_DRAW_BUFFERS_NV
 0x8824

	)

791 
	#GL_DRAW_BUFFER0_NV
 0x8825

	)

792 
	#GL_DRAW_BUFFER1_NV
 0x8826

	)

793 
	#GL_DRAW_BUFFER2_NV
 0x8827

	)

794 
	#GL_DRAW_BUFFER3_NV
 0x8828

	)

795 
	#GL_DRAW_BUFFER4_NV
 0x8829

	)

796 
	#GL_DRAW_BUFFER5_NV
 0x882A

	)

797 
	#GL_DRAW_BUFFER6_NV
 0x882B

	)

798 
	#GL_DRAW_BUFFER7_NV
 0x882C

	)

799 
	#GL_DRAW_BUFFER8_NV
 0x882D

	)

800 
	#GL_DRAW_BUFFER9_NV
 0x882E

	)

801 
	#GL_DRAW_BUFFER10_NV
 0x882F

	)

802 
	#GL_DRAW_BUFFER11_NV
 0x8830

	)

803 
	#GL_DRAW_BUFFER12_NV
 0x8831

	)

804 
	#GL_DRAW_BUFFER13_NV
 0x8832

	)

805 
	#GL_DRAW_BUFFER14_NV
 0x8833

	)

806 
	#GL_DRAW_BUFFER15_NV
 0x8834

	)

807 
	#GL_COLOR_ATTACHMENT0_NV
 0x8CE0

	)

808 
	#GL_COLOR_ATTACHMENT1_NV
 0x8CE1

	)

809 
	#GL_COLOR_ATTACHMENT2_NV
 0x8CE2

	)

810 
	#GL_COLOR_ATTACHMENT3_NV
 0x8CE3

	)

811 
	#GL_COLOR_ATTACHMENT4_NV
 0x8CE4

	)

812 
	#GL_COLOR_ATTACHMENT5_NV
 0x8CE5

	)

813 
	#GL_COLOR_ATTACHMENT6_NV
 0x8CE6

	)

814 
	#GL_COLOR_ATTACHMENT7_NV
 0x8CE7

	)

815 
	#GL_COLOR_ATTACHMENT8_NV
 0x8CE8

	)

816 
	#GL_COLOR_ATTACHMENT9_NV
 0x8CE9

	)

817 
	#GL_COLOR_ATTACHMENT10_NV
 0x8CEA

	)

818 
	#GL_COLOR_ATTACHMENT11_NV
 0x8CEB

	)

819 
	#GL_COLOR_ATTACHMENT12_NV
 0x8CEC

	)

820 
	#GL_COLOR_ATTACHMENT13_NV
 0x8CED

	)

821 
	#GL_COLOR_ATTACHMENT14_NV
 0x8CEE

	)

822 
	#GL_COLOR_ATTACHMENT15_NV
 0x8CEF

	)

829 #i‚de‡
GL_NV_fbo_cﬁ‹_©èchmíts


830 
	#GL_MAX_COLOR_ATTACHMENTS_NV
 0x8CDF

	)

835 #i‚de‡
GL_NV_„n˚


836 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

837 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

838 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

842 #i‚de‡
GL_NV_‰amebuf„r_blô


843 
	#GL_READ_FRAMEBUFFER_NV
 0x8CA8

	)

844 
	#GL_DRAW_FRAMEBUFFER_NV
 0x8CA9

	)

845 
	#GL_DRAW_FRAMEBUFFER_BINDING_NV
 0x8CA6

	)

846 
	#GL_READ_FRAMEBUFFER_BINDING_NV
 0x8CAA

	)

850 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e


851 
	#GL_RENDERBUFFER_SAMPLES_NV
 0x8CAB

	)

852 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV
 0x8D56

	)

853 
	#GL_MAX_SAMPLES_NV
 0x8D57

	)

860 #i‚de‡
GL_NV_ö°™˚d_¨øys


861 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV
 0x88FE

	)

865 #i‚de‡
GL_NV_ªad_buf„r


866 
	#GL_READ_BUFFER_NV
 0x0C02

	)

882 #i‚de‡
GL_NV_shadow_ßm∂îs_¨øy


883 
	#GL_SAMPLER_2D_ARRAY_SHADOW_NV
 0x8DC4

	)

887 #i‚de‡
GL_NV_shadow_ßm∂îs_cube


888 
	#GL_SAMPLER_CUBE_SHADOW_NV
 0x8DC5

	)

892 #i‚de‡
GL_NV_sRGB_f‹m©s


893 
	#GL_SLUMINANCE_NV
 0x8C46

	)

894 
	#GL_SLUMINANCE_ALPHA_NV
 0x8C44

	)

895 
	#GL_SRGB8_NV
 0x8C41

	)

896 
	#GL_SLUMINANCE8_NV
 0x8C47

	)

897 
	#GL_SLUMINANCE8_ALPHA8_NV
 0x8C45

	)

898 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_NV
 0x8C4C

	)

899 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV
 0x8C4D

	)

900 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV
 0x8C4E

	)

901 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV
 0x8C4F

	)

902 
	#GL_ETC1_SRGB8_NV
 0x88EE

	)

906 #i‚de‡
GL_NV_ãxtuª_b‹dî_˛amp


907 
	#GL_TEXTURE_BORDER_COLOR_NV
 0x1004

	)

908 
	#GL_CLAMP_TO_BORDER_NV
 0x812D

	)

922 #i‚de‡
GL_QCOM_Æpha_ã°


923 
	#GL_ALPHA_TEST_QCOM
 0x0BC0

	)

924 
	#GL_ALPHA_TEST_FUNC_QCOM
 0x0BC1

	)

925 
	#GL_ALPHA_TEST_REF_QCOM
 0x0BC2

	)

929 #i‚de‡
GL_QCOM_bönög_c⁄åﬁ


930 
	#GL_BINNING_CONTROL_HINT_QCOM
 0x8FB0

	)

931 
	#GL_CPU_OPTIMIZED_QCOM
 0x8FB1

	)

932 
	#GL_GPU_OPTIMIZED_QCOM
 0x8FB2

	)

933 
	#GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM
 0x8FB3

	)

940 #i‚de‡
GL_QCOM_exãnded_gë


941 
	#GL_TEXTURE_WIDTH_QCOM
 0x8BD2

	)

942 
	#GL_TEXTURE_HEIGHT_QCOM
 0x8BD3

	)

943 
	#GL_TEXTURE_DEPTH_QCOM
 0x8BD4

	)

944 
	#GL_TEXTURE_INTERNAL_FORMAT_QCOM
 0x8BD5

	)

945 
	#GL_TEXTURE_FORMAT_QCOM
 0x8BD6

	)

946 
	#GL_TEXTURE_TYPE_QCOM
 0x8BD7

	)

947 
	#GL_TEXTURE_IMAGE_VALID_QCOM
 0x8BD8

	)

948 
	#GL_TEXTURE_NUM_LEVELS_QCOM
 0x8BD9

	)

949 
	#GL_TEXTURE_TARGET_QCOM
 0x8BDA

	)

950 
	#GL_TEXTURE_OBJECT_VALID_QCOM
 0x8BDB

	)

951 
	#GL_STATE_RESTORE
 0x8BDC

	)

958 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


959 
	#GL_PERFMON_GLOBAL_MODE_QCOM
 0x8FA0

	)

963 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


964 
	#GL_WRITEONLY_RENDERING_QCOM
 0x8823

	)

968 #i‚de‡
GL_QCOM_tûed_ªndîög


969 
	#GL_COLOR_BUFFER_BIT0_QCOM
 0x00000001

	)

970 
	#GL_COLOR_BUFFER_BIT1_QCOM
 0x00000002

	)

971 
	#GL_COLOR_BUFFER_BIT2_QCOM
 0x00000004

	)

972 
	#GL_COLOR_BUFFER_BIT3_QCOM
 0x00000008

	)

973 
	#GL_COLOR_BUFFER_BIT4_QCOM
 0x00000010

	)

974 
	#GL_COLOR_BUFFER_BIT5_QCOM
 0x00000020

	)

975 
	#GL_COLOR_BUFFER_BIT6_QCOM
 0x00000040

	)

976 
	#GL_COLOR_BUFFER_BIT7_QCOM
 0x00000080

	)

977 
	#GL_DEPTH_BUFFER_BIT0_QCOM
 0x00000100

	)

978 
	#GL_DEPTH_BUFFER_BIT1_QCOM
 0x00000200

	)

979 
	#GL_DEPTH_BUFFER_BIT2_QCOM
 0x00000400

	)

980 
	#GL_DEPTH_BUFFER_BIT3_QCOM
 0x00000800

	)

981 
	#GL_DEPTH_BUFFER_BIT4_QCOM
 0x00001000

	)

982 
	#GL_DEPTH_BUFFER_BIT5_QCOM
 0x00002000

	)

983 
	#GL_DEPTH_BUFFER_BIT6_QCOM
 0x00004000

	)

984 
	#GL_DEPTH_BUFFER_BIT7_QCOM
 0x00008000

	)

985 
	#GL_STENCIL_BUFFER_BIT0_QCOM
 0x00010000

	)

986 
	#GL_STENCIL_BUFFER_BIT1_QCOM
 0x00020000

	)

987 
	#GL_STENCIL_BUFFER_BIT2_QCOM
 0x00040000

	)

988 
	#GL_STENCIL_BUFFER_BIT3_QCOM
 0x00080000

	)

989 
	#GL_STENCIL_BUFFER_BIT4_QCOM
 0x00100000

	)

990 
	#GL_STENCIL_BUFFER_BIT5_QCOM
 0x00200000

	)

991 
	#GL_STENCIL_BUFFER_BIT6_QCOM
 0x00400000

	)

992 
	#GL_STENCIL_BUFFER_BIT7_QCOM
 0x00800000

	)

993 
	#GL_MULTISAMPLE_BUFFER_BIT0_QCOM
 0x01000000

	)

994 
	#GL_MULTISAMPLE_BUFFER_BIT1_QCOM
 0x02000000

	)

995 
	#GL_MULTISAMPLE_BUFFER_BIT2_QCOM
 0x04000000

	)

996 
	#GL_MULTISAMPLE_BUFFER_BIT3_QCOM
 0x08000000

	)

997 
	#GL_MULTISAMPLE_BUFFER_BIT4_QCOM
 0x10000000

	)

998 
	#GL_MULTISAMPLE_BUFFER_BIT5_QCOM
 0x20000000

	)

999 
	#GL_MULTISAMPLE_BUFFER_BIT6_QCOM
 0x40000000

	)

1000 
	#GL_MULTISAMPLE_BUFFER_BIT7_QCOM
 0x80000000

	)

1008 #i‚de‡
GL_VIV_shadî_bö¨y


1009 
	#GL_SHADER_BINARY_VIV
 0x8FC4

	)

1021 #i‚de‡
GL_OES_com¥es£d_ETC1_RGB8_ãxtuª


1022 
	#GL_OES_com¥es£d_ETC1_RGB8_ãxtuª
 1

	)

1026 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


1027 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

1031 #i‚de‡
GL_OES_dïth24


1032 
	#GL_OES_dïth24
 1

	)

1036 #i‚de‡
GL_OES_dïth32


1037 
	#GL_OES_dïth32
 1

	)

1041 #i‚de‡
GL_OES_dïth_ãxtuª


1042 
	#GL_OES_dïth_ãxtuª
 1

	)

1046 #i‚de‡
GL_OES_EGL_image


1047 
	#GL_OES_EGL_image
 1

	)

1048 #ifde‡
GL_GLEXT_PROTOTYPES


1049 
GL_APICALL
 
GL_APIENTRY
 
	`glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

1050 
GL_APICALL
 
GL_APIENTRY
 
	`glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

1052 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

1053 (
	tGL_APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

1057 #i‚de‡
GL_OES_EGL_image_exã∫Æ


1058 
	#GL_OES_EGL_image_exã∫Æ
 1

	)

1063 #i‚de‡
GL_OES_ñemít_ödex_uöt


1064 
	#GL_OES_ñemít_ödex_uöt
 1

	)

1068 #i‚de‡
GL_OES_fbo_ªndî_mùm≠


1069 
	#GL_OES_fbo_ªndî_mùm≠
 1

	)

1073 #i‚de‡
GL_OES_‰agmít_¥ecisi⁄_high


1074 
	#GL_OES_‰agmít_¥ecisi⁄_high
 1

	)

1078 #i‚de‡
GL_OES_gë_¥ogøm_bö¨y


1079 
	#GL_OES_gë_¥ogøm_bö¨y
 1

	)

1080 #ifde‡
GL_GLEXT_PROTOTYPES


1081 
GL_APICALL
 
GL_APIENTRY
 
	`glGëProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, 
GLvoid
 *
bö¨y
);

1082 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømBö¨yOES
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° 
GLvoid
 *
bö¨y
, 
GLöt
 
Àngth
);

1084 (
	tGL_APIENTRYP
 
	tPFNGLGETPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
 *
	tbö¨y
);

1085 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMBINARYOESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLöt
 
	tÀngth
);

1089 #i‚de‡
GL_OES_m≠buf„r


1090 
	#GL_OES_m≠buf„r
 1

	)

1091 #ifde‡
GL_GLEXT_PROTOTYPES


1092 
GL_APICALL
 * 
GL_APIENTRY
 
	`glM≠Buf„rOES
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

1093 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glUnm≠Buf„rOES
 (
GLíum
 
èrgë
);

1094 
GL_APICALL
 
GL_APIENTRY
 
	`glGëBuf„rPoöãrvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLvoid
 **
∑øms
);

1096 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

1097 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLUNMAPBUFFEROESPROC
Ë(
	tGLíum
 
	tèrgë
);

1098 (
	tGL_APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 **
	t∑øms
);

1102 #i‚de‡
GL_OES_∑cked_dïth_°ícû


1103 
	#GL_OES_∑cked_dïth_°ícû
 1

	)

1107 #i‚de‡
GL_OES_ªquúed_öã∫Æf‹m©


1108 
	#GL_OES_ªquúed_öã∫Æf‹m©
 1

	)

1112 #i‚de‡
GL_OES_rgb8_rgba8


1113 
	#GL_OES_rgb8_rgba8
 1

	)

1117 #i‚de‡
GL_OES_°™d¨d_dîiv©ives


1118 
	#GL_OES_°™d¨d_dîiv©ives
 1

	)

1122 #i‚de‡
GL_OES_°ícû1


1123 
	#GL_OES_°ícû1
 1

	)

1127 #i‚de‡
GL_OES_°ícû4


1128 
	#GL_OES_°ícû4
 1

	)

1131 #i‚de‡
GL_OES_surÁ˚Àss_c⁄ãxt


1132 
	#GL_OES_surÁ˚Àss_c⁄ãxt
 1

	)

1136 #i‚de‡
GL_OES_ãxtuª_3D


1137 
	#GL_OES_ãxtuª_3D
 1

	)

1138 #ifde‡
GL_GLEXT_PROTOTYPES


1139 
GL_APICALL
 
GL_APIENTRY
 
	`glTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

1140 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
* 
pixñs
);

1141 
GL_APICALL
 
GL_APIENTRY
 
	`glC›yTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

1142 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

1143 
GL_APICALL
 
GL_APIENTRY
 
	`glCom¥es£dTexSubImage3DOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
* 
d©a
);

1144 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª3DOES
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1146 (
	tGL_APIENTRYP
 
	tPFNGLTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

1147 (
	tGL_APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	tpixñs
);

1148 (
	tGL_APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1149 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

1150 (
	tGL_APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
* 
	td©a
);

1151 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1155 #i‚de‡
GL_OES_ãxtuª_Êﬂt


1156 
	#GL_OES_ãxtuª_Êﬂt
 1

	)

1160 #i‚de‡
GL_OES_ãxtuª_Êﬂt_löór


1161 
	#GL_OES_ãxtuª_Êﬂt_löór
 1

	)

1165 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt


1166 
	#GL_OES_ãxtuª_hÆf_Êﬂt
 1

	)

1170 #i‚de‡
GL_OES_ãxtuª_hÆf_Êﬂt_löór


1171 
	#GL_OES_ãxtuª_hÆf_Êﬂt_löór
 1

	)

1175 #i‚de‡
GL_OES_ãxtuª_≈Ÿ


1176 
	#GL_OES_ãxtuª_≈Ÿ
 1

	)

1180 #i‚de‡
GL_OES_vîãx_¨øy_obje˘


1181 
	#GL_OES_vîãx_¨øy_obje˘
 1

	)

1182 #ifde‡
GL_GLEXT_PROTOTYPES


1183 
GL_APICALL
 
GL_APIENTRY
 
	`glBödVîãxAºayOES
 (
GLuöt
 
¨øy
);

1184 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeVîãxAºaysOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1185 
GL_APICALL
 
GL_APIENTRY
 
	`glGíVîãxAºaysOES
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1186 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsVîãxAºayOES
 (
GLuöt
 
¨øy
);

1188 (
	tGL_APIENTRYP
 
	tPFNGLBINDVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

1189 (
	tGL_APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1190 (
	tGL_APIENTRYP
 
	tPFNGLGENVERTEXARRAYSOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1191 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISVERTEXARRAYOESPROC
Ë(
	tGLuöt
 
	t¨øy
);

1195 #i‚de‡
GL_OES_vîãx_hÆf_Êﬂt


1196 
	#GL_OES_vîãx_hÆf_Êﬂt
 1

	)

1200 #i‚de‡
GL_OES_vîãx_ty≥_10_10_10_2


1201 
	#GL_OES_vîãx_ty≥_10_10_10_2
 1

	)

1208 #i‚de‡
GL_KHR_debug


1209 
	#GL_KHR_debug
 1

	)

1210 #ifde‡
GL_GLEXT_PROTOTYPES


1211 
GL_APICALL
 
GL_APIENTRY
 
	`glDebugMesßgeC⁄åﬁKHR
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

1212 
GL_APICALL
 
GL_APIENTRY
 
	`glDebugMesßgeIn£πKHR
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

1213 
GL_APICALL
 
GL_APIENTRY
 
	`glDebugMesßgeCÆlbackKHR
 (
GLDEBUGPROCKHR
 
ˇŒback
, c⁄° *
u£rP¨am
);

1214 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
	`glGëDebugMesßgeLogKHR
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

1215 
GL_APICALL
 
GL_APIENTRY
 
	`glPushDebugGroupKHR
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

1216 
GL_APICALL
 
GL_APIENTRY
 
	`glP›DebugGroupKHR
 ();

1217 
GL_APICALL
 
GL_APIENTRY
 
	`glObje˘LabñKHR
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

1218 
GL_APICALL
 
GL_APIENTRY
 
	`glGëObje˘LabñKHR
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

1219 
GL_APICALL
 
GL_APIENTRY
 
	`glObje˘PåLabñKHR
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

1220 
GL_APICALL
 
GL_APIENTRY
 
	`glGëObje˘PåLabñKHR
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

1221 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPoöãrvKHR
 (
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
);

1223 (
	tGL_APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLKHRPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

1224 (
	tGL_APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTKHRPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

1225 (
	tGL_APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKKHRPROC
Ë(
	tGLDEBUGPROCKHR
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

1226 
	$GLuöt
 (
	tGL_APIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGKHRPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

1227 (
	tGL_APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPKHRPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

1228 (
	tGL_APIENTRYP
 
	tPFNGLPOPDEBUGGROUPKHRPROC
) ();

1229 (
	tGL_APIENTRYP
 
	tPFNGLOBJECTLABELKHRPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

1230 (
	tGL_APIENTRYP
 
	tPFNGLGETOBJECTLABELKHRPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

1231 (
	tGL_APIENTRYP
 
	tPFNGLOBJECTPTRLABELKHRPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

1232 (
	tGL_APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELKHRPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

1233 (
	tGL_APIENTRYP
 
	tPFNGLGETPOINTERVKHRPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLvoid
 **
	t∑øms
);

1236 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


1237 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

1246 #i‚de‡
GL_AMD_com¥es£d_3DC_ãxtuª


1247 
	#GL_AMD_com¥es£d_3DC_ãxtuª
 1

	)

1251 #i‚de‡
GL_AMD_com¥es£d_ATC_ãxtuª


1252 
	#GL_AMD_com¥es£d_ATC_ãxtuª
 1

	)

1256 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


1257 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

1258 #ifde‡
GL_GLEXT_PROTOTYPES


1259 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

1260 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

1261 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

1262 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

1263 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, 
GLvoid
 *
d©a
);

1264 
GL_APICALL
 
GL_APIENTRY
 
	`glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

1265 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

1266 
GL_APICALL
 
GL_APIENTRY
 
	`glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îsLi°
);

1267 
GL_APICALL
 
GL_APIENTRY
 
	`glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

1268 
GL_APICALL
 
GL_APIENTRY
 
	`glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

1269 
GL_APICALL
 
GL_APIENTRY
 
	`glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

1271 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

1272 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

1273 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

1274 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

1275 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

1276 (
	tGL_APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

1277 (
	tGL_APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

1278 (
	tGL_APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îsLi°
);

1279 (
	tGL_APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

1280 (
	tGL_APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

1281 (
	tGL_APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

1285 #i‚de‡
GL_AMD_¥ogøm_bö¨y_Z400


1286 
	#GL_AMD_¥ogøm_bö¨y_Z400
 1

	)

1294 #i‚de‡
GL_ANGLE_dïth_ãxtuª


1295 
	#GL_ANGLE_dïth_ãxtuª
 1

	)

1299 #i‚de‡
GL_ANGLE_‰amebuf„r_blô


1300 
	#GL_ANGLE_‰amebuf„r_blô
 1

	)

1301 #ifde‡
GL_GLEXT_PROTOTYPES


1302 
GL_APICALL
 
GL_APIENTRY
 
	`glBlôFømebuf„rANGLE
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1304 (
	tGL_APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERANGLEPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1308 #i‚de‡
GL_ANGLE_‰amebuf„r_mu…ißm∂e


1309 
	#GL_ANGLE_‰amebuf„r_mu…ißm∂e
 1

	)

1310 #ifde‡
GL_GLEXT_PROTOTYPES


1311 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eANGLE
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1313 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1316 #i‚de‡
GL_ANGLE_ö°™˚d_¨øys


1317 
	#GL_ANGLE_ö°™˚d_¨øys
 1

	)

1318 #ifde‡
GL_GLEXT_PROTOTYPES


1319 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwAºaysIn°™˚dANGLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

1320 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwEÀmítsIn°™˚dANGLE
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

1321 
GL_APICALL
 
GL_APIENTRY
 
	`glVîãxAâribDivis‹ANGLE
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1323 (
	tGL_APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDANGLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

1324 (
	tGL_APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDANGLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

1325 (
	tGL_APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORANGLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1329 #i‚de‡
GL_ANGLE_∑ck_ªvî£_row_‹dî


1330 
	#GL_ANGLE_∑ck_ªvî£_row_‹dî
 1

	)

1334 #i‚de‡
GL_ANGLE_¥ogøm_bö¨y


1335 
	#GL_ANGLE_¥ogøm_bö¨y
 1

	)

1339 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt3


1340 
	#GL_ANGLE_ãxtuª_com¥essi⁄_dxt3
 1

	)

1344 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt5


1345 
	#GL_ANGLE_ãxtuª_com¥essi⁄_dxt5
 1

	)

1349 #i‚de‡
GL_ANGLE_ãxtuª_ußge


1350 
	#GL_ANGLE_ãxtuª_ußge
 1

	)

1353 #i‚de‡
GL_ANGLE_å™¶©ed_shadî_sour˚


1354 
	#GL_ANGLE_å™¶©ed_shadî_sour˚
 1

	)

1355 #ifde‡
GL_GLEXT_PROTOTYPES


1356 
GL_APICALL
 
GL_APIENTRY
 
	`glGëTøn¶©edShadîSour˚ANGLE
 (
GLuöt
 
shadî
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

1358 (
	tGL_APIENTRYP
 
	tPFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

1366 #i‚de‡
GL_APPLE_c›y_ãxtuª_Àvñs


1367 
	#GL_APPLE_c›y_ãxtuª_Àvñs
 1

	)

1368 #ifde‡
GL_GLEXT_PROTOTYPES


1369 
GL_APICALL
 
GL_APIENTRY
 
	`glC›yTextuªLevñsAPPLE
 (
GLuöt
 
de°ö©i⁄Textuª
, GLuöà
sour˚Textuª
, 
GLöt
 
sour˚Ba£Levñ
, 
GLsizei
 
sour˚LevñCou¡
);

1371 (
	tGL_APIENTRYP
 
	tPFNGLCOPYTEXTURELEVELSAPPLEPROC
Ë(
	tGLuöt
 
	tde°ö©i⁄Textuª
, GLuöà
	tsour˚Textuª
, 
	tGLöt
 
	tsour˚Ba£Levñ
, 
	tGLsizei
 
	tsour˚LevñCou¡
);

1375 #i‚de‡
GL_APPLE_‰amebuf„r_mu…ißm∂e


1376 
	#GL_APPLE_‰amebuf„r_mu…ißm∂e
 1

	)

1377 #ifde‡
GL_GLEXT_PROTOTYPES


1378 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1379 
GL_APICALL
 
GL_APIENTRY
 
	`glResﬁveMu…ißm∂eFømebuf„rAPPLE
 ();

1381 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1382 (
	tGL_APIENTRYP
 
	tPFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC
) ();

1386 #i‚de‡
GL_APPLE_rgb_422


1387 
	#GL_APPLE_rgb_422
 1

	)

1391 #i‚de‡
GL_APPLE_sync


1392 
	#GL_APPLE_sync
 1

	)

1393 #ifde‡
GL_GLEXT_PROTOTYPES


1394 
GL_APICALL
 
GLsync
 
GL_APIENTRY
 
	`glFí˚SyncAPPLE
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1395 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsSyncAPPLE
 (
GLsync
 
sync
);

1396 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeSyncAPPLE
 (
GLsync
 
sync
);

1397 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
	`glClõ¡WaôSyncAPPLE
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1398 
GL_APICALL
 
GL_APIENTRY
 
	`glWaôSyncAPPLE
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1399 
GL_APICALL
 
GL_APIENTRY
 
	`glGëI¡egî64vAPPLE
 (
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1400 
GL_APICALL
 
GL_APIENTRY
 
	`glGëSyncivAPPLE
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1402 
	$GLsync
 (
	tGL_APIENTRYP
 
	tPFNGLFENCESYNCAPPLEPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1403 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISSYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
);

1404 (
	tGL_APIENTRYP
 
	tPFNGLDELETESYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
);

1405 
	$GLíum
 (
	tGL_APIENTRYP
 
	tPFNGLCLIENTWAITSYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1406 (
	tGL_APIENTRYP
 
	tPFNGLWAITSYNCAPPLEPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1407 (
	tGL_APIENTRYP
 
	tPFNGLGETINTEGER64VAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1408 (
	tGL_APIENTRYP
 
	tPFNGLGETSYNCIVAPPLEPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1412 #i‚de‡
GL_APPLE_ãxtuª_f‹m©_BGRA8888


1413 
	#GL_APPLE_ãxtuª_f‹m©_BGRA8888
 1

	)

1417 #i‚de‡
GL_APPLE_ãxtuª_max_Àvñ


1418 
	#GL_APPLE_ãxtuª_max_Àvñ
 1

	)

1426 #i‚de‡
GL_ARM_mÆi_¥ogøm_bö¨y


1427 
	#GL_ARM_mÆi_¥ogøm_bö¨y
 1

	)

1431 #i‚de‡
GL_ARM_mÆi_shadî_bö¨y


1432 
	#GL_ARM_mÆi_shadî_bö¨y
 1

	)

1436 #i‚de‡
GL_ARM_rgba8


1437 
	#GL_ARM_rgba8
 1

	)

1445 #i‚de‡
GL_EXT_bÀnd_mömax


1446 
	#GL_EXT_bÀnd_mömax
 1

	)

1450 #i‚de‡
GL_EXT_cﬁ‹_buf„r_hÆf_Êﬂt


1451 
	#GL_EXT_cﬁ‹_buf„r_hÆf_Êﬂt
 1

	)

1455 #i‚de‡
GL_EXT_debug_œbñ


1456 
	#GL_EXT_debug_œbñ
 1

	)

1457 #ifde‡
GL_GLEXT_PROTOTYPES


1458 
GL_APICALL
 
GL_APIENTRY
 
	`glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

1459 
GL_APICALL
 
GL_APIENTRY
 
	`glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

1461 (
	tGL_APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

1462 (
	tGL_APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

1466 #i‚de‡
GL_EXT_debug_m¨kî


1467 
	#GL_EXT_debug_m¨kî
 1

	)

1468 #ifde‡
GL_GLEXT_PROTOTYPES


1469 
GL_APICALL
 
GL_APIENTRY
 
	`glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

1470 
GL_APICALL
 
GL_APIENTRY
 
	`glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

1471 
GL_APICALL
 
GL_APIENTRY
 
	`glP›GroupM¨kîEXT
 ();

1473 (
	tGL_APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

1474 (
	tGL_APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

1475 (
	tGL_APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

1479 #i‚de‡
GL_EXT_disˇrd_‰amebuf„r


1480 
	#GL_EXT_disˇrd_‰amebuf„r
 1

	)

1481 #ifde‡
GL_GLEXT_PROTOTYPES


1482 
GL_APICALL
 
GL_APIENTRY
 
	`glDisˇrdFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

1484 (
	tGL_APIENTRYP
 
	tPFNGLDISCARDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

1487 #i‚de‡
GL_EXT_disjoöt_timî_quîy


1488 
	#GL_EXT_disjoöt_timî_quîy
 1

	)

1489 #ifde‡
GL_GLEXT_PROTOTYPES


1490 
GL_APICALL
 
GL_APIENTRY
 
	`glGíQuîõsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1491 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeQuîõsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1492 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsQuîyEXT
 (
GLuöt
 
id
);

1493 
GL_APICALL
 
GL_APIENTRY
 
	`glBegöQuîyEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1494 
GL_APICALL
 
GL_APIENTRY
 
	`glEndQuîyEXT
 (
GLíum
 
èrgë
);

1495 
GL_APICALL
 
GL_APIENTRY
 
	`glQuîyCou¡îEXT
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1496 
GL_APICALL
 
GL_APIENTRY
 
	`glGëQuîyivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1497 
GL_APICALL
 
GL_APIENTRY
 
	`glGëQuîyObje˘ivEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1498 
GL_APICALL
 
GL_APIENTRY
 
	`glGëQuîyObje˘uivEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1499 
GL_APICALL
 
GL_APIENTRY
 
	`glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1500 
GL_APICALL
 
GL_APIENTRY
 
	`glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1502 (
	tGL_APIENTRYP
 
	tPFNGLGENQUERIESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1503 (
	tGL_APIENTRYP
 
	tPFNGLDELETEQUERIESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1504 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISQUERYEXTPROC
Ë(
	tGLuöt
 
	tid
);

1505 (
	tGL_APIENTRYP
 
	tPFNGLBEGINQUERYEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1506 (
	tGL_APIENTRYP
 
	tPFNGLENDQUERYEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

1507 (
	tGL_APIENTRYP
 
	tPFNGLQUERYCOUNTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1508 (
	tGL_APIENTRYP
 
	tPFNGLGETQUERYIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1509 (
	tGL_APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1510 (
	tGL_APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1511 (
	tGL_APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1512 (
	tGL_APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1515 #i‚de‡
GL_EXT_døw_buf„rs


1516 
	#GL_EXT_døw_buf„rs
 1

	)

1517 #ifde‡
GL_GLEXT_PROTOTYPES


1518 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwBuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

1520 (
	tGL_APIENTRYP
 
	tPFNGLDRAWBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

1524 #i‚de‡
GL_EXT_m≠_buf„r_ønge


1525 
	#GL_EXT_m≠_buf„r_ønge
 1

	)

1526 #ifde‡
GL_GLEXT_PROTOTYPES


1527 
GL_APICALL
 * 
GL_APIENTRY
 
	`glM≠Buf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1528 
GL_APICALL
 
GL_APIENTRY
 
	`glFlushM≠≥dBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1530 * (
	tGL_APIENTRYP
 
	tPFNGLMAPBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1531 (
	tGL_APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1535 #i‚de‡
GL_EXT_mu…ißm∂ed_ªndî_to_ãxtuª


1536 
	#GL_EXT_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

1537 #ifde‡
GL_GLEXT_PROTOTYPES


1538 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1539 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
ßm∂es
);

1541 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1542 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

1546 #i‚de‡
GL_EXT_mu…ivõw_døw_buf„rs


1547 
	#GL_EXT_mu…ivõw_døw_buf„rs
 1

	)

1548 #ifde‡
GL_GLEXT_PROTOTYPES


1549 
GL_APICALL
 
GL_APIENTRY
 
	`glRódBuf„rIndexedEXT
 (
GLíum
 
§c
, 
GLöt
 
ödex
);

1550 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwBuf„rsIndexedEXT
 (
GLöt
 
n
, c⁄° 
GLíum
 *
loˇti⁄
, c⁄° GLöà*
ödi˚s
);

1551 
GL_APICALL
 
GL_APIENTRY
 
	`glGëI¡egîi_vEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1553 (
	tGL_APIENTRYP
 
	tPFNGLREADBUFFERINDEXEDEXTPROC
Ë(
	tGLíum
 
	t§c
, 
	tGLöt
 
	tödex
);

1554 (
	tGL_APIENTRYP
 
	tPFNGLDRAWBUFFERSINDEXEDEXTPROC
Ë(
	tGLöt
 
	tn
, c⁄° 
	tGLíum
 *
	tloˇti⁄
, c⁄° GLöà*
	tödi˚s
);

1555 (
	tGL_APIENTRYP
 
	tPFNGLGETINTEGERI_VEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1558 #i‚de‡
GL_EXT_mu…i_døw_¨øys


1559 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

1560 #ifde‡
GL_GLEXT_PROTOTYPES


1561 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

1562 
GL_APICALL
 
GL_APIENTRY
 
	`glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 **
ödi˚s
, GLsizeò
¥imcou¡
);

1564 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

1565 (
	tGL_APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 **
	tödi˚s
, GLsizeò
	t¥imcou¡
);

1569 #i‚de‡
GL_EXT_oc˛usi⁄_quîy_boﬁón


1570 
	#GL_EXT_oc˛usi⁄_quîy_boﬁón
 1

	)

1575 #i‚de‡
GL_EXT_ªad_f‹m©_bgø


1576 
	#GL_EXT_ªad_f‹m©_bgø
 1

	)

1580 #i‚de‡
GL_EXT_robu°√ss


1581 
	#GL_EXT_robu°√ss
 1

	)

1582 #ifde‡
GL_GLEXT_PROTOTYPES


1583 
GL_APICALL
 
GLíum
 
GL_APIENTRY
 
	`glGëGøphicsRe£tSètusEXT
 ();

1584 
GL_APICALL
 
GL_APIENTRY
 
	`glRódnPixñsEXT
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, 
GLvoid
 *
d©a
);

1585 
GL_APICALL
 
GL_APIENTRY
 
	`glGënUnif‹mfvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

1586 
GL_APICALL
 
GL_APIENTRY
 
	`glGënUnif‹mivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

1588 
	$GLíum
 (
	tGL_APIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSEXTPROC
) ();

1589 (
	tGL_APIENTRYP
 
	tPFNGLREADNPIXELSEXTPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, 
	tGLvoid
 *
	td©a
);

1590 (
	tGL_APIENTRYP
 
	tPFNGLGETNUNIFORMFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

1591 (
	tGL_APIENTRYP
 
	tPFNGLGETNUNIFORMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

1595 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


1596 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

1597 #ifde‡
GL_GLEXT_PROTOTYPES


1598 
GL_APICALL
 
GL_APIENTRY
 
	`glU£ProgømSègesEXT
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1599 
GL_APICALL
 
GL_APIENTRY
 
	`glA˘iveShadîProgømEXT
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1600 
GL_APICALL
 
GLuöt
 
GL_APIENTRY
 
	`glCª©eShadîProgømvEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 **
°rögs
);

1601 
GL_APICALL
 
GL_APIENTRY
 
	`glBödProgømPùñöeEXT
 (
GLuöt
 
pùñöe
);

1602 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeProgømPùñöesEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1603 
GL_APICALL
 
GL_APIENTRY
 
	`glGíProgømPùñöesEXT
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1604 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsProgømPùñöeEXT
 (
GLuöt
 
pùñöe
);

1605 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1606 
GL_APICALL
 
GL_APIENTRY
 
	`glGëProgømPùñöeivEXT
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1607 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
x
);

1608 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
);

1609 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
);

1610 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1611 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
);

1612 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

1613 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1614 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

1615 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1616 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1617 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1618 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1619 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1620 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1621 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1622 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1623 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

1624 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

1625 
GL_APICALL
 
GL_APIENTRY
 
	`glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

1626 
GL_APICALL
 
GL_APIENTRY
 
	`glVÆid©eProgømPùñöeEXT
 (
GLuöt
 
pùñöe
);

1627 
GL_APICALL
 
GL_APIENTRY
 
	`glGëProgømPùñöeInfoLogEXT
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

1629 (
	tGL_APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1630 (
	tGL_APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1631 
	$GLuöt
 (
	tGL_APIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 **
	t°rögs
);

1632 (
	tGL_APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1633 (
	tGL_APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1634 (
	tGL_APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1635 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISPROGRAMPIPELINEEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1636 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1637 (
	tGL_APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1638 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
);

1639 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
);

1640 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
, GLöà
	tz
);

1641 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1642 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
);

1643 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

1644 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

1645 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

1646 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1647 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1648 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1649 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1650 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1651 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1652 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1653 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1654 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1655 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1656 (
	tGL_APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1657 (
	tGL_APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1658 (
	tGL_APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1662 #i‚de‡
GL_EXT_shadî_‰amebuf„r_„tch


1663 
	#GL_EXT_shadî_‰amebuf„r_„tch
 1

	)

1667 #i‚de‡
GL_EXT_shadî_ãxtuª_lod


1668 
	#GL_EXT_shadî_ãxtuª_lod
 1

	)

1672 #i‚de‡
GL_EXT_shadow_ßm∂îs


1673 
	#GL_EXT_shadow_ßm∂îs
 1

	)

1677 #i‚de‡
GL_EXT_sRGB


1678 
	#GL_EXT_sRGB
 1

	)

1682 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


1683 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

1687 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


1688 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

1692 #i‚de‡
GL_EXT_ãxtuª_f‹m©_BGRA8888


1693 
	#GL_EXT_ãxtuª_f‹m©_BGRA8888
 1

	)

1697 #i‚de‡
GL_EXT_ãxtuª_rg


1698 
	#GL_EXT_ãxtuª_rg
 1

	)

1702 #i‚de‡
GL_EXT_ãxtuª_°‹age


1703 
	#GL_EXT_ãxtuª_°‹age
 1

	)

1704 #ifde‡
GL_GLEXT_PROTOTYPES


1705 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSt‹age1DEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

1706 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSt‹age2DEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1707 
GL_APICALL
 
GL_APIENTRY
 
	`glTexSt‹age3DEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

1708 
GL_APICALL
 
GL_APIENTRY
 
	`glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

1709 
GL_APICALL
 
GL_APIENTRY
 
	`glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1710 
GL_APICALL
 
GL_APIENTRY
 
	`glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

1712 (
	tGL_APIENTRYP
 
	tPFNGLTEXSTORAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

1713 (
	tGL_APIENTRYP
 
	tPFNGLTEXSTORAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1714 (
	tGL_APIENTRYP
 
	tPFNGLTEXSTORAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

1715 (
	tGL_APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

1716 (
	tGL_APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1717 (
	tGL_APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

1721 #i‚de‡
GL_EXT_ãxtuª_ty≥_2_10_10_10_REV


1722 
	#GL_EXT_ãxtuª_ty≥_2_10_10_10_REV
 1

	)

1726 #i‚de‡
GL_EXT_u≈ack_subimage


1727 
	#GL_EXT_u≈ack_subimage
 1

	)

1735 #i‚de‡
GL_DMP_shadî_bö¨y


1736 
	#GL_DMP_shadî_bö¨y
 1

	)

1744 #i‚de‡
GL_FJ_shadî_bö¨y_GCCSO


1745 
	#GL_FJ_shadî_bö¨y_GCCSO
 1

	)

1753 #i‚de‡
GL_IMG_¥ogøm_bö¨y


1754 
	#GL_IMG_¥ogøm_bö¨y
 1

	)

1758 #i‚de‡
GL_IMG_ªad_f‹m©


1759 
	#GL_IMG_ªad_f‹m©
 1

	)

1763 #i‚de‡
GL_IMG_shadî_bö¨y


1764 
	#GL_IMG_shadî_bö¨y
 1

	)

1768 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc


1769 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc
 1

	)

1773 #i‚de‡
GL_IMG_ãxtuª_com¥essi⁄_pvπc2


1774 
	#GL_IMG_ãxtuª_com¥essi⁄_pvπc2
 1

	)

1778 #i‚de‡
GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª


1779 
	#GL_IMG_mu…ißm∂ed_ªndî_to_ãxtuª
 1

	)

1780 #ifde‡
GL_GLEXT_PROTOTYPES


1781 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eIMG
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1782 
GL_APICALL
 
GL_APIENTRY
 
	`glFømebuf„rTextuª2DMu…ißm∂eIMG
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
ßm∂es
);

1784 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1785 (
	tGL_APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tßm∂es
);

1793 #i‚de‡
GL_NV_covîage_ßm∂e


1794 
	#GL_NV_covîage_ßm∂e
 1

	)

1795 #ifde‡
GL_GLEXT_PROTOTYPES


1796 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageMaskNV
 (
GLboﬁón
 
mask
);

1797 
GL_APICALL
 
GL_APIENTRY
 
	`glCovîageO≥øti⁄NV
 (
GLíum
 
›î©i⁄
);

1799 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEMASKNVPROC
Ë(
	tGLboﬁón
 
	tmask
);

1800 (
	tGL_APIENTRYP
 
	tPFNGLCOVERAGEOPERATIONNVPROC
Ë(
	tGLíum
 
	t›î©i⁄
);

1804 #i‚de‡
GL_NV_dïth_n⁄löór


1805 
	#GL_NV_dïth_n⁄löór
 1

	)

1809 #i‚de‡
GL_NV_døw_buf„rs


1810 
	#GL_NV_døw_buf„rs
 1

	)

1811 #ifde‡
GL_GLEXT_PROTOTYPES


1812 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwBuf„rsNV
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

1814 (
	tGL_APIENTRYP
 
	tPFNGLDRAWBUFFERSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

1818 #i‚de‡
GL_NV_døw_ö°™˚d


1819 
	#GL_NV_døw_ö°™˚d
 1

	)

1820 #ifde‡
GL_GLEXT_PROTOTYPES


1821 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwAºaysIn°™˚dNV
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

1822 
GL_APICALL
 
GL_APIENTRY
 
	`glDøwEÀmítsIn°™˚dNV
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
, GLsizeò
¥imcou¡
);

1824 (
	tGL_APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

1825 (
	tGL_APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

1829 #i‚de‡
GL_NV_fbo_cﬁ‹_©èchmíts


1830 
	#GL_NV_fbo_cﬁ‹_©èchmíts
 1

	)

1834 #i‚de‡
GL_NV_„n˚


1835 
	#GL_NV_„n˚
 1

	)

1836 #ifde‡
GL_GLEXT_PROTOTYPES


1837 
GL_APICALL
 
GL_APIENTRY
 
	`glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

1838 
GL_APICALL
 
GL_APIENTRY
 
	`glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

1839 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glIsFí˚NV
 (
GLuöt
 
„n˚
);

1840 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

1841 
GL_APICALL
 
GL_APIENTRY
 
	`glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1842 
GL_APICALL
 
GL_APIENTRY
 
	`glFöishFí˚NV
 (
GLuöt
 
„n˚
);

1843 
GL_APICALL
 
GL_APIENTRY
 
	`glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

1845 (
	tGL_APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

1846 (
	tGL_APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

1847 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

1848 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

1849 (
	tGL_APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1850 (
	tGL_APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

1851 (
	tGL_APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

1855 #i‚de‡
GL_NV_‰amebuf„r_blô


1856 
	#GL_NV_‰amebuf„r_blô
 1

	)

1857 #ifde‡
GL_GLEXT_PROTOTYPES


1858 
GL_APICALL
 
GL_APIENTRY
 
	`glBlôFømebuf„rNV
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1860 (
	tGL_APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERNVPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1864 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e


1865 
	#GL_NV_‰amebuf„r_mu…ißm∂e
 1

	)

1866 #ifde‡
GL_GLEXT_PROTOTYPES


1867 
GL_APICALL
 
GL_APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂eNV
 ( 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1869 (
	tGL_APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC
Ë–
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1873 #i‚de‡
GL_NV_gíî©e_mùm≠_sRGB


1874 
	#GL_NV_gíî©e_mùm≠_sRGB
 1

	)

1878 #i‚de‡
GL_NV_ö°™˚d_¨øys


1879 
	#GL_NV_ö°™˚d_¨øys
 1

	)

1880 #ifde‡
GL_GLEXT_PROTOTYPES


1881 
GL_APICALL
 
GL_APIENTRY
 
	`glVîãxAâribDivis‹NV
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1883 (
	tGL_APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORNVPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1887 #i‚de‡
GL_NV_ªad_buf„r


1888 
	#GL_NV_ªad_buf„r
 1

	)

1889 #ifde‡
GL_GLEXT_PROTOTYPES


1890 
GL_APICALL
 
GL_APIENTRY
 
	`glRódBuf„rNV
 (
GLíum
 
mode
);

1892 (
	tGL_APIENTRYP
 
	tPFNGLREADBUFFERNVPROC
Ë(
	tGLíum
 
	tmode
);

1896 #i‚de‡
GL_NV_ªad_buf„r_‰⁄t


1897 
	#GL_NV_ªad_buf„r_‰⁄t
 1

	)

1901 #i‚de‡
GL_NV_ªad_dïth


1902 
	#GL_NV_ªad_dïth
 1

	)

1906 #i‚de‡
GL_NV_ªad_dïth_°ícû


1907 
	#GL_NV_ªad_dïth_°ícû
 1

	)

1911 #i‚de‡
GL_NV_ªad_°ícû


1912 
	#GL_NV_ªad_°ícû
 1

	)

1916 #i‚de‡
GL_NV_shadow_ßm∂îs_¨øy


1917 
	#GL_NV_shadow_ßm∂îs_¨øy
 1

	)

1921 #i‚de‡
GL_NV_shadow_ßm∂îs_cube


1922 
	#GL_NV_shadow_ßm∂îs_cube
 1

	)

1926 #i‚de‡
GL_NV_sRGB_f‹m©s


1927 
	#GL_NV_sRGB_f‹m©s
 1

	)

1931 #i‚de‡
GL_NV_ãxtuª_b‹dî_˛amp


1932 
	#GL_NV_ãxtuª_b‹dî_˛amp
 1

	)

1936 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_s3tc_upd©e


1937 
	#GL_NV_ãxtuª_com¥essi⁄_s3tc_upd©e
 1

	)

1941 #i‚de‡
GL_NV_ãxtuª_≈Ÿ_2D_mùm≠


1942 
	#GL_NV_ãxtuª_≈Ÿ_2D_mùm≠
 1

	)

1950 #i‚de‡
GL_QCOM_Æpha_ã°


1951 
	#GL_QCOM_Æpha_ã°
 1

	)

1952 #ifde‡
GL_GLEXT_PROTOTYPES


1953 
GL_APICALL
 
GL_APIENTRY
 
	`glAÕhaFuncQCOM
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

1955 (
	tGL_APIENTRYP
 
	tPFNGLALPHAFUNCQCOMPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

1959 #i‚de‡
GL_QCOM_bönög_c⁄åﬁ


1960 
	#GL_QCOM_bönög_c⁄åﬁ
 1

	)

1964 #i‚de‡
GL_QCOM_drivî_c⁄åﬁ


1965 
	#GL_QCOM_drivî_c⁄åﬁ
 1

	)

1966 #ifde‡
GL_GLEXT_PROTOTYPES


1967 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁsQCOM
 (
GLöt
 *
num
, 
GLsizei
 
size
, 
GLuöt
 *
drivîC⁄åﬁs
);

1968 
GL_APICALL
 
GL_APIENTRY
 
	`glGëDrivîC⁄åﬁSåögQCOM
 (
GLuöt
 
drivîC⁄åﬁ
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
drivîC⁄åﬁSåög
);

1969 
GL_APICALL
 
GL_APIENTRY
 
	`glE«bÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

1970 
GL_APICALL
 
GL_APIENTRY
 
	`glDißbÀDrivîC⁄åﬁQCOM
 (
GLuöt
 
drivîC⁄åﬁ
);

1972 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSQCOMPROC
Ë(
	tGLöt
 *
	tnum
, 
	tGLsizei
 
	tsize
, 
	tGLuöt
 *
	tdrivîC⁄åﬁs
);

1973 (
	tGL_APIENTRYP
 
	tPFNGLGETDRIVERCONTROLSTRINGQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tdrivîC⁄åﬁSåög
);

1974 (
	tGL_APIENTRYP
 
	tPFNGLENABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

1975 (
	tGL_APIENTRYP
 
	tPFNGLDISABLEDRIVERCONTROLQCOMPROC
Ë(
	tGLuöt
 
	tdrivîC⁄åﬁ
);

1979 #i‚de‡
GL_QCOM_exãnded_gë


1980 
	#GL_QCOM_exãnded_gë
 1

	)

1981 #ifde‡
GL_GLEXT_PROTOTYPES


1982 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTextuªsQCOM
 (
GLuöt
 *
ãxtuªs
, 
GLöt
 
maxTextuªs
, GLöà*
numTextuªs
);

1983 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rsQCOM
 (
GLuöt
 *
buf„rs
, 
GLöt
 
maxBuf„rs
, GLöà*
numBuf„rs
);

1984 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëRídîbuf„rsQCOM
 (
GLuöt
 *
ªndîbuf„rs
, 
GLöt
 
maxRídîbuf„rs
, GLöà*
numRídîbuf„rs
);

1985 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëFømebuf„rsQCOM
 (
GLuöt
 *
‰amebuf„rs
, 
GLöt
 
maxFømebuf„rs
, GLöà*
numFømebuf„rs
);

1986 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexLevñP¨amëîivQCOM
 (
GLuöt
 
ãxtuª
, 
GLíum
 
Á˚
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

1987 
GL_APICALL
 
GL_APIENTRY
 
	`glExtTexObje˘SèãOvîrideiQCOM
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1988 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëTexSubImageQCOM
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
ãxñs
);

1989 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëBuf„rPoöãrvQCOM
 (
GLíum
 
èrgë
, 
GLvoid
 **
∑øms
);

1991 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXTURESQCOMPROC
Ë(
	tGLuöt
 *
	tãxtuªs
, 
	tGLöt
 
	tmaxTextuªs
, GLöà*
	tnumTextuªs
);

1992 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tbuf„rs
, 
	tGLöt
 
	tmaxBuf„rs
, GLöà*
	tnumBuf„rs
);

1993 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETRENDERBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	tªndîbuf„rs
, 
	tGLöt
 
	tmaxRídîbuf„rs
, GLöà*
	tnumRídîbuf„rs
);

1994 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETFRAMEBUFFERSQCOMPROC
Ë(
	tGLuöt
 *
	t‰amebuf„rs
, 
	tGLöt
 
	tmaxFømebuf„rs
, GLöà*
	tnumFømebuf„rs
);

1995 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tÁ˚
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

1996 (
	tGL_APIENTRYP
 
	tPFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1997 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETTEXSUBIMAGEQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tãxñs
);

1998 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETBUFFERPOINTERVQCOMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLvoid
 **
	t∑øms
);

2002 #i‚de‡
GL_QCOM_exãnded_gë2


2003 
	#GL_QCOM_exãnded_gë2
 1

	)

2004 #ifde‡
GL_GLEXT_PROTOTYPES


2005 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëShadîsQCOM
 (
GLuöt
 *
shadîs
, 
GLöt
 
maxShadîs
, GLöà*
numShadîs
);

2006 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømsQCOM
 (
GLuöt
 *
¥ogøms
, 
GLöt
 
maxProgøms
, GLöà*
numProgøms
);

2007 
GL_APICALL
 
GLboﬁón
 
GL_APIENTRY
 
	`glExtIsProgømBö¨yQCOM
 (
GLuöt
 
¥ogøm
);

2008 
GL_APICALL
 
GL_APIENTRY
 
	`glExtGëProgømBö¨ySour˚QCOM
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, 
GLch¨
 *
sour˚
, 
GLöt
 *
Àngth
);

2010 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETSHADERSQCOMPROC
Ë(
	tGLuöt
 *
	tshadîs
, 
	tGLöt
 
	tmaxShadîs
, GLöà*
	tnumShadîs
);

2011 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMSQCOMPROC
Ë(
	tGLuöt
 *
	t¥ogøms
, 
	tGLöt
 
	tmaxProgøms
, GLöà*
	tnumProgøms
);

2012 
	$GLboﬁón
 (
	tGL_APIENTRYP
 
	tPFNGLEXTISPROGRAMBINARYQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

2013 (
	tGL_APIENTRYP
 
	tPFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, 
	tGLch¨
 *
	tsour˚
, 
	tGLöt
 *
	tÀngth
);

2017 #i‚de‡
GL_QCOM_≥rfm⁄_globÆ_mode


2018 
	#GL_QCOM_≥rfm⁄_globÆ_mode
 1

	)

2022 #i‚de‡
GL_QCOM_wrôe⁄ly_ªndîög


2023 
	#GL_QCOM_wrôe⁄ly_ªndîög
 1

	)

2027 #i‚de‡
GL_QCOM_tûed_ªndîög


2028 
	#GL_QCOM_tûed_ªndîög
 1

	)

2029 #ifde‡
GL_GLEXT_PROTOTYPES


2030 
GL_APICALL
 
GL_APIENTRY
 
	`glSèπTûögQCOM
 (
GLuöt
 
x
, GLuöà
y
, GLuöà
width
, GLuöà
height
, 
GLbôfõld
 
¥e£rveMask
);

2031 
GL_APICALL
 
GL_APIENTRY
 
	`glEndTûögQCOM
 (
GLbôfõld
 
¥e£rveMask
);

2033 (
	tGL_APIENTRYP
 
	tPFNGLSTARTTILINGQCOMPROC
Ë(
	tGLuöt
 
	tx
, GLuöà
	ty
, GLuöà
	twidth
, GLuöà
	theight
, 
	tGLbôfõld
 
	t¥e£rveMask
);

2034 (
	tGL_APIENTRYP
 
	tPFNGLENDTILINGQCOMPROC
Ë(
	tGLbôfõld
 
	t¥e£rveMask
);

2042 #i‚de‡
GL_VIV_shadî_bö¨y


2043 
	#GL_VIV_shadî_bö¨y
 1

	)

2046 #ifde‡
__˝lu•lus


2047 
	}
}

	@SDL2/include/SDL_opengles2_gl2platform.h

1 #i‚de‡
__gl2∂©f‹m_h_


2 
	#__gl2∂©f‹m_h_


	)

22 #i‚de‡
GL_APICALL


23 
	#GL_APICALL
 
KHRONOS_APICALL


	)

26 #i‚de‡
GL_APIENTRY


27 
	#GL_APIENTRY
 
KHRONOS_APIENTRY


	)

	@SDL2/include/SDL_opengles2_khrplatform.h

1 #i‚de‡
__khΩœtf‹m_h_


2 
	#__khΩœtf‹m_h_


	)

100 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

101 
	#KHRONOS_APICALL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

102 #ñi‡
deföed
 (
__SYMBIAN32__
)

103 
	#KHRONOS_APICALL
 
IMPORT_C


	)

105 
	#KHRONOS_APICALL


	)

114 #i‡
deföed
(
_WIN32
Ë&& !deföed(
_WIN32_WCE
Ë&& !deföed(
__SCITECH_SNAP__
)

116 
	#KHRONOS_APIENTRY
 
__°dˇŒ


	)

118 
	#KHRONOS_APIENTRY


	)

126 #i‡
deföed
 (
__ARMCC_2__
)

127 
	#KHRONOS_APIATTRIBUTES
 
__so·Â


	)

129 
	#KHRONOS_APIATTRIBUTES


	)

135 #i‡(
deföed
(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__GNUC__
Ë|| deföed(
__SCO__
Ë|| deföed(
__USLC__
)

141 
	~<°döt.h
>

142 
öt32_t
 
	tkhr⁄os_öt32_t
;

143 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

144 
öt64_t
 
	tkhr⁄os_öt64_t
;

145 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

146 
	#KHRONOS_SUPPORT_INT64
 1

	)

147 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

149 #ñi‡
deföed
(
__VMS
 ) || deföed(
__sgi
)

154 
	~<öây≥s.h
>

155 
öt32_t
 
	tkhr⁄os_öt32_t
;

156 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

157 
öt64_t
 
	tkhr⁄os_öt64_t
;

158 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

159 
	#KHRONOS_SUPPORT_INT64
 1

	)

160 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

162 #ñi‡
deföed
(
_WIN32
Ë&& !deföed(
__SCITECH_SNAP__
)

167 
__öt32
 
	tkhr⁄os_öt32_t
;

168 
	t__öt32
 
	tkhr⁄os_uöt32_t
;

169 
__öt64
 
	tkhr⁄os_öt64_t
;

170 
	t__öt64
 
	tkhr⁄os_uöt64_t
;

171 
	#KHRONOS_SUPPORT_INT64
 1

	)

172 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

174 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

179 
	tkhr⁄os_öt32_t
;

180 
	tkhr⁄os_uöt32_t
;

181 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

182 
	tkhr⁄os_öt64_t
;

183 
	tkhr⁄os_uöt64_t
;

185 
	tkhr⁄os_öt64_t
;

186 
	tkhr⁄os_uöt64_t
;

188 
	#KHRONOS_SUPPORT_INT64
 1

	)

189 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

196 
	tkhr⁄os_öt32_t
;

197 
	tkhr⁄os_uöt32_t
;

198 
	#KHRONOS_SUPPORT_INT64
 0

	)

199 
	#KHRONOS_SUPPORT_FLOAT
 0

	)

206 
	~<°döt.h
>

207 
öt32_t
 
	tkhr⁄os_öt32_t
;

208 
uöt32_t
 
	tkhr⁄os_uöt32_t
;

209 
öt64_t
 
	tkhr⁄os_öt64_t
;

210 
uöt64_t
 
	tkhr⁄os_uöt64_t
;

211 
	#KHRONOS_SUPPORT_INT64
 1

	)

212 
	#KHRONOS_SUPPORT_FLOAT
 1

	)

220 sig√d 
	tkhr⁄os_öt8_t
;

221 
	tkhr⁄os_uöt8_t
;

222 sig√d 
	tkhr⁄os_öt16_t
;

223 
	tkhr⁄os_uöt16_t
;

230 #ifde‡
_WIN64


231 sig√d 
	tkhr⁄os_öçå_t
;

232 
	tkhr⁄os_uöçå_t
;

233 sig√d 
	tkhr⁄os_ssize_t
;

234 
	tkhr⁄os_usize_t
;

236 sig√d 
	tkhr⁄os_öçå_t
;

237 
	tkhr⁄os_uöçå_t
;

238 sig√d 
	tkhr⁄os_ssize_t
;

239 
	tkhr⁄os_usize_t
;

242 #i‡
KHRONOS_SUPPORT_FLOAT


246 
	tkhr⁄os_Êﬂt_t
;

249 #i‡
KHRONOS_SUPPORT_INT64


259 
khr⁄os_uöt64_t
 
	tkhr⁄os_utime_«no£c⁄ds_t
;

260 
khr⁄os_öt64_t
 
	tkhr⁄os_°ime_«no£c⁄ds_t
;

266 #i‚de‡
KHRONOS_MAX_ENUM


267 
	#KHRONOS_MAX_ENUM
 0x7FFFFFFF

	)

277 
	mKHRONOS_FALSE
 = 0,

278 
	mKHRONOS_TRUE
 = 1,

279 
	mKHRONOS_BOOLEAN_ENUM_FORCE_SIZE
 = 
KHRONOS_MAX_ENUM


280 } 
	tkhr⁄os_boﬁón_íum_t
;

	@SDL2/include/SDL_pixels.h

28 #i‚de‡
SDL_pixñs_h_


29 
	#SDL_pixñs_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_ídün.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


46 
	#SDL_ALPHA_OPAQUE
 255

	)

47 
	#SDL_ALPHA_TRANSPARENT
 0

	)

53 
SDL_PIXELTYPE_UNKNOWN
,

54 
SDL_PIXELTYPE_INDEX1
,

55 
SDL_PIXELTYPE_INDEX4
,

56 
SDL_PIXELTYPE_INDEX8
,

57 
SDL_PIXELTYPE_PACKED8
,

58 
SDL_PIXELTYPE_PACKED16
,

59 
SDL_PIXELTYPE_PACKED32
,

60 
SDL_PIXELTYPE_ARRAYU8
,

61 
SDL_PIXELTYPE_ARRAYU16
,

62 
SDL_PIXELTYPE_ARRAYU32
,

63 
SDL_PIXELTYPE_ARRAYF16
,

64 
SDL_PIXELTYPE_ARRAYF32


65 } 
	tSDL_PixñTy≥
;

70 
SDL_BITMAPORDER_NONE
,

71 
SDL_BITMAPORDER_4321
,

72 
SDL_BITMAPORDER_1234


73 } 
	tSDL_Bôm≠Ordî
;

78 
SDL_PACKEDORDER_NONE
,

79 
SDL_PACKEDORDER_XRGB
,

80 
SDL_PACKEDORDER_RGBX
,

81 
SDL_PACKEDORDER_ARGB
,

82 
SDL_PACKEDORDER_RGBA
,

83 
SDL_PACKEDORDER_XBGR
,

84 
SDL_PACKEDORDER_BGRX
,

85 
SDL_PACKEDORDER_ABGR
,

86 
SDL_PACKEDORDER_BGRA


87 } 
	tSDL_PackedOrdî
;

94 
SDL_ARRAYORDER_NONE
,

95 
SDL_ARRAYORDER_RGB
,

96 
SDL_ARRAYORDER_RGBA
,

97 
SDL_ARRAYORDER_ARGB
,

98 
SDL_ARRAYORDER_BGR
,

99 
SDL_ARRAYORDER_BGRA
,

100 
SDL_ARRAYORDER_ABGR


101 } 
	tSDL_AºayOrdî
;

106 
SDL_PACKEDLAYOUT_NONE
,

107 
SDL_PACKEDLAYOUT_332
,

108 
SDL_PACKEDLAYOUT_4444
,

109 
SDL_PACKEDLAYOUT_1555
,

110 
SDL_PACKEDLAYOUT_5551
,

111 
SDL_PACKEDLAYOUT_565
,

112 
SDL_PACKEDLAYOUT_8888
,

113 
SDL_PACKEDLAYOUT_2101010
,

114 
SDL_PACKEDLAYOUT_1010102


115 } 
	tSDL_PackedLayout
;

117 
	#SDL_DEFINE_PIXELFOURCC
(
A
, 
B
, 
C
, 
D
Ë
	`SDL_FOURCC
(A, B, C, D)

	)

119 
	#SDL_DEFINE_PIXELFORMAT
(
ty≥
, 
‹dî
, 
œyout
, 
bôs
, 
byãs
) \

120 ((1 << 28Ë| ((
ty≥
Ë<< 24Ë| ((
‹dî
Ë<< 20Ë| ((
œyout
) << 16) | \

121 ((
bôs
Ë<< 8Ë| ((
byãs
Ë<< 0))

	)

123 
	#SDL_PIXELFLAG
(
X
Ë(((XË>> 28Ë& 0x0F)

	)

124 
	#SDL_PIXELTYPE
(
X
Ë(((XË>> 24Ë& 0x0F)

	)

125 
	#SDL_PIXELORDER
(
X
Ë(((XË>> 20Ë& 0x0F)

	)

126 
	#SDL_PIXELLAYOUT
(
X
Ë(((XË>> 16Ë& 0x0F)

	)

127 
	#SDL_BITSPERPIXEL
(
X
Ë(((XË>> 8Ë& 0xFF)

	)

128 
	#SDL_BYTESPERPIXEL
(
X
) \

129 (
	`SDL_ISPIXELFORMAT_FOURCC
(
X
) ? \

130 ((((
X
Ë=
SDL_PIXELFORMAT_YUY2
) || \

131 ((
X
Ë=
SDL_PIXELFORMAT_UYVY
) || \

132 ((
X
Ë=
SDL_PIXELFORMAT_YVYU
)Ë? 2 : 1Ë: (((XË>> 0Ë& 0xFF))

	)

134 
	#SDL_ISPIXELFORMAT_INDEXED
(
f‹m©
) \

135 (!
	`SDL_ISPIXELFORMAT_FOURCC
(
f‹m©
) && \

136 ((
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_INDEX1
) || \

137 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_INDEX4
) || \

138 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_INDEX8
)))

	)

140 
	#SDL_ISPIXELFORMAT_PACKED
(
f‹m©
) \

141 (!
	`SDL_ISPIXELFORMAT_FOURCC
(
f‹m©
) && \

142 ((
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_PACKED8
) || \

143 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_PACKED16
) || \

144 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_PACKED32
)))

	)

146 
	#SDL_ISPIXELFORMAT_ARRAY
(
f‹m©
) \

147 (!
	`SDL_ISPIXELFORMAT_FOURCC
(
f‹m©
) && \

148 ((
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_ARRAYU8
) || \

149 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_ARRAYU16
) || \

150 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_ARRAYU32
) || \

151 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_ARRAYF16
) || \

152 (
	`SDL_PIXELTYPE
(
f‹m©
Ë=
SDL_PIXELTYPE_ARRAYF32
)))

	)

154 
	#SDL_ISPIXELFORMAT_ALPHA
(
f‹m©
) \

155 ((
	`SDL_ISPIXELFORMAT_PACKED
(
f‹m©
) && \

156 ((
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_PACKEDORDER_ARGB
) || \

157 (
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_PACKEDORDER_RGBA
) || \

158 (
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_PACKEDORDER_ABGR
) || \

159 (
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_PACKEDORDER_BGRA
))) || \

160 (
	`SDL_ISPIXELFORMAT_ARRAY
(
f‹m©
) && \

161 ((
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_ARRAYORDER_ARGB
) || \

162 (
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_ARRAYORDER_RGBA
) || \

163 (
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_ARRAYORDER_ABGR
) || \

164 (
	`SDL_PIXELORDER
(
f‹m©
Ë=
SDL_ARRAYORDER_BGRA
))))

	)

167 
	#SDL_ISPIXELFORMAT_FOURCC
(
f‹m©
) \

168 ((
f‹m©
Ë&& (
	`SDL_PIXELFLAG
(f‹m©Ë!1))

	)

173 
SDL_PIXELFORMAT_UNKNOWN
,

174 
SDL_PIXELFORMAT_INDEX1LSB
 =

175 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_INDEX1
, 
SDL_BITMAPORDER_4321
, 0,

177 
SDL_PIXELFORMAT_INDEX1MSB
 =

178 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_INDEX1
, 
SDL_BITMAPORDER_1234
, 0,

180 
SDL_PIXELFORMAT_INDEX4LSB
 =

181 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_INDEX4
, 
SDL_BITMAPORDER_4321
, 0,

183 
SDL_PIXELFORMAT_INDEX4MSB
 =

184 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_INDEX4
, 
SDL_BITMAPORDER_1234
, 0,

186 
SDL_PIXELFORMAT_INDEX8
 =

187 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_INDEX8
, 0, 0, 8, 1),

188 
SDL_PIXELFORMAT_RGB332
 =

189 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED8
, 
SDL_PACKEDORDER_XRGB
,

190 
SDL_PACKEDLAYOUT_332
, 8, 1),

191 
SDL_PIXELFORMAT_RGB444
 =

192 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_XRGB
,

193 
SDL_PACKEDLAYOUT_4444
, 12, 2),

194 
SDL_PIXELFORMAT_BGR444
 =

195 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_XBGR
,

196 
SDL_PACKEDLAYOUT_4444
, 12, 2),

197 
SDL_PIXELFORMAT_RGB555
 =

198 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_XRGB
,

199 
SDL_PACKEDLAYOUT_1555
, 15, 2),

200 
SDL_PIXELFORMAT_BGR555
 =

201 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_XBGR
,

202 
SDL_PACKEDLAYOUT_1555
, 15, 2),

203 
SDL_PIXELFORMAT_ARGB4444
 =

204 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_ARGB
,

205 
SDL_PACKEDLAYOUT_4444
, 16, 2),

206 
SDL_PIXELFORMAT_RGBA4444
 =

207 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_RGBA
,

208 
SDL_PACKEDLAYOUT_4444
, 16, 2),

209 
SDL_PIXELFORMAT_ABGR4444
 =

210 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_ABGR
,

211 
SDL_PACKEDLAYOUT_4444
, 16, 2),

212 
SDL_PIXELFORMAT_BGRA4444
 =

213 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_BGRA
,

214 
SDL_PACKEDLAYOUT_4444
, 16, 2),

215 
SDL_PIXELFORMAT_ARGB1555
 =

216 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_ARGB
,

217 
SDL_PACKEDLAYOUT_1555
, 16, 2),

218 
SDL_PIXELFORMAT_RGBA5551
 =

219 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_RGBA
,

220 
SDL_PACKEDLAYOUT_5551
, 16, 2),

221 
SDL_PIXELFORMAT_ABGR1555
 =

222 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_ABGR
,

223 
SDL_PACKEDLAYOUT_1555
, 16, 2),

224 
SDL_PIXELFORMAT_BGRA5551
 =

225 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_BGRA
,

226 
SDL_PACKEDLAYOUT_5551
, 16, 2),

227 
SDL_PIXELFORMAT_RGB565
 =

228 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_XRGB
,

229 
SDL_PACKEDLAYOUT_565
, 16, 2),

230 
SDL_PIXELFORMAT_BGR565
 =

231 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED16
, 
SDL_PACKEDORDER_XBGR
,

232 
SDL_PACKEDLAYOUT_565
, 16, 2),

233 
SDL_PIXELFORMAT_RGB24
 =

234 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_ARRAYU8
, 
SDL_ARRAYORDER_RGB
, 0,

236 
SDL_PIXELFORMAT_BGR24
 =

237 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_ARRAYU8
, 
SDL_ARRAYORDER_BGR
, 0,

239 
SDL_PIXELFORMAT_RGB888
 =

240 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_XRGB
,

241 
SDL_PACKEDLAYOUT_8888
, 24, 4),

242 
SDL_PIXELFORMAT_RGBX8888
 =

243 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_RGBX
,

244 
SDL_PACKEDLAYOUT_8888
, 24, 4),

245 
SDL_PIXELFORMAT_BGR888
 =

246 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_XBGR
,

247 
SDL_PACKEDLAYOUT_8888
, 24, 4),

248 
SDL_PIXELFORMAT_BGRX8888
 =

249 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_BGRX
,

250 
SDL_PACKEDLAYOUT_8888
, 24, 4),

251 
SDL_PIXELFORMAT_ARGB8888
 =

252 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_ARGB
,

253 
SDL_PACKEDLAYOUT_8888
, 32, 4),

254 
SDL_PIXELFORMAT_RGBA8888
 =

255 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_RGBA
,

256 
SDL_PACKEDLAYOUT_8888
, 32, 4),

257 
SDL_PIXELFORMAT_ABGR8888
 =

258 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_ABGR
,

259 
SDL_PACKEDLAYOUT_8888
, 32, 4),

260 
SDL_PIXELFORMAT_BGRA8888
 =

261 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_BGRA
,

262 
SDL_PACKEDLAYOUT_8888
, 32, 4),

263 
SDL_PIXELFORMAT_ARGB2101010
 =

264 
SDL_DEFINE_PIXELFORMAT
(
SDL_PIXELTYPE_PACKED32
, 
SDL_PACKEDORDER_ARGB
,

265 
SDL_PACKEDLAYOUT_2101010
, 32, 4),

268 #i‡
SDL_BYTEORDER
 =
SDL_BIG_ENDIAN


269 
SDL_PIXELFORMAT_RGBA32
 = 
SDL_PIXELFORMAT_RGBA8888
,

270 
SDL_PIXELFORMAT_ARGB32
 = 
SDL_PIXELFORMAT_ARGB8888
,

271 
SDL_PIXELFORMAT_BGRA32
 = 
SDL_PIXELFORMAT_BGRA8888
,

272 
SDL_PIXELFORMAT_ABGR32
 = 
SDL_PIXELFORMAT_ABGR8888
,

274 
SDL_PIXELFORMAT_RGBA32
 = 
SDL_PIXELFORMAT_ABGR8888
,

275 
SDL_PIXELFORMAT_ARGB32
 = 
SDL_PIXELFORMAT_BGRA8888
,

276 
SDL_PIXELFORMAT_BGRA32
 = 
SDL_PIXELFORMAT_ARGB8888
,

277 
SDL_PIXELFORMAT_ABGR32
 = 
SDL_PIXELFORMAT_RGBA8888
,

280 
SDL_PIXELFORMAT_YV12
 =

281 
SDL_DEFINE_PIXELFOURCC
('Y', 'V', '1', '2'),

282 
SDL_PIXELFORMAT_IYUV
 =

283 
SDL_DEFINE_PIXELFOURCC
('I', 'Y', 'U', 'V'),

284 
SDL_PIXELFORMAT_YUY2
 =

285 
SDL_DEFINE_PIXELFOURCC
('Y', 'U', 'Y', '2'),

286 
SDL_PIXELFORMAT_UYVY
 =

287 
SDL_DEFINE_PIXELFOURCC
('U', 'Y', 'V', 'Y'),

288 
SDL_PIXELFORMAT_YVYU
 =

289 
SDL_DEFINE_PIXELFOURCC
('Y', 'V', 'Y', 'U'),

290 
SDL_PIXELFORMAT_NV12
 =

291 
SDL_DEFINE_PIXELFOURCC
('N', 'V', '1', '2'),

292 
SDL_PIXELFORMAT_NV21
 =

293 
SDL_DEFINE_PIXELFOURCC
('N', 'V', '2', '1'),

294 
SDL_PIXELFORMAT_EXTERNAL_OES
 =

295 
SDL_DEFINE_PIXELFOURCC
('O', 'E', 'S', ' ')

296 } 
	tSDL_PixñF‹m©Enum
;

298 
	sSDL_Cﬁ‹


300 
Uöt8
 
r
;

301 
Uöt8
 
g
;

302 
Uöt8
 
b
;

303 
Uöt8
 
a
;

304 } 
	tSDL_Cﬁ‹
;

305 
	#SDL_Cﬁour
 
SDL_Cﬁ‹


	)

307 
	sSDL_PÆëã


309 
ncﬁ‹s
;

310 
SDL_Cﬁ‹
 *
cﬁ‹s
;

311 
Uöt32
 
vîsi⁄
;

312 
ªfcou¡
;

313 } 
	tSDL_PÆëã
;

318 
	sSDL_PixñF‹m©


320 
Uöt32
 
f‹m©
;

321 
SDL_PÆëã
 *
∑Àâe
;

322 
Uöt8
 
BôsPîPixñ
;

323 
Uöt8
 
ByãsPîPixñ
;

324 
Uöt8
 
∑ddög
[2];

325 
Uöt32
 
Rmask
;

326 
Uöt32
 
Gmask
;

327 
Uöt32
 
Bmask
;

328 
Uöt32
 
Amask
;

329 
Uöt8
 
Rloss
;

330 
Uöt8
 
Gloss
;

331 
Uöt8
 
Bloss
;

332 
Uöt8
 
Aloss
;

333 
Uöt8
 
Rshi·
;

334 
Uöt8
 
Gshi·
;

335 
Uöt8
 
Bshi·
;

336 
Uöt8
 
Ashi·
;

337 
ªfcou¡
;

338 
SDL_PixñF‹m©
 *
√xt
;

339 } 
	tSDL_PixñF‹m©
;

344 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_GëPixñF‹m©Name
(
Uöt32
 
f‹m©
);

353 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_PixñF‹m©EnumToMasks
(
Uöt32
 
f‹m©
,

354 *
bµ
,

355 
Uöt32
 * 
Rmask
,

356 
Uöt32
 * 
Gmask
,

357 
Uöt32
 * 
Bmask
,

358 
Uöt32
 * 
Amask
);

368 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_MasksToPixñF‹m©Enum
(
bµ
,

369 
Uöt32
 
Rmask
,

370 
Uöt32
 
Gmask
,

371 
Uöt32
 
Bmask
,

372 
Uöt32
 
Amask
);

377 
DECLSPEC
 
SDL_PixñF‹m©
 * 
SDLCALL
 
SDL_AŒocF‹m©
(
Uöt32
 
pixñ_f‹m©
);

382 
DECLSPEC
 
SDLCALL
 
SDL_FªeF‹m©
(
SDL_PixñF‹m©
 *
f‹m©
);

394 
DECLSPEC
 
SDL_PÆëã
 *
SDLCALL
 
SDL_AŒocPÆëã
(
ncﬁ‹s
);

399 
DECLSPEC
 
SDLCALL
 
SDL_SëPixñF‹m©PÆëã
(
SDL_PixñF‹m©
 * 
f‹m©
,

400 
SDL_PÆëã
 *
∑Àâe
);

412 
DECLSPEC
 
SDLCALL
 
SDL_SëPÆëãCﬁ‹s
(
SDL_PÆëã
 * 
∑Àâe
,

413 c⁄° 
SDL_Cﬁ‹
 * 
cﬁ‹s
,

414 
fú°cﬁ‹
, 
ncﬁ‹s
);

421 
DECLSPEC
 
SDLCALL
 
SDL_FªePÆëã
(
SDL_PÆëã
 * 
∑Àâe
);

428 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGB
(c⁄° 
SDL_PixñF‹m©
 * 
f‹m©
,

429 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
);

436 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_M≠RGBA
(c⁄° 
SDL_PixñF‹m©
 * 
f‹m©
,

437 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
,

438 
Uöt8
 
a
);

445 
DECLSPEC
 
SDLCALL
 
SDL_GëRGB
(
Uöt32
 
pixñ
,

446 c⁄° 
SDL_PixñF‹m©
 * 
f‹m©
,

447 
Uöt8
 * 
r
, Uöt8 * 
g
, Uöt8 * 
b
);

454 
DECLSPEC
 
SDLCALL
 
SDL_GëRGBA
(
Uöt32
 
pixñ
,

455 c⁄° 
SDL_PixñF‹m©
 * 
f‹m©
,

456 
Uöt8
 * 
r
, Uöt8 * 
g
, Uöt8 * 
b
,

457 
Uöt8
 * 
a
);

462 
DECLSPEC
 
SDLCALL
 
SDL_CÆcuœãGammaRamp
(
gamma
, 
Uöt16
 * 
ømp
);

466 #ifde‡
__˝lu•lus


469 
	~"˛o£_code.h
"

	@SDL2/include/SDL_platform.h

28 #i‚de‡
SDL_∂©f‹m_h_


29 
	#SDL_∂©f‹m_h_


	)

31 #i‡
deföed
(
_AIX
)

32 #unde‡
__AIX__


33 
	#__AIX__
 1

	)

35 #i‡
deföed
(
__HAIKU__
)

36 #unde‡
__HAIKU__


37 
	#__HAIKU__
 1

	)

39 #i‡
deföed
(
bsdi
Ë|| deföed(
__bsdi
Ë|| deföed(
__bsdi__
)

40 #unde‡
__BSDI__


41 
	#__BSDI__
 1

	)

43 #i‡
deföed
(
_¨ch_dªamˇ°
)

44 #unde‡
__DREAMCAST__


45 
	#__DREAMCAST__
 1

	)

47 #i‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__Døg⁄Fly__
)

48 #unde‡
__FREEBSD__


49 
	#__FREEBSD__
 1

	)

51 #i‡
deföed
(
hpux
Ë|| deföed(
__hpux
Ë|| deföed(
__hpux__
)

52 #unde‡
__HPUX__


53 
	#__HPUX__
 1

	)

55 #i‡
deföed
(
sgi
Ë|| deföed(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI_SOURCE
)

56 #unde‡
__IRIX__


57 
	#__IRIX__
 1

	)

59 #i‡(
deföed
(
löux
Ë|| deföed(
__löux
Ë|| deföed(
__löux__
))

60 #unde‡
__LINUX__


61 
	#__LINUX__
 1

	)

63 #i‡
deföed
(
ANDROID
Ë|| deföed(
__ANDROID__
)

64 #unde‡
__ANDROID__


65 #unde‡
__LINUX__


66 
	#__ANDROID__
 1

	)

69 #i‡
deföed
(
__APPLE__
)

71 
	~"AvaûabûôyMa¸os.h
"

72 
	~"T¨gëC⁄dôi⁄Æs.h
"

73 #i‡
TARGET_OS_TV


74 #unde‡
__TVOS__


75 
	#__TVOS__
 1

	)

77 #i‡
TARGET_OS_IPHONE


79 #unde‡
__IPHONEOS__


80 
	#__IPHONEOS__
 1

	)

81 #unde‡
__MACOSX__


84 #unde‡
__MACOSX__


85 
	#__MACOSX__
 1

	)

86 #i‡
MAC_OS_X_VERSION_MIN_REQUIRED
 < 1060

87 #îr‹ 
SDL
 
Mac
 
OS
 
X
 
⁄ly
 
suµ‹ts
 
dïloyög
 
⁄
 10.6 
™d
 
above
.

92 #i‡
deföed
(
__NëBSD__
)

93 #unde‡
__NETBSD__


94 
	#__NETBSD__
 1

	)

96 #i‡
deföed
(
__O≥nBSD__
)

97 #unde‡
__OPENBSD__


98 
	#__OPENBSD__
 1

	)

100 #i‡
deföed
(
__OS2__
Ë|| deföed(
__EMX__
)

101 #unde‡
__OS2__


102 
	#__OS2__
 1

	)

104 #i‡
deföed
(
osf
Ë|| deföed(
__osf
Ë|| deföed(
__osf__
Ë|| deföed(
_OSF_SOURCE
)

105 #unde‡
__OSF__


106 
	#__OSF__
 1

	)

108 #i‡
deföed
(
__QNXNTO__
)

109 #unde‡
__QNXNTO__


110 
	#__QNXNTO__
 1

	)

112 #i‡
deföed
(
riscos
Ë|| deföed(
__riscos
Ë|| deföed(
__riscos__
)

113 #unde‡
__RISCOS__


114 
	#__RISCOS__
 1

	)

116 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

117 #unde‡
__SOLARIS__


118 
	#__SOLARIS__
 1

	)

121 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN32
Ë|| deföed(
__CYGWIN__
Ë|| deföed(
__MINGW32__
)

123 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
__has_ö˛ude
)

124 #i‡
__has_ö˛ude
(<
wö≠iÁmûy
.
h
>)

125 
	#HAVE_WINAPIFAMILY_H
 1

	)

127 
	#HAVE_WINAPIFAMILY_H
 0

	)

131 #ñi‡
deföed
(
_MSC_VER
Ë&& (_MSC_VER >1700 && !
_USING_V110_SDK71_
)

132 
	#HAVE_WINAPIFAMILY_H
 1

	)

134 
	#HAVE_WINAPIFAMILY_H
 0

	)

137 #i‡
HAVE_WINAPIFAMILY_H


138 
	~<wö≠iÁmûy.h
>

139 
	#WINAPI_FAMILY_WINRT
 (!
	`WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_DESKTOP
Ë&& WINAPI_FAMILY_PARTITION(
WINAPI_PARTITION_APP
))

	)

141 
	#WINAPI_FAMILY_WINRT
 0

	)

144 #i‡
WINAPI_FAMILY_WINRT


145 #unde‡
__WINRT__


146 
	#__WINRT__
 1

	)

148 #unde‡
__WINDOWS__


149 
	#__WINDOWS__
 1

	)

153 #i‡
deföed
(
__WINDOWS__
)

154 #unde‡
__WIN32__


155 
	#__WIN32__
 1

	)

157 #i‡
deföed
(
__PSP__
)

158 #unde‡
__PSP__


159 
	#__PSP__
 1

	)

165 #i‡
deföed
(
__«tive_˛õ¡__
)

166 #unde‡
__LINUX__


167 #unde‡
__NACL__


168 
	#__NACL__
 1

	)

170 #i‡
deföed
(
__≤a˛__
)

171 #unde‡
__LINUX__


172 #unde‡
__PNACL__


173 
	#__PNACL__
 1

	)

175 
	#__SDL_NOGETPROCADDR__


	)

179 
	~"begö_code.h
"

181 #ifde‡
__˝lu•lus


188 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_GëPœtf‹m
 ();

191 #ifde‡
__˝lu•lus


194 
	~"˛o£_code.h
"

	@SDL2/include/SDL_power.h

22 #i‚de‡
SDL_powî_h_


23 
	#SDL_powî_h_


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


44 
SDL_POWERSTATE_UNKNOWN
,

45 
SDL_POWERSTATE_ON_BATTERY
,

46 
SDL_POWERSTATE_NO_BATTERY
,

47 
SDL_POWERSTATE_CHARGING
,

48 
SDL_POWERSTATE_CHARGED


49 } 
	tSDL_PowîSèã
;

65 
DECLSPEC
 
SDL_PowîSèã
 
SDLCALL
 
SDL_GëPowîInfo
(*
£cs
, *
p˘
);

68 #ifde‡
__˝lu•lus


71 
	~"˛o£_code.h
"

	@SDL2/include/SDL_quit.h

28 #i‚de‡
SDL_quô_h_


29 
	#SDL_quô_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

55 
	#SDL_QuôReque°ed
() \

56 (
	`SDL_PumpEvíts
(), (
	`SDL_PìpEvíts
(
NULL
,0,
SDL_PEEKEVENT
,
SDL_QUIT
,SDL_QUITË> 0))

	)

	@SDL2/include/SDL_rect.h

28 #i‚de‡
SDL_ª˘_h_


29 
	#SDL_ª˘_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_pixñs.h
"

34 
	~"SDL_rw›s.h
"

36 
	~"begö_code.h
"

38 #ifde‡
__˝lu•lus


48 
	sSDL_Poöt


50 
x
;

51 
y
;

52 } 
	tSDL_Poöt
;

60 
	sSDL_FPoöt


62 
x
;

63 
y
;

64 } 
	tSDL_FPoöt
;

77 
	sSDL_Re˘


79 
x
, 
y
;

80 
w
, 
h
;

81 } 
	tSDL_Re˘
;

87 
	sSDL_FRe˘


89 
x
;

90 
y
;

91 
w
;

92 
h
;

93 } 
	tSDL_FRe˘
;

99 
SDL_FORCE_INLINE
 
SDL_boﬁ
 
SDL_PoötInRe˘
(c⁄° 
SDL_Poöt
 *
p
, c⁄° 
SDL_Re˘
 *
r
)

101  ( (
p
->
x
 >
r
->xË&& (p->x < (r->x +Ñ->
w
)) &&

102 (
p
->
y
 >
r
->yË&& (p->y < (r->y +Ñ->
h
)ËË? 
SDL_TRUE
 : 
SDL_FALSE
;

108 
SDL_FORCE_INLINE
 
SDL_boﬁ
 
SDL_Re˘Em±y
(c⁄° 
SDL_Re˘
 *
r
)

110  ((!
r
Ë|| (r->
w
 <0Ë|| (r->
h
 <0)Ë? 
SDL_TRUE
 : 
SDL_FALSE
;

116 
SDL_FORCE_INLINE
 
SDL_boﬁ
 
SDL_Re˘EquÆs
(c⁄° 
SDL_Re˘
 *
a
, c⁄° SDL_Re˘ *
b
)

118  (
a
 && 
b
 && (a->
x
 =b->xË&& (a->
y
 == b->y) &&

119 (
a
->
w
 =
b
->wË&& (a->
h
 =b->h)Ë? 
SDL_TRUE
 : 
SDL_FALSE
;

127 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasI¡î£˘i⁄
(c⁄° 
SDL_Re˘
 * 
A
,

128 c⁄° 
SDL_Re˘
 * 
B
);

135 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_I¡î£˘Re˘
(c⁄° 
SDL_Re˘
 * 
A
,

136 c⁄° 
SDL_Re˘
 * 
B
,

137 
SDL_Re˘
 * 
ªsu…
);

142 
DECLSPEC
 
SDLCALL
 
SDL_Uni⁄Re˘
(c⁄° 
SDL_Re˘
 * 
A
,

143 c⁄° 
SDL_Re˘
 * 
B
,

144 
SDL_Re˘
 * 
ªsu…
);

151 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_En˛o£Poöts
(c⁄° 
SDL_Poöt
 * 
poöts
,

152 
cou¡
,

153 c⁄° 
SDL_Re˘
 * 
˛ù
,

154 
SDL_Re˘
 * 
ªsu…
);

161 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_I¡î£˘Re˘AndLöe
(c⁄° 
SDL_Re˘
 *

162 
ª˘
, *
X1
,

163 *
Y1
, *
X2
,

164 *
Y2
);

167 #ifde‡
__˝lu•lus


170 
	~"˛o£_code.h
"

	@SDL2/include/SDL_render.h

48 #i‚de‡
SDL_ªndî_h_


49 
	#SDL_ªndî_h_


	)

51 
	~"SDL_°döc.h
"

52 
	~"SDL_ª˘.h
"

53 
	~"SDL_video.h
"

55 
	~"begö_code.h
"

57 #ifde‡
__˝lu•lus


66 
SDL_RENDERER_SOFTWARE
 = 0x00000001,

67 
SDL_RENDERER_ACCELERATED
 = 0x00000002,

69 
SDL_RENDERER_PRESENTVSYNC
 = 0x00000004,

71 
SDL_RENDERER_TARGETTEXTURE
 = 0x00000008

73 } 
	tSDL_RídîîFœgs
;

78 
	sSDL_RídîîInfo


80 c⁄° *
«me
;

81 
Uöt32
 
Êags
;

82 
Uöt32
 
num_ãxtuª_f‹m©s
;

83 
Uöt32
 
ãxtuª_f‹m©s
[16];

84 
max_ãxtuª_width
;

85 
max_ãxtuª_height
;

86 } 
	tSDL_RídîîInfo
;

93 
SDL_SˇÀModeNóª°
,

94 
SDL_SˇÀModeLöór
,

95 
SDL_SˇÀModeBe°


96 } 
	tSDL_SˇÀMode
;

103 
SDL_TEXTUREACCESS_STATIC
,

104 
SDL_TEXTUREACCESS_STREAMING
,

105 
SDL_TEXTUREACCESS_TARGET


106 } 
	tSDL_TextuªAc˚ss
;

113 
SDL_TEXTUREMODULATE_NONE
 = 0x00000000,

114 
SDL_TEXTUREMODULATE_COLOR
 = 0x00000001,

115 
SDL_TEXTUREMODULATE_ALPHA
 = 0x00000002

116 } 
	tSDL_TextuªModuœã
;

123 
SDL_FLIP_NONE
 = 0x00000000,

124 
SDL_FLIP_HORIZONTAL
 = 0x00000001,

125 
SDL_FLIP_VERTICAL
 = 0x00000002

126 } 
	tSDL_RídîîFlù
;

131 
SDL_Rídîî
;

132 
SDL_Rídîî
 
	tSDL_Rídîî
;

137 
SDL_Textuª
;

138 
SDL_Textuª
 
	tSDL_Textuª
;

154 
DECLSPEC
 
SDLCALL
 
SDL_GëNumRídîDrivîs
();

168 
DECLSPEC
 
SDLCALL
 
SDL_GëRídîDrivîInfo
(
ödex
,

169 
SDL_RídîîInfo
 * 
öfo
);

182 
DECLSPEC
 
SDLCALL
 
SDL_Cª©eWödowAndRídîî
(

183 
width
, 
height
, 
Uöt32
 
wödow_Êags
,

184 
SDL_Wödow
 **
wödow
, 
SDL_Rídîî
 **
ªndîî
);

201 
DECLSPEC
 
SDL_Rídîî
 * 
SDLCALL
 
SDL_Cª©eRídîî
(
SDL_Wödow
 * 
wödow
,

202 
ödex
, 
Uöt32
 
Êags
);

214 
DECLSPEC
 
SDL_Rídîî
 * 
SDLCALL
 
SDL_Cª©eSo·w¨eRídîî
(
SDL_SurÁ˚
 * 
surÁ˚
);

219 
DECLSPEC
 
SDL_Rídîî
 * 
SDLCALL
 
SDL_GëRídîî
(
SDL_Wödow
 * 
wödow
);

224 
DECLSPEC
 
SDLCALL
 
SDL_GëRídîîInfo
(
SDL_Rídîî
 * 
ªndîî
,

225 
SDL_RídîîInfo
 * 
öfo
);

230 
DECLSPEC
 
SDLCALL
 
SDL_GëRídîîOuçutSize
(
SDL_Rídîî
 * 
ªndîî
,

231 *
w
, *
h
);

252 
DECLSPEC
 
SDL_Textuª
 * 
SDLCALL
 
SDL_Cª©eTextuª
(
SDL_Rídîî
 * 
ªndîî
,

253 
Uöt32
 
f‹m©
,

254 
ac˚ss
, 
w
,

255 
h
);

270 
DECLSPEC
 
SDL_Textuª
 * 
SDLCALL
 
SDL_Cª©eTextuªFromSurÁ˚
(
SDL_Rídîî
 * 
ªndîî
, 
SDL_SurÁ˚
 * 
surÁ˚
);

285 
DECLSPEC
 
SDLCALL
 
SDL_QuîyTextuª
(
SDL_Textuª
 * 
ãxtuª
,

286 
Uöt32
 * 
f‹m©
, *
ac˚ss
,

287 *
w
, *
h
);

302 
DECLSPEC
 
SDLCALL
 
SDL_SëTextuªCﬁ‹Mod
(
SDL_Textuª
 * 
ãxtuª
,

303 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
);

318 
DECLSPEC
 
SDLCALL
 
SDL_GëTextuªCﬁ‹Mod
(
SDL_Textuª
 * 
ãxtuª
,

319 
Uöt8
 * 
r
, Uöt8 * 
g
,

320 
Uöt8
 * 
b
);

333 
DECLSPEC
 
SDLCALL
 
SDL_SëTextuªAÕhaMod
(
SDL_Textuª
 * 
ãxtuª
,

334 
Uöt8
 
Æpha
);

346 
DECLSPEC
 
SDLCALL
 
SDL_GëTextuªAÕhaMod
(
SDL_Textuª
 * 
ãxtuª
,

347 
Uöt8
 * 
Æpha
);

363 
DECLSPEC
 
SDLCALL
 
SDL_SëTextuªBÀndMode
(
SDL_Textuª
 * 
ãxtuª
,

364 
SDL_BÀndMode
 
bÀndMode
);

376 
DECLSPEC
 
SDLCALL
 
SDL_GëTextuªBÀndMode
(
SDL_Textuª
 * 
ãxtuª
,

377 
SDL_BÀndMode
 *
bÀndMode
);

392 
DECLSPEC
 
SDLCALL
 
SDL_SëTextuªSˇÀMode
(
SDL_Textuª
 * 
ãxtuª
,

393 
SDL_SˇÀMode
 
sˇÀMode
);

405 
DECLSPEC
 
SDLCALL
 
SDL_GëTextuªSˇÀMode
(
SDL_Textuª
 * 
ãxtuª
,

406 
SDL_SˇÀMode
 *
sˇÀMode
);

424 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eTextuª
(
SDL_Textuª
 * 
ãxtuª
,

425 c⁄° 
SDL_Re˘
 * 
ª˘
,

426 c⁄° *
pixñs
, 
pôch
);

447 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eYUVTextuª
(
SDL_Textuª
 * 
ãxtuª
,

448 c⁄° 
SDL_Re˘
 * 
ª˘
,

449 c⁄° 
Uöt8
 *
Y∂™e
, 
Ypôch
,

450 c⁄° 
Uöt8
 *
U∂™e
, 
Upôch
,

451 c⁄° 
Uöt8
 *
V∂™e
, 
Vpôch
);

468 
DECLSPEC
 
SDLCALL
 
SDL_LockTextuª
(
SDL_Textuª
 * 
ãxtuª
,

469 c⁄° 
SDL_Re˘
 * 
ª˘
,

470 **
pixñs
, *
pôch
);

487 
DECLSPEC
 
SDLCALL
 
SDL_LockTextuªToSurÁ˚
(
SDL_Textuª
 *
ãxtuª
,

488 c⁄° 
SDL_Re˘
 *
ª˘
,

489 
SDL_SurÁ˚
 **
surÁ˚
);

498 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockTextuª
(
SDL_Textuª
 * 
ãxtuª
);

507 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RídîT¨gëSuµ‹ãd
(
SDL_Rídîî
 *
ªndîî
);

519 
DECLSPEC
 
SDLCALL
 
SDL_SëRídîT¨gë
(
SDL_Rídîî
 *
ªndîî
,

520 
SDL_Textuª
 *
ãxtuª
);

529 
DECLSPEC
 
SDL_Textuª
 * 
SDLCALL
 
SDL_GëRídîT¨gë
(
SDL_Rídîî
 *
ªndîî
);

554 
DECLSPEC
 
SDLCALL
 
SDL_RídîSëLogiˇlSize
(
SDL_Rídîî
 * 
ªndîî
, 
w
, 
h
);

565 
DECLSPEC
 
SDLCALL
 
SDL_RídîGëLogiˇlSize
(
SDL_Rídîî
 * 
ªndîî
, *
w
, *
h
);

579 
DECLSPEC
 
SDLCALL
 
SDL_RídîSëI¡egîSˇÀ
(
SDL_Rídîî
 * 
ªndîî
,

580 
SDL_boﬁ
 
íabÀ
);

589 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RídîGëI¡egîSˇÀ
(
SDL_Rídîî
 * 
ªndîî
);

606 
DECLSPEC
 
SDLCALL
 
SDL_RídîSëVõwp‹t
(
SDL_Rídîî
 * 
ªndîî
,

607 c⁄° 
SDL_Re˘
 * 
ª˘
);

614 
DECLSPEC
 
SDLCALL
 
SDL_RídîGëVõwp‹t
(
SDL_Rídîî
 * 
ªndîî
,

615 
SDL_Re˘
 * 
ª˘
);

628 
DECLSPEC
 
SDLCALL
 
SDL_RídîSëClùRe˘
(
SDL_Rídîî
 * 
ªndîî
,

629 c⁄° 
SDL_Re˘
 * 
ª˘
);

640 
DECLSPEC
 
SDLCALL
 
SDL_RídîGëClùRe˘
(
SDL_Rídîî
 * 
ªndîî
,

641 
SDL_Re˘
 * 
ª˘
);

650 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RídîIsClùE«bÀd
(
SDL_Rídîî
 * 
ªndîî
);

671 
DECLSPEC
 
SDLCALL
 
SDL_RídîSëSˇÀ
(
SDL_Rídîî
 * 
ªndîî
,

672 
sˇÀX
, 
sˇÀY
);

683 
DECLSPEC
 
SDLCALL
 
SDL_RídîGëSˇÀ
(
SDL_Rídîî
 * 
ªndîî
,

684 *
sˇÀX
, *
sˇÀY
);

698 
DECLSPEC
 
SDLCALL
 
SDL_SëRídîDøwCﬁ‹
(
SDL_Rídîî
 * 
ªndîî
,

699 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
,

700 
Uöt8
 
a
);

714 
DECLSPEC
 
SDLCALL
 
SDL_GëRídîDøwCﬁ‹
(
SDL_Rídîî
 * 
ªndîî
,

715 
Uöt8
 * 
r
, Uöt8 * 
g
, Uöt8 * 
b
,

716 
Uöt8
 * 
a
);

731 
DECLSPEC
 
SDLCALL
 
SDL_SëRídîDøwBÀndMode
(
SDL_Rídîî
 * 
ªndîî
,

732 
SDL_BÀndMode
 
bÀndMode
);

744 
DECLSPEC
 
SDLCALL
 
SDL_GëRídîDøwBÀndMode
(
SDL_Rídîî
 * 
ªndîî
,

745 
SDL_BÀndMode
 *
bÀndMode
);

755 
DECLSPEC
 
SDLCALL
 
SDL_RídîCÀ¨
(
SDL_Rídîî
 * 
ªndîî
);

766 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwPoöt
(
SDL_Rídîî
 * 
ªndîî
,

767 
x
, 
y
);

778 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwPoöts
(
SDL_Rídîî
 * 
ªndîî
,

779 c⁄° 
SDL_Poöt
 * 
poöts
,

780 
cou¡
);

793 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwLöe
(
SDL_Rídîî
 * 
ªndîî
,

794 
x1
, 
y1
, 
x2
, 
y2
);

805 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwLöes
(
SDL_Rídîî
 * 
ªndîî
,

806 c⁄° 
SDL_Poöt
 * 
poöts
,

807 
cou¡
);

817 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwRe˘
(
SDL_Rídîî
 * 
ªndîî
,

818 c⁄° 
SDL_Re˘
 * 
ª˘
);

829 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwRe˘s
(
SDL_Rídîî
 * 
ªndîî
,

830 c⁄° 
SDL_Re˘
 * 
ª˘s
,

831 
cou¡
);

842 
DECLSPEC
 
SDLCALL
 
SDL_RídîFûlRe˘
(
SDL_Rídîî
 * 
ªndîî
,

843 c⁄° 
SDL_Re˘
 * 
ª˘
);

854 
DECLSPEC
 
SDLCALL
 
SDL_RídîFûlRe˘s
(
SDL_Rídîî
 * 
ªndîî
,

855 c⁄° 
SDL_Re˘
 * 
ª˘s
,

856 
cou¡
);

870 
DECLSPEC
 
SDLCALL
 
SDL_RídîC›y
(
SDL_Rídîî
 * 
ªndîî
,

871 
SDL_Textuª
 * 
ãxtuª
,

872 c⁄° 
SDL_Re˘
 * 
§¸e˘
,

873 c⁄° 
SDL_Re˘
 * 
d°ª˘
);

890 
DECLSPEC
 
SDLCALL
 
SDL_RídîC›yEx
(
SDL_Rídîî
 * 
ªndîî
,

891 
SDL_Textuª
 * 
ãxtuª
,

892 c⁄° 
SDL_Re˘
 * 
§¸e˘
,

893 c⁄° 
SDL_Re˘
 * 
d°ª˘
,

894 c⁄° 
™gÀ
,

895 c⁄° 
SDL_Poöt
 *
˚¡î
,

896 c⁄° 
SDL_RídîîFlù
 
Êù
);

908 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwPoötF
(
SDL_Rídîî
 * 
ªndîî
,

909 
x
, 
y
);

920 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwPoötsF
(
SDL_Rídîî
 * 
ªndîî
,

921 c⁄° 
SDL_FPoöt
 * 
poöts
,

922 
cou¡
);

935 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwLöeF
(
SDL_Rídîî
 * 
ªndîî
,

936 
x1
, 
y1
, 
x2
, 
y2
);

947 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwLöesF
(
SDL_Rídîî
 * 
ªndîî
,

948 c⁄° 
SDL_FPoöt
 * 
poöts
,

949 
cou¡
);

959 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwRe˘F
(
SDL_Rídîî
 * 
ªndîî
,

960 c⁄° 
SDL_FRe˘
 * 
ª˘
);

971 
DECLSPEC
 
SDLCALL
 
SDL_RídîDøwRe˘sF
(
SDL_Rídîî
 * 
ªndîî
,

972 c⁄° 
SDL_FRe˘
 * 
ª˘s
,

973 
cou¡
);

984 
DECLSPEC
 
SDLCALL
 
SDL_RídîFûlRe˘F
(
SDL_Rídîî
 * 
ªndîî
,

985 c⁄° 
SDL_FRe˘
 * 
ª˘
);

996 
DECLSPEC
 
SDLCALL
 
SDL_RídîFûlRe˘sF
(
SDL_Rídîî
 * 
ªndîî
,

997 c⁄° 
SDL_FRe˘
 * 
ª˘s
,

998 
cou¡
);

1012 
DECLSPEC
 
SDLCALL
 
SDL_RídîC›yF
(
SDL_Rídîî
 * 
ªndîî
,

1013 
SDL_Textuª
 * 
ãxtuª
,

1014 c⁄° 
SDL_Re˘
 * 
§¸e˘
,

1015 c⁄° 
SDL_FRe˘
 * 
d°ª˘
);

1032 
DECLSPEC
 
SDLCALL
 
SDL_RídîC›yExF
(
SDL_Rídîî
 * 
ªndîî
,

1033 
SDL_Textuª
 * 
ãxtuª
,

1034 c⁄° 
SDL_Re˘
 * 
§¸e˘
,

1035 c⁄° 
SDL_FRe˘
 * 
d°ª˘
,

1036 c⁄° 
™gÀ
,

1037 c⁄° 
SDL_FPoöt
 *
˚¡î
,

1038 c⁄° 
SDL_RídîîFlù
 
Êù
);

1055 
DECLSPEC
 
SDLCALL
 
SDL_RídîRódPixñs
(
SDL_Rídîî
 * 
ªndîî
,

1056 c⁄° 
SDL_Re˘
 * 
ª˘
,

1057 
Uöt32
 
f‹m©
,

1058 *
pixñs
, 
pôch
);

1063 
DECLSPEC
 
SDLCALL
 
SDL_RídîPª£¡
(
SDL_Rídîî
 * 
ªndîî
);

1071 
DECLSPEC
 
SDLCALL
 
SDL_De°royTextuª
(
SDL_Textuª
 * 
ãxtuª
);

1079 
DECLSPEC
 
SDLCALL
 
SDL_De°royRídîî
(
SDL_Rídîî
 * 
ªndîî
);

1104 
DECLSPEC
 
SDLCALL
 
SDL_RídîFlush
(
SDL_Rídîî
 * 
ªndîî
);

1117 
DECLSPEC
 
SDLCALL
 
SDL_GL_BödTextuª
(
SDL_Textuª
 *
ãxtuª
, *
ãxw
, *
ãxh
);

1126 
DECLSPEC
 
SDLCALL
 
SDL_GL_UnbödTextuª
(
SDL_Textuª
 *
ãxtuª
);

1137 
DECLSPEC
 *
SDLCALL
 
SDL_RídîGëMëÆLayî
(
SDL_Rídîî
 * 
ªndîî
);

1148 
DECLSPEC
 *
SDLCALL
 
SDL_RídîGëMëÆComm™dEncodî
(
SDL_Rídîî
 * 
ªndîî
);

1151 #ifde‡
__˝lu•lus


1154 
	~"˛o£_code.h
"

	@SDL2/include/SDL_revision.h

1 
	#SDL_REVISION
 "hg-13609:34cc7d3b69d3"

	)

2 
	#SDL_REVISION_NUMBER
 13609

	)

	@SDL2/include/SDL_rwops.h

29 #i‚de‡
SDL_rw›s_h_


30 
	#SDL_rw›s_h_


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


42 
	#SDL_RWOPS_UNKNOWN
 0U

	)

43 
	#SDL_RWOPS_WINFILE
 1U

	)

44 
	#SDL_RWOPS_STDFILE
 2U

	)

45 
	#SDL_RWOPS_JNIFILE
 3U

	)

46 
	#SDL_RWOPS_MEMORY
 4U

	)

47 
	#SDL_RWOPS_MEMORY_RO
 5U

	)

52 
	sSDL_RW›s


57 
Söt64
 (
SDLCALL
 * 
size
Ë(
SDL_RW›s
 * 
c⁄ãxt
);

65 
Söt64
 (
SDLCALL
 * 
£ek
Ë(
SDL_RW›s
 * 
c⁄ãxt
, Söt64 
off£t
,

66 
whí˚
);

74 
size_t
 (
SDLCALL
 * 
ªad
Ë(
SDL_RW›s
 * 
c⁄ãxt
, *
±r
,

75 
size_t
 
size
, size_à
maxnum
);

83 
size_t
 (
SDLCALL
 * 
wrôe
Ë(
SDL_RW›s
 * 
c⁄ãxt
, c⁄° *
±r
,

84 
size_t
 
size
, size_à
num
);

91 (
SDLCALL
 * 
˛o£
Ë(
SDL_RW›s
 * 
c⁄ãxt
);

93 
Uöt32
 
ty≥
;

96 #i‡
deföed
(
__ANDROID__
)

99 *
fûeNameRef
;

100 *
öputSåómRef
;

101 *
ªadabÀByãCh™√lRef
;

102 *
ªadMëhod
;

103 *
as£tFûeDes¸ùt‹Ref
;

104 
posôi⁄
;

105 
size
;

106 
off£t
;

107 
fd
;

108 } 
™droidio
;

109 #ñi‡
deföed
(
__WIN32__
)

112 
SDL_boﬁ
 
≠≥nd
;

113 *
h
;

116 *
d©a
;

117 
size_t
 
size
;

118 
size_t
 
À·
;

119 } 
buf„r
;

120 } 
wödowsio
;

123 #ifde‡
HAVE_STDIO_H


126 
SDL_boﬁ
 
auto˛o£
;

127 
FILE
 *
Â
;

128 } 
°dio
;

132 
Uöt8
 *
ba£
;

133 
Uöt8
 *
hîe
;

134 
Uöt8
 *
°›
;

135 } 
mem
;

138 *
d©a1
;

139 *
d©a2
;

140 } 
unknown
;

141 } 
hiddí
;

143 } 
	tSDL_RW›s
;

153 
DECLSPEC
 
SDL_RW›s
 *
SDLCALL
 
SDL_RWFromFûe
(c⁄° *
fûe
,

154 c⁄° *
mode
);

156 #ifde‡
HAVE_STDIO_H


157 
DECLSPEC
 
SDL_RW›s
 *
SDLCALL
 
SDL_RWFromFP
(
FILE
 * 
Â
,

158 
SDL_boﬁ
 
auto˛o£
);

160 
DECLSPEC
 
SDL_RW›s
 *
SDLCALL
 
SDL_RWFromFP
(* 
Â
,

161 
SDL_boﬁ
 
auto˛o£
);

164 
DECLSPEC
 
SDL_RW›s
 *
SDLCALL
 
SDL_RWFromMem
(*
mem
, 
size
);

165 
DECLSPEC
 
SDL_RW›s
 *
SDLCALL
 
SDL_RWFromC⁄°Mem
(c⁄° *
mem
,

166 
size
);

171 
DECLSPEC
 
SDL_RW›s
 *
SDLCALL
 
SDL_AŒocRW
();

172 
DECLSPEC
 
SDLCALL
 
SDL_FªeRW
(
SDL_RW›s
 * 
¨ó
);

174 
	#RW_SEEK_SET
 0

	)

175 
	#RW_SEEK_CUR
 1

	)

176 
	#RW_SEEK_END
 2

	)

181 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_RWsize
(
SDL_RW›s
 *
c⁄ãxt
);

189 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_RW£ek
(
SDL_RW›s
 *
c⁄ãxt
,

190 
Söt64
 
off£t
, 
whí˚
);

195 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_RWãŒ
(
SDL_RW›s
 *
c⁄ãxt
);

203 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_RWªad
(
SDL_RW›s
 *
c⁄ãxt
,

204 *
±r
, 
size_t
 
size
, size_à
maxnum
);

212 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_RWwrôe
(
SDL_RW›s
 *
c⁄ãxt
,

213 c⁄° *
±r
, 
size_t
 
size
, size_à
num
);

220 
DECLSPEC
 
SDLCALL
 
SDL_RW˛o£
(
SDL_RW›s
 *
c⁄ãxt
);

235 
DECLSPEC
 *
SDLCALL
 
SDL_LﬂdFûe_RW
(
SDL_RW›s
 * 
§c
, 
size_t
 *
d©asize
,

236 
‰ì§c
);

251 
DECLSPEC
 *
SDLCALL
 
SDL_LﬂdFûe
(c⁄° *
fûe
, 
size_t
 *
d©asize
);

259 
DECLSPEC
 
Uöt8
 
SDLCALL
 
SDL_RódU8
(
SDL_RW›s
 * 
§c
);

260 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódLE16
(
SDL_RW›s
 * 
§c
);

261 
DECLSPEC
 
Uöt16
 
SDLCALL
 
SDL_RódBE16
(
SDL_RW›s
 * 
§c
);

262 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódLE32
(
SDL_RW›s
 * 
§c
);

263 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_RódBE32
(
SDL_RW›s
 * 
§c
);

264 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódLE64
(
SDL_RW›s
 * 
§c
);

265 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_RódBE64
(
SDL_RW›s
 * 
§c
);

274 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeU8
(
SDL_RW›s
 * 
d°
, 
Uöt8
 
vÆue
);

275 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeLE16
(
SDL_RW›s
 * 
d°
, 
Uöt16
 
vÆue
);

276 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeBE16
(
SDL_RW›s
 * 
d°
, 
Uöt16
 
vÆue
);

277 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeLE32
(
SDL_RW›s
 * 
d°
, 
Uöt32
 
vÆue
);

278 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeBE32
(
SDL_RW›s
 * 
d°
, 
Uöt32
 
vÆue
);

279 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeLE64
(
SDL_RW›s
 * 
d°
, 
Uöt64
 
vÆue
);

280 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_WrôeBE64
(
SDL_RW›s
 * 
d°
, 
Uöt64
 
vÆue
);

284 #ifde‡
__˝lu•lus


287 
	~"˛o£_code.h
"

	@SDL2/include/SDL_scancode.h

28 #i‚de‡
SDL_sˇncode_h_


29 
	#SDL_sˇncode_h_


	)

31 
	~"SDL_°döc.h
"

45 
	mSDL_SCANCODE_UNKNOWN
 = 0,

54 
	mSDL_SCANCODE_A
 = 4,

55 
	mSDL_SCANCODE_B
 = 5,

56 
	mSDL_SCANCODE_C
 = 6,

57 
	mSDL_SCANCODE_D
 = 7,

58 
	mSDL_SCANCODE_E
 = 8,

59 
	mSDL_SCANCODE_F
 = 9,

60 
	mSDL_SCANCODE_G
 = 10,

61 
	mSDL_SCANCODE_H
 = 11,

62 
	mSDL_SCANCODE_I
 = 12,

63 
	mSDL_SCANCODE_J
 = 13,

64 
	mSDL_SCANCODE_K
 = 14,

65 
	mSDL_SCANCODE_L
 = 15,

66 
	mSDL_SCANCODE_M
 = 16,

67 
	mSDL_SCANCODE_N
 = 17,

68 
	mSDL_SCANCODE_O
 = 18,

69 
	mSDL_SCANCODE_P
 = 19,

70 
	mSDL_SCANCODE_Q
 = 20,

71 
	mSDL_SCANCODE_R
 = 21,

72 
	mSDL_SCANCODE_S
 = 22,

73 
	mSDL_SCANCODE_T
 = 23,

74 
	mSDL_SCANCODE_U
 = 24,

75 
	mSDL_SCANCODE_V
 = 25,

76 
	mSDL_SCANCODE_W
 = 26,

77 
	mSDL_SCANCODE_X
 = 27,

78 
	mSDL_SCANCODE_Y
 = 28,

79 
	mSDL_SCANCODE_Z
 = 29,

81 
	mSDL_SCANCODE_1
 = 30,

82 
	mSDL_SCANCODE_2
 = 31,

83 
	mSDL_SCANCODE_3
 = 32,

84 
	mSDL_SCANCODE_4
 = 33,

85 
	mSDL_SCANCODE_5
 = 34,

86 
	mSDL_SCANCODE_6
 = 35,

87 
	mSDL_SCANCODE_7
 = 36,

88 
	mSDL_SCANCODE_8
 = 37,

89 
	mSDL_SCANCODE_9
 = 38,

90 
	mSDL_SCANCODE_0
 = 39,

92 
	mSDL_SCANCODE_RETURN
 = 40,

93 
	mSDL_SCANCODE_ESCAPE
 = 41,

94 
	mSDL_SCANCODE_BACKSPACE
 = 42,

95 
	mSDL_SCANCODE_TAB
 = 43,

96 
	mSDL_SCANCODE_SPACE
 = 44,

98 
	mSDL_SCANCODE_MINUS
 = 45,

99 
	mSDL_SCANCODE_EQUALS
 = 46,

100 
	mSDL_SCANCODE_LEFTBRACKET
 = 47,

101 
	mSDL_SCANCODE_RIGHTBRACKET
 = 48,

102 
	mSDL_SCANCODE_BACKSLASH
 = 49,

116 
	mSDL_SCANCODE_NONUSHASH
 = 50,

128 
	mSDL_SCANCODE_SEMICOLON
 = 51,

129 
	mSDL_SCANCODE_APOSTROPHE
 = 52,

130 
	mSDL_SCANCODE_GRAVE
 = 53,

147 
	mSDL_SCANCODE_COMMA
 = 54,

148 
	mSDL_SCANCODE_PERIOD
 = 55,

149 
	mSDL_SCANCODE_SLASH
 = 56,

151 
	mSDL_SCANCODE_CAPSLOCK
 = 57,

153 
	mSDL_SCANCODE_F1
 = 58,

154 
	mSDL_SCANCODE_F2
 = 59,

155 
	mSDL_SCANCODE_F3
 = 60,

156 
	mSDL_SCANCODE_F4
 = 61,

157 
	mSDL_SCANCODE_F5
 = 62,

158 
	mSDL_SCANCODE_F6
 = 63,

159 
	mSDL_SCANCODE_F7
 = 64,

160 
	mSDL_SCANCODE_F8
 = 65,

161 
	mSDL_SCANCODE_F9
 = 66,

162 
	mSDL_SCANCODE_F10
 = 67,

163 
	mSDL_SCANCODE_F11
 = 68,

164 
	mSDL_SCANCODE_F12
 = 69,

166 
	mSDL_SCANCODE_PRINTSCREEN
 = 70,

167 
	mSDL_SCANCODE_SCROLLLOCK
 = 71,

168 
	mSDL_SCANCODE_PAUSE
 = 72,

169 
	mSDL_SCANCODE_INSERT
 = 73,

171 
	mSDL_SCANCODE_HOME
 = 74,

172 
	mSDL_SCANCODE_PAGEUP
 = 75,

173 
	mSDL_SCANCODE_DELETE
 = 76,

174 
	mSDL_SCANCODE_END
 = 77,

175 
	mSDL_SCANCODE_PAGEDOWN
 = 78,

176 
	mSDL_SCANCODE_RIGHT
 = 79,

177 
	mSDL_SCANCODE_LEFT
 = 80,

178 
	mSDL_SCANCODE_DOWN
 = 81,

179 
	mSDL_SCANCODE_UP
 = 82,

181 
	mSDL_SCANCODE_NUMLOCKCLEAR
 = 83,

183 
	mSDL_SCANCODE_KP_DIVIDE
 = 84,

184 
	mSDL_SCANCODE_KP_MULTIPLY
 = 85,

185 
	mSDL_SCANCODE_KP_MINUS
 = 86,

186 
	mSDL_SCANCODE_KP_PLUS
 = 87,

187 
	mSDL_SCANCODE_KP_ENTER
 = 88,

188 
	mSDL_SCANCODE_KP_1
 = 89,

189 
	mSDL_SCANCODE_KP_2
 = 90,

190 
	mSDL_SCANCODE_KP_3
 = 91,

191 
	mSDL_SCANCODE_KP_4
 = 92,

192 
	mSDL_SCANCODE_KP_5
 = 93,

193 
	mSDL_SCANCODE_KP_6
 = 94,

194 
	mSDL_SCANCODE_KP_7
 = 95,

195 
	mSDL_SCANCODE_KP_8
 = 96,

196 
	mSDL_SCANCODE_KP_9
 = 97,

197 
	mSDL_SCANCODE_KP_0
 = 98,

198 
	mSDL_SCANCODE_KP_PERIOD
 = 99,

200 
	mSDL_SCANCODE_NONUSBACKSLASH
 = 100,

210 
	mSDL_SCANCODE_APPLICATION
 = 101,

211 
	mSDL_SCANCODE_POWER
 = 102,

214 
	mSDL_SCANCODE_KP_EQUALS
 = 103,

215 
	mSDL_SCANCODE_F13
 = 104,

216 
	mSDL_SCANCODE_F14
 = 105,

217 
	mSDL_SCANCODE_F15
 = 106,

218 
	mSDL_SCANCODE_F16
 = 107,

219 
	mSDL_SCANCODE_F17
 = 108,

220 
	mSDL_SCANCODE_F18
 = 109,

221 
	mSDL_SCANCODE_F19
 = 110,

222 
	mSDL_SCANCODE_F20
 = 111,

223 
	mSDL_SCANCODE_F21
 = 112,

224 
	mSDL_SCANCODE_F22
 = 113,

225 
	mSDL_SCANCODE_F23
 = 114,

226 
	mSDL_SCANCODE_F24
 = 115,

227 
	mSDL_SCANCODE_EXECUTE
 = 116,

228 
	mSDL_SCANCODE_HELP
 = 117,

229 
	mSDL_SCANCODE_MENU
 = 118,

230 
	mSDL_SCANCODE_SELECT
 = 119,

231 
	mSDL_SCANCODE_STOP
 = 120,

232 
	mSDL_SCANCODE_AGAIN
 = 121,

233 
	mSDL_SCANCODE_UNDO
 = 122,

234 
	mSDL_SCANCODE_CUT
 = 123,

235 
	mSDL_SCANCODE_COPY
 = 124,

236 
	mSDL_SCANCODE_PASTE
 = 125,

237 
	mSDL_SCANCODE_FIND
 = 126,

238 
	mSDL_SCANCODE_MUTE
 = 127,

239 
	mSDL_SCANCODE_VOLUMEUP
 = 128,

240 
	mSDL_SCANCODE_VOLUMEDOWN
 = 129,

245 
	mSDL_SCANCODE_KP_COMMA
 = 133,

246 
	mSDL_SCANCODE_KP_EQUALSAS400
 = 134,

248 
	mSDL_SCANCODE_INTERNATIONAL1
 = 135,

250 
	mSDL_SCANCODE_INTERNATIONAL2
 = 136,

251 
	mSDL_SCANCODE_INTERNATIONAL3
 = 137,

252 
	mSDL_SCANCODE_INTERNATIONAL4
 = 138,

253 
	mSDL_SCANCODE_INTERNATIONAL5
 = 139,

254 
	mSDL_SCANCODE_INTERNATIONAL6
 = 140,

255 
	mSDL_SCANCODE_INTERNATIONAL7
 = 141,

256 
	mSDL_SCANCODE_INTERNATIONAL8
 = 142,

257 
	mSDL_SCANCODE_INTERNATIONAL9
 = 143,

258 
	mSDL_SCANCODE_LANG1
 = 144,

259 
	mSDL_SCANCODE_LANG2
 = 145,

260 
	mSDL_SCANCODE_LANG3
 = 146,

261 
	mSDL_SCANCODE_LANG4
 = 147,

262 
	mSDL_SCANCODE_LANG5
 = 148,

263 
	mSDL_SCANCODE_LANG6
 = 149,

264 
	mSDL_SCANCODE_LANG7
 = 150,

265 
	mSDL_SCANCODE_LANG8
 = 151,

266 
	mSDL_SCANCODE_LANG9
 = 152,

268 
	mSDL_SCANCODE_ALTERASE
 = 153,

269 
	mSDL_SCANCODE_SYSREQ
 = 154,

270 
	mSDL_SCANCODE_CANCEL
 = 155,

271 
	mSDL_SCANCODE_CLEAR
 = 156,

272 
	mSDL_SCANCODE_PRIOR
 = 157,

273 
	mSDL_SCANCODE_RETURN2
 = 158,

274 
	mSDL_SCANCODE_SEPARATOR
 = 159,

275 
	mSDL_SCANCODE_OUT
 = 160,

276 
	mSDL_SCANCODE_OPER
 = 161,

277 
	mSDL_SCANCODE_CLEARAGAIN
 = 162,

278 
	mSDL_SCANCODE_CRSEL
 = 163,

279 
	mSDL_SCANCODE_EXSEL
 = 164,

281 
	mSDL_SCANCODE_KP_00
 = 176,

282 
	mSDL_SCANCODE_KP_000
 = 177,

283 
	mSDL_SCANCODE_THOUSANDSSEPARATOR
 = 178,

284 
	mSDL_SCANCODE_DECIMALSEPARATOR
 = 179,

285 
	mSDL_SCANCODE_CURRENCYUNIT
 = 180,

286 
	mSDL_SCANCODE_CURRENCYSUBUNIT
 = 181,

287 
	mSDL_SCANCODE_KP_LEFTPAREN
 = 182,

288 
	mSDL_SCANCODE_KP_RIGHTPAREN
 = 183,

289 
	mSDL_SCANCODE_KP_LEFTBRACE
 = 184,

290 
	mSDL_SCANCODE_KP_RIGHTBRACE
 = 185,

291 
	mSDL_SCANCODE_KP_TAB
 = 186,

292 
	mSDL_SCANCODE_KP_BACKSPACE
 = 187,

293 
	mSDL_SCANCODE_KP_A
 = 188,

294 
	mSDL_SCANCODE_KP_B
 = 189,

295 
	mSDL_SCANCODE_KP_C
 = 190,

296 
	mSDL_SCANCODE_KP_D
 = 191,

297 
	mSDL_SCANCODE_KP_E
 = 192,

298 
	mSDL_SCANCODE_KP_F
 = 193,

299 
	mSDL_SCANCODE_KP_XOR
 = 194,

300 
	mSDL_SCANCODE_KP_POWER
 = 195,

301 
	mSDL_SCANCODE_KP_PERCENT
 = 196,

302 
	mSDL_SCANCODE_KP_LESS
 = 197,

303 
	mSDL_SCANCODE_KP_GREATER
 = 198,

304 
	mSDL_SCANCODE_KP_AMPERSAND
 = 199,

305 
	mSDL_SCANCODE_KP_DBLAMPERSAND
 = 200,

306 
	mSDL_SCANCODE_KP_VERTICALBAR
 = 201,

307 
	mSDL_SCANCODE_KP_DBLVERTICALBAR
 = 202,

308 
	mSDL_SCANCODE_KP_COLON
 = 203,

309 
	mSDL_SCANCODE_KP_HASH
 = 204,

310 
	mSDL_SCANCODE_KP_SPACE
 = 205,

311 
	mSDL_SCANCODE_KP_AT
 = 206,

312 
	mSDL_SCANCODE_KP_EXCLAM
 = 207,

313 
	mSDL_SCANCODE_KP_MEMSTORE
 = 208,

314 
	mSDL_SCANCODE_KP_MEMRECALL
 = 209,

315 
	mSDL_SCANCODE_KP_MEMCLEAR
 = 210,

316 
	mSDL_SCANCODE_KP_MEMADD
 = 211,

317 
	mSDL_SCANCODE_KP_MEMSUBTRACT
 = 212,

318 
	mSDL_SCANCODE_KP_MEMMULTIPLY
 = 213,

319 
	mSDL_SCANCODE_KP_MEMDIVIDE
 = 214,

320 
	mSDL_SCANCODE_KP_PLUSMINUS
 = 215,

321 
	mSDL_SCANCODE_KP_CLEAR
 = 216,

322 
	mSDL_SCANCODE_KP_CLEARENTRY
 = 217,

323 
	mSDL_SCANCODE_KP_BINARY
 = 218,

324 
	mSDL_SCANCODE_KP_OCTAL
 = 219,

325 
	mSDL_SCANCODE_KP_DECIMAL
 = 220,

326 
	mSDL_SCANCODE_KP_HEXADECIMAL
 = 221,

328 
	mSDL_SCANCODE_LCTRL
 = 224,

329 
	mSDL_SCANCODE_LSHIFT
 = 225,

330 
	mSDL_SCANCODE_LALT
 = 226,

331 
	mSDL_SCANCODE_LGUI
 = 227,

332 
	mSDL_SCANCODE_RCTRL
 = 228,

333 
	mSDL_SCANCODE_RSHIFT
 = 229,

334 
	mSDL_SCANCODE_RALT
 = 230,

335 
	mSDL_SCANCODE_RGUI
 = 231,

337 
	mSDL_SCANCODE_MODE
 = 257,

351 
	mSDL_SCANCODE_AUDIONEXT
 = 258,

352 
	mSDL_SCANCODE_AUDIOPREV
 = 259,

353 
	mSDL_SCANCODE_AUDIOSTOP
 = 260,

354 
	mSDL_SCANCODE_AUDIOPLAY
 = 261,

355 
	mSDL_SCANCODE_AUDIOMUTE
 = 262,

356 
	mSDL_SCANCODE_MEDIASELECT
 = 263,

357 
	mSDL_SCANCODE_WWW
 = 264,

358 
	mSDL_SCANCODE_MAIL
 = 265,

359 
	mSDL_SCANCODE_CALCULATOR
 = 266,

360 
	mSDL_SCANCODE_COMPUTER
 = 267,

361 
	mSDL_SCANCODE_AC_SEARCH
 = 268,

362 
	mSDL_SCANCODE_AC_HOME
 = 269,

363 
	mSDL_SCANCODE_AC_BACK
 = 270,

364 
	mSDL_SCANCODE_AC_FORWARD
 = 271,

365 
	mSDL_SCANCODE_AC_STOP
 = 272,

366 
	mSDL_SCANCODE_AC_REFRESH
 = 273,

367 
	mSDL_SCANCODE_AC_BOOKMARKS
 = 274,

378 
	mSDL_SCANCODE_BRIGHTNESSDOWN
 = 275,

379 
	mSDL_SCANCODE_BRIGHTNESSUP
 = 276,

380 
	mSDL_SCANCODE_DISPLAYSWITCH
 = 277,

382 
	mSDL_SCANCODE_KBDILLUMTOGGLE
 = 278,

383 
	mSDL_SCANCODE_KBDILLUMDOWN
 = 279,

384 
	mSDL_SCANCODE_KBDILLUMUP
 = 280,

385 
	mSDL_SCANCODE_EJECT
 = 281,

386 
	mSDL_SCANCODE_SLEEP
 = 282,

388 
	mSDL_SCANCODE_APP1
 = 283,

389 
	mSDL_SCANCODE_APP2
 = 284,

400 
	mSDL_SCANCODE_AUDIOREWIND
 = 285,

401 
	mSDL_SCANCODE_AUDIOFASTFORWARD
 = 286,

407 
	mSDL_NUM_SCANCODES
 = 512

409 } 
	tSDL_Sˇncode
;

	@SDL2/include/SDL_sensor.h

29 #i‚de‡
SDL_£ns‹_h_


30 
	#SDL_£ns‹_h_


	)

32 
	~"SDL_°döc.h
"

33 
	~"SDL_îr‹.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


51 
_SDL_Sís‹
;

52 
_SDL_Sís‹
 
	tSDL_Sís‹
;

60 
Söt32
 
	tSDL_Sís‹ID
;

71 
SDL_SENSOR_INVALID
 = -1,

72 
SDL_SENSOR_UNKNOWN
,

73 
SDL_SENSOR_ACCEL
,

74 
SDL_SENSOR_GYRO


75 } 
	tSDL_Sís‹Ty≥
;

97 
	#SDL_STANDARD_GRAVITY
 9.80665f

	)

127 
DECLSPEC
 
SDLCALL
 
SDL_NumSís‹s
();

136 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_Sís‹GëDevi˚Name
(
devi˚_ödex
);

145 
DECLSPEC
 
SDL_Sís‹Ty≥
 
SDLCALL
 
SDL_Sís‹GëDevi˚Ty≥
(
devi˚_ödex
);

154 
DECLSPEC
 
SDLCALL
 
SDL_Sís‹GëDevi˚N⁄P‹èbÀTy≥
(
devi˚_ödex
);

163 
DECLSPEC
 
SDL_Sís‹ID
 
SDLCALL
 
SDL_Sís‹GëDevi˚In°™˚ID
(
devi˚_ödex
);

172 
DECLSPEC
 
SDL_Sís‹
 *
SDLCALL
 
SDL_Sís‹O≥n
(
devi˚_ödex
);

177 
DECLSPEC
 
SDL_Sís‹
 *
SDLCALL
 
SDL_Sís‹FromIn°™˚ID
(
SDL_Sís‹ID
 
ö°™˚_id
);

184 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_Sís‹GëName
(
SDL_Sís‹
 *
£ns‹
);

193 
DECLSPEC
 
SDL_Sís‹Ty≥
 
SDLCALL
 
SDL_Sís‹GëTy≥
(
SDL_Sís‹
 *
£ns‹
);

202 
DECLSPEC
 
SDLCALL
 
SDL_Sís‹GëN⁄P‹èbÀTy≥
(
SDL_Sís‹
 *
£ns‹
);

211 
DECLSPEC
 
SDL_Sís‹ID
 
SDLCALL
 
SDL_Sís‹GëIn°™˚ID
(
SDL_Sís‹
 *
£ns‹
);

224 
DECLSPEC
 
SDLCALL
 
SDL_Sís‹GëD©a
(
SDL_Sís‹
 * 
£ns‹
, *
d©a
, 
num_vÆues
);

229 
DECLSPEC
 
SDLCALL
 
SDL_Sís‹Clo£
(
SDL_Sís‹
 * 
£ns‹
);

238 
DECLSPEC
 
SDLCALL
 
SDL_Sís‹Upd©e
();

242 #ifde‡
__˝lu•lus


247 
	~"˛o£_code.h
"

	@SDL2/include/SDL_shape.h

22 #i‚de‡
SDL_sh≠e_h_


23 
	#SDL_sh≠e_h_


	)

25 
	~"SDL_°döc.h
"

26 
	~"SDL_pixñs.h
"

27 
	~"SDL_ª˘.h
"

28 
	~"SDL_surÁ˚.h
"

29 
	~"SDL_video.h
"

31 
	~"begö_code.h
"

33 #ifde‡
__˝lu•lus


42 
	#SDL_NONSHAPEABLE_WINDOW
 -1

	)

43 
	#SDL_INVALID_SHAPE_ARGUMENT
 -2

	)

44 
	#SDL_WINDOW_LACKS_SHAPE
 -3

	)

66 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_Cª©eSh≠edWödow
(c⁄° *
tôÀ
,
x
,
y
,
w
,
h
,
Uöt32
 
Êags
);

77 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_IsSh≠edWödow
(c⁄° 
SDL_Wödow
 *
wödow
);

82 
	gSh≠eModeDeÁu…
,

84 
	gSh≠eModeBö¨izeAÕha
,

86 
	gSh≠eModeRevî£Bö¨izeAÕha
,

88 
	gSh≠eModeCﬁ‹Key


89 } 
	tWödowSh≠eMode
;

91 
	#SDL_SHAPEMODEALPHA
(
mode
Ë(modê=
Sh≠eModeDeÁu…
 || modê=
Sh≠eModeBö¨izeAÕha
 || modê=
Sh≠eModeRevî£Bö¨izeAÕha
)

	)

96 
Uöt8
 
	gbö¨iz©i⁄Cutoff
;

97 
SDL_Cﬁ‹
 
	gcﬁ‹Key
;

98 } 
	tSDL_WödowSh≠eP¨ams
;

101 
	sSDL_WödowSh≠eMode
 {

103 
WödowSh≠eMode
 
	gmode
;

105 
SDL_WödowSh≠eP¨ams
 
	g∑ømëîs
;

106 } 
	tSDL_WödowSh≠eMode
;

121 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowSh≠e
(
SDL_Wödow
 *
wödow
,
SDL_SurÁ˚
 *
sh≠e
,
SDL_WödowSh≠eMode
 *
sh≠e_mode
);

136 
DECLSPEC
 
SDLCALL
 
SDL_GëSh≠edWödowMode
(
SDL_Wödow
 *
wödow
,
SDL_WödowSh≠eMode
 *
sh≠e_mode
);

139 #ifde‡
__˝lu•lus


142 
	~"˛o£_code.h
"

	@SDL2/include/SDL_stdinc.h

28 #i‚de‡
SDL_°döc_h_


29 
	#SDL_°döc_h_


	)

31 
	~"SDL_c⁄fig.h
"

33 #ifde‡
HAVE_SYS_TYPES_H


34 
	~<sys/ty≥s.h
>

36 #ifde‡
HAVE_STDIO_H


37 
	~<°dio.h
>

39 #i‡
deföed
(
STDC_HEADERS
)

40 
	~<°dlib.h
>

41 
	~<°ddef.h
>

42 
	~<°d¨g.h
>

44 #i‡
deföed
(
HAVE_STDLIB_H
)

45 
	~<°dlib.h
>

46 #ñi‡
deföed
(
HAVE_MALLOC_H
)

47 
	~<mÆloc.h
>

49 #i‡
deföed
(
HAVE_STDDEF_H
)

50 
	~<°ddef.h
>

52 #i‡
deföed
(
HAVE_STDARG_H
)

53 
	~<°d¨g.h
>

56 #ifde‡
HAVE_STRING_H


57 #i‡!
deföed
(
STDC_HEADERS
Ë&& deföed(
HAVE_MEMORY_H
)

58 
	~<mem‹y.h
>

60 
	~<°rög.h
>

62 #ifde‡
HAVE_STRINGS_H


63 
	~<°rögs.h
>

65 #ifde‡
HAVE_WCHAR_H


66 
	~<wch¨.h
>

68 #i‡
deföed
(
HAVE_INTTYPES_H
)

69 
	~<öây≥s.h
>

70 #ñi‡
deföed
(
HAVE_STDINT_H
)

71 
	~<°döt.h
>

73 #ifde‡
HAVE_CTYPE_H


74 
	~<˘y≥.h
>

76 #ifde‡
HAVE_MATH_H


77 #i‡
deföed
(
__WINRT__
)

82 
	#_USE_MATH_DEFINES


	)

84 
	~<m©h.h
>

86 #ifde‡
HAVE_FLOAT_H


87 
	~<Êﬂt.h
>

89 #i‡
deföed
(
HAVE_ALLOCA
Ë&& !deföed(
Æloˇ
)

90 #i‡
deföed
(
HAVE_ALLOCA_H
)

91 
	~<Æloˇ.h
>

92 #ñi‡
deföed
(
__GNUC__
)

93 
	#Æloˇ
 
__buûtö_Æloˇ


	)

94 #ñi‡
deföed
(
_MSC_VER
)

95 
	~<mÆloc.h
>

96 
	#Æloˇ
 
_Æloˇ


	)

97 #ñi‡
deföed
(
__WATCOMC__
)

98 
	~<mÆloc.h
>

99 #ñi‡
deföed
(
__BORLANDC__
)

100 
	~<mÆloc.h
>

101 #ñi‡
deföed
(
__DMC__
)

102 
	~<°dlib.h
>

103 #ñi‡
deföed
(
__AIX__
)

104 #¥agm®
Æloˇ


105 #ñi‡
deföed
(
__MRC__
)

106 *
Æloˇ
();

108 *
Æloˇ
();

115 
	#SDL_¨øysize
(
¨øy
Ë(◊ºay)/◊ºay[0]))

	)

116 
	#SDL_TABLESIZE
(
èbÀ
Ë
	`SDL_¨øysize
—abÀ)

	)

123 
	#SDL_STRINGIFY_ARG
(
¨g
Ë#¨g

	)

132 #ifde‡
__˝lu•lus


133 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
ªöãΩªt_ˇ°
<ty≥>”x¥essi⁄)

	)

134 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
°©ic_ˇ°
<ty≥>”x¥essi⁄)

	)

135 
	#SDL_c⁄°_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë
c⁄°_ˇ°
<ty≥>”x¥essi⁄)

	)

137 
	#SDL_ªöãΩªt_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

138 
	#SDL_°©ic_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

139 
	#SDL_c⁄°_ˇ°
(
ty≥
, 
ex¥essi⁄
Ë(—y≥)”x¥essi⁄))

	)

144 
	#SDL_FOURCC
(
A
, 
B
, 
C
, 
D
) \

145 ((
	`SDL_°©ic_ˇ°
(
Uöt32
, SDL_°©ic_ˇ°(
Uöt8
, (
A
))) << 0) | \

146 (
	`SDL_°©ic_ˇ°
(
Uöt32
, SDL_°©ic_ˇ°(
Uöt8
, (
B
))) << 8) | \

147 (
	`SDL_°©ic_ˇ°
(
Uöt32
, SDL_°©ic_ˇ°(
Uöt8
, (
C
))) << 16) | \

148 (
	`SDL_°©ic_ˇ°
(
Uöt32
, SDL_°©ic_ˇ°(
Uöt8
, (
D
))Ë<< 24))

	)

155 #ifde‡
__CC_ARM


157 
	#SDL_FALSE
 0

	)

158 
	#SDL_TRUE
 1

	)

159 
	tSDL_boﬁ
;

163 
	mSDL_FALSE
 = 0,

164 
	mSDL_TRUE
 = 1

165 } 
	tSDL_boﬁ
;

171 
	#SDL_MAX_SINT8
 ((
Söt8
)0x7FË

	)

172 
	#SDL_MIN_SINT8
 ((
Söt8
)(~0x7F)Ë

	)

173 
öt8_t
 
	tSöt8
;

177 
	#SDL_MAX_UINT8
 ((
Uöt8
)0xFFË

	)

178 
	#SDL_MIN_UINT8
 ((
Uöt8
)0x00Ë

	)

179 
uöt8_t
 
	tUöt8
;

183 
	#SDL_MAX_SINT16
 ((
Söt16
)0x7FFFË

	)

184 
	#SDL_MIN_SINT16
 ((
Söt16
)(~0x7FFF)Ë

	)

185 
öt16_t
 
	tSöt16
;

189 
	#SDL_MAX_UINT16
 ((
Uöt16
)0xFFFFË

	)

190 
	#SDL_MIN_UINT16
 ((
Uöt16
)0x0000Ë

	)

191 
uöt16_t
 
	tUöt16
;

195 
	#SDL_MAX_SINT32
 ((
Söt32
)0x7FFFFFFFË

	)

196 
	#SDL_MIN_SINT32
 ((
Söt32
)(~0x7FFFFFFF)Ë

	)

197 
öt32_t
 
	tSöt32
;

201 
	#SDL_MAX_UINT32
 ((
Uöt32
)0xFFFFFFFFuË

	)

202 
	#SDL_MIN_UINT32
 ((
Uöt32
)0x00000000Ë

	)

203 
uöt32_t
 
	tUöt32
;

208 
	#SDL_MAX_SINT64
 ((
Söt64
)0x7FFFFFFFFFFFFFFFŒË

	)

209 
	#SDL_MIN_SINT64
 ((
Söt64
)(~0x7FFFFFFFFFFFFFFFŒ)Ë

	)

210 
öt64_t
 
	tSöt64
;

214 
	#SDL_MAX_UINT64
 ((
Uöt64
)0xFFFFFFFFFFFFFFFFuŒË

	)

215 
	#SDL_MIN_UINT64
 ((
Uöt64
)(0x0000000000000000uŒ)Ë

	)

216 
uöt64_t
 
	tUöt64
;

223 #i‚de‡
SDL_PRIs64


224 #ifde‡
PRIs64


225 
	#SDL_PRIs64
 
PRIs64


	)

226 #ñi‡
deföed
(
__WIN32__
)

227 
	#SDL_PRIs64
 "I64d"

	)

228 #ñi‡
deföed
(
__LINUX__
Ë&& deföed(
__LP64__
)

229 
	#SDL_PRIs64
 "ld"

	)

231 
	#SDL_PRIs64
 "Œd"

	)

234 #i‚de‡
SDL_PRIu64


235 #ifde‡
PRIu64


236 
	#SDL_PRIu64
 
PRIu64


	)

237 #ñi‡
deföed
(
__WIN32__
)

238 
	#SDL_PRIu64
 "I64u"

	)

239 #ñi‡
deföed
(
__LINUX__
Ë&& deföed(
__LP64__
)

240 
	#SDL_PRIu64
 "lu"

	)

242 
	#SDL_PRIu64
 "Œu"

	)

245 #i‚de‡
SDL_PRIx64


246 #ifde‡
PRIx64


247 
	#SDL_PRIx64
 
PRIx64


	)

248 #ñi‡
deföed
(
__WIN32__
)

249 
	#SDL_PRIx64
 "I64x"

	)

250 #ñi‡
deföed
(
__LINUX__
Ë&& deföed(
__LP64__
)

251 
	#SDL_PRIx64
 "lx"

	)

253 
	#SDL_PRIx64
 "Œx"

	)

256 #i‚de‡
SDL_PRIX64


257 #ifde‡
PRIX64


258 
	#SDL_PRIX64
 
PRIX64


	)

259 #ñi‡
deföed
(
__WIN32__
)

260 
	#SDL_PRIX64
 "I64X"

	)

261 #ñi‡
deföed
(
__LINUX__
Ë&& deföed(
__LP64__
)

262 
	#SDL_PRIX64
 "lX"

	)

264 
	#SDL_PRIX64
 "ŒX"

	)

269 #ifde‡
SDL_DISABLE_ANALYZE_MACROS


270 
	#SDL_IN_BYTECAP
(
x
)

	)

271 
	#SDL_INOUT_Z_CAP
(
x
)

	)

272 
	#SDL_OUT_Z_CAP
(
x
)

	)

273 
	#SDL_OUT_CAP
(
x
)

	)

274 
	#SDL_OUT_BYTECAP
(
x
)

	)

275 
	#SDL_OUT_Z_BYTECAP
(
x
)

	)

276 
	#SDL_PRINTF_FORMAT_STRING


	)

277 
	#SDL_SCANF_FORMAT_STRING


	)

278 
	#SDL_PRINTF_VARARG_FUNC
–
fmèrgnumbî
 )

	)

279 
	#SDL_SCANF_VARARG_FUNC
–
fmèrgnumbî
 )

	)

281 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER >= 1600)

282 
	~<ßl.h
>

284 
	#SDL_IN_BYTECAP
(
x
Ë
	`_In_byãcou¡_
(x)

	)

285 
	#SDL_INOUT_Z_CAP
(
x
Ë
	`_Inout_z_ˇp_
(x)

	)

286 
	#SDL_OUT_Z_CAP
(
x
Ë
	`_Out_z_ˇp_
(x)

	)

287 
	#SDL_OUT_CAP
(
x
Ë
	`_Out_ˇp_
(x)

	)

288 
	#SDL_OUT_BYTECAP
(
x
Ë
	`_Out_byãˇp_
(x)

	)

289 
	#SDL_OUT_Z_BYTECAP
(
x
Ë
	`_Out_z_byãˇp_
(x)

	)

291 
	#SDL_PRINTF_FORMAT_STRING
 
_Prötf_f‹m©_°rög_


	)

292 
	#SDL_SCANF_FORMAT_STRING
 
_Sˇnf_f‹m©_°rög_im∂_


	)

294 
	#SDL_IN_BYTECAP
(
x
)

	)

295 
	#SDL_INOUT_Z_CAP
(
x
)

	)

296 
	#SDL_OUT_Z_CAP
(
x
)

	)

297 
	#SDL_OUT_CAP
(
x
)

	)

298 
	#SDL_OUT_BYTECAP
(
x
)

	)

299 
	#SDL_OUT_Z_BYTECAP
(
x
)

	)

300 
	#SDL_PRINTF_FORMAT_STRING


	)

301 
	#SDL_SCANF_FORMAT_STRING


	)

303 #i‡
deföed
(
__GNUC__
)

304 
	#SDL_PRINTF_VARARG_FUNC
–
fmèrgnumbî
 ) 
	`__©åibuã__
 (–
	`f‹m©
–
__¥ötf__
, fmèrgnumbî, fmèrgnumbî+1 )))

	)

305 
	#SDL_SCANF_VARARG_FUNC
–
fmèrgnumbî
 ) 
	`__©åibuã__
 (–
	`f‹m©
–
__sˇnf__
, fmèrgnumbî, fmèrgnumbî+1 )))

	)

307 
	#SDL_PRINTF_VARARG_FUNC
–
fmèrgnumbî
 )

	)

308 
	#SDL_SCANF_VARARG_FUNC
–
fmèrgnumbî
 )

	)

312 
	#SDL_COMPILE_TIME_ASSERT
(
«me
, 
x
) \

313 
	tSDL_compûe_time_as£π_
 ## 
	t«me
[(
x
Ë* 2 - 1]

	)

315 #i‚de‡
	tDOXYGEN_SHOULD_IGNORE_THIS


316 
	tSDL_COMPILE_TIME_ASSERT
(
	tuöt8
, (
	tUöt8
) == 1);

317 
SDL_COMPILE_TIME_ASSERT
(
söt8
, (
Söt8
) == 1);

318 
SDL_COMPILE_TIME_ASSERT
(
uöt16
, (
Uöt16
) == 2);

319 
SDL_COMPILE_TIME_ASSERT
(
söt16
, (
Söt16
) == 2);

320 
SDL_COMPILE_TIME_ASSERT
(
uöt32
, (
Uöt32
) == 4);

321 
SDL_COMPILE_TIME_ASSERT
(
söt32
, (
Söt32
) == 4);

322 
SDL_COMPILE_TIME_ASSERT
(
uöt64
, (
Uöt64
) == 8);

323 
SDL_COMPILE_TIME_ASSERT
(
söt64
, (
Söt64
) == 8);

334 #i‚de‡
DOXYGEN_SHOULD_IGNORE_THIS


335 #i‡!
deföed
(
__ANDROID__
)

339 
	mDUMMY_ENUM_VALUE


340 } 
	tSDL_DUMMY_ENUM
;

342 
SDL_COMPILE_TIME_ASSERT
(, (
SDL_DUMMY_ENUM
) == ());

347 
	~"begö_code.h
"

349 #ifde‡
__˝lu•lus


353 #ifde‡
HAVE_ALLOCA


354 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`Æloˇ
(—y≥)*(cou¡))

	)

355 
	#SDL_°ack_‰ì
(
d©a
)

	)

357 
	#SDL_°ack_Æloc
(
ty≥
, 
cou¡
Ë—y≥*)
	`SDL_mÆloc
(—y≥)*(cou¡))

	)

358 
	#SDL_°ack_‰ì
(
d©a
Ë
	`SDL_‰ì
(d©a)

	)

361 
DECLSPEC
 *
SDLCALL
 
SDL_mÆloc
(
size_t
 
size
);

362 
DECLSPEC
 *
SDLCALL
 
SDL_ˇŒoc
(
size_t
 
nmemb
, size_à
size
);

363 
DECLSPEC
 *
SDLCALL
 
SDL_ªÆloc
(*
mem
, 
size_t
 
size
);

364 
DECLSPEC
 
SDLCALL
 
SDL_‰ì
(*
mem
);

366 *(
	tSDLCALL
 *
	tSDL_mÆloc_func
)(
	tsize_t
 
	tsize
);

367 *(
	tSDLCALL
 *
	tSDL_ˇŒoc_func
)(
	tsize_t
 
	tnmemb
, size_à
	tsize
);

368 *(
	tSDLCALL
 *
	tSDL_ªÆloc_func
)(*
	tmem
, 
	tsize_t
 
	tsize
);

369 (
SDLCALL
 *
	tSDL_‰ì_func
)(*
	tmem
);

374 
DECLSPEC
 
SDLCALL
 
SDL_GëMem‹yFun˘i⁄s
(
SDL_mÆloc_func
 *
mÆloc_func
,

375 
SDL_ˇŒoc_func
 *
ˇŒoc_func
,

376 
SDL_ªÆloc_func
 *
ªÆloc_func
,

377 
SDL_‰ì_func
 *
‰ì_func
);

387 
DECLSPEC
 
SDLCALL
 
SDL_SëMem‹yFun˘i⁄s
(
SDL_mÆloc_func
 
mÆloc_func
,

388 
SDL_ˇŒoc_func
 
ˇŒoc_func
,

389 
SDL_ªÆloc_func
 
ªÆloc_func
,

390 
SDL_‰ì_func
 
‰ì_func
);

395 
DECLSPEC
 
SDLCALL
 
SDL_GëNumAŒoˇti⁄s
();

397 
DECLSPEC
 *
SDLCALL
 
SDL_gëív
(c⁄° *
«me
);

398 
DECLSPEC
 
SDLCALL
 
SDL_£ãnv
(c⁄° *
«me
, c⁄° *
vÆue
, 
ovîwrôe
);

400 
DECLSPEC
 
SDLCALL
 
SDL_qs‹t
(*
ba£
, 
size_t
 
nmemb
, size_à
size
, (*
com∑ª
) (const *, const *));

402 
DECLSPEC
 
SDLCALL
 
SDL_abs
(
x
);

406 
	#SDL_mö
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

407 
	#SDL_max
(
x
, 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

409 
DECLSPEC
 
SDLCALL
 
SDL_isdigô
(
x
);

410 
DECLSPEC
 
SDLCALL
 
SDL_is•a˚
(
x
);

411 
DECLSPEC
 
SDLCALL
 
SDL_isuµî
(
x
);

412 
DECLSPEC
 
SDLCALL
 
SDL_i¶owî
(
x
);

413 
DECLSPEC
 
SDLCALL
 
SDL_touµî
(
x
);

414 
DECLSPEC
 
SDLCALL
 
SDL_tﬁowî
(
x
);

416 
DECLSPEC
 *
SDLCALL
 
SDL_mem£t
(
SDL_OUT_BYTECAP
(
Àn
Ë*
d°
, 
c
, 
size_t
Üen);

418 
	#SDL_zîo
(
x
Ë
	`SDL_mem£t
(&(x), 0, ((x)))

	)

419 
	#SDL_zî›
(
x
Ë
	`SDL_mem£t
((x), 0, (*(x)))

	)

420 
	#SDL_zîﬂ
(
x
Ë
	`SDL_mem£t
((x), 0, ((x)))

	)

423 
SDL_FORCE_INLINE
 
SDL_mem£t4
(*
d°
, 
Uöt32
 
vÆ
, 
size_t
 
dw‹ds
)

425 #ifde‡
__APPLE__


426 
mem£t_∑âîn4
(
d°
, &
vÆ
, 
dw‹ds
 * 4);

427 #ñi‡
deföed
(
__GNUC__
Ë&& deföed(
i386
)

428 
	gu0
, 
	gu1
, 
	gu2
;

429 
__asm__
 
__vﬁ©ûe__
 (

432 : "=&D" (
u0
), "=&a" (
u1
), "=&c" (
u2
)

433 : "0" (
d°
), "1" (
vÆ
), "2" (
SDL_°©ic_ˇ°
(
Uöt32
, 
dw‹ds
))

437 
size_t
 
	g_n
 = (
dw‹ds
 + 3) / 4;

438 
Uöt32
 *
	g_p
 = 
SDL_°©ic_ˇ°
(Uöt32 *, 
d°
);

439 
Uöt32
 
	g_vÆ
 = (
vÆ
);

440 i‡(
	gdw‹ds
 == 0)

442 
	gdw‹ds
 % 4)

444 0: dÿ{ *
_p
++ = 
_vÆ
;

445 3: *
_p
++ = 
_vÆ
;

446 2: *
_p
++ = 
_vÆ
;

447 1: *
_p
++ = 
_vÆ
;

448 }  --
	g_n
 );

453 
DECLSPEC
 *
SDLCALL
 
SDL_mem˝y
(
SDL_OUT_BYTECAP
(
Àn
Ë*
d°
, 
SDL_IN_BYTECAP
÷íËc⁄° *
§c
, 
size_t
Üen);

455 
DECLSPEC
 *
SDLCALL
 
SDL_memmove
(
SDL_OUT_BYTECAP
(
Àn
Ë*
d°
, 
SDL_IN_BYTECAP
÷íËc⁄° *
§c
, 
size_t
Üen);

456 
DECLSPEC
 
SDLCALL
 
SDL_memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
);

458 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_wc¶í
(c⁄° 
wch¨_t
 *
w°r
);

459 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_wc¶˝y
(
SDL_OUT_Z_CAP
(
maxÀn
Ë
wch¨_t
 *
d°
, c⁄° wch¨_à*
§c
, size_t maxlen);

460 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_wc¶ˇt
(
SDL_INOUT_Z_CAP
(
maxÀn
Ë
wch¨_t
 *
d°
, c⁄° wch¨_à*
§c
, size_t maxlen);

461 
DECLSPEC
 
wch¨_t
 *
SDLCALL
 
SDL_wcsdup
(c⁄° wch¨_à*
w°r
);

462 
DECLSPEC
 
wch¨_t
 *
SDLCALL
 
SDL_wcs°r
(c⁄° wch¨_à*
hay°ack
, c⁄° wch¨_à*
√edÀ
);

464 
DECLSPEC
 
SDLCALL
 
SDL_wcscmp
(c⁄° 
wch¨_t
 *
°r1
, c⁄° wch¨_à*
°r2
);

465 
DECLSPEC
 
SDLCALL
 
SDL_wc¢cmp
(c⁄° 
wch¨_t
 *
°r1
, c⁄° wch¨_à*
°r2
, 
size_t
 
maxÀn
);

467 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æí
(c⁄° *
°r
);

468 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æ˝y
(
SDL_OUT_Z_CAP
(
maxÀn
Ë*
d°
, c⁄° *
§c
, size_t maxlen);

469 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_utf8°æ˝y
(
SDL_OUT_Z_CAP
(
d°_byãs
Ë*
d°
, c⁄° *
§c
, size_t dst_bytes);

470 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_°æˇt
(
SDL_INOUT_Z_CAP
(
maxÀn
Ë*
d°
, c⁄° *
§c
, size_t maxlen);

471 
DECLSPEC
 *
SDLCALL
 
SDL_°rdup
(c⁄° *
°r
);

472 
DECLSPEC
 *
SDLCALL
 
SDL_°ºev
(*
°r
);

473 
DECLSPEC
 *
SDLCALL
 
SDL_°ru¥
(*
°r
);

474 
DECLSPEC
 *
SDLCALL
 
SDL_°æwr
(*
°r
);

475 
DECLSPEC
 *
SDLCALL
 
SDL_°rchr
(c⁄° *
°r
, 
c
);

476 
DECLSPEC
 *
SDLCALL
 
SDL_°ºchr
(c⁄° *
°r
, 
c
);

477 
DECLSPEC
 *
SDLCALL
 
SDL_°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

478 
DECLSPEC
 *
SDLCALL
 
SDL_°πokr
(*
s1
, c⁄° *
s2
, **
ßvïå
);

479 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_utf8°æí
(c⁄° *
°r
);

481 
DECLSPEC
 *
SDLCALL
 
SDL_ôﬂ
(
vÆue
, *
°r
, 
ødix
);

482 
DECLSPEC
 *
SDLCALL
 
SDL_uôﬂ
(
vÆue
, *
°r
, 
ødix
);

483 
DECLSPEC
 *
SDLCALL
 
SDL_…ﬂ
(
vÆue
, *
°r
, 
ødix
);

484 
DECLSPEC
 *
SDLCALL
 
SDL_u…ﬂ
(
vÆue
, *
°r
, 
ødix
);

485 
DECLSPEC
 *
SDLCALL
 
SDL_Œtﬂ
(
Söt64
 
vÆue
, *
°r
, 
ødix
);

486 
DECLSPEC
 *
SDLCALL
 
SDL_uŒtﬂ
(
Uöt64
 
vÆue
, *
°r
, 
ødix
);

488 
DECLSPEC
 
SDLCALL
 
SDL_©oi
(c⁄° *
°r
);

489 
DECLSPEC
 
SDLCALL
 
SDL_©of
(c⁄° *
°r
);

490 
DECLSPEC
 
SDLCALL
 
SDL_°πﬁ
(c⁄° *
°r
, **
ídp
, 
ba£
);

491 
DECLSPEC
 
SDLCALL
 
SDL_°πoul
(c⁄° *
°r
, **
ídp
, 
ba£
);

492 
DECLSPEC
 
Söt64
 
SDLCALL
 
SDL_°πﬁl
(c⁄° *
°r
, **
ídp
, 
ba£
);

493 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_°πouŒ
(c⁄° *
°r
, **
ídp
, 
ba£
);

494 
DECLSPEC
 
SDLCALL
 
SDL_°πod
(c⁄° *
°r
, **
ídp
);

496 
DECLSPEC
 
SDLCALL
 
SDL_°rcmp
(c⁄° *
°r1
, c⁄° *
°r2
);

497 
DECLSPEC
 
SDLCALL
 
SDL_°∫cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
maxÀn
);

498 
DECLSPEC
 
SDLCALL
 
SDL_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

499 
DECLSPEC
 
SDLCALL
 
SDL_°∫ˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
Àn
);

501 
DECLSPEC
 
SDLCALL
 
SDL_ssˇnf
(c⁄° *
ãxt
, 
SDL_SCANF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_SCANF_VARARG_FUNC
(2);

502 
DECLSPEC
 
SDLCALL
 
SDL_vssˇnf
(c⁄° *
ãxt
, c⁄° *
fmt
, 
va_li°
 
≠
);

503 
DECLSPEC
 
SDLCALL
 
SDL_¢¥ötf
(
SDL_OUT_Z_CAP
(
maxÀn
Ë*
ãxt
, 
size_t
 maxÀn, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ... ) 
SDL_PRINTF_VARARG_FUNC
(3);

504 
DECLSPEC
 
SDLCALL
 
SDL_v¢¥ötf
(
SDL_OUT_Z_CAP
(
maxÀn
Ë*
ãxt
, 
size_t
 maxÀn, c⁄° *
fmt
, 
va_li°
 
≠
);

506 #i‚de‡
HAVE_M_PI


507 #i‚de‡
M_PI


508 
	#M_PI
 3.14159265358979323846264338327950288

	)

512 
DECLSPEC
 
SDLCALL
 
SDL_acos
(
x
);

513 
DECLSPEC
 
SDLCALL
 
SDL_acosf
(
x
);

514 
DECLSPEC
 
SDLCALL
 
SDL_asö
(
x
);

515 
DECLSPEC
 
SDLCALL
 
SDL_asöf
(
x
);

516 
DECLSPEC
 
SDLCALL
 
SDL_©™
(
x
);

517 
DECLSPEC
 
SDLCALL
 
SDL_©™f
(
x
);

518 
DECLSPEC
 
SDLCALL
 
SDL_©™2
(
x
, 
y
);

519 
DECLSPEC
 
SDLCALL
 
SDL_©™2f
(
x
, 
y
);

520 
DECLSPEC
 
SDLCALL
 
SDL_˚û
(
x
);

521 
DECLSPEC
 
SDLCALL
 
SDL_˚ûf
(
x
);

522 
DECLSPEC
 
SDLCALL
 
SDL_c›ysign
(
x
, 
y
);

523 
DECLSPEC
 
SDLCALL
 
SDL_c›ysignf
(
x
, 
y
);

524 
DECLSPEC
 
SDLCALL
 
SDL_cos
(
x
);

525 
DECLSPEC
 
SDLCALL
 
SDL_cosf
(
x
);

526 
DECLSPEC
 
SDLCALL
 
SDL_exp
(
x
);

527 
DECLSPEC
 
SDLCALL
 
SDL_expf
(
x
);

528 
DECLSPEC
 
SDLCALL
 
SDL_Ábs
(
x
);

529 
DECLSPEC
 
SDLCALL
 
SDL_Ábsf
(
x
);

530 
DECLSPEC
 
SDLCALL
 
SDL_Êo‹
(
x
);

531 
DECLSPEC
 
SDLCALL
 
SDL_Êo‹f
(
x
);

532 
DECLSPEC
 
SDLCALL
 
SDL_fmod
(
x
, 
y
);

533 
DECLSPEC
 
SDLCALL
 
SDL_fmodf
(
x
, 
y
);

534 
DECLSPEC
 
SDLCALL
 
SDL_log
(
x
);

535 
DECLSPEC
 
SDLCALL
 
SDL_logf
(
x
);

536 
DECLSPEC
 
SDLCALL
 
SDL_log10
(
x
);

537 
DECLSPEC
 
SDLCALL
 
SDL_log10f
(
x
);

538 
DECLSPEC
 
SDLCALL
 
SDL_pow
(
x
, 
y
);

539 
DECLSPEC
 
SDLCALL
 
SDL_powf
(
x
, 
y
);

540 
DECLSPEC
 
SDLCALL
 
SDL_sˇlbn
(
x
, 
n
);

541 
DECLSPEC
 
SDLCALL
 
SDL_sˇlbnf
(
x
, 
n
);

542 
DECLSPEC
 
SDLCALL
 
SDL_sö
(
x
);

543 
DECLSPEC
 
SDLCALL
 
SDL_söf
(
x
);

544 
DECLSPEC
 
SDLCALL
 
SDL_sqπ
(
x
);

545 
DECLSPEC
 
SDLCALL
 
SDL_sqπf
(
x
);

546 
DECLSPEC
 
SDLCALL
 
SDL_èn
(
x
);

547 
DECLSPEC
 
SDLCALL
 
SDL_ènf
(
x
);

550 
	#SDL_ICONV_ERROR
 (
size_t
)-1

	)

551 
	#SDL_ICONV_E2BIG
 (
size_t
)-2

	)

552 
	#SDL_ICONV_EILSEQ
 (
size_t
)-3

	)

553 
	#SDL_ICONV_EINVAL
 (
size_t
)-4

	)

556 
_SDL_ic⁄v_t
 *
	tSDL_ic⁄v_t
;

557 
DECLSPEC
 
SDL_ic⁄v_t
 
SDLCALL
 
SDL_ic⁄v_›í
(c⁄° *
tocode
,

558 c⁄° *
‰omcode
);

559 
DECLSPEC
 
SDLCALL
 
SDL_ic⁄v_˛o£
(
SDL_ic⁄v_t
 
cd
);

560 
DECLSPEC
 
size_t
 
SDLCALL
 
SDL_ic⁄v
(
SDL_ic⁄v_t
 
cd
, c⁄° **
öbuf
,

561 
size_t
 * 
öbyã¶e·
, **
outbuf
,

562 
size_t
 * 
outbyã¶e·
);

567 
DECLSPEC
 *
SDLCALL
 
SDL_ic⁄v_°rög
(c⁄° *
tocode
,

568 c⁄° *
‰omcode
,

569 c⁄° *
öbuf
,

570 
size_t
 
öbyã¶e·
);

571 
	#SDL_ic⁄v_utf8_loˇÀ
(
S
Ë
	`SDL_ic⁄v_°rög
("", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

572 
	#SDL_ic⁄v_utf8_ucs2
(
S
Ë(
Uöt16
 *)
	`SDL_ic⁄v_°rög
("UCS-2-INTERNAL", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

573 
	#SDL_ic⁄v_utf8_ucs4
(
S
Ë(
Uöt32
 *)
	`SDL_ic⁄v_°rög
("UCS-4-INTERNAL", "UTF-8", S, 
	`SDL_°æí
(S)+1)

	)

577 #i‡
deföed
(
__˛™g_™Æyzî__
Ë&& !deföed(
SDL_DISABLE_ANALYZE_MACROS
)

578 
	#SDL_mÆloc
 
mÆloc


	)

579 
	#SDL_ˇŒoc
 
ˇŒoc


	)

580 
	#SDL_ªÆloc
 
ªÆloc


	)

581 
	#SDL_‰ì
 
‰ì


	)

582 
	#SDL_mem£t
 
mem£t


	)

583 
	#SDL_mem˝y
 
mem˝y


	)

584 
	#SDL_memmove
 
memmove


	)

585 
	#SDL_memcmp
 
memcmp


	)

586 
	#SDL_°æí
 
°æí


	)

587 
	#SDL_°æ˝y
 
°æ˝y


	)

588 
	#SDL_°æˇt
 
°æˇt


	)

589 
	#SDL_°rdup
 
°rdup


	)

590 
	#SDL_°rchr
 
°rchr


	)

591 
	#SDL_°ºchr
 
°ºchr


	)

592 
	#SDL_°r°r
 
°r°r


	)

593 
	#SDL_°πokr
 
°πok_r


	)

594 
	#SDL_°rcmp
 
°rcmp


	)

595 
	#SDL_°∫cmp
 
°∫cmp


	)

596 
	#SDL_°rˇ£cmp
 
°rˇ£cmp


	)

597 
	#SDL_°∫ˇ£cmp
 
°∫ˇ£cmp


	)

598 
	#SDL_ssˇnf
 
ssˇnf


	)

599 
	#SDL_vssˇnf
 
vssˇnf


	)

600 
	#SDL_¢¥ötf
 
¢¥ötf


	)

601 
	#SDL_v¢¥ötf
 
v¢¥ötf


	)

604 
SDL_FORCE_INLINE
 *
SDL_mem˝y4
(
SDL_OUT_BYTECAP
(
dw‹ds
*4Ë*
d°
, 
SDL_IN_BYTECAP
(dw‹ds*4Ëc⁄° *
§c
, 
size_t
 dwords)

606  
SDL_mem˝y
(
d°
, 
§c
, 
dw‹ds
 * 4);

610 #ifde‡
__˝lu•lus


613 
	~"˛o£_code.h
"

	@SDL2/include/SDL_surface.h

28 #i‚de‡
SDL_surÁ˚_h_


29 
	#SDL_surÁ˚_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_pixñs.h
"

33 
	~"SDL_ª˘.h
"

34 
	~"SDL_bÀndmode.h
"

35 
	~"SDL_rw›s.h
"

37 
	~"begö_code.h
"

39 #ifde‡
__˝lu•lus


52 
	#SDL_SWSURFACE
 0

	)

53 
	#SDL_PREALLOC
 0x00000001

	)

54 
	#SDL_RLEACCEL
 0x00000002

	)

55 
	#SDL_DONTFREE
 0x00000004

	)

56 
	#SDL_SIMD_ALIGNED
 0x00000008

	)

62 
	#SDL_MUSTLOCK
(
S
Ë(((S)->
Êags
 & 
SDL_RLEACCEL
Ë!0)

	)

70 
	sSDL_SurÁ˚


72 
Uöt32
 
Êags
;

73 
SDL_PixñF‹m©
 *
f‹m©
;

74 
w
, 
h
;

75 
pôch
;

76 *
pixñs
;

79 *
u£rd©a
;

82 
locked
;

83 *
lock_d©a
;

86 
SDL_Re˘
 
˛ù_ª˘
;

89 
SDL_BlôM≠
 *
m≠
;

92 
ªfcou¡
;

93 } 
	tSDL_SurÁ˚
;

98 (
SDLCALL
 *
	tSDL_blô
Ë(
	tSDL_SurÁ˚
 * 
	t§c
, 
	tSDL_Re˘
 * 
	t§¸e˘
,

99 
	tSDL_SurÁ˚
 * 
	td°
, 
	tSDL_Re˘
 * 
	td°ª˘
);

106 
SDL_YUV_CONVERSION_JPEG
,

107 
SDL_YUV_CONVERSION_BT601
,

108 
SDL_YUV_CONVERSION_BT709
,

109 
SDL_YUV_CONVERSION_AUTOMATIC


110 } 
	tSDL_YUV_CONVERSION_MODE
;

130 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_Cª©eRGBSurÁ˚


131 (
Uöt32
 
Êags
, 
width
, 
height
, 
dïth
,

132 
Uöt32
 
Rmask
, Uöt32 
Gmask
, Uöt32 
Bmask
, Uöt32 
Amask
);

135 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_Cª©eRGBSurÁ˚WôhF‹m©


136 (
Uöt32
 
Êags
, 
width
, 
height
, 
dïth
, Uöt32 
f‹m©
);

138 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_Cª©eRGBSurÁ˚From
(*
pixñs
,

139 
width
,

140 
height
,

141 
dïth
,

142 
pôch
,

143 
Uöt32
 
Rmask
,

144 
Uöt32
 
Gmask
,

145 
Uöt32
 
Bmask
,

146 
Uöt32
 
Amask
);

147 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_Cª©eRGBSurÁ˚WôhF‹m©From


148 (*
pixñs
, 
width
, 
height
, 
dïth
, 
pôch
, 
Uöt32
 
f‹m©
);

149 
DECLSPEC
 
SDLCALL
 
SDL_FªeSurÁ˚
(
SDL_SurÁ˚
 * 
surÁ˚
);

158 
DECLSPEC
 
SDLCALL
 
SDL_SëSurÁ˚PÆëã
(
SDL_SurÁ˚
 * 
surÁ˚
,

159 
SDL_PÆëã
 * 
∑Àâe
);

180 
DECLSPEC
 
SDLCALL
 
SDL_LockSurÁ˚
(
SDL_SurÁ˚
 * 
surÁ˚
);

182 
DECLSPEC
 
SDLCALL
 
SDL_U∆ockSurÁ˚
(
SDL_SurÁ˚
 * 
surÁ˚
);

193 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_LﬂdBMP_RW
(
SDL_RW›s
 * 
§c
,

194 
‰ì§c
);

201 
	#SDL_LﬂdBMP
(
fûe
Ë
	`SDL_LﬂdBMP_RW
(
	`SDL_RWFromFûe
(fûe, "rb"), 1)

	)

216 
DECLSPEC
 
SDLCALL
 
SDL_SaveBMP_RW


217 (
SDL_SurÁ˚
 * 
surÁ˚
, 
SDL_RW›s
 * 
d°
, 
‰ìd°
);

224 
	#SDL_SaveBMP
(
surÁ˚
, 
fûe
) \

225 
	`SDL_SaveBMP_RW
(
surÁ˚
, 
	`SDL_RWFromFûe
(
fûe
, "wb"), 1)

	)

235 
DECLSPEC
 
SDLCALL
 
SDL_SëSurÁ˚RLE
(
SDL_SurÁ˚
 * 
surÁ˚
,

236 
Êag
);

249 
DECLSPEC
 
SDLCALL
 
SDL_SëCﬁ‹Key
(
SDL_SurÁ˚
 * 
surÁ˚
,

250 
Êag
, 
Uöt32
 
key
);

257 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_HasCﬁ‹Key
(
SDL_SurÁ˚
 * 
surÁ˚
);

269 
DECLSPEC
 
SDLCALL
 
SDL_GëCﬁ‹Key
(
SDL_SurÁ˚
 * 
surÁ˚
,

270 
Uöt32
 * 
key
);

284 
DECLSPEC
 
SDLCALL
 
SDL_SëSurÁ˚Cﬁ‹Mod
(
SDL_SurÁ˚
 * 
surÁ˚
,

285 
Uöt8
 
r
, Uöt8 
g
, Uöt8 
b
);

300 
DECLSPEC
 
SDLCALL
 
SDL_GëSurÁ˚Cﬁ‹Mod
(
SDL_SurÁ˚
 * 
surÁ˚
,

301 
Uöt8
 * 
r
, Uöt8 * 
g
,

302 
Uöt8
 * 
b
);

314 
DECLSPEC
 
SDLCALL
 
SDL_SëSurÁ˚AÕhaMod
(
SDL_SurÁ˚
 * 
surÁ˚
,

315 
Uöt8
 
Æpha
);

327 
DECLSPEC
 
SDLCALL
 
SDL_GëSurÁ˚AÕhaMod
(
SDL_SurÁ˚
 * 
surÁ˚
,

328 
Uöt8
 * 
Æpha
);

340 
DECLSPEC
 
SDLCALL
 
SDL_SëSurÁ˚BÀndMode
(
SDL_SurÁ˚
 * 
surÁ˚
,

341 
SDL_BÀndMode
 
bÀndMode
);

353 
DECLSPEC
 
SDLCALL
 
SDL_GëSurÁ˚BÀndMode
(
SDL_SurÁ˚
 * 
surÁ˚
,

354 
SDL_BÀndMode
 *
bÀndMode
);

369 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_SëClùRe˘
(
SDL_SurÁ˚
 * 
surÁ˚
,

370 c⁄° 
SDL_Re˘
 * 
ª˘
);

378 
DECLSPEC
 
SDLCALL
 
SDL_GëClùRe˘
(
SDL_SurÁ˚
 * 
surÁ˚
,

379 
SDL_Re˘
 * 
ª˘
);

384 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_Du∂iˇãSurÁ˚
(SDL_SurÁ˚ * 
surÁ˚
);

396 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_C⁄vîtSurÁ˚


397 (
SDL_SurÁ˚
 * 
§c
, c⁄° 
SDL_PixñF‹m©
 * 
fmt
, 
Uöt32
 
Êags
);

398 
DECLSPEC
 
SDL_SurÁ˚
 *
SDLCALL
 
SDL_C⁄vîtSurÁ˚F‹m©


399 (
SDL_SurÁ˚
 * 
§c
, 
Uöt32
 
pixñ_f‹m©
, Uöt32 
Êags
);

406 
DECLSPEC
 
SDLCALL
 
SDL_C⁄vîtPixñs
(
width
, 
height
,

407 
Uöt32
 
§c_f‹m©
,

408 c⁄° * 
§c
, 
§c_pôch
,

409 
Uöt32
 
d°_f‹m©
,

410 * 
d°
, 
d°_pôch
);

422 
DECLSPEC
 
SDLCALL
 
SDL_FûlRe˘


423 (
SDL_SurÁ˚
 * 
d°
, c⁄° 
SDL_Re˘
 * 
ª˘
, 
Uöt32
 
cﬁ‹
);

424 
DECLSPEC
 
SDLCALL
 
SDL_FûlRe˘s


425 (
SDL_SurÁ˚
 * 
d°
, c⁄° 
SDL_Re˘
 * 
ª˘s
, 
cou¡
, 
Uöt32
 
cﬁ‹
);

484 
	#SDL_BlôSurÁ˚
 
SDL_UµîBlô


	)

490 
DECLSPEC
 
SDLCALL
 
SDL_UµîBlô


491 (
SDL_SurÁ˚
 * 
§c
, c⁄° 
SDL_Re˘
 * 
§¸e˘
,

492 
SDL_SurÁ˚
 * 
d°
, 
SDL_Re˘
 * 
d°ª˘
);

498 
DECLSPEC
 
SDLCALL
 
SDL_LowîBlô


499 (
SDL_SurÁ˚
 * 
§c
, 
SDL_Re˘
 * 
§¸e˘
,

500 
SDL_SurÁ˚
 * 
d°
, 
SDL_Re˘
 * 
d°ª˘
);

508 
DECLSPEC
 
SDLCALL
 
SDL_So·Såëch
(
SDL_SurÁ˚
 * 
§c
,

509 c⁄° 
SDL_Re˘
 * 
§¸e˘
,

510 
SDL_SurÁ˚
 * 
d°
,

511 c⁄° 
SDL_Re˘
 * 
d°ª˘
);

513 
	#SDL_BlôSˇÀd
 
SDL_UµîBlôSˇÀd


	)

519 
DECLSPEC
 
SDLCALL
 
SDL_UµîBlôSˇÀd


520 (
SDL_SurÁ˚
 * 
§c
, c⁄° 
SDL_Re˘
 * 
§¸e˘
,

521 
SDL_SurÁ˚
 * 
d°
, 
SDL_Re˘
 * 
d°ª˘
);

527 
DECLSPEC
 
SDLCALL
 
SDL_LowîBlôSˇÀd


528 (
SDL_SurÁ˚
 * 
§c
, 
SDL_Re˘
 * 
§¸e˘
,

529 
SDL_SurÁ˚
 * 
d°
, 
SDL_Re˘
 * 
d°ª˘
);

534 
DECLSPEC
 
SDLCALL
 
SDL_SëYUVC⁄vîsi⁄Mode
(
SDL_YUV_CONVERSION_MODE
 
mode
);

539 
DECLSPEC
 
SDL_YUV_CONVERSION_MODE
 
SDLCALL
 
SDL_GëYUVC⁄vîsi⁄Mode
();

544 
DECLSPEC
 
SDL_YUV_CONVERSION_MODE
 
SDLCALL
 
SDL_GëYUVC⁄vîsi⁄ModeF‹Resﬁuti⁄
(
width
, 
height
);

547 #ifde‡
__˝lu•lus


550 
	~"˛o£_code.h
"

	@SDL2/include/SDL_system.h

28 #i‚de‡
SDL_sy°em_h_


29 
	#SDL_sy°em_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_keybﬂrd.h
"

33 
	~"SDL_ªndî.h
"

34 
	~"SDL_video.h
"

36 
	~"begö_code.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
__WIN32__


49 (
	tSDLCALL
 * 
	tSDL_WödowsMesßgeHook
)(*
	tu£rd©a
, *
	thWnd
, 
	tmesßge
, 
	tUöt64
 
	twP¨am
, 
	tSöt64
 
	tlP¨am
);

50 
DECLSPEC
 
SDLCALL
 
	`SDL_SëWödowsMesßgeHook
(
SDL_WödowsMesßgeHook
 
ˇŒback
, *
u£rd©a
);

58 
DECLSPEC
 
SDLCALL
 
	`SDL_Dúe˘3D9GëAd≠ãrIndex
–
di•œyIndex
 );

60 
IDúe˘3DDevi˚9
 
	tIDúe˘3DDevi˚9
;

66 
DECLSPEC
 
IDúe˘3DDevi˚9
* 
SDLCALL
 
	`SDL_RídîGëD3D9Devi˚
(
SDL_Rídîî
 * 
ªndîî
);

74 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_DXGIGëOuçutInfo
–
di•œyIndex
, *
ad≠ãrIndex
, *
ouçutIndex
 );

80 #ifde‡
__LINUX__


87 
DECLSPEC
 
SDLCALL
 
	`SDL_LöuxSëThªadPri‹ôy
(
Söt64
 
thªadID
, 
¥i‹ôy
);

92 #ifde‡
__IPHONEOS__


94 
	#SDL_iOSSëAnim©i⁄CÆlback
(
wödow
, 
öãrvÆ
, 
ˇŒback
, 
ˇŒbackP¨am
Ë
	`SDL_iPh⁄eSëAnim©i⁄CÆlback
(wödow, i¡îvÆ, cÆlback, cÆlbackP¨am)

	)

95 
DECLSPEC
 
SDLCALL
 
	`SDL_iPh⁄eSëAnim©i⁄CÆlback
(
SDL_Wödow
 * 
wödow
, 
öãrvÆ
, (*
ˇŒback
)(*), *
ˇŒbackP¨am
);

97 
	#SDL_iOSSëEvítPump
(
íabÀd
Ë
	`SDL_iPh⁄eSëEvítPump
”«bÀd)

	)

98 
DECLSPEC
 
SDLCALL
 
	`SDL_iPh⁄eSëEvítPump
(
SDL_boﬁ
 
íabÀd
);

104 #ifde‡
__ANDROID__


111 
DECLSPEC
 * 
SDLCALL
 
	`SDL_AndroidGëJNIEnv
();

121 
DECLSPEC
 * 
SDLCALL
 
	`SDL_AndroidGëA˘ivôy
();

147 
DECLSPEC
 
SDLCALL
 
	`SDL_GëAndroidSDKVîsi⁄
();

152 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_IsAndroidTV
();

157 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_IsChromebook
();

162 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_IsDeXMode
();

167 
DECLSPEC
 
SDLCALL
 
	`SDL_AndroidBackBuâ⁄
();

173 
	#SDL_ANDROID_EXTERNAL_STORAGE_READ
 0x01

	)

174 
	#SDL_ANDROID_EXTERNAL_STORAGE_WRITE
 0x02

	)

182 
DECLSPEC
 c⁄° * 
SDLCALL
 
	`SDL_AndroidGëI¡î«lSt‹ageP©h
();

191 
DECLSPEC
 
SDLCALL
 
	`SDL_AndroidGëExã∫ÆSt‹ageSèã
();

199 
DECLSPEC
 c⁄° * 
SDLCALL
 
	`SDL_AndroidGëExã∫ÆSt‹ageP©h
();

204 #ifde‡
__WINRT__


213 
SDL_WINRT_PATH_INSTALLED_LOCATION
,

216 
SDL_WINRT_PATH_LOCAL_FOLDER
,

222 
SDL_WINRT_PATH_ROAMING_FOLDER
,

226 
SDL_WINRT_PATH_TEMP_FOLDER


227 } 
	tSDL_WöRT_P©h
;

236 
SDL_WINRT_DEVICEFAMILY_UNKNOWN
,

239 
SDL_WINRT_DEVICEFAMILY_DESKTOP
,

242 
SDL_WINRT_DEVICEFAMILY_MOBILE
,

245 
SDL_WINRT_DEVICEFAMILY_XBOX
,

246 } 
	tSDL_WöRT_Devi˚Famûy
;

264 
DECLSPEC
 c⁄° 
wch¨_t
 * 
SDLCALL
 
	`SDL_WöRTGëFSP©hUNICODE
(
SDL_WöRT_P©h
 
∑thTy≥
);

281 
DECLSPEC
 c⁄° * 
SDLCALL
 
	`SDL_WöRTGëFSP©hUTF8
(
SDL_WöRT_P©h
 
∑thTy≥
);

288 
DECLSPEC
 
SDL_WöRT_Devi˚Famûy
 
SDLCALL
 
	`SDL_WöRTGëDevi˚Famûy
();

295 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_IsTabÀt
();

298 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄WûlTîmö©e
();

299 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄DidRe˚iveMem‹yW¨nög
();

300 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄WûlResignA˘ive
();

301 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄DidE¡îBackground
();

302 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄WûlE¡îF‹eground
();

303 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄DidBecomeA˘ive
();

304 #ifde‡
__IPHONEOS__


305 
DECLSPEC
 
SDLCALL
 
	`SDL_OnAµliˇti⁄DidCh™geSètusB¨Orõ¡©i⁄
();

309 #ifde‡
__˝lu•lus


310 
	}
}

312 
	~"˛o£_code.h
"

	@SDL2/include/SDL_syswm.h

28 #i‚de‡
SDL_syswm_h_


29 
	#SDL_syswm_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_video.h
"

34 
	~"SDL_vîsi⁄.h
"

44 
	gSDL_SysWMöfo
;

46 #i‡!
deföed
(
SDL_PROTOTYPES_ONLY
)

48 #i‡
deföed
(
SDL_VIDEO_DRIVER_WINDOWS
)

49 #i‚de‡
WIN32_LEAN_AND_MEAN


50 
	#WIN32_LEAN_AND_MEAN


	)

52 #i‚de‡
NOMINMAX


53 
	#NOMINMAX


	)

55 
	~<wödows.h
>

58 #i‡
deföed
(
SDL_VIDEO_DRIVER_WINRT
)

59 
	~<In•e˘abÀ.h
>

63 #i‡
deföed
(
SDL_VIDEO_DRIVER_X11
)

64 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

66 
	#Curs‹
 
X11Curs‹


	)

69 
	~<X11/Xlib.h
>

70 
	~<X11/X©om.h
>

72 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

74 #unde‡
Curs‹


79 #i‡
deföed
(
SDL_VIDEO_DRIVER_DIRECTFB
)

80 
	~<dúe˘fb.h
>

83 #i‡
deföed
(
SDL_VIDEO_DRIVER_COCOA
)

84 #ifde‡
__OBJC__


85 @
˛ass
 
	gNSWödow
;

87 
_NSWödow
 
	tNSWödow
;

91 #i‡
deföed
(
SDL_VIDEO_DRIVER_UIKIT
)

92 #ifde‡
__OBJC__


93 
	~<UIKô/UIKô.h
>

95 
_UIWödow
 
	tUIWödow
;

96 
_UIVõwC⁄åﬁÀr
 
	tUIVõwC⁄åﬁÀr
;

98 
Uöt32
 
	tGLuöt
;

101 #i‡
deföed
(
SDL_VIDEO_DRIVER_ANDROID
)

102 
AN©iveWödow
 
	tAN©iveWödow
;

103 *
	tEGLSurÁ˚
;

106 #i‡
deföed
(
SDL_VIDEO_DRIVER_VIVANTE
)

107 
	~"SDL_egl.h
"

112 
	~"begö_code.h
"

114 #ifde‡
__˝lu•lus


118 #i‡!
deföed
(
SDL_PROTOTYPES_ONLY
)

124 
SDL_SYSWM_UNKNOWN
,

125 
SDL_SYSWM_WINDOWS
,

126 
SDL_SYSWM_X11
,

127 
SDL_SYSWM_DIRECTFB
,

128 
SDL_SYSWM_COCOA
,

129 
SDL_SYSWM_UIKIT
,

130 
SDL_SYSWM_WAYLAND
,

131 
SDL_SYSWM_MIR
,

132 
SDL_SYSWM_WINRT
,

133 
SDL_SYSWM_ANDROID
,

134 
SDL_SYSWM_VIVANTE
,

135 
SDL_SYSWM_OS2
,

136 
SDL_SYSWM_HAIKU


137 } 
	tSDL_SYSWM_TYPE
;

142 
	sSDL_SysWMmsg


144 
SDL_vîsi⁄
 
	mvîsi⁄
;

145 
SDL_SYSWM_TYPE
 
	msubsy°em
;

148 #i‡
deföed
(
SDL_VIDEO_DRIVER_WINDOWS
)

150 
HWND
 
	mhwnd
;

151 
UINT
 
	mmsg
;

152 
WPARAM
 
	mwP¨am
;

153 
LPARAM
 
	mlP¨am
;

154 } 
	mwö
;

156 #i‡
deföed
(
SDL_VIDEO_DRIVER_X11
)

158 
XEvít
 
	mevít
;

159 } 
	mx11
;

161 #i‡
deföed
(
SDL_VIDEO_DRIVER_DIRECTFB
)

163 
DFBEvít
 
	mevít
;

164 } 
	mdfb
;

166 #i‡
deföed
(
SDL_VIDEO_DRIVER_COCOA
)

172 
	mdummy
;

174 } 
	mcocﬂ
;

176 #i‡
deföed
(
SDL_VIDEO_DRIVER_UIKIT
)

179 
	mdummy
;

181 } 
	muikô
;

183 #i‡
deföed
(
SDL_VIDEO_DRIVER_VIVANTE
)

186 
	mdummy
;

188 } 
	mviv™ã
;

191 
	mdummy
;

192 } 
	mmsg
;

201 
	sSDL_SysWMöfo


203 
SDL_vîsi⁄
 
	mvîsi⁄
;

204 
SDL_SYSWM_TYPE
 
	msubsy°em
;

207 #i‡
deföed
(
SDL_VIDEO_DRIVER_WINDOWS
)

210 
HWND
 
	mwödow
;

211 
HDC
 
	mhdc
;

212 
HINSTANCE
 
	mhö°™˚
;

213 } 
	mwö
;

215 #i‡
deföed
(
SDL_VIDEO_DRIVER_WINRT
)

218 
IIn•e˘abÀ
 * 
	mwödow
;

219 } 
	mwöπ
;

221 #i‡
deföed
(
SDL_VIDEO_DRIVER_X11
)

224 
Di•œy
 *
	mdi•œy
;

225 
Wödow
 
	mwödow
;

226 } 
	mx11
;

228 #i‡
deföed
(
SDL_VIDEO_DRIVER_DIRECTFB
)

231 
IDúe˘FB
 *
	mdfb
;

232 
IDúe˘FBWödow
 *
	mwödow
;

233 
IDúe˘FBSurÁ˚
 *
	msurÁ˚
;

234 } 
	mdfb
;

236 #i‡
deföed
(
SDL_VIDEO_DRIVER_COCOA
)

239 #i‡
deföed
(
__OBJC__
Ë&& deföed(
__has_„©uª
Ë&& __has_„©uª(
objc_¨c
)

240 
NSWödow
 
__unß„_uƒëaöed
 *
	mwödow
;

242 
NSWödow
 *
	mwödow
;

244 } 
	mcocﬂ
;

246 #i‡
deföed
(
SDL_VIDEO_DRIVER_UIKIT
)

249 #i‡
deföed
(
__OBJC__
Ë&& deföed(
__has_„©uª
Ë&& __has_„©uª(
objc_¨c
)

250 
UIWödow
 
__unß„_uƒëaöed
 *
	mwödow
;

252 
UIWödow
 *
	mwödow
;

254 
GLuöt
 
	m‰amebuf„r
;

255 
GLuöt
 
	mcﬁ‹buf„r
;

256 
GLuöt
 
	mªsﬁveFømebuf„r
;

257 } 
	muikô
;

259 #i‡
deföed
(
SDL_VIDEO_DRIVER_WAYLAND
)

262 
wl_di•œy
 *
	mdi•œy
;

263 
wl_surÁ˚
 *
	msurÁ˚
;

264 
wl_shñl_surÁ˚
 *
	mshñl_surÁ˚
;

265 } 
	mwl
;

267 #i‡
deföed
(
SDL_VIDEO_DRIVER_MIR
)

270 *
	mc⁄√˘i⁄
;

271 *
	msurÁ˚
;

272 } 
	mmú
;

275 #i‡
deföed
(
SDL_VIDEO_DRIVER_ANDROID
)

278 
AN©iveWödow
 *
	mwödow
;

279 
EGLSurÁ˚
 
	msurÁ˚
;

280 } 
	m™droid
;

283 #i‡
deföed
(
SDL_VIDEO_DRIVER_VIVANTE
)

286 
EGLN©iveDi•œyTy≥
 
	mdi•œy
;

287 
EGLN©iveWödowTy≥
 
	mwödow
;

288 } 
	mviv™ã
;

293 
Uöt8
 
	mdummy
[64];

294 } 
	möfo
;

299 
SDL_SysWMöfo
 
	tSDL_SysWMöfo
;

319 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GëWödowWMInfo
(
SDL_Wödow
 * 
wödow
,

320 
SDL_SysWMöfo
 * 
öfo
);

324 #ifde‡
__˝lu•lus


327 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test.h

30 #i‚de‡
SDL_ã°_h_


31 
	#SDL_ã°_h_


	)

33 
	~"SDL.h
"

34 
	~"SDL_ã°_as£π.h
"

35 
	~"SDL_ã°_comm⁄.h
"

36 
	~"SDL_ã°_com∑ª.h
"

37 
	~"SDL_ã°_¸c32.h
"

38 
	~"SDL_ã°_f⁄t.h
"

39 
	~"SDL_ã°_fuzzî.h
"

40 
	~"SDL_ã°_h¨√ss.h
"

41 
	~"SDL_ã°_images.h
"

42 
	~"SDL_ã°_log.h
"

43 
	~"SDL_ã°_md5.h
"

44 
	~"SDL_ã°_mem‹y.h
"

45 
	~"SDL_ã°_øndom.h
"

47 
	~"begö_code.h
"

49 #ifde‡
__˝lu•lus


59 
	#SDLTEST_MAX_LOGMESSAGE_LENGTH
 3584

	)

62 #ifde‡
__˝lu•lus


65 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_assert.h

36 #i‚de‡
SDL_ã°_as£π_h_


37 
	#SDL_ã°_as£π_h_


	)

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


48 
	#ASSERT_FAIL
 0

	)

53 
	#ASSERT_PASS
 1

	)

61 
SDLTe°_As£π
(
as£πC⁄dôi⁄
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
as£πDes¸ùti⁄
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

71 
SDLTe°_As£πCheck
(
as£πC⁄dôi⁄
, 
SDL_PRINTF_FORMAT_STRING
 c⁄° *
as£πDes¸ùti⁄
, ...Ë
SDL_PRINTF_VARARG_FUNC
(2);

78 
SDLTe°_As£πPass
(
SDL_PRINTF_FORMAT_STRING
 c⁄° *
as£πDes¸ùti⁄
, ...Ë
SDL_PRINTF_VARARG_FUNC
(1);

83 
SDLTe°_Re£tAs£πSumm¨y
();

88 
SDLTe°_LogAs£πSumm¨y
();

96 
SDLTe°_As£πSumm¨yToTe°Resu…
();

98 #ifde‡
__˝lu•lus


101 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_common.h

32 #i‚de‡
SDL_ã°_comm⁄_h_


33 
	#SDL_ã°_comm⁄_h_


	)

35 
	~"SDL.h
"

37 #i‡
deföed
(
__PSP__
)

38 
	#DEFAULT_WINDOW_WIDTH
 480

	)

39 
	#DEFAULT_WINDOW_HEIGHT
 272

	)

41 
	#DEFAULT_WINDOW_WIDTH
 640

	)

42 
	#DEFAULT_WINDOW_HEIGHT
 480

	)

45 
	#VERBOSE_VIDEO
 0x00000001

	)

46 
	#VERBOSE_MODES
 0x00000002

	)

47 
	#VERBOSE_RENDER
 0x00000004

	)

48 
	#VERBOSE_EVENT
 0x00000008

	)

49 
	#VERBOSE_AUDIO
 0x00000010

	)

54 **
	m¨gv
;

55 
Uöt32
 
	mÊags
;

56 
Uöt32
 
	mvîbo£
;

59 c⁄° *
	mvideodrivî
;

60 
	mdi•œy
;

61 c⁄° *
	mwödow_tôÀ
;

62 c⁄° *
	mwödow_ic⁄
;

63 
Uöt32
 
	mwödow_Êags
;

64 
	mwödow_x
;

65 
	mwödow_y
;

66 
	mwödow_w
;

67 
	mwödow_h
;

68 
	mwödow_möW
;

69 
	mwödow_möH
;

70 
	mwödow_maxW
;

71 
	mwödow_maxH
;

72 
	mlogiˇl_w
;

73 
	mlogiˇl_h
;

74 
	msˇÀ
;

75 
	mdïth
;

76 
	mª‰esh_øã
;

77 
	mnum_wödows
;

78 
SDL_Wödow
 **
	mwödows
;

81 c⁄° *
	mªndîdrivî
;

82 
Uöt32
 
	mªndî_Êags
;

83 
SDL_boﬁ
 
	mskù_ªndîî
;

84 
SDL_Rídîî
 **
	mªndîîs
;

85 
SDL_Textuª
 **
	mèrgës
;

88 c⁄° *
	maudiodrivî
;

89 
SDL_AudioS≥c
 
	maudio•ec
;

92 
	mgl_ªd_size
;

93 
	mgl_gªí_size
;

94 
	mgl_blue_size
;

95 
	mgl_Æpha_size
;

96 
	mgl_buf„r_size
;

97 
	mgl_dïth_size
;

98 
	mgl_°ícû_size
;

99 
	mgl_doubÀ_buf„r
;

100 
	mgl_accum_ªd_size
;

101 
	mgl_accum_gªí_size
;

102 
	mgl_accum_blue_size
;

103 
	mgl_accum_Æpha_size
;

104 
	mgl_°îeo
;

105 
	mgl_mu…ißm∂ebuf„rs
;

106 
	mgl_mu…ißm∂eßm∂es
;

107 
	mgl_ªèöed_backög
;

108 
	mgl_ac˚Àøãd
;

109 
	mgl_maj‹_vîsi⁄
;

110 
	mgl_mö‹_vîsi⁄
;

111 
	mgl_debug
;

112 
	mgl_¥ofûe_mask
;

113 } 
	tSDLTe°_Comm⁄Sèã
;

115 
	~"begö_code.h
"

117 #ifde‡
__˝lu•lus


131 
SDLTe°_Comm⁄Sèã
 *
SDLTe°_Comm⁄Cª©eSèã
(**
¨gv
, 
Uöt32
 
Êags
);

141 
SDLTe°_Comm⁄Arg
(
SDLTe°_Comm⁄Sèã
 * 
°©e
, 
ödex
);

156 
SDLTe°_Comm⁄LogUßge
(
SDLTe°_Comm⁄Sèã
 * 
°©e
, c⁄° *
¨gv0
, c⁄° **
›ti⁄s
);

169 c⁄° *
SDLTe°_Comm⁄Ußge
(
SDLTe°_Comm⁄Sèã
 * 
°©e
);

178 
SDL_boﬁ
 
SDLTe°_Comm⁄Inô
(
SDLTe°_Comm⁄Sèã
 * 
°©e
);

189 
SDL_boﬁ
 
SDLTe°_Comm⁄DeÁu…Args
(
SDLTe°_Comm⁄Sèã
 * 
°©e
, c⁄° 
¨gc
, **
¨gv
);

199 
SDLTe°_Comm⁄Evít
(
SDLTe°_Comm⁄Sèã
 * 
°©e
, 
SDL_Evít
 * 
evít
, *
d⁄e
);

207 
SDLTe°_Comm⁄Quô
(
SDLTe°_Comm⁄Sèã
 * 
°©e
);

211 #ifde‡
__˝lu•lus


214 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_compare.h

36 #i‚de‡
SDL_ã°_com∑ª_h_


37 
	#SDL_ã°_com∑ª_h_


	)

39 
	~"SDL.h
"

41 
	~"SDL_ã°_images.h
"

43 
	~"begö_code.h
"

45 #ifde‡
__˝lu•lus


58 
SDLTe°_Com∑ªSurÁ˚s
(
SDL_SurÁ˚
 *
surÁ˚
, SDL_SurÁ˚ *
ª„ªn˚SurÁ˚
, 
ÆlowabÀ_îr‹
);

62 #ifde‡
__˝lu•lus


65 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_crc32.h

36 #i‚de‡
SDL_ã°_¸c32_h_


37 
	#SDL_ã°_¸c32_h_


	)

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


50 #i‚de‡
CrcUöt32


51 
	#CrcUöt32
 

	)

53 #i‚de‡
CrcUöt8


54 
	#CrcUöt8
 

	)

57 #ifde‡
ORIGINAL_METHOD


58 
	#CRC32_POLY
 0x04c11db7

	)

60 
	#CRC32_POLY
 0xEDB88320

	)

67 
CrcUöt32
 
¸c32_èbÀ
[256];

68 } 
	tSDLTe°_Crc32C⁄ãxt
;

82 
SDLTe°_Crc32Inô
(
SDLTe°_Crc32C⁄ãxt
 * 
¸cC⁄ãxt
);

96 
SDLTe°_Crc32CÆc
(
SDLTe°_Crc32C⁄ãxt
 * 
¸cC⁄ãxt
, 
CrcUöt8
 *
öBuf
, 
CrcUöt32
 
öLí
, CrcUöt32 *
¸c32
);

99 
SDLTe°_Crc32CÆcSèπ
(
SDLTe°_Crc32C⁄ãxt
 * 
¸cC⁄ãxt
, 
CrcUöt32
 *
¸c32
);

100 
SDLTe°_Crc32CÆcEnd
(
SDLTe°_Crc32C⁄ãxt
 * 
¸cC⁄ãxt
, 
CrcUöt32
 *
¸c32
);

101 
SDLTe°_Crc32CÆcBuf„r
(
SDLTe°_Crc32C⁄ãxt
 * 
¸cC⁄ãxt
, 
CrcUöt8
 *
öBuf
, 
CrcUöt32
 
öLí
, CrcUöt32 *
¸c32
);

113 
SDLTe°_Crc32D⁄e
(
SDLTe°_Crc32C⁄ãxt
 * 
¸cC⁄ãxt
);

117 #ifde‡
__˝lu•lus


120 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_font.h

30 #i‚de‡
SDL_ã°_f⁄t_h_


31 
	#SDL_ã°_f⁄t_h_


	)

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


41 
	#FONT_CHARACTER_SIZE
 8

	)

53 
SDLTe°_DøwCh¨a˘î
(
SDL_Rídîî
 *
ªndîî
, 
x
, 
y
, 
c
);

65 
SDLTe°_DøwSåög
(
SDL_Rídîî
 *
ªndîî
, 
x
, 
y
, c⁄° *
s
);

71 
SDLTe°_CÀ™upTextDøwög
();

74 #ifde‡
__˝lu•lus


77 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_fuzzer.h

36 #i‚de‡
SDL_ã°_fuzzî_h_


37 
	#SDL_ã°_fuzzî_h_


	)

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


63 
SDLTe°_FuzzîInô
(
Uöt64
 
execKey
);

71 
Uöt8
 
SDLTe°_R™domUöt8
();

78 
Söt8
 
SDLTe°_R™domSöt8
();

86 
Uöt16
 
SDLTe°_R™domUöt16
();

93 
Söt16
 
SDLTe°_R™domSöt16
();

101 
Söt32
 
SDLTe°_R™domSöt32
();

109 
Uöt32
 
SDLTe°_R™domUöt32
();

116 
Uöt64
 
SDLTe°_R™domUöt64
();

124 
Söt64
 
SDLTe°_R™domSöt64
();

129 
SDLTe°_R™domUnôFlﬂt
();

134 
SDLTe°_R™domUnôDoubÀ
();

140 
SDLTe°_R™domFlﬂt
();

146 
SDLTe°_R™domDoubÀ
();

167 
Uöt8
 
SDLTe°_R™domUöt8Bound¨yVÆue
(Uöt8 
bound¨y1
, Uöt8 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

188 
Uöt16
 
SDLTe°_R™domUöt16Bound¨yVÆue
(Uöt16 
bound¨y1
, Uöt16 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

209 
Uöt32
 
SDLTe°_R™domUöt32Bound¨yVÆue
(Uöt32 
bound¨y1
, Uöt32 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

230 
Uöt64
 
SDLTe°_R™domUöt64Bound¨yVÆue
(Uöt64 
bound¨y1
, Uöt64 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

251 
Söt8
 
SDLTe°_R™domSöt8Bound¨yVÆue
(Söt8 
bound¨y1
, Söt8 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

273 
Söt16
 
SDLTe°_R™domSöt16Bound¨yVÆue
(Söt16 
bound¨y1
, Söt16 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

294 
Söt32
 
SDLTe°_R™domSöt32Bound¨yVÆue
(Söt32 
bound¨y1
, Söt32 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

315 
Söt64
 
SDLTe°_R™domSöt64Bound¨yVÆue
(Söt64 
bound¨y1
, Söt64 
bound¨y2
, 
SDL_boﬁ
 
vÆidDomaö
);

329 
Söt32
 
SDLTe°_R™domI¡egîInR™ge
(Söt32 
mö
, Söt32 
max
);

341 * 
SDLTe°_R™domAsciiSåög
();

355 * 
SDLTe°_R™domAsciiSåögWôhMaximumLígth
(
maxLígth
);

369 * 
SDLTe°_R™domAsciiSåögOfSize
(
size
);

374 
SDLTe°_GëFuzzîInvoˇti⁄Cou¡
();

377 #ifde‡
__˝lu•lus


380 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_harness.h

36 #i‚de‡
SDL_ã°_h_¨√ss_h


37 
	#SDL_ã°_h_¨√ss_h


	)

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


47 
	#TEST_ENABLED
 1

	)

48 
	#TEST_DISABLED
 0

	)

51 
	#TEST_ABORTED
 -1

	)

52 
	#TEST_STARTED
 0

	)

53 
	#TEST_COMPLETED
 1

	)

54 
	#TEST_SKIPPED
 2

	)

57 
	#TEST_RESULT_PASSED
 0

	)

58 
	#TEST_RESULT_FAILED
 1

	)

59 
	#TEST_RESULT_NO_ASSERT
 2

	)

60 
	#TEST_RESULT_SKIPPED
 3

	)

61 
	#TEST_RESULT_SETUP_FAILURE
 4

	)

64 (*
SDLTe°_Te°Ca£SëUpFp
)(*
	t¨g
);

67 (*
SDLTe°_Te°Ca£Fp
)(*
	t¨g
);

70 (*
SDLTe°_Te°Ca£TórDownFp
)(*
	t¨g
);

75 
	sSDLTe°_Te°Ca£Re„ªn˚
 {

77 
SDLTe°_Te°Ca£Fp
 
ã°Ca£
;

79 *
«me
;

81 *
des¸ùti⁄
;

83 
íabÀd
;

84 } 
	tSDLTe°_Te°Ca£Re„ªn˚
;

89 
	sSDLTe°_Te°SuôeRe„ªn˚
 {

91 *
«me
;

93 
SDLTe°_Te°Ca£SëUpFp
 
ã°SëUp
;

95 c⁄° 
SDLTe°_Te°Ca£Re„ªn˚
 **
ã°Ca£s
;

97 
SDLTe°_Te°Ca£TórDownFp
 
ã°TórDown
;

98 } 
	tSDLTe°_Te°SuôeRe„ªn˚
;

110 *
SDLTe°_Gíî©eRunSìd
(c⁄° 
Àngth
);

123 
SDLTe°_RunSuôes
(
SDLTe°_Te°SuôeRe„ªn˚
 *
ã°Suôes
[], c⁄° *
u£rRunSìd
, 
Uöt64
 
u£rExecKey
, c⁄° *
fûãr
, 
ã°Iãøti⁄s
);

127 #ifde‡
__˝lu•lus


130 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_images.h

36 #i‚de‡
SDL_ã°_images_h_


37 
	#SDL_ã°_images_h_


	)

39 
	~"SDL.h
"

41 
	~"begö_code.h
"

43 #ifde‡
__˝lu•lus


50 
	sSDLTe°_SurÁ˚Image_s
 {

51 
width
;

52 
height
;

53 
byãs_≥r_pixñ
;

54 c⁄° *
pixñ_d©a
;

55 } 
	tSDLTe°_SurÁ˚Image_t
;

58 
SDL_SurÁ˚
 *
SDLTe°_ImageBlô
();

59 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôCﬁ‹
();

60 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôAÕha
();

61 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôBÀndAdd
();

62 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôBÀnd
();

63 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôBÀndMod
();

64 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôBÀndN⁄e
();

65 
SDL_SurÁ˚
 *
SDLTe°_ImageBlôBÀndAŒ
();

66 
SDL_SurÁ˚
 *
SDLTe°_ImageFa˚
();

67 
SDL_SurÁ˚
 *
SDLTe°_ImagePrimôives
();

68 
SDL_SurÁ˚
 *
SDLTe°_ImagePrimôivesBÀnd
();

71 #ifde‡
__˝lu•lus


74 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_log.h

36 #i‚de‡
SDL_ã°_log_h_


37 
	#SDL_ã°_log_h_


	)

39 
	~"begö_code.h
"

41 #ifde‡
__˝lu•lus


50 
SDLTe°_Log
(
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(1);

57 
SDLTe°_LogEº‹
(
SDL_PRINTF_FORMAT_STRING
 c⁄° *
fmt
, ...Ë
SDL_PRINTF_VARARG_FUNC
(1);

60 #ifde‡
__˝lu•lus


63 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_md5.h

56 #i‚de‡
SDL_ã°_md5_h_


57 
	#SDL_ã°_md5_h_


	)

59 
	~"begö_code.h
"

61 #ifde‡
__˝lu•lus


68 
	tMD5UINT4
;

72 
MD5UINT4
 
i
[2];

73 
MD5UINT4
 
buf
[4];

74 
ö
[64];

75 
dige°
[16];

76 } 
	tSDLTe°_Md5C⁄ãxt
;

89 
SDLTe°_Md5Inô
(
SDLTe°_Md5C⁄ãxt
 * 
mdC⁄ãxt
);

104 
SDLTe°_Md5Upd©e
(
SDLTe°_Md5C⁄ãxt
 * 
mdC⁄ãxt
, *
öBuf
,

105 
öLí
);

118 
SDLTe°_Md5FöÆ
(
SDLTe°_Md5C⁄ãxt
 * 
mdC⁄ãxt
);

122 #ifde‡
__˝lu•lus


125 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_memory.h

30 #i‚de‡
SDL_ã°_mem‹y_h_


31 
	#SDL_ã°_mem‹y_h_


	)

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


45 
SDLTe°_TøckAŒoˇti⁄s
();

52 
SDLTe°_LogAŒoˇti⁄s
();

56 #ifde‡
__˝lu•lus


59 
	~"˛o£_code.h
"

	@SDL2/include/SDL_test_random.h

40 #i‚de‡
SDL_ã°_øndom_h_


41 
	#SDL_ã°_øndom_h_


	)

43 
	~"begö_code.h
"

45 #ifde‡
__˝lu•lus


54 
	#SDLTe°_R™domI¡
(
c
Ë(()
	`SDLTe°_R™dom
(c))

	)

60 
a
;

61 
x
;

62 
c
;

63 
ah
;

64 
Æ
;

65 } 
	tSDLTe°_R™domC⁄ãxt
;

81 
SDLTe°_R™domInô
(
SDLTe°_R™domC⁄ãxt
 * 
∫dC⁄ãxt
, 
xi
,

82 
ci
);

90 
SDLTe°_R™domInôTime
(
SDLTe°_R™domC⁄ãxt
 *
∫dC⁄ãxt
);

104 
SDLTe°_R™dom
(
SDLTe°_R™domC⁄ãxt
 *
∫dC⁄ãxt
);

108 #ifde‡
__˝lu•lus


111 
	~"˛o£_code.h
"

	@SDL2/include/SDL_thread.h

22 #i‚de‡
SDL_thªad_h_


23 
	#SDL_thªad_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

35 
	~"SDL_©omic.h
"

36 
	~"SDL_muãx.h
"

38 
	~"begö_code.h
"

40 #ifde‡
__˝lu•lus


45 
SDL_Thªad
;

46 
SDL_Thªad
 
	tSDL_Thªad
;

49 
	tSDL_thªadID
;

52 
	tSDL_TLSID
;

60 
SDL_THREAD_PRIORITY_LOW
,

61 
SDL_THREAD_PRIORITY_NORMAL
,

62 
SDL_THREAD_PRIORITY_HIGH
,

63 
SDL_THREAD_PRIORITY_TIME_CRITICAL


64 } 
	tSDL_ThªadPri‹ôy
;

70 (
SDLCALL
 * 
	tSDL_ThªadFun˘i⁄
Ë(*
	td©a
);

72 #i‡
deföed
(
__WIN32__
)

93 
	#SDL_PASSED_BEGINTHREAD_ENDTHREAD


	)

94 
	~<¥o˚ss.h
>

96 
uöçå_t
 (
	t__cde˛
 * 
	tp‚SDL_CuºítBegöThªad
)

97 (*, , (
	t__°dˇŒ
 *
	tfunc
)(*),

99 (
__cde˛
 * 
	tp‚SDL_CuºítEndThªad
Ë(
	tcode
);

101 #i‚de‡
SDL_begöthªad


102 
	#SDL_begöthªad
 
_begöthªadex


	)

104 #i‚de‡
SDL_ídthªad


105 
	#SDL_ídthªad
 
_ídthªadex


	)

111 
DECLSPEC
 
SDL_Thªad
 *
SDLCALL


112 
SDL_Cª©eThªad
(
SDL_ThªadFun˘i⁄
 
‚
, c⁄° *
«me
, *
d©a
,

113 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
,

114 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

116 
DECLSPEC
 
SDL_Thªad
 *
SDLCALL


117 
SDL_Cª©eThªadWôhSèckSize
((
SDLCALL
 * 
‚
) (*),

118 c⁄° *
«me
, c⁄° 
size_t
 
°acksize
, *
d©a
,

119 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
,

120 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

126 #i‡
deföed
(
SDL_Cª©eThªad
Ë&& 
SDL_DYNAMIC_API


127 #unde‡
SDL_Cª©eThªad


128 
	#SDL_Cª©eThªad
(
‚
, 
«me
, 
d©a
Ë
	`SDL_Cª©eThªad_REAL
(‚,Çame, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

129 #unde‡
SDL_Cª©eThªadWôhSèckSize


130 
	#SDL_Cª©eThªadWôhSèckSize
(
‚
, 
«me
, 
°acksize
, 
d©a
Ë
	`SDL_Cª©eThªadWôhSèckSize_REAL
(‚,Çame, sècksize, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

132 
	#SDL_Cª©eThªad
(
‚
, 
«me
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚,Çame, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

133 
	#SDL_Cª©eThªadWôhSèckSize
(
‚
, 
«me
, 
°acksize
, 
d©a
Ë
	`SDL_Cª©eThªadWôhSèckSize
(‚,Çame, d©a, (
p‚SDL_CuºítBegöThªad
)
_begöthªadex
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

136 #ñi‡
deföed
(
__OS2__
)

141 
	#SDL_PASSED_BEGINTHREAD_ENDTHREAD


	)

143 #i‚de‡
__EMX__


144 
	~<¥o˚ss.h
>

146 
	~<°dlib.h
>

149 (*
	gp‚SDL_CuºítBegöThªad
)((*
	tfunc
)(*), *, , * );

150 (*
	gp‚SDL_CuºítEndThªad
)();

152 #i‚de‡
SDL_begöthªad


153 
	#SDL_begöthªad
 
_begöthªad


	)

155 #i‚de‡
SDL_ídthªad


156 
	#SDL_ídthªad
 
_ídthªad


	)

159 
DECLSPEC
 
SDL_Thªad
 *
SDLCALL


160 
SDL_Cª©eThªad
(
SDL_ThªadFun˘i⁄
 
‚
, c⁄° *
«me
, *
d©a
,

161 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
,

162 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

163 
DECLSPEC
 
SDL_Thªad
 *
SDLCALL


164 
SDL_Cª©eThªadWôhSèckSize
(
SDL_ThªadFun˘i⁄
 
‚
, c⁄° *
«me
, c⁄° 
size_t
 
°acksize
, *
d©a
,

165 
p‚SDL_CuºítBegöThªad
 
p‚BegöThªad
,

166 
p‚SDL_CuºítEndThªad
 
p‚EndThªad
);

168 #i‡
deföed
(
SDL_Cª©eThªad
Ë&& 
SDL_DYNAMIC_API


169 #unde‡
SDL_Cª©eThªad


170 
	#SDL_Cª©eThªad
(
‚
, 
«me
, 
d©a
Ë
	`SDL_Cª©eThªad_REAL
(‚,Çame, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

171 #unde‡
SDL_Cª©eThªadWôhSèckSize


172 
	#SDL_Cª©eThªadWôhSèckSize
(
‚
, 
«me
, 
°acksize
, 
d©a
Ë
	`SDL_Cª©eThªadWôhSèckSize_REAL
(‚,Çame, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

174 
	#SDL_Cª©eThªad
(
‚
, 
«me
, 
d©a
Ë
	`SDL_Cª©eThªad
(‚,Çame, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

175 
	#SDL_Cª©eThªadWôhSèckSize
(
‚
, 
«me
, 
°acksize
, 
d©a
Ë
	`SDL_Cª©eThªadWôhSèckSize
(‚,Çame, sècksize, d©a, (
p‚SDL_CuºítBegöThªad
)
SDL_begöthªad
, (
p‚SDL_CuºítEndThªad
)
SDL_ídthªad
)

	)

186 
DECLSPEC
 
SDL_Thªad
 *
SDLCALL


187 
SDL_Cª©eThªad
(
SDL_ThªadFun˘i⁄
 
‚
, c⁄° *
«me
, *
d©a
);

215 
DECLSPEC
 
SDL_Thªad
 *
SDLCALL


216 
SDL_Cª©eThªadWôhSèckSize
(
SDL_ThªadFun˘i⁄
 
‚
, c⁄° *
«me
, c⁄° 
size_t
 
°acksize
, *
d©a
);

227 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëThªadName
(
SDL_Thªad
 *
thªad
);

232 
DECLSPEC
 
SDL_thªadID
 
SDLCALL
 
SDL_ThªadID
();

239 
DECLSPEC
 
SDL_thªadID
 
SDLCALL
 
SDL_GëThªadID
(
SDL_Thªad
 * 
thªad
);

244 
DECLSPEC
 
SDLCALL
 
SDL_SëThªadPri‹ôy
(
SDL_ThªadPri‹ôy
 
¥i‹ôy
);

264 
DECLSPEC
 
SDLCALL
 
SDL_WaôThªad
(
SDL_Thªad
 * 
thªad
, *
°©us
);

292 
DECLSPEC
 
SDLCALL
 
SDL_DëachThªad
(
SDL_Thªad
 * 
thªad
);

324 
DECLSPEC
 
SDL_TLSID
 
SDLCALL
 
SDL_TLSCª©e
();

336 
DECLSPEC
 * 
SDLCALL
 
SDL_TLSGë
(
SDL_TLSID
 
id
);

350 
DECLSPEC
 
SDLCALL
 
SDL_TLSSë
(
SDL_TLSID
 
id
, c⁄° *
vÆue
, (SDLCALL *
de°ru˘‹
)(*));

354 #ifde‡
__˝lu•lus


357 
	~"˛o£_code.h
"

	@SDL2/include/SDL_timer.h

22 #i‚de‡
SDL_timî_h_


23 
	#SDL_timî_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

34 
	~"begö_code.h
"

36 #ifde‡
__˝lu•lus


45 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëTicks
();

56 
	#SDL_TICKS_PASSED
(
A
, 
B
Ë((
Söt32
)((BË- (A)Ë<0)

	)

61 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_GëPîf‹m™˚Cou¡î
();

66 
DECLSPEC
 
Uöt64
 
SDLCALL
 
SDL_GëPîf‹m™˚Fªquícy
();

71 
DECLSPEC
 
SDLCALL
 
SDL_Dñay
(
Uöt32
 
ms
);

81 
Uöt32
 (
	tSDLCALL
 * 
	tSDL_TimîCÆlback
Ë(
	tUöt32
 
	töãrvÆ
, *
	t∑øm
);

86 
	tSDL_TimîID
;

93 
DECLSPEC
 
SDL_TimîID
 
SDLCALL
 
SDL_AddTimî
(
Uöt32
 
öãrvÆ
,

94 
SDL_TimîCÆlback
 
ˇŒback
,

95 *
∑øm
);

104 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_RemoveTimî
(
SDL_TimîID
 
id
);

108 #ifde‡
__˝lu•lus


111 
	~"˛o£_code.h
"

	@SDL2/include/SDL_touch.h

28 #i‚de‡
SDL_touch_h_


29 
	#SDL_touch_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_îr‹.h
"

33 
	~"SDL_video.h
"

35 
	~"begö_code.h
"

37 #ifde‡
__˝lu•lus


41 
Söt64
 
	tSDL_TouchID
;

42 
Söt64
 
	tSDL_FögîID
;

46 
SDL_TOUCH_DEVICE_INVALID
 = -1,

47 
SDL_TOUCH_DEVICE_DIRECT
,

48 
SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE
,

49 
SDL_TOUCH_DEVICE_INDIRECT_RELATIVE


50 } 
	tSDL_TouchDevi˚Ty≥
;

52 
	sSDL_Fögî


54 
SDL_FögîID
 
id
;

55 
x
;

56 
y
;

57 
¥essuª
;

58 } 
	tSDL_Fögî
;

61 
	#SDL_TOUCH_MOUSEID
 ((
Uöt32
)-1)

	)

64 
	#SDL_MOUSE_TOUCHID
 ((
Söt64
)-1)

	)

72 
DECLSPEC
 
SDLCALL
 
SDL_GëNumTouchDevi˚s
();

77 
DECLSPEC
 
SDL_TouchID
 
SDLCALL
 
SDL_GëTouchDevi˚
(
ödex
);

82 
DECLSPEC
 
SDL_TouchDevi˚Ty≥
 
SDLCALL
 
SDL_GëTouchDevi˚Ty≥
(
SDL_TouchID
 
touchID
);

87 
DECLSPEC
 
SDLCALL
 
SDL_GëNumTouchFögîs
(
SDL_TouchID
 
touchID
);

92 
DECLSPEC
 
SDL_Fögî
 * 
SDLCALL
 
SDL_GëTouchFögî
(
SDL_TouchID
 
touchID
, 
ödex
);

95 #ifde‡
__˝lu•lus


98 
	~"˛o£_code.h
"

	@SDL2/include/SDL_types.h

29 
	~"SDL_°döc.h
"

	@SDL2/include/SDL_version.h

28 #i‚de‡
SDL_vîsi⁄_h_


29 
	#SDL_vîsi⁄_h_


	)

31 
	~"SDL_°döc.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


51 
	sSDL_vîsi⁄


53 
Uöt8
 
maj‹
;

54 
Uöt8
 
mö‹
;

55 
Uöt8
 
∑tch
;

56 } 
	tSDL_vîsi⁄
;

60 
	#SDL_MAJOR_VERSION
 2

	)

61 
	#SDL_MINOR_VERSION
 0

	)

62 
	#SDL_PATCHLEVEL
 12

	)

79 
	#SDL_VERSION
(
x
) \

81 (
x
)->
maj‹
 = 
SDL_MAJOR_VERSION
; \

82 (
x
)->
mö‹
 = 
SDL_MINOR_VERSION
; \

83 (
x
)->
∑tch
 = 
SDL_PATCHLEVEL
; \

84 }

	)

94 
	#SDL_VERSIONNUM
(
X
, 
Y
, 
Z
) \

95 ((
X
)*1000 + (
Y
)*100 + (
Z
))

	)

100 
	#SDL_COMPILEDVERSION
 \

101 
	`SDL_VERSIONNUM
(
SDL_MAJOR_VERSION
, 
SDL_MINOR_VERSION
, 
SDL_PATCHLEVEL
)

	)

106 
	#SDL_VERSION_ATLEAST
(
X
, 
Y
, 
Z
) \

107 (
SDL_COMPILEDVERSION
 >
	`SDL_VERSIONNUM
(
X
, 
Y
, 
Z
))

	)

133 
DECLSPEC
 
SDLCALL
 
SDL_GëVîsi⁄
(
SDL_vîsi⁄
 * 
vî
);

142 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëRevisi⁄
();

151 
DECLSPEC
 
SDLCALL
 
SDL_GëRevisi⁄Numbî
();

155 #ifde‡
__˝lu•lus


158 
	~"˛o£_code.h
"

	@SDL2/include/SDL_video.h

28 #i‚de‡
SDL_video_h_


29 
	#SDL_video_h_


	)

31 
	~"SDL_°döc.h
"

32 
	~"SDL_pixñs.h
"

33 
	~"SDL_ª˘.h
"

34 
	~"SDL_surÁ˚.h
"

36 
	~"begö_code.h
"

38 #ifde‡
__˝lu•lus


55 
Uöt32
 
f‹m©
;

56 
w
;

57 
h
;

58 
ª‰esh_øã
;

59 *
drivîd©a
;

60 } 
	tSDL_Di•œyMode
;

90 
SDL_Wödow
 
	tSDL_Wödow
;

99 
SDL_WINDOW_FULLSCREEN
 = 0x00000001,

100 
SDL_WINDOW_OPENGL
 = 0x00000002,

101 
SDL_WINDOW_SHOWN
 = 0x00000004,

102 
SDL_WINDOW_HIDDEN
 = 0x00000008,

103 
SDL_WINDOW_BORDERLESS
 = 0x00000010,

104 
SDL_WINDOW_RESIZABLE
 = 0x00000020,

105 
SDL_WINDOW_MINIMIZED
 = 0x00000040,

106 
SDL_WINDOW_MAXIMIZED
 = 0x00000080,

107 
SDL_WINDOW_INPUT_GRABBED
 = 0x00000100,

108 
SDL_WINDOW_INPUT_FOCUS
 = 0x00000200,

109 
SDL_WINDOW_MOUSE_FOCUS
 = 0x00000400,

110 
SDL_WINDOW_FULLSCREEN_DESKTOP
 = ( 
SDL_WINDOW_FULLSCREEN
 | 0x00001000 ),

111 
SDL_WINDOW_FOREIGN
 = 0x00000800,

112 
SDL_WINDOW_ALLOW_HIGHDPI
 = 0x00002000,

115 
SDL_WINDOW_MOUSE_CAPTURE
 = 0x00004000,

116 
SDL_WINDOW_ALWAYS_ON_TOP
 = 0x00008000,

117 
SDL_WINDOW_SKIP_TASKBAR
 = 0x00010000,

118 
SDL_WINDOW_UTILITY
 = 0x00020000,

119 
SDL_WINDOW_TOOLTIP
 = 0x00040000,

120 
SDL_WINDOW_POPUP_MENU
 = 0x00080000,

121 
SDL_WINDOW_VULKAN
 = 0x10000000

122 } 
	tSDL_WödowFœgs
;

127 
	#SDL_WINDOWPOS_UNDEFINED_MASK
 0x1FFF0000u

	)

128 
	#SDL_WINDOWPOS_UNDEFINED_DISPLAY
(
X
Ë(
SDL_WINDOWPOS_UNDEFINED_MASK
|(X))

	)

129 
	#SDL_WINDOWPOS_UNDEFINED
 
	`SDL_WINDOWPOS_UNDEFINED_DISPLAY
(0)

	)

130 
	#SDL_WINDOWPOS_ISUNDEFINED
(
X
) \

131 (((
X
)&0xFFFF0000Ë=
SDL_WINDOWPOS_UNDEFINED_MASK
)

	)

136 
	#SDL_WINDOWPOS_CENTERED_MASK
 0x2FFF0000u

	)

137 
	#SDL_WINDOWPOS_CENTERED_DISPLAY
(
X
Ë(
SDL_WINDOWPOS_CENTERED_MASK
|(X))

	)

138 
	#SDL_WINDOWPOS_CENTERED
 
	`SDL_WINDOWPOS_CENTERED_DISPLAY
(0)

	)

139 
	#SDL_WINDOWPOS_ISCENTERED
(
X
) \

140 (((
X
)&0xFFFF0000Ë=
SDL_WINDOWPOS_CENTERED_MASK
)

	)

147 
SDL_WINDOWEVENT_NONE
,

148 
SDL_WINDOWEVENT_SHOWN
,

149 
SDL_WINDOWEVENT_HIDDEN
,

150 
SDL_WINDOWEVENT_EXPOSED
,

152 
SDL_WINDOWEVENT_MOVED
,

154 
SDL_WINDOWEVENT_RESIZED
,

155 
SDL_WINDOWEVENT_SIZE_CHANGED
,

158 
SDL_WINDOWEVENT_MINIMIZED
,

159 
SDL_WINDOWEVENT_MAXIMIZED
,

160 
SDL_WINDOWEVENT_RESTORED
,

162 
SDL_WINDOWEVENT_ENTER
,

163 
SDL_WINDOWEVENT_LEAVE
,

164 
SDL_WINDOWEVENT_FOCUS_GAINED
,

165 
SDL_WINDOWEVENT_FOCUS_LOST
,

166 
SDL_WINDOWEVENT_CLOSE
,

167 
SDL_WINDOWEVENT_TAKE_FOCUS
,

168 
SDL_WINDOWEVENT_HIT_TEST


169 } 
	tSDL_WödowEvítID
;

176 
SDL_DISPLAYEVENT_NONE
,

177 
SDL_DISPLAYEVENT_ORIENTATION


178 } 
	tSDL_Di•œyEvítID
;

182 
SDL_ORIENTATION_UNKNOWN
,

183 
SDL_ORIENTATION_LANDSCAPE
,

184 
SDL_ORIENTATION_LANDSCAPE_FLIPPED
,

185 
SDL_ORIENTATION_PORTRAIT
,

186 
SDL_ORIENTATION_PORTRAIT_FLIPPED


187 } 
	tSDL_Di•œyOrõ¡©i⁄
;

192 *
	tSDL_GLC⁄ãxt
;

199 
SDL_GL_RED_SIZE
,

200 
SDL_GL_GREEN_SIZE
,

201 
SDL_GL_BLUE_SIZE
,

202 
SDL_GL_ALPHA_SIZE
,

203 
SDL_GL_BUFFER_SIZE
,

204 
SDL_GL_DOUBLEBUFFER
,

205 
SDL_GL_DEPTH_SIZE
,

206 
SDL_GL_STENCIL_SIZE
,

207 
SDL_GL_ACCUM_RED_SIZE
,

208 
SDL_GL_ACCUM_GREEN_SIZE
,

209 
SDL_GL_ACCUM_BLUE_SIZE
,

210 
SDL_GL_ACCUM_ALPHA_SIZE
,

211 
SDL_GL_STEREO
,

212 
SDL_GL_MULTISAMPLEBUFFERS
,

213 
SDL_GL_MULTISAMPLESAMPLES
,

214 
SDL_GL_ACCELERATED_VISUAL
,

215 
SDL_GL_RETAINED_BACKING
,

216 
SDL_GL_CONTEXT_MAJOR_VERSION
,

217 
SDL_GL_CONTEXT_MINOR_VERSION
,

218 
SDL_GL_CONTEXT_EGL
,

219 
SDL_GL_CONTEXT_FLAGS
,

220 
SDL_GL_CONTEXT_PROFILE_MASK
,

221 
SDL_GL_SHARE_WITH_CURRENT_CONTEXT
,

222 
SDL_GL_FRAMEBUFFER_SRGB_CAPABLE
,

223 
SDL_GL_CONTEXT_RELEASE_BEHAVIOR
,

224 
SDL_GL_CONTEXT_RESET_NOTIFICATION
,

225 
SDL_GL_CONTEXT_NO_ERROR


226 } 
	tSDL_GL©å
;

230 
SDL_GL_CONTEXT_PROFILE_CORE
 = 0x0001,

231 
SDL_GL_CONTEXT_PROFILE_COMPATIBILITY
 = 0x0002,

232 
SDL_GL_CONTEXT_PROFILE_ES
 = 0x0004

233 } 
	tSDL_GL¥ofûe
;

237 
SDL_GL_CONTEXT_DEBUG_FLAG
 = 0x0001,

238 
SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG
 = 0x0002,

239 
SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG
 = 0x0004,

240 
SDL_GL_CONTEXT_RESET_ISOLATION_FLAG
 = 0x0008

241 } 
	tSDL_GLc⁄ãxtFœg
;

245 
SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE
 = 0x0000,

246 
SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 = 0x0001

247 } 
	tSDL_GLc⁄ãxtRñó£Fœg
;

251 
SDL_GL_CONTEXT_RESET_NO_NOTIFICATION
 = 0x0000,

252 
SDL_GL_CONTEXT_RESET_LOSE_CONTEXT
 = 0x0001

253 } 
	tSDL_GLC⁄ãxtRe£tNŸifiˇti⁄
;

262 
DECLSPEC
 
SDLCALL
 
SDL_GëNumVideoDrivîs
();

272 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëVideoDrivî
(
ödex
);

288 
DECLSPEC
 
SDLCALL
 
SDL_VideoInô
(c⁄° *
drivî_«me
);

297 
DECLSPEC
 
SDLCALL
 
SDL_VideoQuô
();

308 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëCuºítVideoDrivî
();

315 
DECLSPEC
 
SDLCALL
 
SDL_GëNumVideoDi•œys
();

324 
DECLSPEC
 c⁄° * 
SDLCALL
 
SDL_GëDi•œyName
(
di•œyIndex
);

334 
DECLSPEC
 
SDLCALL
 
SDL_GëDi•œyBounds
(
di•œyIndex
, 
SDL_Re˘
 * 
ª˘
);

353 
DECLSPEC
 
SDLCALL
 
SDL_GëDi•œyUßbÀBounds
(
di•œyIndex
, 
SDL_Re˘
 * 
ª˘
);

365 
DECLSPEC
 
SDLCALL
 
SDL_GëDi•œyDPI
(
di•œyIndex
, * 
ddpi
, * 
hdpi
, * 
vdpi
);

374 
DECLSPEC
 
SDL_Di•œyOrõ¡©i⁄
 
SDLCALL
 
SDL_GëDi•œyOrõ¡©i⁄
(
di•œyIndex
);

381 
DECLSPEC
 
SDLCALL
 
SDL_GëNumDi•œyModes
(
di•œyIndex
);

394 
DECLSPEC
 
SDLCALL
 
SDL_GëDi•œyMode
(
di•œyIndex
, 
modeIndex
,

395 
SDL_Di•œyMode
 * 
mode
);

400 
DECLSPEC
 
SDLCALL
 
SDL_GëDeskt›Di•œyMode
(
di•œyIndex
, 
SDL_Di•œyMode
 * 
mode
);

405 
DECLSPEC
 
SDLCALL
 
SDL_GëCuºítDi•œyMode
(
di•œyIndex
, 
SDL_Di•œyMode
 * 
mode
);

429 
DECLSPEC
 
SDL_Di•œyMode
 * 
SDLCALL
 
SDL_GëClo£°Di•œyMode
(
di•œyIndex
, c⁄° SDL_Di•œyModê* 
mode
, SDL_Di•œyModê* 
˛o£°
);

437 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowDi•œyIndex
(
SDL_Wödow
 * 
wödow
);

453 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowDi•œyMode
(
SDL_Wödow
 * 
wödow
,

454 c⁄° 
SDL_Di•œyMode


455 * 
mode
);

464 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowDi•œyMode
(
SDL_Wödow
 * 
wödow
,

465 
SDL_Di•œyMode
 * 
mode
);

470 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëWödowPixñF‹m©
(
SDL_Wödow
 * 
wödow
);

514 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_Cª©eWödow
(c⁄° *
tôÀ
,

515 
x
, 
y
, 
w
,

516 
h
, 
Uöt32
 
Êags
);

527 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_Cª©eWödowFrom
(c⁄° *
d©a
);

532 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëWödowID
(
SDL_Wödow
 * 
wödow
);

537 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_GëWödowFromID
(
Uöt32
 
id
);

542 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_GëWödowFœgs
(
SDL_Wödow
 * 
wödow
);

549 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowTôÀ
(
SDL_Wödow
 * 
wödow
,

550 c⁄° *
tôÀ
);

557 
DECLSPEC
 c⁄° *
SDLCALL
 
SDL_GëWödowTôÀ
(
SDL_Wödow
 * 
wödow
);

565 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowIc⁄
(
SDL_Wödow
 * 
wödow
,

566 
SDL_SurÁ˚
 * 
ic⁄
);

581 
DECLSPEC
 * 
SDLCALL
 
SDL_SëWödowD©a
(
SDL_Wödow
 * 
wödow
,

582 c⁄° *
«me
,

583 *
u£rd©a
);

595 
DECLSPEC
 *
SDLCALL
 
SDL_GëWödowD©a
(
SDL_Wödow
 * 
wödow
,

596 c⁄° *
«me
);

611 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowPosôi⁄
(
SDL_Wödow
 * 
wödow
,

612 
x
, 
y
);

625 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowPosôi⁄
(
SDL_Wödow
 * 
wödow
,

626 *
x
, *
y
);

646 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowSize
(
SDL_Wödow
 * 
wödow
, 
w
,

647 
h
);

665 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowSize
(
SDL_Wödow
 * 
wödow
, *
w
,

666 *
h
);

683 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowB‹dîsSize
(
SDL_Wödow
 * 
wödow
,

684 *
t›
, *
À·
,

685 *
bŸtom
, *
right
);

700 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowMöimumSize
(
SDL_Wödow
 * 
wödow
,

701 
mö_w
, 
mö_h
);

713 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowMöimumSize
(
SDL_Wödow
 * 
wödow
,

714 *
w
, *
h
);

729 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowMaximumSize
(
SDL_Wödow
 * 
wödow
,

730 
max_w
, 
max_h
);

742 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowMaximumSize
(
SDL_Wödow
 * 
wödow
,

743 *
w
, *
h
);

759 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowB‹dîed
(
SDL_Wödow
 * 
wödow
,

760 
SDL_boﬁ
 
b‹dîed
);

776 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowResizabÀ
(
SDL_Wödow
 * 
wödow
,

777 
SDL_boﬁ
 
ªsizabÀ
);

784 
DECLSPEC
 
SDLCALL
 
SDL_ShowWödow
(
SDL_Wödow
 * 
wödow
);

791 
DECLSPEC
 
SDLCALL
 
SDL_HideWödow
(
SDL_Wödow
 * 
wödow
);

796 
DECLSPEC
 
SDLCALL
 
SDL_Rai£Wödow
(
SDL_Wödow
 * 
wödow
);

803 
DECLSPEC
 
SDLCALL
 
SDL_MaximizeWödow
(
SDL_Wödow
 * 
wödow
);

810 
DECLSPEC
 
SDLCALL
 
SDL_MöimizeWödow
(
SDL_Wödow
 * 
wödow
);

818 
DECLSPEC
 
SDLCALL
 
SDL_Re°‹eWödow
(
SDL_Wödow
 * 
wödow
);

828 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowFuŒs¸ìn
(
SDL_Wödow
 * 
wödow
,

829 
Uöt32
 
Êags
);

844 
DECLSPEC
 
SDL_SurÁ˚
 * 
SDLCALL
 
SDL_GëWödowSurÁ˚
(
SDL_Wödow
 * 
wödow
);

854 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eWödowSurÁ˚
(
SDL_Wödow
 * 
wödow
);

864 
DECLSPEC
 
SDLCALL
 
SDL_Upd©eWödowSurÁ˚Re˘s
(
SDL_Wödow
 * 
wödow
,

865 c⁄° 
SDL_Re˘
 * 
ª˘s
,

866 
numª˘s
);

879 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowGøb
(
SDL_Wödow
 * 
wödow
,

880 
SDL_boﬁ
 
gøbbed
);

889 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GëWödowGøb
(
SDL_Wödow
 * 
wödow
);

898 
DECLSPEC
 
SDL_Wödow
 * 
SDLCALL
 
SDL_GëGøbbedWödow
();

908 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowBrighäess
(
SDL_Wödow
 * 
wödow
, 
brighäess
);

917 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowBrighäess
(
SDL_Wödow
 * 
wödow
);

930 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowO∑côy
(
SDL_Wödow
 * 
wödow
, 
›acôy
);

945 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowO∑côy
(
SDL_Wödow
 * 
wödow
, * 
out_›acôy
);

955 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowModÆF‹
(
SDL_Wödow
 * 
modÆ_wödow
, SDL_Wödow * 
∑ª¡_wödow
);

969 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowI≈utFocus
(
SDL_Wödow
 * 
wödow
);

989 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowGammaRamp
(
SDL_Wödow
 * 
wödow
,

990 c⁄° 
Uöt16
 * 
ªd
,

991 c⁄° 
Uöt16
 * 
gªí
,

992 c⁄° 
Uöt16
 * 
blue
);

1009 
DECLSPEC
 
SDLCALL
 
SDL_GëWödowGammaRamp
(
SDL_Wödow
 * 
wödow
,

1010 
Uöt16
 * 
ªd
,

1011 
Uöt16
 * 
gªí
,

1012 
Uöt16
 * 
blue
);

1021 
	gSDL_HITTEST_NORMAL
,

1022 
	gSDL_HITTEST_DRAGGABLE
,

1023 
	gSDL_HITTEST_RESIZE_TOPLEFT
,

1024 
	gSDL_HITTEST_RESIZE_TOP
,

1025 
	gSDL_HITTEST_RESIZE_TOPRIGHT
,

1026 
	gSDL_HITTEST_RESIZE_RIGHT
,

1027 
	gSDL_HITTEST_RESIZE_BOTTOMRIGHT
,

1028 
	gSDL_HITTEST_RESIZE_BOTTOM
,

1029 
	gSDL_HITTEST_RESIZE_BOTTOMLEFT
,

1030 
	gSDL_HITTEST_RESIZE_LEFT


1031 } 
	tSDL_HôTe°Resu…
;

1038 
SDL_HôTe°Resu…
 (
	tSDLCALL
 *
	tSDL_HôTe°
)(
	tSDL_Wödow
 *
	twö
,

1039 c⁄° 
	tSDL_Poöt
 *
	t¨ó
,

1040 *
	td©a
);

1079 
DECLSPEC
 
SDLCALL
 
SDL_SëWödowHôTe°
(
SDL_Wödow
 * 
wödow
,

1080 
SDL_HôTe°
 
ˇŒback
,

1081 *
ˇŒback_d©a
);

1086 
DECLSPEC
 
SDLCALL
 
SDL_De°royWödow
(
SDL_Wödow
 * 
wödow
);

1095 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_IsS¸ìnSavîE«bÀd
();

1103 
DECLSPEC
 
SDLCALL
 
SDL_E«bÀS¸ìnSavî
();

1111 
DECLSPEC
 
SDLCALL
 
SDL_DißbÀS¸ìnSavî
();

1137 
DECLSPEC
 
SDLCALL
 
SDL_GL_LﬂdLibøry
(c⁄° *
∑th
);

1142 
DECLSPEC
 *
SDLCALL
 
SDL_GL_GëProcAddªss
(c⁄° *
¥oc
);

1149 
DECLSPEC
 
SDLCALL
 
SDL_GL_U∆ﬂdLibøry
();

1155 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
SDL_GL_Exãnsi⁄Suµ‹ãd
(const 

1156 *
exãnsi⁄
);

1161 
DECLSPEC
 
SDLCALL
 
SDL_GL_Re£tAâribuãs
();

1168 
DECLSPEC
 
SDLCALL
 
SDL_GL_SëAâribuã
(
SDL_GL©å
 
©å
, 
vÆue
);

1176 
DECLSPEC
 
SDLCALL
 
SDL_GL_GëAâribuã
(
SDL_GL©å
 
©å
, *
vÆue
);

1184 
DECLSPEC
 
SDL_GLC⁄ãxt
 
SDLCALL
 
SDL_GL_Cª©eC⁄ãxt
(
SDL_Wödow
 *

1185 
wödow
);

1192 
DECLSPEC
 
SDLCALL
 
SDL_GL_MakeCuºít
(
SDL_Wödow
 * 
wödow
,

1193 
SDL_GLC⁄ãxt
 
c⁄ãxt
);

1198 
DECLSPEC
 
SDL_Wödow
* 
SDLCALL
 
SDL_GL_GëCuºítWödow
();

1203 
DECLSPEC
 
SDL_GLC⁄ãxt
 
SDLCALL
 
SDL_GL_GëCuºítC⁄ãxt
();

1221 
DECLSPEC
 
SDLCALL
 
SDL_GL_GëDøwabÀSize
(
SDL_Wödow
 * 
wödow
, *
w
,

1222 *
h
);

1236 
DECLSPEC
 
SDLCALL
 
SDL_GL_SëSw≠I¡îvÆ
(
öãrvÆ
);

1249 
DECLSPEC
 
SDLCALL
 
SDL_GL_GëSw≠I¡îvÆ
();

1255 
DECLSPEC
 
SDLCALL
 
SDL_GL_Sw≠Wödow
(
SDL_Wödow
 * 
wödow
);

1262 
DECLSPEC
 
SDLCALL
 
SDL_GL_DñëeC⁄ãxt
(
SDL_GLC⁄ãxt
 
c⁄ãxt
);

1268 #ifde‡
__˝lu•lus


1271 
	~"˛o£_code.h
"

	@SDL2/include/SDL_vulkan.h

28 #i‚de‡
SDL_vulk™_h_


29 
	#SDL_vulk™_h_


	)

31 
	~"SDL_video.h
"

33 
	~"begö_code.h
"

35 #ifde‡
__˝lu•lus


40 #ifde‡
VULKAN_H_


41 
	#NO_SDL_VULKAN_TYPEDEFS


	)

43 #i‚de‡
NO_SDL_VULKAN_TYPEDEFS


44 
	#VK_DEFINE_HANDLE
(
obje˘
Ëobje˘##
	t_T
* 
	tobje˘
;

	)

46 #i‡
deföed
(
__LP64__
Ë|| deföed(
_WIN64
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_X64
Ë|| deföed(
__ü64
Ë|| deföed (
_M_IA64
Ë|| deföed(
__Ørch64__
Ë|| deföed(
__powîpc64__
)

47 
	#VK_DEFINE_NON_DISPATCHABLE_HANDLE
(
obje˘
Ëobje˘##
	t_T
 *
	tobje˘
;

	)

49 
	#VK_DEFINE_NON_DISPATCHABLE_HANDLE
(
obje˘
Ë
uöt64_t
 
	tobje˘
;

	)

52 
	$VK_DEFINE_HANDLE
(
VkIn°™˚
)

53 
	$VK_DEFINE_NON_DISPATCHABLE_HANDLE
(
VkSurÁ˚KHR
)

57 
VkIn°™˚
 
	tSDL_vulk™In°™˚
;

58 
VkSurÁ˚KHR
 
	tSDL_vulk™SurÁ˚
;

116 
DECLSPEC
 
SDLCALL
 
	`SDL_Vulk™_LﬂdLibøry
(c⁄° *
∑th
);

124 
DECLSPEC
 *
SDLCALL
 
	`SDL_Vulk™_GëVkGëIn°™˚ProcAddr
();

132 
DECLSPEC
 
SDLCALL
 
	`SDL_Vulk™_U∆ﬂdLibøry
();

207 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_Vulk™_GëIn°™˚Exãnsi⁄s
(

208 
SDL_Wödow
 *
wödow
,

209 *
pCou¡
,

210 c⁄° **
pNames
);

241 
DECLSPEC
 
SDL_boﬁ
 
SDLCALL
 
	`SDL_Vulk™_Cª©eSurÁ˚
(

242 
SDL_Wödow
 *
wödow
,

243 
VkIn°™˚
 
ö°™˚
,

244 
VkSurÁ˚KHR
* 
surÁ˚
);

267 
DECLSPEC
 
SDLCALL
 
	`SDL_Vulk™_GëDøwabÀSize
(
SDL_Wödow
 * 
wödow
,

268 *
w
, *
h
);

273 #ifde‡
__˝lu•lus


274 
	}
}

276 
	~"˛o£_code.h
"

	@SDL2/include/begin_code.h

31 #ifde‡
_begö_code_h


32 #îr‹ 
Ne°ed
 
ö˛usi⁄
 
of
 
begö_code
.
h


34 
	#_begö_code_h


	)

36 #i‚de‡
SDL_DEPRECATED


37 #i‡(
__GNUC__
 >= 4)

38 
	#SDL_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

40 
	#SDL_DEPRECATED


	)

44 #i‚de‡
SDL_UNUSED


45 #ifde‡
__GNUC__


46 
	#SDL_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

48 
	#SDL_UNUSED


	)

53 #i‚de‡
DECLSPEC


54 #i‡
deföed
(
__WIN32__
Ë|| deföed(
__WINRT__
)

55 #ifde‡
__BORLANDC__


56 #ifde‡
BUILD_SDL


57 
	#DECLSPEC


	)

59 
	#DECLSPEC
 
	`__de˛•ec
(
dŒimp‹t
)

	)

62 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

64 #ñi‡
deföed
(
__OS2__
)

65 #ifde‡
BUILD_SDL


66 
	#DECLSPEC
 
	`__de˛•ec
(
dŒexp‹t
)

	)

68 
	#DECLSPEC


	)

71 #i‡
deföed
(
__GNUC__
) && __GNUC__ >= 4

72 
	#DECLSPEC
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

74 
	#DECLSPEC


	)

80 #i‚de‡
SDLCALL


81 #i‡(
deföed
(
__WIN32__
Ë|| deföed(
__WINRT__
)Ë&& !deföed(
__GNUC__
)

82 
	#SDLCALL
 
__cde˛


	)

83 #ñi‡
deföed
(
__OS2__
Ë|| deföed(
__EMX__
)

84 
	#SDLCALL
 
_Sy°em


	)

85 #i‡
deföed
 (
__GNUC__
Ë&& !deföed(
_Sy°em
)

86 
	#_Sy°em


	)

89 
	#SDLCALL


	)

94 #ifde‡
__SYMBIAN32__


95 #unde‡
DECLSPEC


96 
	#DECLSPEC


	)

104 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__BORLANDC__
)

105 #ifde‡
_MSC_VER


106 #¥agm®
w¨nög
(
dißbÀ
: 4103)

108 #ifde‡
__˛™g__


109 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpragma-pack"

111 #ifde‡
__BORLANDC__


112 #¥agm®
n›ackw¨nög


114 #ifde‡
_M_X64


116 #¥agm®
∑ck
(
push
,8)

118 #¥agm®
∑ck
(
push
,4)

122 #i‚de‡
SDL_INLINE


123 #i‡
deföed
(
__GNUC__
)

124 
	#SDL_INLINE
 
__ölöe__


	)

125 #ñi‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
) || \

126 
deföed
(
__DMC__
Ë|| deföed(
__SC__
) || \

127 
deföed
(
__WATCOMC__
Ë|| deföed(
__LCC__
) || \

128 
deföed
(
__DECC
Ë|| 
	$deföed
(
__CC_ARM
)

129 
	#SDL_INLINE
 
__ölöe


	)

130 #i‚de‡
__ölöe__


131 
	#__ölöe__
 
__ölöe


	)

134 
	#SDL_INLINE
 
ölöe


	)

135 #i‚de‡
__ölöe__


136 
	#__ölöe__
 
ölöe


	)

141 #i‚de‡
SDL_FORCE_INLINE


142 #i‡
	`deföed
(
_MSC_VER
)

143 
	#SDL_FORCE_INLINE
 
__f‹˚ölöe


	)

144 #ñi‡–(
	`deföed
(
__GNUC__
Ë&& (__GNUC__ >4)Ë|| deföed(
__˛™g__
) )

145 
	#SDL_FORCE_INLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
__ölöe__


	)

147 
	#SDL_FORCE_INLINE
 
SDL_INLINE


	)

151 #i‚de‡
SDL_NORETURN


152 #i‡
	`deföed
(
__GNUC__
)

153 
	#SDL_NORETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

154 #ñi‡
	`deföed
(
_MSC_VER
)

155 
	#SDL_NORETURN
 
	`__de˛•ec
(
n‹ëu∫
)

	)

157 
	#SDL_NORETURN


	)

162 #i‡!
	`deföed
(
__MACH__
)

163 #i‚de‡
NULL


164 #ifde‡
__˝lu•lus


165 
	#NULL
 0

	)

167 
	#NULL
 ((*)0)

	)

	@SDL2/include/close_code.h

29 #i‚de‡
_begö_code_h


30 #îr‹ 
˛o£_code
.
h
 
ö˛uded
 
wôhout
 
m©chög
 
begö_code
.h

32 #unde‡
_begö_code_h


35 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MWERKS__
Ë|| deföed(
__BORLANDC__
)

36 #ifde‡
__BORLANDC__


37 #¥agm®
n›ackw¨nög


39 #¥agm®
∑ck
(
p›
)

	@SaveLoad.cpp

1 
	~"SaveLﬂd.h
"

2 
	~"Mem‹y.h
"

4 #i‚de‡
EMSCRIPTEN


5 
	~"töyfûedülogs.h
"

7 
	~<io°ªam
>

8 
	~"C⁄°™ts.h
"

9 
	g°d
::
°rög
 
	$lﬂd_puzzÀ_‰om_as£ts
(
°d
::
°rög
 
Àvñ_«me
)

11 
°d
::
cout
 << "Àvñ fûêwê¨êåyögÅÿ›í:" << 
Àvñ_«me
 << std::
ídl
;

12 
FILE
* 
lIn
;

13 
lIn
 = 
	`f›í
(
Àvñ_«me
.
	`c_°r
(), "r");

14 i‡(!
lIn
)

16 
°d
::
cout
 << "fun˘i⁄Üﬂd_puzzÀ_‰om_as£t†ha†ÁûedÅÿfödÅhê∑th s≥cifõd. (SaveLﬂd.˝p,Üöê17). Check iàout!" << std::
ídl
;

18 c⁄° 
buf„r_size
 = 50000;

19 
buf„r
[
buf„r_size
];

21 
Êí
 =

22 
buf„r
[0] = '\0';

23 
i
 = 0;

24 
z
 = 0; z < 
buf„r_size
; z++)

26 
buf„r
[
z
] = '\0';

28 !
	`„of
(
lIn
Ë&& 
i
 < 
buf„r_size
)

30 
c
 = ()
	`fgëc
(
lIn
);

31 
buf„r
[
i
] = 
c
;

32 
i
++;

34 i‡(
i
 >
buf„r_size
)

36 
	`¸ash_îr
("ourÜevel filesáre finallyÅo big for our buffer in saveloadÜoad function. Go in, implement it using memory_alloc instead ofÅhe current hacky way.");

38 if(
i
 > 0)

39 
buf„r
[
i
 - 1] = '\0';

40 
	`f˛o£
(
lIn
);

41  
°d
::
	`°rög
(
buf„r
);

42 
	}
}

43 #ifde‡
EMSCRIPTEN


44 
	$ßve_puzzÀ_fûe
(
°d
::
°rög
 
to_ßve
)

47 
	}
}

49 
	$ßve_puzzÀ_fûe
(
°d
::
°rög
 
to_ßve
)

51 c⁄°* 
lTheSaveFûeName
;

52 c⁄°* 
lWûlBeGøphicMode
;

53 
FILE
* 
lIn
;

54 
lBuf„r
[1024];

55 c⁄°* 
lFûãrP©ã∫s
[2] = { "*.puzzle", "*.puz" };

57 
lWûlBeGøphicMode
 = 
	`töyfd_öputBox
("töyfd_quîy", 
NULL
, NULL);

59 i‡(
lWûlBeGøphicMode
)

61 
	`°r˝y
(
lBuf„r
, "graphic mode: ");

65 
	`°r˝y
(
lBuf„r
, "console mode: ");

70 
	`°rˇt
(
lBuf„r
, 
töyfd_ª•⁄£
);

73 
lTheSaveFûeName
 = 
	`töyfd_ßveFûeDülog
(

77 
lFûãrP©ã∫s
,

78 
NULL
);

80 i‡(!
lTheSaveFûeName
)

82 
	`töyfd_mesßgeBox
(

91 
lIn
 = 
	`f›í
(
lTheSaveFûeName
, "w");

92 i‡(!
lIn
)

94 
	`töyfd_mesßgeBox
(

102 
	`Âuts
(
to_ßve
.
	`c_°r
(), 
lIn
);

103 
	`f˛o£
(
lIn
);

105 
	}
}

108 
	$ßve_c⁄töue_fûe
(
°d
::
°rög
 
to_ßve
)

110 
FILE
* 
lIn
;

111 c⁄° * 
ßve_«me
 = ".\\assets\\puzzles\\save1.game";

112 
lIn
 = 
	`f›í
(
ßve_«me
, "w");

113 i‡(!
lIn
)

115 
	`¸ash_îr
("triedÅo save continue file. It failed!");

117 
	`Âuts
(
to_ßve
.
	`c_°r
(), 
lIn
);

118 
	`f˛o£
(
lIn
);

119 
	}
}

121 
	g°d
::
°rög
 
	$gë_c⁄töue_fûe
(
Mem‹y
* 
ãmp_mem‹y
)

123 c⁄° * 
to_lﬂd
 = ".\\assets\\puzzles\\save1.game";

124 
FILE
* 
lIn
 = 
	`f›í
(
to_lﬂd
, "r");

125 i‡(!
lIn
)

127 
°d
::
cout
 << "nÿc⁄töuêfûêtÿlﬂd" << std::
ídl
;

130 
size
 = 0;

131 !
	`„of
(
lIn
))

133 
	`fgëc
(
lIn
);

134 
size
++;

136 
	`f£ek
(
lIn
, 0, 
SEEK_SET
);

138 * 
ªsu…
 = (*Ë
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* (
size
 + 1));

139 
i
 = 0; i < 
size
; i++)

141 
ªsu…
[
i
] = ()
	`fgëc
(
lIn
);

142 i‡(
	`„of
(
lIn
))

144 
ªsu…
[
i
] = 
NULL
;

148 
ªsu…
[
size
] = 
NULL
;

149 
°d
::
cout
 << 
ªsu…
 << std::
ídl
;

150  
°d
::
	`°rög
(
ªsu…
);

151 
	}
}

152 #i‚de‡
EMSCRIPTEN


153 
	g°d
::
°rög
 
	$lﬂd_puzzÀ_fûe
()

155 c⁄°* 
lTheO≥nFûeName
;

156 
FILE
* 
lIn
;

157 c⁄°* 
lFûãrP©ã∫s
[2] = { "*.puzzle", "*.puz" };

159 
lTheO≥nFûeName
 = 
	`töyfd_›íFûeDülog
(

164 
lFûãrP©ã∫s
,

165 
NULL
,

168 i‡(!
lTheO≥nFûeName
)

170 
	`töyfd_mesßgeBox
(

178  
	`lﬂd_puzzÀ_‰om_as£ts
(
lTheO≥nFûeName
);

179 
	}
}

181 
	g°d
::
°rög
 
	$lﬂd_puzzÀ_fûe
()

184 
	}
}

	@SaveLoad.h

1 #¥agm®
⁄˚


2 #¥agm®
w¨nög
(
dißbÀ
:4996)

3 
	~<°rög
>

4 
	~"Mem‹y.h
"

6 
	g°d
::
°rög
 
lﬂd_puzzÀ_‰om_as£ts
(
°d
::°rög 
Àvñ_«me
);

7 
ßve_puzzÀ_fûe
(
°d
::
°rög
 
to_ßve
);

8 
	g°d
::
°rög
 
lﬂd_puzzÀ_fûe
();

9 
ßve_game
(
°d
::
°rög
 
to_ßve
);

10 
ßve_c⁄töue_fûe
(
°d
::
°rög
 
to_ßve
);

11 
	g°d
::
°rög
 
gë_c⁄töue_fûe
(
Mem‹y
* 
ãmp_mem‹y
);

	@Scratch.h

	@Shader.cpp

1 
	~<°rög
>

3 
	~"PªludeIn˛udes.h
"

4 
	~<glm/glm.hµ
>

5 
	~<glm/gtc/ty≥_±r.hµ
>

6 
	~"Resour˚.h
"

7 
	~<io°ªam
>

9 
GLuöt
 
	tShadî
;

11 
boﬁ
 
	$ã°_°rögs_°¨t_equÆs_°rög_öã∫Æ
(
°d
::
°rög
 
°¨t_ã°
, std::string string)

13 i‡(
°¨t_ã°
.
	`Àngth
(Ë> 
°rög
.length())

14  
Ál£
;

15 
i
 = 0; i < 
°¨t_ã°
.
	`Àngth
(); i++)

16 i‡(
°¨t_ã°
[
i
] !
°rög
[i])

17  
Ál£
;

18  
åue
;

19 
	}
}

21 
	g°d
::
°rög
 
	$c⁄vît_c‹e_to_es_öã∫Æ
(
°d
::
°rög
 
öput
)

23 
°d
::
°rög
 
to_dñëe
 = "#version 300 core";

24 
°d
::
°rög
 
to_ª∂a˚
 = "#version 300És";

25 
Àn
 = (Ë
to_dñëe
.
	`Àngth
() + 2;

26 
°d
::
°rög
 
ªsu…
 = 
to_ª∂a˚
 + 
öput
.
	`sub°r
(17,°d::°rög::
≈os
);

27  
ªsu…
;

28 
	}
}

30 
	g°d
::
°rög
 
	$c⁄vît_ch¨_c‹e_to_es_öã∫Æ
(c⁄° * 
öput
)

32 
°d
::
°rög
 
ãmp
 = std::
	`°rög
(
öput
);

33  
	`c⁄vît_c‹e_to_es_öã∫Æ
(
ãmp
);

34 
	}
}

36 
Shadî
 
	$shadî_compûe_lﬂded_¥ogøm
(c⁄° * 
vîãxD©aTemp
, c⁄° * 
‰agmítD©aTemp
, c⁄° * 
geomëryD©a
 = 
nuŒ±r
)

38 
	`¥ötf
("NARROWED BUG DOWN TO THIS SEGMENT OF CODE!");

39 #ifde‡
EMSCRIPTEN


40 
°d
::
°rög
 
vîãxD©a°r
 = 
	`c⁄vît_ch¨_c‹e_to_es_öã∫Æ
(
vîãxD©aTemp
);

41 
°d
::
°rög
 
‰agmítD©a°r
 = 
	`c⁄vît_ch¨_c‹e_to_es_öã∫Æ
(
‰agmítD©aTemp
);

42 c⁄° * 
vîãxD©a
 = 
vîãxD©a°r
.
	`c_°r
();

43 c⁄° * 
‰agmítD©a
 = 
‰agmítD©a°r
.
	`c_°r
();

45 c⁄° * 
vîãxD©a
 = 
vîãxD©aTemp
;

46 c⁄° * 
‰agmítD©a
 = 
‰agmítD©aTemp
;

52 
GLuöt
 
vîãxShadî
 = 
	`glCª©eShadî
(
GL_VERTEX_SHADER
);

53 
°d
::
cout
 << "glShadîSour˚ VERT CREATE" << 
	`glGëEº‹
(Ë<< std::
ídl
;

54 
GLuöt
 
‰agmítShadî
 = 
	`glCª©eShadî
(
GL_FRAGMENT_SHADER
);

55 
°d
::
cout
 << "glShadîSour˚ FRAG CREATE" << 
	`glGëEº‹
(Ë<< std::
ídl
;

58 
	`glShadîSour˚
(
vîãxShadî
, 1, &
vîãxD©a
, 
NULL
);

59 
°d
::
cout
 << "glShadîSour˚ VERT LOAD" << 
	`glGëEº‹
(Ë<< std::
ídl
;

60 
	`glCompûeShadî
(
vîãxShadî
);

61 
°d
::
cout
 << "glShadîSour˚ VERT COMPILE" << 
	`glGëEº‹
(Ë<< std::
ídl
;

63 
GLöt
 
suc˚ss
;

64 
öfoLog
[1024];

66 
	`glGëShadîiv
(
vîãxShadî
, 
GL_COMPILE_STATUS
, &
suc˚ss
);

67 
°d
::
cout
 << "glGëShadîiv VERT" << 
	`glGëEº‹
(Ë<< std::
ídl
;

68 i‡(!
suc˚ss
) {

69 
	`glGëShadîInfoLog
(
vîãxShadî
, 1024, 
NULL
, 
öfoLog
);

70 
°d
::
cout
 << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << 
öfoLog
 << std::
ídl
;

71 
°d
::
cout
 << 
öfoLog
 << std::
ídl
;

72 
	`ab‹t
();

76 
°d
::
cout
 << "suc˚ssfuŒyáâached vîãx shadî" << std::
ídl
;

80 
	`glShadîSour˚
(
‰agmítShadî
, 1, &
‰agmítD©a
, 
NULL
);

81 
°d
::
cout
 << "glShadîSour˚ FRAG LOAD" << 
	`glGëEº‹
(Ë<< std::
ídl
;

82 
	`glCompûeShadî
(
‰agmítShadî
);

83 
°d
::
cout
 << "glShadîSour˚ FRAG COMPILE" << 
	`glGëEº‹
(Ë<< std::
ídl
;

85 
	`glGëShadîiv
(
‰agmítShadî
, 
GL_COMPILE_STATUS
, &
suc˚ss
);

87 i‡(!
suc˚ss
) {

88 
	`glGëShadîInfoLog
(
‰agmítShadî
, 1024, 
NULL
, 
öfoLog
);

89 
°d
::
cout
 << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << 
öfoLog
 << std::
ídl
;

90 
°d
::
cout
 << 
öfoLog
 << std::
ídl
;

91 
	`ab‹t
();

95 
°d
::
cout
 << "suc˚ssfuŒyáâached føgmíàshadî" << std::
ídl
;

98 
Shadî
 
ªsu…
 = 
	`glCª©eProgøm
();

99 
°d
::
cout
 << "glCª©eProgøm: " << 
	`glGëEº‹
(Ë<< std::
ídl
;

100 
	`glAâachShadî
(
ªsu…
, 
vîãxShadî
);

101 
°d
::
cout
 << "glAâachShadî VERT: " << 
	`glGëEº‹
(Ë<< std::
ídl
;

102 
	`glAâachShadî
(
ªsu…
, 
‰agmítShadî
);

103 
°d
::
cout
 << "glAâachShadî FRAG: " << 
	`glGëEº‹
(Ë<< std::
ídl
;

104 
	`glLökProgøm
(
ªsu…
);

105 
°d
::
cout
 << "LINK: " << 
	`glGëEº‹
(Ë<< std::
ídl
;

106 
	`glGëProgømiv
(
ªsu…
, 
GL_LINK_STATUS
, &
suc˚ss
);

107 i‡(!
suc˚ss
) {

108 
	`glGëProgømInfoLog
(
ªsu…
, 1024, 
NULL
, 
öfoLog
);

109 
°d
::
cout
 << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << std::
ídl
;

110 
°d
::
cout
 << 
öfoLog
 << std::
ídl
;

113 
	`glDñëeShadî
(
vîãxShadî
);

114 
	`glDñëeShadî
(
‰agmítShadî
);

115  
ªsu…
;

116 
	}
}

118 
Shadî
 
	$shadî_compûe_¥ogøm
(c⁄° * 
vîãxP©h
, c⁄° * 
‰agmítP©h
, c⁄° * 
geomëryP©h
 = 
nuŒ±r
)

120 
°d
::
°rög
 
vîãxSåög
 = 
	`ªsour˚_lﬂd_ãxt_fûe
(
vîãxP©h
);

121 c⁄° * 
vîãx
 = 
vîãxSåög
.
	`c_°r
();

122 
°d
::
°rög
 
‰agmítSåög
 = 
	`ªsour˚_lﬂd_ãxt_fûe
(
‰agmítP©h
);

123 c⁄° * 
‰ag
 = 
‰agmítSåög
.
	`c_°r
();

124 c⁄° * 
geo
 = 
nuŒ±r
;

125 i‡(
geomëryP©h
 !
nuŒ±r
)

126 
geo
 = 
	`ªsour˚_lﬂd_ãxt_fûe
(
geomëryP©h
).
	`c_°r
();

129  
	`shadî_compûe_lﬂded_¥ogøm
(
vîãx
, 
‰ag
, 
geo
);

131 
	}
}

132 
	$shadî_u£
(
Shadî
 
shadî
)

134 
	`glU£Progøm
(
shadî
);

135 
	}
}

136 
	$shadî_£t_unif‹m_öt
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
vÆue
)

138 
	`glUnif‹m1i
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 
vÆue
);

139 
	}
}

140 
	$shadî_£t_unif‹m_Êﬂt
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
vÆue
)

142 
	`glUnif‹m1f
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 
vÆue
);

143 
	}
}

144 
	$shadî_£t_unif‹m_vec2
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
vec2
 
vÆue
)

146 
	`glUnif‹m2f
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 
vÆue
.
x
, vÆue.
y
);

147 
	}
}

148 
	$shadî_£t_unif‹m_vec3
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
vec3
 
vÆue
)

150 
	`glUnif‹m3f
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 
vÆue
.
x
, vÆue.
y
, vÆue.
z
);

151 
	}
}

152 
	$shadî_£t_unif‹m_vec4
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
vec4
 
vÆue
)

154 
	`glUnif‹m4f
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 
vÆue
.
x
, vÆue.
y
, vÆue.
z
,vÆue.
w
);

155 
	}
}

156 
	$shadî_£t_unif‹m_m©2
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
m©2
 
vÆue
)

158 
	`glUnif‹mM©rix2fv
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 1, 
Ál£
, 
glm
::
	`vÆue_±r
(
vÆue
));

159 
	}
}

160 
	$shadî_£t_unif‹m_m©3
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
m©3
 
vÆue
)

162 
	`glUnif‹mM©rix3fv
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 1, 
Ál£
, 
glm
::
	`vÆue_±r
(
vÆue
));

163 
	}
}

164 
	$shadî_£t_unif‹m_m©4
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
m©4
 
vÆue
)

166 
	`glUnif‹mM©rix4fv
(
	`glGëUnif‹mLoˇti⁄
(
shadî
, 
«me
.
	`c_°r
()), 1, 
Ál£
, 
glm
::
	`vÆue_±r
(
vÆue
));

167 
	}
}

	@Shader.h

1 #¥agm®
⁄˚


2 
	~<glm/glm.hµ
>

4 
	~<°rög
>

5 
	~"PªludeIn˛udes.h
"

6 
	~<glm/glm.hµ
>

7 
	~<glm/gtc/ty≥_±r.hµ
>

9 
GLuöt
 
	tShadî
;

11 
Shadî
 
shadî_compûe_¥ogøm
(c⁄° * 
vîãxP©h
, c⁄° * 
‰agmítP©h
, c⁄° * 
geomëryP©h
 = 
nuŒ±r
);

12 
shadî_u£
(
Shadî
 
shadî
);

14 
shadî_£t_unif‹m_öt
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
vÆue
);

15 
shadî_£t_unif‹m_Êﬂt
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
vÆue
);

16 
shadî_£t_unif‹m_vec2
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
vec2
 
vÆue
);

17 
shadî_£t_unif‹m_vec3
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
vec3
 
vÆue
);

18 
shadî_£t_unif‹m_vec4
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
vec4
 
vÆue
);

19 
shadî_£t_unif‹m_m©2
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
m©2
 
vÆue
);

20 
shadî_£t_unif‹m_m©3
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
m©3
 
vÆue
);

21 
shadî_£t_unif‹m_m©4
(
Shadî
 
shadî
, c⁄° 
°d
::
°rög
& 
«me
, 
glm
::
m©4
 
vÆue
);

	@Side.h

1 #¥agm®
⁄˚


3 
	~"M©h.h
"

6 
I¡Paú
 
	$m©h_side_to_dúe˘i⁄
(
Side
 
s
)

8 i‡(
s
 =
S_RIGHT
)

9  
	`m©h_öçaú_¸óã
(1, 0);

10 i‡(
s
 =
S_DOWN
)

11  
	`m©h_öçaú_¸óã
(0, -1);

12 i‡(
s
 =
S_LEFT
)

13  
	`m©h_öçaú_¸óã
(-1, 0);

14 i‡(
s
 =
S_UP
)

15  
	`m©h_öçaú_¸óã
(0, 1);

16  
	`m©h_öçaú_¸óã
(0, 0);

17 
	}
}

18 
Side
 
	$m©h_dúe˘i⁄_to_side
(
I¡Paú
 
∑ú
)

20 i‡(
∑ú
.
x
 == -1)

21  
S_LEFT
;

22 i‡(
∑ú
.
x
 == 1)

23  
S_RIGHT
;

24 i‡(
∑ú
.
y
 == 1)

25  
S_UP
;

26 i‡(
∑ú
.
y
 == -1)

27  
S_DOWN
;

28 
	}
}

29 
Side
 
	$m©h_side_›posôe
(
Side
 
s
)

32 
i
 = ()
s
;

33 
√xt
 = (
i
 + 2) % 4;

34  (
Side
Ë
√xt
;

35 
	}
}

	@Source.cpp

	@Sprites.cpp

1 
	~"S¥ôes.h
"

2 
	~<glm\ext\m©rix_å™sf‹m.hµ
>

4 
	$•rôes_fuŒ•rôe_to_gpu_d©a
(
FuŒS¥ôeAºay
* 
•rôes
, 
glm
::
vec4
* 
ödex_m≠≥r
, glm::vec4* 
©œs_ouçut
, glm::
m©4
* 
m©rix_ouçut
)

6 
Àngth
 = 
•rôes
->length;

7 
i
 = 0; i < 
Àngth
; i++)

9 
©œs_ouçut
[
i
] = 
ödex_m≠≥r
[
•rôes
->
©œsIndex
[i]];

11 
glm
::
vec3
 
å™¶©e_bef‹e_rŸ©e_°¨t
 = glm::
	`vec3
(-0.5f, -0.5f, 0);

12 
glm
::
vec3
 
å™¶©e_a·î_rŸ©e_íd
 = glm::
	`vec3
(0.5f, 0.5f, 0);

13 
glm
::
vec3
 
rŸ©e_vec3
 = glm::
	`vec3
(0, 0, 1);

14 
i
 = 0; i < 
Àngth
; i++)

17 
m©rix_ouçut
[
i
] = 
glm
::
	`m©4
(1.0f);

20 
glm
::
	`å™¶©e
(
m©rix_ouçut
[
i
], glm::
	`vec3
(
•rôes
->
posôi⁄WôhSˇÀ
[i].
x
,•rôes->posôi⁄WôhSˇÀ[i].
y
,0));

23 
glm
::
	`sˇÀ
(
m©rix_ouçut
[
i
], glm::
	`vec3
(
•rôes
->
posôi⁄WôhSˇÀ
[i].
z
, s¥ôes->posôi⁄WôhSˇÀ[i].
w
, 1));

26 
glm
::
	`å™¶©e
(
m©rix_ouçut
[
i
], 
å™¶©e_bef‹e_rŸ©e_°¨t
);

27 
glm
::
	`rŸ©e
(
m©rix_ouçut
[
i
], 
•rôes
->
rŸ©i⁄
[i], 
rŸ©e_vec3
);

28 
glm
::
	`å™¶©e
(
m©rix_ouçut
[
i
], 
å™¶©e_a·î_rŸ©e_íd
);

30 
	}
}

31 
	$•rôes_box•rôe_to_gpu_d©a
(
BoxS¥ôes
* 
•rôes
, 
glm
::
vec4
* 
ödex_m≠≥r
, glm::vec4* 
©œs_ouçut
, glm::
vec2
* 
posôi⁄_ouçut
)

33 
Àngth
 = 
•rôes
->length;

34 
i
 = 0; i < 
Àngth
; i++)

36 
©œs_ouçut
[
i
] = 
ödex_m≠≥r
[
•rôes
->
©œsIndex
[i]];

38 
i
 = 0; i < 
Àngth
; i++)

40 
posôi⁄_ouçut
[
i
] = 
•rôes
->
posôi⁄
[i];

42 
	}
}

	@Sprites.h

1 #¥agm®
⁄˚


2 
	~<glm/glm.hµ
>

3 
	~"M©h.h
"

4 
	sBoxS¥ôes
 {

5 
	mÀngth
;

6 * 
	m©œsIndex
;

7 
	mglm
::
vec2
* 
posôi⁄
;

10 
	sFuŒS¥ôeAºay


12 
	mÀngth
;

13 * 
	m©œsIndex
;

14 
	mglm
::
vec4
* 
posôi⁄WôhSˇÀ
;

15 * 
	mrŸ©i⁄
;

18 
•rôes_fuŒ•rôe_to_Øbb_™d_gpu_d©a
(
FuŒS¥ôeAºay
* 
•rôes
, 
AABB
* 
Øbb_ouçut
, 
glm
::
vec4
* 
©œs_ouçut
, glm::
m©4
* 
m©rix_ouçut
);

19 
•rôes_box•rôe_to_Øbb_™d_gpu_d©a
(
BoxS¥ôes
* 
•rôes
, 
AABB
* 
Øbb_ouçut
, 
glm
::
vec4
* 
©œs_ouçut
, glm::
m©4
* 
m©rix_ouçut
);

	@TextDraw.cpp

1 
	~"TextDøw.h
"

4 
	$gë_h‹iz⁄èl_•a˚_c⁄sumed_by_ãxt
(
glm
::
vec3
 
°¨t_posôi⁄
, glm::
vec2
 
sˇÀ
, c⁄° * 
c_°rög
, 
TextWrôe
* 
öfo
)

7 
glm
::
vec3
 
√xt_posôi⁄
 = 
°¨t_posôi⁄
;

8 
døw
 = *
öfo
->
cuºít_numbî_døwn
;

9 ; 
c_°rög
[0]; c_string++)

11 
c
 = 
c_°rög
[0];

14 
h‹iz⁄èl_•a˚
 = 
öfo
->
ãxt_posôi⁄s
[
c
].
w
 / 
FONT_CHARACTER_HEIGHT
;

16 
x_°¨t
 = (
√xt_posôi⁄
.
x
 + 
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Bórög
.xË/ (
FONT_CHARACTER_HEIGHT
);

17 
y_°¨t
 = (
√xt_posôi⁄
.
y
 - (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.y - info->åue_f⁄t_ª„ªn˚[c].
Bórög
.y)Ë/ (
FONT_CHARACTER_HEIGHT
);

18 
w
 = (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.
x
Ë/ (
FONT_CHARACTER_HEIGHT
);

19 
h
 = 
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.
y
 / (
FONT_CHARACTER_HEIGHT
);

22 
x_pixñs_ö_game•a˚
 = (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
adv™˚
 >> 6Ë/ (
FONT_CHARACTER_HEIGHT
);

23 
√xt_posôi⁄
.
x
 +(
x_pixñs_ö_game•a˚
 * 
sˇÀ
.x);

26 *
öfo
->
cuºít_numbî_døwn
 = 
døw
;

27  
√xt_posôi⁄
.
x
 - 
°¨t_posôi⁄
.x;

28 
	}
}

30 
LöeBounds
 
	$gë_löebounds_•a˚_c⁄sumed_by_ãxt
(
glm
::
vec3
 
°¨t_posôi⁄
, glm::
vec2
 
sˇÀ
, c⁄° * 
c_°rög
, 
TextWrôe
* 
öfo
)

33 
glm
::
vec3
 
√xt_posôi⁄
 = 
°¨t_posôi⁄
;

34 
LöeBounds
 
ªsu…
;

35 
ªsu…
.
y_bŸ
 = 0;

36 
ªsu…
.
y_t›
 = 0;

37 
ªsu…
.
y_di°
 = 0;

38 
døw
 = *
öfo
->
cuºít_numbî_døwn
;

39 ; 
c_°rög
[0]; c_string++)

41 
c
 = 
c_°rög
[0];

44 
h‹iz⁄èl_•a˚
 = 
öfo
->
ãxt_posôi⁄s
[
c
].
w
 / 
FONT_CHARACTER_HEIGHT
;

46 
x_°¨t
 = (
√xt_posôi⁄
.
x
 + 
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Bórög
.xË/ (
FONT_CHARACTER_HEIGHT
);

47 
y_°¨t
 = (
√xt_posôi⁄
.
y
 - (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.y - info->åue_f⁄t_ª„ªn˚[c].
Bórög
.y)Ë/ (
FONT_CHARACTER_HEIGHT
);

48 
w
 = (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.
x
Ë/ (
FONT_CHARACTER_HEIGHT
);

49 
h
 = 
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.
y
 / (
FONT_CHARACTER_HEIGHT
);

52 
x_pixñs_ö_game•a˚
 = (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
adv™˚
 >> 6Ë/ (
FONT_CHARACTER_HEIGHT
);

53 
√xt_posôi⁄
.
x
 +(
x_pixñs_ö_game•a˚
 * 
sˇÀ
.x);

55 
ªsu…
.
y_bŸ
 = 
	`möf
‘esu….y_bŸ, 
y_°¨t
);

56 
ªsu…
.
y_t›
 = 
	`maxf
‘esu….y_t›, 
y_°¨t
 + 
h
);

57 
ªsu…
.
y_di°
 = 
	`maxf
‘esu….y_di°, 
h
);

59 *
öfo
->
cuºít_numbî_døwn
 = 
døw
;

60 
ªsu…
.
löe_Àngth
 = 
√xt_posôi⁄
.
x
 - 
°¨t_posôi⁄
.x;

61  
ªsu…
;

62 
	}
}

64 
	$døw_ãxt_to_s¸ìn
(
glm
::
vec3
 
°¨t_posôi⁄
, glm::
vec2
 
sˇÀ
, c⁄° * 
c_°rög
, 
TextWrôe
* 
öfo
)

67 
glm
::
vec3
 
√xt_posôi⁄
 = 
°¨t_posôi⁄
;

68 
døw
 = *
öfo
->
cuºít_numbî_døwn
;

69 ; 
c_°rög
[0]; c_string++)

71 
c
 = 
c_°rög
[0];

74 
h‹iz⁄èl_•a˚
 = 
öfo
->
ãxt_posôi⁄s
[
c
].
w
 / 
FONT_CHARACTER_HEIGHT
;

76 
x_°¨t
 = (
√xt_posôi⁄
.
x
 + 
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Bórög
.xË/ (
FONT_CHARACTER_HEIGHT
);

77 
y_°¨t
 = (
√xt_posôi⁄
.
y
 - (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.y - info->åue_f⁄t_ª„ªn˚[c].
Bórög
.yË* 
sˇÀ
.yË/ (
FONT_CHARACTER_HEIGHT
);

78 
w
 = (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.
x
Ë/ (
FONT_CHARACTER_HEIGHT
);

79 
h
 = 
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
Size
.
y
 / (
FONT_CHARACTER_HEIGHT
);

81 i‡(
c
 != ' ')

83 
glm
::
vec3
 
°¨t_posôi⁄
 = glm::
	`vec3
(
√xt_posôi⁄
.
x
 + 
x_°¨t
,Çext_posôi⁄.
y
 + 
y_°¨t
,Çext_posôi⁄.
z
);

84 
öfo
->
°rög_m©rix_˝u
[
døw
] = 
glm
::
	`m©4
(1.0f);

85 
öfo
->
°rög_m©rix_˝u
[
døw
] = 
glm
::
	`å™¶©e
(öfo->°rög_m©rix_˝u[døw], 
°¨t_posôi⁄
);

86 
öfo
->
°rög_m©rix_˝u
[
døw
] = 
glm
::
	`sˇÀ
(öfo->°rög_m©rix_˝u[døw], glm::
	`vec3
(
w
 * 
sˇÀ
.
x
, 
h
 * sˇÀ.
y
, 1));

87 
öfo
->
°rög_cﬁ‹_˝u
[
døw
] = 
glm
::
	`vec4
(0.5, 0.2, 0.3, 1);

89 
AABB
 
box
 = 
öfo
->
ãxt_posôi⁄s_n‹mÆized
[
c
];

90 
glm
::
vec4
 
to_©œs_ouçut
 = glm::
	`vec4
(
box
.
x
, box.
y
, box.x + box.
w
, box.y + box.
h
);

91 
öfo
->
°rög_©œs_˝u
[
døw
] = 
to_©œs_ouçut
;

93 
døw
++;

97 
x_pixñs_ö_game•a˚
 = (
öfo
->
åue_f⁄t_ª„ªn˚
[
c
].
adv™˚
 >> 6Ë/ (
FONT_CHARACTER_HEIGHT
);

98 
√xt_posôi⁄
.
x
 +(
x_pixñs_ö_game•a˚
 * 
sˇÀ
.x);

101 *
öfo
->
cuºít_numbî_døwn
 = 
døw
;

102  
√xt_posôi⁄
.
x
 - 
°¨t_posôi⁄
.x;

103 
	}
}

105 
	$≥r˚¡age_bëwìn
(
°¨t
, 
íd
, 
poöt
)

107  (
poöt
 - 
°¨t
Ë/ (
íd
 - start);

108 
	}
}

110 
	$ÀΩ
(
°¨t
, 
íd
, 
≥r˚¡age
)

112  
≥r˚¡age
 * 
íd
 + (1.0‡-Öî˚¡ageË* 
°¨t
;

113 
	}
}

115 
	$døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
GameS∑˚Camîa
 
ˇmîa
, c⁄° * 
°rög_to_døw
, 
TextWrôe
* 
ãxt_døw_öfo
)

118 
glm
::
vec3
 
s¸ìn_˚¡î
 = glm::
	`vec3
((
ˇmîa
.
À·
 + camîa.
right
Ë/ 2.0f, (ˇmîa.
up
 + camîa.
down
) / 2.0f, 15);

120 
LöeBounds
 
bounds
 = 
	`gë_löebounds_•a˚_c⁄sumed_by_ãxt
(
s¸ìn_˚¡î
, 
glm
::
	`vec2
(1, 1), 
°rög_to_døw
, 
ãxt_døw_öfo
);

121 
ãxt_width
 = 
	`gë_h‹iz⁄èl_•a˚_c⁄sumed_by_ãxt
(
s¸ìn_˚¡î
, 
glm
::
	`vec2
(1, 1), 
°rög_to_døw
, 
ãxt_døw_öfo
);

122 
ãxt_height
 = 
bounds
.
y_t›
 - bounds.
y_bŸ
;

126 
x_di°
 = 
ˇmîa
.
right
 - camîa.
À·
;

127 
y_di°
 = 
ˇmîa
.
up
 - camîa.
down
;

128 
x_sˇÀ
 = 
x_di°
 / 
ãxt_width
;

129 
y_sˇÀ
 = 
y_di°
 / 
ãxt_height
;

130 
sˇÀ
 = 
	`möf
(
x_sˇÀ
, 
y_sˇÀ
);

132 
°¨t_ãxt_y_åue_°¨t
;

134 
ˇmîa_Àngth
 = 
ˇmîa
.
up
 - camîa.
down
;

135 
unsˇÀd_ãxt_löe_Àngth
 = 
bounds
.
y_t›
 - bounds.
y_bŸ
;

137 
sˇÀd_ãxt_löe_Àngth
 = 
unsˇÀd_ãxt_löe_Àngth
 * 
sˇÀ
;

139 
vîtiˇl_•a˚
 = 
y_di°
 - 
sˇÀd_ãxt_löe_Àngth
;

140 
hÆf_vîtiˇl_•a˚
 = 
vîtiˇl_•a˚
 / 2.0f;

142 
°¨t_øtio
 = 
	`≥r˚¡age_bëwìn
(
bounds
.
y_bŸ
, bounds.
y_t›
, 0);

144 
°¨t_ãxt_bŸtom
 = 
ˇmîa
.
down
 + 
hÆf_vîtiˇl_•a˚
;

145 
°¨t_ãxt_t›
 = 
°¨t_ãxt_bŸtom
 + 
sˇÀd_ãxt_löe_Àngth
;

146 
°¨t_ãxt_y_åue_°¨t
 = 
	`ÀΩ
(
°¨t_ãxt_bŸtom
, 
°¨t_ãxt_t›
, 
°¨t_øtio
);

148 
°¨t_ãxt_x_åue_°¨t
;

150 
åue_width
 = 
ãxt_width
 * 
sˇÀ
;

151 
x_•a˚_À·
 = 
x_di°
 - 
åue_width
;

152 
x_•a˚_À·_hÆf
 = 
x_•a˚_À·
 / 2.0f;

153 
°¨t_ãxt_x_åue_°¨t
 = 
ˇmîa
.
À·
 + 
x_•a˚_À·_hÆf
;

155 
	`døw_ãxt_to_s¸ìn
(
glm
::
	`vec3
(
°¨t_ãxt_x_åue_°¨t
, 
°¨t_ãxt_y_åue_°¨t
, 
s¸ìn_˚¡î
.
z
), glm::
	`vec2
(
x_sˇÀ
, x_sˇÀ), 
°rög_to_døw
, 
ãxt_døw_öfo
);

156 
	}
}

158 
GameS∑˚Camîa
 
	$¨ó_gë_grid_ñemít
(
x
, 
y
, 
width
, 
height
, 
GameS∑˚Camîa
 
¨ó
)

160 
GameS∑˚Camîa
 
ªsu…
;

161 
ªsu…
.
À·
 = 
	`ÀΩ
(
¨ó
.À·,áªa.
right
, 
x
 / 
width
);

162 
ªsu…
.
down
 = 
	`ÀΩ
(
¨ó
.down,áªa.
up
, 
y
 / 
height
);

164 
ªsu…
.
right
 = 
	`ÀΩ
(
¨ó
.
À·
,áªa.right, (
x
 + 1Ë/ 
width
);

165 
ªsu…
.
up
 = 
	`ÀΩ
(
¨ó
.
down
,áªa.up, (
y
 + 1Ë/ 
height
);

167  
ªsu…
;

168 
	}
}

170 
GameS∑˚Camîa
* 
	$bªak_ˇmîa_öto_cﬁumns
(
GameS∑˚Camîa
 
¨ó
, 
cﬁumn
, 
Mem‹y
* 
sc›e_mem‹y
)

172 
GameS∑˚Camîa
* 
ªsu…
 = (GameS∑˚Camîa*)
	`mem‹y_Æloc
(
sc›e_mem‹y
, (GameS∑˚CamîaË* 
cﬁumn
);

173 
Àngth
 = 
¨ó
.
right
 -áªa.
down
;

174 
•lô_Àngth
 = 
Àngth
 / ()
cﬁumn
;

175 
i
 = 0; i < 
cﬁumn
; i++)

177 
ªsu…
[
i
].
up
 = 
¨ó
.up;

178 
ªsu…
[
i
].
down
 = 
¨ó
.down;

179 
ªsu…
[
i
].
À·
 = 
¨ó
.À· + 
•lô_Àngth
 * i;

180 
ªsu…
[
i
].
right
 = 
¨ó
.
À·
 + 
•lô_Àngth
 * (i + 1);

181 
ªsu…
[
i
].
˛o£Poöt
 = 
¨ó
.closePoint;

182 
ªsu…
[
i
].
ÁrPoöt
 = 
¨ó
.farPoint;

184  
ªsu…
;

185 
	}
}

187 
GameS∑˚Camîa
* 
	$bªak_ˇmîa_öto_rows
(
GameS∑˚Camîa
 
¨ó
, 
rows
, 
Mem‹y
* 
sc›e_mem‹y
)

189 
GameS∑˚Camîa
* 
ªsu…
 = (GameS∑˚Camîa*)
	`mem‹y_Æloc
(
sc›e_mem‹y
, (GameS∑˚CamîaË* 
rows
);

190 
Àngth
 = 
¨ó
.
up
 -áªa.
down
;

191 
•lô_Àngth
 = 
Àngth
 / ()
rows
;

192 
i
 = 0; i < 
rows
; i++)

194 
ªsu…
[
i
].
up
 = 
¨ó
.
down
 + 
•lô_Àngth
 * (i + 1);

195 
ªsu…
[
i
].
down
 = 
¨ó
.dow¿+ 
•lô_Àngth
 * i;

196 
ªsu…
[
i
].
À·
 = 
¨ó
.left;

197 
ªsu…
[
i
].
right
 = 
¨ó
.right;

198 
ªsu…
[
i
].
˛o£Poöt
 = 
¨ó
.closePoint;

199 
ªsu…
[
i
].
ÁrPoöt
 = 
¨ó
.farPoint;

201  
ªsu…
;

202 
	}
}

204 
GameS∑˚Camîa
* 
	$bªak_ˇmîa_öto_weighãd_cﬁumns
(
GameS∑˚Camîa
 
¨ó
, * 
cﬁumn_øtio
, 
Àngth
, 
Mem‹y
* 
sc›e_mem‹y
)

206 
GameS∑˚Camîa
* 
ªsu…
 = (GameS∑˚Camîa*)
	`mem‹y_Æloc
(
sc›e_mem‹y
, (GameS∑˚CamîaË* 
Àngth
);

207 
x_width
 = 
¨ó
.
right
 -áªa.
À·
;

208 
y_height
 = 
¨ó
.
up
 -áªa.
down
;

209 
tŸÆ
 = 0;

210 
i
 = 0; i < 
Àngth
; i++)

212 
tŸÆ
 +
cﬁumn_øtio
[
i
];

214 
tŸÆf
 = ()
tŸÆ
;

215 
°¨t
 = 0;

216 
i
 = 0; i < 
Àngth
; i++)

218 
our_°¨t
 = 
°¨t
;

219 
√xt_øtio
 = 
cﬁumn_øtio
[
i
] / 
tŸÆf
;

220 
our_íd
 = 
our_°¨t
 + 
√xt_øtio
 * 
x_width
;

221 
°¨t
 +
√xt_øtio
;

223 
ªsu…
[
i
].
À·
 = 
our_°¨t
;

224 
ªsu…
[
i
].
right
 = 
our_íd
;

225 
ªsu…
[
i
].
up
 = 
¨ó
.up;

226 
ªsu…
[
i
].
down
 = 
¨ó
.down;

227 
ªsu…
[
i
].
ÁrPoöt
 = 
¨ó
.farPoint;

228 
ªsu…
[
i
].
˛o£Poöt
 = 
¨ó
.closePoint;

230  
ªsu…
;

231 
	}
}

233 
GameS∑˚Camîa
* 
	$bªak_ˇmîa_öto_weighãd_rows
(
GameS∑˚Camîa
 
¨ó
, * 
row_øtio
, 
Àngth
, 
Mem‹y
* 
sc›e_mem‹y
)

235 
GameS∑˚Camîa
* 
ªsu…
 = (GameS∑˚Camîa*)
	`mem‹y_Æloc
(
sc›e_mem‹y
, (GameS∑˚CamîaË* 
Àngth
);

236 
x_width
 = 
¨ó
.
right
 -áªa.
À·
;

237 
y_height
 = 
¨ó
.
up
 -áªa.
down
;

238 
tŸÆ
 = 0;

239 
i
 = 0; i < 
Àngth
; i++)

241 
tŸÆ
 +
row_øtio
[
i
];

243 
tŸÆf
 = ()
tŸÆ
;

244 
°¨t
 = 0;

245 
i
 = 0; i < 
Àngth
; i++)

247 
our_°¨t
 = 
°¨t
;

248 
√xt_øtio
 = 
row_øtio
[
i
] / 
tŸÆf
;

249 
our_íd
 = 
our_°¨t
 + 
√xt_øtio
 * 
y_height
;

250 
°¨t
 +
√xt_øtio
;

252 
ªsu…
[
i
].
À·
 = 
¨ó
.left;

253 
ªsu…
[
i
].
right
 = 
¨ó
.
down
;

254 
ªsu…
[
i
].
up
 = 
our_°¨t
;

255 
ªsu…
[
i
].
down
 = 
our_íd
;

256 
ªsu…
[
i
].
ÁrPoöt
 = 
¨ó
.farPoint;

257 
ªsu…
[
i
].
˛o£Poöt
 = 
¨ó
.closePoint;

259  
ªsu…
;

260 
	}
}

	@TextDraw.h

1 #¥agm®
⁄˚


3 
	~"M©h.h
"

4 
	~"TrueF⁄tCh¨a˘î.h
"

5 c⁄° 
	gFONT_CHARACTER_HEIGHT
 = 128;

6 c⁄° 
	gFONT_ATLAS_WIDTH
 = 1024;

7 c⁄° 
	gFONT_ATLAS_HEIGHT
 = 1024;

8 c⁄° 
	gFONT_NUM_CHARACTERS
 = 128;

10 
	sTextWrôe
 {

11 
	mglm
::
m©4
* 
°rög_m©rix_˝u
;

12 
	mglm
::
vec4
* 
°rög_©œs_˝u
;

13 
	mglm
::
vec4
* 
°rög_cﬁ‹_˝u
;

14 
TTF_Ch¨a˘î
* 
	måue_f⁄t_ª„ªn˚
;

15 
AABB
* 
	mãxt_posôi⁄s
;

16 
AABB
* 
	mãxt_posôi⁄s_n‹mÆized
;

17 * 
	mcuºít_numbî_døwn
;

20 
	sLöeBounds


22 
	mlöe_Àngth
;

23 
	my_t›
;

24 
	my_bŸ
;

25 
	my_di°
;

28 
gë_h‹iz⁄èl_•a˚_c⁄sumed_by_ãxt
(
glm
::
vec3
 
°¨t_posôi⁄
, glm::
vec2
 
sˇÀ
, c⁄° * 
c_°rög
, 
TextWrôe
* 
öfo
);

29 
LöeBounds
 
gë_löebounds_•a˚_c⁄sumed_by_ãxt
(
glm
::
vec3
 
°¨t_posôi⁄
, glm::
vec2
 
sˇÀ
, c⁄° * 
c_°rög
, 
TextWrôe
* 
öfo
);

30 
døw_ãxt_to_s¸ìn
(
glm
::
vec3
 
°¨t_posôi⁄
, glm::
vec2
 
sˇÀ
, c⁄° * 
c_°rög
, 
TextWrôe
* 
öfo
);

34 
	sLöe


36 
	m˚¡î
;

37 
	mÀngth
;

38 
	mt›
;

39 
	mbŸ
;

43 
≥r˚¡age_bëwìn
(
°¨t
, 
íd
, 
poöt
);

44 
ÀΩ
(
°¨t
, 
íd
, 
≥r˚¡age
);

45 
døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
GameS∑˚Camîa
 
ˇmîa
, c⁄° * 
°rög_to_døw
, 
TextWrôe
* 
ãxt_døw_öfo
);

47 
GameS∑˚Camîa
 
¨ó_gë_grid_ñemít
(
x
, 
y
, 
width
, 
height
, GameS∑˚Camî®
¨ó
);

48 
GameS∑˚Camîa
* 
bªak_ˇmîa_öto_cﬁumns
(GameS∑˚Camî®
¨ó
, 
cﬁumn
, 
Mem‹y
* 
sc›e_mem‹y
);

50 
GameS∑˚Camîa
* 
bªak_ˇmîa_öto_rows
(GameS∑˚Camî®
¨ó
, 
rows
, 
Mem‹y
* 
sc›e_mem‹y
);

52 
GameS∑˚Camîa
* 
bªak_ˇmîa_öto_weighãd_cﬁumns
(GameS∑˚Camî®
¨ó
, * 
cﬁumn_øtio
, 
Àngth
, 
Mem‹y
* 
sc›e_mem‹y
);

54 
GameS∑˚Camîa
* 
bªak_ˇmîa_öto_weighãd_rows
(GameS∑˚Camî®
¨ó
, * 
row_øtio
, 
Àngth
, 
Mem‹y
* 
sc›e_mem‹y
);

	@TextScene.h

1 #¥agm®
⁄˚


2 
	~"C⁄°™ts.h
"

3 
	~<°rög
>

4 
	~"Mem‹y.h
"

5 
	sTextS˚√


7 * 
	mto_di•œy
;

8 
	m°¨t_time
;

9 
	míd_time
;

10 
SCENE_TYPE
 
	ms˚√_to_ªvît_to
;

13 
TextS˚√
* 
	$buûd_ãxt_s˚√
(
°d
::
°rög
 
to_buûd
, 
SCENE_TYPE
 
œ°_s˚√
, 
Mem‹y
* 
ãxt_mem‹y
, 
°¨t_time
, 
di•œy_time
)

15 
	`mem‹y_˛ór
(
ãxt_mem‹y
);

16 
TextS˚√
* 
ªsu…
 = (TextS˚√*)
	`mem‹y_Æloc
(
ãxt_mem‹y
, (TextScene));

17 
ªsu…
->
to_di•œy
 = (*)
	`mem‹y_Æloc
(
ãxt_mem‹y
, 
to_buûd
.
	`Àngth
() + 1);

18 
i
 = 0; i < 
to_buûd
.
	`Àngth
(); i++)

19 
ªsu…
->
to_di•œy
[
i
] = 
to_buûd
[i];

20 
ªsu…
->
to_di•œy
[
to_buûd
.
	`Àngth
()] = 
NULL
;

21 
ªsu…
->
°¨t_time
 = start_time;

22 
ªsu…
->
íd_time
 = 
°¨t_time
 + 
di•œy_time
;

23 
ªsu…
->
s˚√_to_ªvît_to
 = 
œ°_s˚√
;

24  
ªsu…
;

25 
	}
}

27 
TextS˚√
* 
	$Àvñ_p›up
(
°d
::
°rög
 
Àvñ_«me
, 
Mem‹y
* 
ãxt_mem‹y
, 
cuºít_time
)

29  
	`buûd_ãxt_s˚√
(
Àvñ_«me
, 
SCENE_TYPE
::
ST_PLAY_LEVEL
, 
ãxt_mem‹y
, 
cuºít_time
, 
TIME_TO_DISPLAY_LEVEL_NAME
);

30 
	}
}

32 
TextS˚√
* 
	$Àvñ_p›up_cu°omtime
(
°d
::
°rög
 
Àvñ_«me
, 
Mem‹y
* 
ãxt_mem‹y
, 
cuºít_time
, 
di•œy_time
)

34  
	`buûd_ãxt_s˚√
(
Àvñ_«me
, 
SCENE_TYPE
::
ST_PLAY_LEVEL
, 
ãxt_mem‹y
, 
cuºít_time
, 
di•œy_time
);

35 
	}
}

	@TrueFontCharacter.h

1 #¥agm®
⁄˚


2 
	~<glm\ext\ve˘‹_öt2.hµ
>

4 
	sTTF_Ch¨a˘î


6 
	mglm
::
ivec2
 
Size
;

7 
	mglm
::
ivec2
 
Bórög
;

8 
	madv™˚
;

	@Walk.cpp

1 
	~"M©h.h
"

3 
boﬁ
* 
	$m©h_grid_wÆk_adja˚¡
(
Mem‹y
* 
ªsu…_mem‹y
, Mem‹y* 
ãmp_mem‹y
, * 
öput_grid
, 
°¨t_x
, 
°¨t_y
, 
w
, 
h
)

5  
nuŒ±r
;

6 
	}
}

7 
boﬁ
* 
	$m©h_grid_wÆk_adja˚¡_wøµed
(
Mem‹y
* 
ªsu…_mem‹y
, Mem‹y* 
ãmp_mem‹y
, * 
öput_grid
, 
°¨t_x
, 
°¨t_y
, 
w
, 
h
)

51  
nuŒ±r
;

52 
	}
}

	@World.cpp

1 
	~"W‹ld.h
"

2 
	~"Anim©i⁄.h
"

3 
	~"P¨£.h
"

6 
	$w‹ld_åy_ªvîsög_°aúˇ£
(
W‹ldS˚√
* 
s˚√
)

8 i‡(
s˚√
->
°aúˇ£_we_íãªd_Àvñ_‰om
.
Àvñ_ödex
 >= 0)

10 
s˚√
->
œ°_a˘i⁄_was_ãÀp‹t
 = 
åue
;

11 
W‹ldPosôi⁄
 
cuºít_pos
 = 
	`w‹ld_maybe_föd_∂ayî
(
s˚√
);

12 
W‹ldPosôi⁄
 
ªvît_pos
 = 
s˚√
->
°aúˇ£_we_íãªd_Àvñ_‰om
;

13 i‡(
cuºít_pos
.
Àvñ_ödex
 == -1)

14 
	`¸ash_îr
("uh ohhh, weÅriedÅo findáÖlayer but couldn't find one,Åhat shouldn't have happened");

15 
∂ayî_vÆ
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_pos
.
Àvñ_ödex
]->
põ˚
[cuºít_pos.
Àvñ_posôi⁄_1d
];

16 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
ªvît_pos
.
Àvñ_ödex
]->
Êo‹
[ªvît_pos.
Àvñ_posôi⁄_1d
] = 
F_STAIRCASE_SOLVED
;

19 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_pos
.
Àvñ_ödex
]->
põ˚
[cuºít_pos.
Àvñ_posôi⁄_1d
] = 
P_NONE
;

20 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
ªvît_pos
.
Àvñ_ödex
]->
põ˚
[ªvît_pos.
Àvñ_posôi⁄_1d
] = 
∂ayî_vÆ
;

21 
s˚√
->
cuºít_Àvñ
 = 
ªvît_pos
.
Àvñ_ödex
;

23 
	}
}

25 
W‹ldPœyS˚√
* 
	$w‹ld_∂ayî_a˘i⁄
(
W‹ldS˚√
* 
s˚√
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
Àvñ_mem‹y
)

27 
s˚√
->
œ°_a˘i⁄_was_ãÀp‹t
 = 
Ál£
;

29 
I¡Paú
 
move
 = 
	`dúe˘i⁄_to_öçaú
(
a˘i⁄
);

30 
GameSèã
* 
cuºít_°©e
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[s˚√->
cuºít_Àvñ
];

31 
I¡Paú
 
cuºít_°©e_posôi⁄
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_posôi⁄
[s˚√->
cuºít_Àvñ
];

34 
W‹ldPosôi⁄
 
∂ayî_pos
 = 
	`w‹ld_maybe_föd_∂ayî
(
s˚√
);

35 
cuºít_∂ayî_vÆue
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
∂ayî_pos
.
Àvñ_ödex
]->
põ˚
[∂ayî_pos.
Àvñ_posôi⁄_1d
];

59 
I¡Paú
 
√xt_∂ayî_squ¨e_posôi⁄
;

60 
√xt_squ¨e_Àvñ
;

62 
I¡Paú
 
ã¡©ive_√xt
 = 
	`m©h_öçaú_add
(
move
, 
∂ayî_pos
.
Àvñ_posôi⁄
 );

63 
boﬁ
 
öside_Àvñ
 = 
	`m©h_wôhö_grid
(
ã¡©ive_√xt
.
x
,Åíètive_√xt.
y
, 
cuºít_°©e
->
w
, cuºít_°©e->
h
);

64 i‡(
öside_Àvñ
)

66 
√xt_∂ayî_squ¨e_posôi⁄
 = 
ã¡©ive_√xt
;

67 
√xt_squ¨e_Àvñ
 = 
s˚√
->
cuºít_Àvñ
;

72 
I¡Paú
 
w‹ld_posôi⁄
 = 
	`m©h_öçaú_add
(
ã¡©ive_√xt
, 
cuºít_°©e_posôi⁄
);

74 
boﬁ
 
found_move
 = 
Ál£
;

75 
i
 = 0; i < 
s˚√
->
w‹ld_°©e
.
num_Àvñ
; i++)

77 
I¡Paú
 
grid_loˇti⁄
 = 
	`m©h_öçaú_sub
(
w‹ld_posôi⁄
, 
s˚√
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
]);

78 i‡(
	`m©h_wôhö_grid
(
grid_loˇti⁄
.
x
, grid_loˇti⁄.
y
, 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
w
, s˚√->w‹ld_°©e.Àvñ_°©e[i]->
h
))

80 
√xt_∂ayî_squ¨e_posôi⁄
 = 
grid_loˇti⁄
;

81 
√xt_squ¨e_Àvñ
 = 
i
;

82 
found_move
 = 
åue
;

86 i‡(!
found_move
)

89  
NULL
;

95 
GameSèã
* 
√xt_°©e
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
√xt_squ¨e_Àvñ
];

97 
√xt_squ¨e_posôi⁄_1d
 = 
	`f2D
(
√xt_∂ayî_squ¨e_posôi⁄
.
x
,Çext_∂ayî_squ¨e_posôi⁄.
y
, 
√xt_°©e
->
w
,Çext_°©e->
h
);

98 i‡(
√xt_°©e
->
põ˚
[
√xt_squ¨e_posôi⁄_1d
] !
P_NONE
)

101  
NULL
;

109 
cuºít_°©e_posôi⁄_1d
 = 
	`f2D
(
∂ayî_pos
.
Àvñ_posôi⁄
.
x
,Öœyî_pos.Àvñ_posôi⁄.
y
, 
cuºít_°©e
->
w
, cuºít_°©e->
h
);

110 
cuºít_°©e
->
põ˚
[
cuºít_°©e_posôi⁄_1d
] = 
P_NONE
;

113 
√xt_squ¨e_posôi⁄_1d
 = 
	`f2D
(
√xt_∂ayî_squ¨e_posôi⁄
.
x
,Çext_∂ayî_squ¨e_posôi⁄.
y
, 
√xt_°©e
->
w
,Çext_°©e->
h
);

115 
√xt_°©e
->
põ˚
[
√xt_squ¨e_posôi⁄_1d
] = 
cuºít_∂ayî_vÆue
;

116 
s˚√
->
cuºít_Àvñ
 = 
√xt_squ¨e_Àvñ
;

121 
föÆ_Àvñ_ödex
 = 
√xt_squ¨e_Àvñ
;

122 
föÆ_posôi⁄_1d
 = 
√xt_squ¨e_posôi⁄_1d
;

124 
f
 = 
√xt_°©e
->
Êo‹
[
√xt_squ¨e_posôi⁄_1d
];

125 
boﬁ
 
°™dög_⁄_ãÀp‹ãr
 = 
	`is_°aúˇ£
(
f
);

126 i‡(
°™dög_⁄_ãÀp‹ãr
)

129 
lök_loˇti⁄
;

130 
I¡Paú
 
lök_squ¨e_2d
;

131 
lök_squ¨e_1d
;

133 
Flo‹D©a
 
√xt_Êo‹d©a
 = 
√xt_°©e
->
Êo‹_d©a
[
√xt_squ¨e_posôi⁄_1d
];

134 
lök_loˇti⁄
 = 
√xt_Êo‹d©a
.
ãÀp‹ãr_id
;

135 
lök_squ¨e_2d
 = 
√xt_Êo‹d©a
.
ãÀp‹ãr_èrgë_squ¨e
;

136 
lök_w
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
lök_loˇti⁄
]->
w
;

137 
lök_h
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
lök_loˇti⁄
]->
h
;

138 
lök_squ¨e_1d
 = 
	`f2D
(
lök_squ¨e_2d
.
x
,Üök_squ¨e_2d.
y
, 
lök_w
,
lök_h
);

143 
s˚√
->
œ°_a˘i⁄_was_ãÀp‹t
 = 
Ál£
;

144 
√xt_°©e
->
põ˚
[
√xt_squ¨e_posôi⁄_1d
] = 0;

145 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
lök_loˇti⁄
]->
põ˚
[
lök_squ¨e_1d
] = 
Põ˚
::
P_PLAYER
;

146 
GameSèã
* 
√xt
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
√xt_squ¨e_Àvñ
];

147 
Àvñ_pos_1d
 = 
	`f2D
(
√xt_∂ayî_squ¨e_posôi⁄
.
x
,Çext_∂ayî_squ¨e_posôi⁄.
y
, 
√xt
->
w
,Çext->
h
);

148 
s˚√
->
°aúˇ£_we_íãªd_Àvñ_‰om
 = 
	`w‹ld_make_w‹ld_posôi⁄
(s˚√->
cuºít_Àvñ
, 
√xt_∂ayî_squ¨e_posôi⁄
, 
Àvñ_pos_1d
);

149 
s˚√
->
cuºít_Àvñ
 = 
lök_loˇti⁄
;

150 
föÆ_Àvñ_ödex
 = 
lök_loˇti⁄
;

151 
föÆ_posôi⁄_1d
 = 
lök_squ¨e_1d
;

160 
tûe_∂ayî_°™dög_⁄
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
föÆ_Àvñ_ödex
]->
Êo‹
[
föÆ_posôi⁄_1d
];

161 
boﬁ
 
°™dög_⁄_°¨t_tûe
 = 
tûe_∂ayî_°™dög_⁄
 =
F_START
 ||Åûe_∂ayî_°™dög_⁄ =
F_STAIRCASE_LEVELSTART
;

162 i‡(
°™dög_⁄_°¨t_tûe
)

164 
	`mem‹y_˛ór
(
Àvñ_mem‹y
);

165 
GameSèã
* 
√xt_s˚√_bef‹e_exåude
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[s˚√->
cuºít_Àvñ
];

166 
GameSèã
* 
√xt_s˚√
 = 
	`game°©e_˛⁄e
(
√xt_s˚√_bef‹e_exåude
, 
Àvñ_mem‹y
);

167 
	`game°©e_°¨tup
(
√xt_s˚√
);

168 
W‹ldPœyS˚√
* 
ªsu…
 = (W‹ldPœyS˚√*Ë
	`mem‹y_Æloc
(
Àvñ_mem‹y
, (WorldPlayScene));

169 
ªsu…
->
time_machöe
 = 
	`game°©e_timemachöe_¸óã
(
√xt_s˚√
, 
Àvñ_mem‹y
, 1024);

170 
ªsu…
->
døw_posôi⁄
 = 
s˚√
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
föÆ_Àvñ_ödex
];

171  
ªsu…
;

175 
s˚√
->
°aúˇ£_we_íãªd_Àvñ_‰om
 = 
	`w‹ld_make_w‹ld_posôi⁄
(-1, 
	`m©h_öçaú_¸óã
(-1, -1), -1);

180  
NULL
;

183 
	}
}

184 
W‹ldS˚√
* 
	$£tup_w‹ld_s˚√_c⁄töue
(
W‹ldS˚√
* 
s˚√
, 
SCENE_TYPE
 
go_to_⁄_back•a˚
)

186 
s˚√
->
go_to_⁄_back•a˚
 = go_to_on_backspace;

187 
s˚√
->
œ°_a˘i⁄_was_ãÀp‹t
 = 
Ál£
;

188  
s˚√
;

189 
	}
}

190 
W‹ldS˚√
* 
	$£tup_w‹ld_s˚√
(
TimeMachöeEdô‹
* 
buûd_‰om
, 
Mem‹y
* 
w‹ld_s˚√_mem‹y
, 
SCENE_TYPE
 
go_to_⁄_back•a˚
)

192 
W‹ldS˚√
* 
ªsu…
 = (W‹ldS˚√*)
	`mem‹y_Æloc
(
w‹ld_s˚√_mem‹y
, (WorldScene));

193 
ªsu…
->
go_to_⁄_back•a˚
 = go_to_on_backspace;

194 
ªsu…
->
œ°_a˘i⁄_was_ãÀp‹t
 = 
Ál£
;

195 c⁄° 
num_game°©es
 = 
buûd_‰om
->
w‹ld_°©e
.
num_Àvñ
;

196 
ªsu…
->
w‹ld_°©e
.
num_Àvñ
 = 
num_game°©es
;

197 
i
 = 0; i < 
num_game°©es
; i++)

199 
ªsu…
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
] = 
buûd_‰om
->world_state.level_position[i];

201 
i
 = 0; i < 
num_game°©es
; i++)

203 
ªsu…
->
w‹ld_°©e
.
Àvñ_sﬁved
[
i
] = 
buûd_‰om
->world_state.level_solved[i];

205 
i
 = 0; i < 
num_game°©es
; i++)

207 
ªsu…
->
w‹ld_°©e
.
Àvñ_°©e
[
i
] = 
	`game°©e_˛⁄e
(
buûd_‰om
->w‹ld_°©e.Àvñ_°©e[i], 
w‹ld_s˚√_mem‹y
);

209 
i
 = 0; i < 
num_game°©es
;i++)

211 
ªsu…
->
w‹ld_°©e
.
Àvñ_«mes
[
i
] = 
buûd_‰om
->world_state.level_names[i];

213 
i
 = 0; i < 
num_game°©es
;i++)

215 
ªsu…
->
w‹ld_°©e
.
Àvñ_modes
[
i
] = 
buûd_‰om
->world_state.level_modes[i];

219 
boﬁ
 
d⁄e_födög_∂ayî
 = 
Ál£
;

220 
i
 = 0; i < 
num_game°©es
; i++)

222 
Àn
 = 
ªsu…
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
w
 *Ñesu…->w‹ld_°©e.Àvñ_°©e[i]->
h
;

223 
z
 = 0; z < 
Àn
; z++)

224 i‡(
ªsu…
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
põ˚
[
z
] =
P_PLAYER
)

226 
ªsu…
->
cuºít_Àvñ
 = 
i
;

227 
d⁄e_födög_∂ayî
 = 
åue
;

230 i‡(
d⁄e_födög_∂ayî
)

233 i‡(!
d⁄e_födög_∂ayî
)

235 
°d
::
cout
 << "YouÅrõdÅÿö°™tüãá w‹ldÅh© didn'àc⁄èöáÖœyî, sÿwêˇn'àpo†thêw‹ld. F‹Çow,Åhi†i†®¸ash." << std::
ídl
;

236 
	`ab‹t
();

239  
ªsu…
;

240 
	}
}

241 
boﬁ
 
	$™y_Àvñs_À·_a˘ive
(
W‹ldS˚√
* 
to_check
)

243 
i
 = 0; i < 
to_check
->
w‹ld_°©e
.
num_Àvñ
; i++)

245 
GameSèã
* 
°©e
 = 
to_check
->
w‹ld_°©e
.
Àvñ_°©e
[
i
];

246 
w
 = 
°©e
->w;

247 
h
 = 
°©e
->h;

248 
Àn
 = 
w
 * 
h
;

249 
z
 = 0; z < 
Àn
; z++)

251 i‡(
°©e
->
Êo‹
[
z
] =
Flo‹
::
F_START
 || sèã->Êo‹[z] =Flo‹::
F_STAIRCASE_LEVELSTART
)

252  
åue
;

255  
Ál£
;

256 
	}
}

259 
W‹ldPosôi⁄
 
	$w‹ld_maybe_föd_∂ayî
(
W‹ldS˚√
* 
s˚√
)

261 
z
 = 0; z < 
s˚√
->
w‹ld_°©e
.
num_Àvñ
; z++)

263 
pos_1d
 = 
	`game°©e_maybe_föd_∂ayî
(
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
z
]);

264 i‡(
pos_1d
 != -1)

266 
I¡Paú
 
pos_2d
 = 
	`t2D
(
pos_1d
, 
s˚√
->
w‹ld_°©e
.
Àvñ_°©e
[
z
]->
w
, s˚√->w‹ld_°©e.Àvñ_°©e[z]->
h
);

267 
W‹ldPosôi⁄
 
ªsu…
 = 
	`w‹ld_make_w‹ld_posôi⁄
(
z
,
pos_2d
,
pos_1d
);

268  
	`w‹ld_make_w‹ld_posôi⁄
(
z
,
pos_2d
,
pos_1d
);

271  
	`w‹ld_make_w‹ld_posôi⁄
(-1,
	`m©h_öçaú_¸óã
(-1,-1),-1);

272 
	}
}

274 
	g°d
::
°rög
 
	$w‹ld_£rülize_ﬁd
(
W‹ldS˚√
* 
w‹ld
, 
Mem‹y
* 
sc›e
, Mem‹y* 
ãmp_mem‹y
)

277 c⁄° 
max_Àngth
 = 10000;

278 
ouçut_c⁄sumed
 = 0;

279 * 
ouçut
 = (*)
	`mem‹y_Æloc
(
ãmp_mem‹y
, (Ë* 
max_Àngth
);

280 c⁄° 
num_game°©es
 = 
w‹ld
->
w‹ld_°©e
.
num_Àvñ
;

284 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "num_game°©es:%d;\n", 
num_game°©es
);

293 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "positions:");

294 
i
 = 0; i < 
num_game°©es
; i++)

295 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%d,%d,", 
w‹ld
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
, w‹ld->w‹ld_°©e.Àvñ_posôi⁄[i].
y
);

296 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

300 
	`∑r£_£rülize_game°©e_œyîs
(
ouçut
, &
ouçut_c⁄sumed
, 
max_Àngth
, 
num_game°©es
, 
w‹ld
->
w‹ld_°©e
.
Àvñ_°©e
);

303 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "names:");

304 
i
 = 0; i < 
num_game°©es
; i++)

306 * 
«me
 = 
w‹ld
->
w‹ld_°©e
.
Àvñ_«mes
[
i
].name;

307 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%s,", 
«me
);

309 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

314 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "solved:");

315 
i
 = 0; i < 
num_game°©es
; i++)

317 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, "%d,", 
w‹ld
->
w‹ld_°©e
.
Àvñ_sﬁved
[
i
]);

319 
ouçut_c⁄sumed
 +
	`•rötf_s
(
ouçut
 + ouçut_c⁄sumed, 
max_Àngth
, ";\n");

321  
°d
::
	`°rög
(
ouçut
);

322 
	}
}

324 
W‹ldS˚√
* 
	$w‹ld_de£rülize
(
°d
::
°rög
 
w‹ld_°rög
, 
Mem‹y
* 
sc›e
, Mem‹y* 
ãmp_mem‹y
)

326 
W‹ldSèã
* 
w‹ld_°©e
 = 
	`∑r£_de£rülize_timemachöe
(
w‹ld_°rög
, 
sc›e
, 
ãmp_mem‹y
);

327 
W‹ldS˚√
* 
ªsu…
 = (W‹ldS˚√*)
	`mem‹y_Æloc
(
sc›e
, (WorldScene));

330 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

332 
ªsu…
->
w‹ld_°©e
.
Àvñ_°©e
[
i
] = 
NULL
;

334 
i
 = 0; i < 
MAX_NUMBER_GAMESTATES
; i++)

335 
j
 = 0; j < 
GAME_LEVEL_NAME_MAX_SIZE
;j++)

337 
ªsu…
->
w‹ld_°©e
.
Àvñ_«mes
[
i
].
«me
[
j
] = '\0';

341 
ªsu…
->
w‹ld_°©e
 = *world_state;

342 
ªsu…
->
cuºít_Àvñ
 = 
	`w‹ld_maybe_föd_∂ayî
‘esu…).
Àvñ_ödex
;

343 
ªsu…
->
°aúˇ£_we_íãªd_Àvñ_‰om
 = 
	`w‹ld_make_w‹ld_posôi⁄_övÆid
();

344 
ªsu…
->
go_to_⁄_back•a˚
 = 
SCENE_TYPE
::
ST_COUNT
;

345  
ªsu…
;

346 
	}
}

	@World.h

1 #¥agm®
⁄˚


2 
	~"M©h.h
"

3 
	~"GameSèã.h
"

4 
	~"Edô‹.h
"

5 
	~"Anim©i⁄.h
"

6 
	~"C⁄°™ts.h
"

7 
	~<io°ªam
>

9 
	sW‹ldS˚√


12 
SCENE_TYPE
 
	mgo_to_⁄_back•a˚
;

13 
W‹ldPosôi⁄
 
	m°aúˇ£_we_íãªd_Àvñ_‰om
;

14 
	mcuºít_Àvñ
;

16 
boﬁ
 
	mœ°_a˘i⁄_was_ãÀp‹t
;

18 
W‹ldSèã
 
	mw‹ld_°©e
;

21 
	sW‹ldPœyS˚√


23 
I¡Paú
 
	mdøw_posôi⁄
;

24 
Game°©eTimeMachöe
* 
	mtime_machöe
;

27 
w‹ld_åy_ªvîsög_°aúˇ£
(
W‹ldS˚√
* 
s˚√
);

28 
W‹ldPœyS˚√
* 
w‹ld_∂ayî_a˘i⁄
(
W‹ldS˚√
* 
s˚√
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
Àvñ_mem‹y
);

29 
W‹ldS˚√
* 
£tup_w‹ld_s˚√
(
TimeMachöeEdô‹
* 
buûd_‰om
, 
Mem‹y
* 
w‹ld_s˚√_mem‹y
, 
SCENE_TYPE
 
go_to_⁄_back•a˚
);

30 
boﬁ
 
™y_Àvñs_À·_a˘ive
(
W‹ldS˚√
* 
to_check
);

31 
W‹ldS˚√
* 
w‹ld_de£rülize
(
°d
::
°rög
 
w‹ld
, 
Mem‹y
* 
sc›e
, Mem‹y* 
ãmp
);

32 
W‹ldPosôi⁄
 
w‹ld_maybe_föd_∂ayî
(
W‹ldS˚√
* 
s˚√
);

	@assets/textureAssets.cpp

1 
	~"Mem‹y.h
"

2 
	~"ãxtuªAs£ts.h
"

4 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$FLOOR_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

5 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 8);

6 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.063477,0.063477);

7 
ªsu…
[1] = 
glm
::
	`vec4
(0.065430,0.000977,0.127930,0.063477);

8 
ªsu…
[2] = 
glm
::
	`vec4
(0.129883,0.000977,0.192383,0.063477);

9 
ªsu…
[3] = 
glm
::
	`vec4
(0.194336,0.000977,0.256836,0.063477);

10 
ªsu…
[4] = 
glm
::
	`vec4
(0.258789,0.000977,0.321289,0.063477);

11 
ªsu…
[5] = 
glm
::
	`vec4
(0.323242,0.000977,0.385742,0.063477);

12 
ªsu…
[6] = 
glm
::
	`vec4
(0.387695,0.000977,0.450195,0.063477);

13 
ªsu…
[7] = 
glm
::
	`vec4
(0.452148,0.000977,0.514648,0.063477);Ñesult;

14 
	}
}

16 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$PIECE_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

17 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 14);

18 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.063477,0.063477);

19 
ªsu…
[1] = 
glm
::
	`vec4
(0.065430,0.000977,0.127930,0.063477);

20 
ªsu…
[2] = 
glm
::
	`vec4
(0.129883,0.000977,0.192383,0.063477);

21 
ªsu…
[3] = 
glm
::
	`vec4
(0.194336,0.000977,0.256836,0.063477);

22 
ªsu…
[4] = 
glm
::
	`vec4
(0.258789,0.000977,0.321289,0.063477);

23 
ªsu…
[5] = 
glm
::
	`vec4
(0.323242,0.000977,0.385742,0.063477);

24 
ªsu…
[6] = 
glm
::
	`vec4
(0.387695,0.000977,0.450195,0.063477);

25 
ªsu…
[7] = 
glm
::
	`vec4
(0.452148,0.000977,0.514648,0.063477);

26 
ªsu…
[8] = 
glm
::
	`vec4
(0.516602,0.000977,0.579102,0.063477);

27 
ªsu…
[9] = 
glm
::
	`vec4
(0.581055,0.000977,0.643555,0.063477);

28 
ªsu…
[10] = 
glm
::
	`vec4
(0.645508,0.000977,0.708008,0.063477);

29 
ªsu…
[11] = 
glm
::
	`vec4
(0.709961,0.000977,0.772461,0.063477);

30 
ªsu…
[12] = 
glm
::
	`vec4
(0.774414,0.000977,0.836914,0.063477);

31 
ªsu…
[13] = 
glm
::
	`vec4
(0.838867,0.000977,0.901367,0.063477);Ñesult;

32 
	}
}

34 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$SYMBOLS_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

35 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 5);

36 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.063477,0.063477);

37 
ªsu…
[1] = 
glm
::
	`vec4
(0.065430,0.000977,0.127930,0.063477);

38 
ªsu…
[2] = 
glm
::
	`vec4
(0.129883,0.000977,0.192383,0.063477);

39 
ªsu…
[3] = 
glm
::
	`vec4
(0.194336,0.000977,0.256836,0.063477);

40 
ªsu…
[4] = 
glm
::
	`vec4
(0.258789,0.000977,0.321289,0.063477);Ñesult;

41 
	}
}

43 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$UI_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

44 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 7);

45 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.032227,0.063477);

46 
ªsu…
[1] = 
glm
::
	`vec4
(0.034180,0.000977,0.065430,0.063477);

47 
ªsu…
[2] = 
glm
::
	`vec4
(0.067383,0.000977,0.098633,0.063477);

48 
ªsu…
[3] = 
glm
::
	`vec4
(0.100586,0.000977,0.163086,0.063477);

49 
ªsu…
[4] = 
glm
::
	`vec4
(0.165039,0.000977,0.227539,0.063477);

50 
ªsu…
[5] = 
glm
::
	`vec4
(0.229492,0.000977,0.291992,0.063477);

51 
ªsu…
[6] = 
glm
::
	`vec4
(0.293945,0.000977,0.356445,0.063477);Ñesult;

52 
	}
}

	@assets/textureAssets.h

1 #¥agm®
⁄˚


2 
	~"M©h.h
"

3 
«me•a˚
 
	gãxtuªAs£ts
 {

4 
	eFLOOR


6 
	gFlo‹
,

7 
	gGrûlCŸ
,

8 
	gGrûlHŸ
,

9 
	gOuéöe
,

10 
	gSèπ
,

11 
	gT¨gë
,

12 
	gZBœck
,

13 
	gZBZ


16 
	gglm
::
vec4
* 
FLOOR_posôi⁄s
(
Mem‹y
* 
mem‹y
);

17 
	ePIECE


19 
	gCøã
,

20 
	gCrumbÀ
,

21 
	gCur£dCøã
,

22 
	gCur£dPœyî
,

23 
	gCur£dPuŒCøã
,

24 
	gEm±y
,

25 
	gPœyî
,

26 
	gPuŒCøã
,

27 
	gSt›D
,

28 
	gSt›L
,

29 
	gSt›R
,

30 
	gSt›U
,

31 
	gWÆl
,

32 
	gWÆlA…


35 
	gglm
::
vec4
* 
PIECE_posôi⁄s
(
Mem‹y
* 
mem‹y
);

36 
	eSYMBOLS


38 
	gCú˛e
,

39 
	gHÆfCú˛e
,

40 
	gPlus
,

41 
	gSqu¨e
,

42 
	gTrüngÀ


45 
	gglm
::
vec4
* 
SYMBOLS_posôi⁄s
(
Mem‹y
* 
mem‹y
);

46 
	eUI


48 
	gBuâ⁄Cíãr
,

49 
	gBuâ⁄Le·HÆf
,

50 
	gBuâ⁄RightHÆf
,

51 
	gDownAºow
,

52 
	gLe·Aºow
,

53 
	gRightAºow
,

54 
	gUpAºow


57 
	gglm
::
vec4
* 
UI_posôi⁄s
(
Mem‹y
* 
mem‹y
);

	@draw.cpp

1 
	~"M©h.h
"

2 
	~"Shadî.h
"

3 
	~<gœd\gœd.h
>

4 
	~"Hñ≥rGL.h
"

5 
	~"døw.h
"

6 
	~"GameSèã.h
"

7 
	~"Resour˚.h
"

8 
	~"•rôe.h
"

10 c⁄° 
	gMAX_NUM_FULL_SPRITES
 = 100;

12 
	$døw_bœck_box_ovî_s¸ìn
(
GameS∑˚Camîa
 
s¸ìn
, 
S¥ôeWrôe
* 
öfo
)

14 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
glm
::
	`m©4
(1.0f);

15 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
glm
::
	`å™¶©e
(öfo->m©rix_˝u[öfo->num_døw], glm::
	`vec3
(
s¸ìn
.
À·
, s¸ìn.
down
, 10));

16 
height
 = 
s¸ìn
.
up
 - s¸ìn.
down
;

17 
width
 = 
s¸ìn
.
right
 - s¸ìn.
À·
;

18 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
glm
::
	`sˇÀ
(öfo->m©rix_˝u[öfo->num_døw], glm::
	`vec3
(
width
, 
height
, 1));

19 
öfo
->
©œs_˝u
[öfo->
num_døw
] = info->
©œs_m≠≥r
[
	`ªsour˚_Êo‹_to_•rôe
(
F_ZBLACK
)];

20 
öfo
->
num_døw
++;

21 
	}
}

22 
	$døw_ouéöe_to_game•a˚
(
AABB
 
ouéöe
, 
S¥ôeWrôe
* 
öfo
)

24 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
glm
::
	`m©4
(1.0f);

25 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
glm
::
	`å™¶©e
(öfo->m©rix_˝u[öfo->num_døw], glm::
	`vec3
(
ouéöe
.
x
, ouéöe.
y
, 5));

26 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
glm
::
	`sˇÀ
(öfo->m©rix_˝u[öfo->num_døw], glm::
	`vec3
(
ouéöe
.
w
, ouéöe.
h
, 1));

27 
öfo
->
©œs_˝u
[öfo->
num_døw
] = info->
©œs_m≠≥r
[
	`ªsour˚_Êo‹_to_•rôe
(
F_ZBLACK
)];

28 
öfo
->
num_døw
++;

29 
	}
}

30 
	$døw_game°©es_ouéöes_to_game•a˚
(
GameSèã
** 
game°©es
, 
I¡Paú
* 
off£ts
, 
Àngth_fun˘i⁄_öput
, 
S¥ôeWrôe
* 
öfo
, 
skù_ödex
)

32 
z
 = 0; z < 
skù_ödex
; z++)

34 
w
 = 
game°©es
[
z
]->w;

35 
h
 = 
game°©es
[
z
]->h;

36 
I¡Paú
 
°¨tPos
 = 
off£ts
[
z
];

37 
glm
::
m©4
 
föÆ
 = glm::
	`m©4
(1.0f);

38 
föÆ
 = 
glm
::
	`å™¶©e
(föÆ, glm::
	`vec3
(
°¨tPos
.
x
 - 
OUTLINE_DRAW_SIZE
, sèπPos.
y
 - OUTLINE_DRAW_SIZE, 0));

39 
föÆ
 = 
glm
::
	`sˇÀ
(föÆ, glm::
	`vec3
(
w
 + 
OUTLINE_DRAW_SIZE
 * 2, 
h
 + OUTLINE_DRAW_SIZE * 2, 1));

40 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
föÆ
;

41 
öfo
->
©œs_˝u
[öfo->
num_døw
] = info->
©œs_m≠≥r
[
	`ªsour˚_Êo‹_to_•rôe
(
F_ZBLACK
)];

42 
öfo
->
num_døw
++;

44 
z
 = 
skù_ödex
 + 1; z < 
Àngth_fun˘i⁄_öput
; z++)

46 
w
 = 
game°©es
[
z
]->w;

47 
h
 = 
game°©es
[
z
]->h;

48 
I¡Paú
 
°¨tPos
 = 
off£ts
[
z
];

49 
glm
::
m©4
 
föÆ
 = glm::
	`m©4
(1.0f);

50 
föÆ
 = 
glm
::
	`å™¶©e
(föÆ, glm::
	`vec3
(
°¨tPos
.
x
 - 
OUTLINE_DRAW_SIZE
, sèπPos.
y
 - OUTLINE_DRAW_SIZE, 0));

51 
föÆ
 = 
glm
::
	`sˇÀ
(föÆ, glm::
	`vec3
(
w
 + 
OUTLINE_DRAW_SIZE
 * 2, 
h
 + OUTLINE_DRAW_SIZE * 2, 1));

52 
öfo
->
m©rix_˝u
[öfo->
num_døw
] = 
föÆ
;

53 
öfo
->
©œs_˝u
[öfo->
num_døw
] = info->
©œs_m≠≥r
[
	`ªsour˚_Êo‹_to_•rôe
(
F_ZBLACK
)];

54 
öfo
->
num_døw
++;

56 
	}
}

57 
	$døw_ui_to_game•a˚
(
GameS∑˚Camîa
 
døw_¨ó
, 
ödex
, 
S¥ôeWrôe
* 
døw_öfo
, 
glm
::
vec4
 
cﬁ‹
)

59 
cuºít_døw
 = 
døw_öfo
->
num_døw
;

60 
døw_öfo
->
©œs_˝u
[
cuºít_døw
] = døw_öfo->
©œs_m≠≥r
[
ödex
];

61 
døw_öfo
->
m©rix_˝u
[
cuºít_døw
] = 
glm
::
	`m©4
(1.0f);

62 
døw_öfo
->
m©rix_˝u
[
cuºít_døw
] = 
glm
::
	`å™¶©e
(døw_öfo->m©rix_˝u[cuºít_døw], glm::
	`vec3
(
døw_¨ó
.
À·
, døw_¨ó.
down
, 1));

63 
width
 = 
døw_¨ó
.
right
 - døw_¨ó.
À·
;

64 
height
 = 
døw_¨ó
.
up
 - døw_¨ó.
down
;

65 
døw_öfo
->
m©rix_˝u
[
cuºít_døw
] = 
glm
::
	`sˇÀ
(døw_öfo->m©rix_˝u[cuºít_døw], glm::
	`vec3
(
width
, 
height
, 1));

66 
døw_öfo
->
cﬁ‹_˝u
[
cuºít_døw
] = 
cﬁ‹
;

67 
døw_öfo
->
num_døw
++;

69 
	}
};

70 
	$døw_buâ⁄_to_game•a˚
(
GameS∑˚Camîa
 
døw_¨ó
, 
S¥ôeWrôe
 * 
ui_døw
, 
glm
::
vec4
 
cﬁ‹
)

73 
width
 = 
døw_¨ó
.
right
 - døw_¨ó.
À·
;

74 
height
 = 
døw_¨ó
.
up
 - døw_¨ó.
down
;

75 i‡(
height
 >
width
)

77 
	`¸ash_îr
("we can't drawá button if it isn'tátÜeast 1x1,Åhe draw won't work");

82 
GameS∑˚Camîa
 
À·_døw
 = 
døw_¨ó
;

83 
À·_døw
.
right
 =Üe·_døw.
À·
 + 0.5‡* 
height
;

84 
	`døw_ui_to_game•a˚
(
À·_døw
,
ãxtuªAs£ts
::
UI
::
Buâ⁄Le·HÆf
, 
ui_døw
, 
cﬁ‹
);

88 
GameS∑˚Camîa
 
middÀ_døw
 = 
døw_¨ó
;

89 
middÀ_døw
.
À·
 +0.5‡* 
height
;

90 
middÀ_døw
.
right
 -0.5‡* 
height
;

91 
	`døw_ui_to_game•a˚
(
middÀ_døw
, 
ãxtuªAs£ts
::
UI
::
Buâ⁄Cíãr
, 
ui_døw
, 
cﬁ‹
);

93 i‡(
height
 !
width
)

95 
GameS∑˚Camîa
 
right_døw
 = 
døw_¨ó
;

96 
right_døw
.
À·
 =Ñight_døw.
right
 - 0.5‡* 
height
;

97 
	`døw_ui_to_game•a˚
(
right_døw
,
ãxtuªAs£ts
::
UI
::
Buâ⁄RightHÆf
 ,
ui_døw
, 
cﬁ‹
);

100 
	}
}

102 
	$mask_•rôe_usög_wödow
(
glm
::
vec4
* 
døw_squ¨e
, glm::vec4* 
ãx_co‹d
, glm::vec4 
wödow
, glm::
vec2
 
ãx_movemít
)

104 
glm
::
vec4
 
√xt_døw_squ¨e
;

107 
√xt_døw_squ¨e
.
x
 = 
	`maxf
(
døw_squ¨e
->x, 
wödow
.x);

108 
√xt_døw_squ¨e
.
z
 = 
	`möf
(
døw_squ¨e
->z, 
wödow
.z);

109 
√xt_døw_squ¨e
.
y
 = 
	`maxf
(
døw_squ¨e
->y, 
wödow
.y);

110 
√xt_døw_squ¨e
.
w
 = 
	`möf
(
døw_squ¨e
->w, 
wödow
.w);

113 autÿ
dëîmöe_©œs_ch™ge
 = [](
pos
, 
wödow
, 
Àngth_squ¨e
) -> 

115 
≥r˚¡age_ch™ge
 = (
pos
 - 
wödow
Ë/ 
Àngth_squ¨e
;

116  
≥r˚¡age_ch™ge
;

118 
glm
::
vec4
 
√xt_ãx_co‹d
;

120 
width
 = 
døw_squ¨e
->
z
 - døw_squ¨e->
x
;

121 
height
 = 
døw_squ¨e
->
w
 - døw_squ¨e->
y
;

123 
À·
 = 
	`˛ampf
(0, 1, 0 - 
ãx_movemít
.
x
 / 
width
);

124 
right
 = 
	`˛ampf
(0, 1, 1 - 
ãx_movemít
.
x
 / 
width
);

125 
down
 = 
	`˛ampf
(0, 1, 0 - 
ãx_movemít
.
y
 / 
height
);

126 
up
 = 
	`˛ampf
(0, 1, 1 - 
ãx_movemít
.
y
 / 
height
);

128 
√xt_ãx_co‹d
.
x
 = 
	`ÀΩ
(
ãx_co‹d
->x,Åex_co‹d->
z
, 
À·
);

129 
√xt_ãx_co‹d
.
z
 = 
	`ÀΩ
(
ãx_co‹d
->
x
,Åex_co‹d->z, 
right
);

130 
√xt_ãx_co‹d
.
y
 = 
	`ÀΩ
(
ãx_co‹d
->y,Åex_co‹d->
w
, 
down
);

131 
√xt_ãx_co‹d
.
w
 = 
	`ÀΩ
(
ãx_co‹d
->
y
,Åex_co‹d->w, 
up
);

134 *
døw_squ¨e
 = 
√xt_døw_squ¨e
;

135 *
ãx_co‹d
 = 
√xt_ãx_co‹d
;

136 
	}
}

137 
	$døw_œyî_to_game•a˚
(
GameSèã
** 
game°©es
, 
I¡Paú
* 
off£ts
, 
numbî_of_game°©es
, 
S¥ôeWrôe
* 
öfo
, 
œyî_ödex
)

139 
i
 = 
œyî_ödex
;

141 
z
 = 0; z < 
numbî_of_game°©es
; z++)

143 
GameSèã
* 
game°©e
 = 
game°©es
[
z
];

144 
I¡Paú
 
off£t
 = 
off£ts
[
z
];

145 * 
cuºít_œyî
 = 
	`game°©e_gë_œyî
(
game°©e
,
œyî_ödex
);

146 
num_ñemíts_ö_game°©e
 = 
game°©e
->
w
 * game°©e->
h
;

147 
k
 = 0; k < 
num_ñemíts_ö_game°©e
; k++)

149 
ñe
 = 
cuºít_œyî
[
k
];

150 
ñe_image
 = 
	`ªsour˚_œyî_vÆue_to_œyî_•rôe_vÆue
(
ñe
, 
i
);

151 
öfo
->
©œs_˝u
[öfo->
num_døw
 + 
k
] = info->
©œs_m≠≥r
[
ñe_image
];

152 
I¡Paú
 
p
 = 
	`t2D
(
k
, 
game°©e
->
w
, game°©e->
h
);

153 
glm
::
vec3
 
å™¶©e
 = glm::
	`vec3
(
off£t
.
x
 + 
p
.x, off£t.
y
 +Ö.y, 
Z_POSITION_STARTING_LAYER
 + 
i
);

154 
öfo
->
m©rix_˝u
[öfo->
num_døw
 + 
k
] = 
	`m©h_å™¶©ed_m©rix
(
å™¶©e
);

155 
öfo
->
cﬁ‹_˝u
[öfo->
num_døw
+ 
k
] = 
glm
::
	`vec4
(1, 1, 1, 1);

157 
öfo
->
num_døw
 +
num_ñemíts_ö_game°©e
;

160 
	}
}

161 
	$døw_•rôe
(
©œs_ñe
, 
glm
::
m©4
 
posôi⁄
, 
S¥ôeWrôe
* 
wrôe_to
)

163 
glm
::
vec4
 
©œs_co‹ds
 = 
wrôe_to
->
©œs_m≠≥r
[
©œs_ñe
];

164 
d
 = 
wrôe_to
->
num_døw
;

165 
wrôe_to
->
©œs_˝u
[
d
] = 
©œs_co‹ds
;

166 
wrôe_to
->
m©rix_˝u
[
d
] = 
posôi⁄
;

167 
wrôe_to
->
cﬁ‹_˝u
[
d
] = 
glm
::
	`vec4
(1, 1, 1, 1);

168 
wrôe_to
->
num_døw
++;

169 
	}
}

173 
døw_põ˚_d©a
(
Põ˚D©a
 
põ˚_d©a
, 
glm
::
vec2
 
døw_°¨t
, 
S¥ôeWrôe
* 
symbﬁs
, glm::
vec3
 
globÆ_sˇÀ
 = glm::
	$vec3
(1,1,1))

176 
Àngth
 = 
CP_COUNT
;

177 
tŸÆ
 = 0;

178 
i
 = 0; i < 
Àngth
; i++)

179 
tŸÆ
 +
põ˚_d©a
.
powîs
[
i
];

181 
num_døwn
 = 0;

182 
width
 = (Ë
	`˚û
(
	`sqπ
(
tŸÆ
));

184 
j
 = 0; j < 
Àngth
; j++)

186 i‡(
põ˚_d©a
.
powîs
[
j
])

189 
to_døw
 = 
	`põ˚d©a_to_symbﬁ
((
CøãPowî
Ë
j
);

190 
glm
::
vec3
 
døw_posôi⁄
 = glm::
	`vec3
(
num_døwn
 % 
width
,Çum_drawn / width, 6);

191 
glm
::
vec3
 
sˇÀ
 = glm::
	`vec3
(1.0 / ()
width
, 1.0 / ()width, 1);

192 
sˇÀ
.
x
 -= 0.10f;

193 
sˇÀ
.
y
 -= 0.10f;

194 
døw_posôi⁄
.
x
 /()
width
;

195 
døw_posôi⁄
.
y
 /()
width
;

196 
døw_posôi⁄
.
x
 +
døw_°¨t
.x;

197 
døw_posôi⁄
.
y
 +
døw_°¨t
.y;

198 
døw_posôi⁄
.
x
 += 0.05f;

199 
døw_posôi⁄
.
y
 += 0.05f;

200 
num_døwn
++;

201 
glm
::
m©4
 
m©rix_døwn
 = 
	`m©h_å™¶©ed_sˇÀd_m©rix
(
døw_posôi⁄
, 
sˇÀ
 * 
globÆ_sˇÀ
);

202 
	`døw_•rôe
(
to_døw
, 
m©rix_døwn
, 
symbﬁs
);

206 
	}
};

208 
	$døw_game°©e_põ˚s
(
GameSèã
* 
game°©e
, 
I¡Paú
 
off£t
, 
AŒWrôe
* 
öfo
)

210 
GameSèã
* 
√xt
 = 
game°©e
;

211 
i
 = 0; i < 
√xt
->
w
 *Çext->
h
; i++)

212 i‡(
√xt
->
põ˚
[
i
] =
P_CRATE
)

214 
Põ˚D©a
 
põ˚_d©a
 = 
√xt
->põ˚_d©a[
i
];

215 
I¡Paú
 
°©e_off£t
 = 
off£t
;

216 
I¡Paú
 
grid_off£t
 = 
	`t2D
(
i
, 
√xt
->
w
,Çext->
h
);

217 
glm
::
vec2
 
døw_off£t
 = glm::
	`vec2
(
°©e_off£t
.
x
 + 
grid_off£t
.x, sèã_off£t.
y
 + grid_offset.y);

218 
	`døw_põ˚_d©a
(
põ˚_d©a
, 
døw_off£t
, 
öfo
->
symbﬁ
);

221 
	}
}

223 
	$døw_game•a˚
(
GameSèã
** 
game°©es
, 
I¡Paú
* 
off£ts
, 
numbî_of_game°©es
, 
AŒWrôe
* 
öfo
)

227 
	`døw_œyî_to_game•a˚
(
game°©es
, 
off£ts
, 
numbî_of_game°©es
, 
öfo
->
Êo‹
, 0);

228 
	`døw_œyî_to_game•a˚
(
game°©es
, 
off£ts
, 
numbî_of_game°©es
, 
öfo
->
põ˚
, 1);

230 
z
 = 0; z < 
numbî_of_game°©es
;z++)

232 
GameSèã
* 
√xt
 = 
game°©es
[
z
];

233 
I¡Paú
 
off£t
 = 
off£ts
[
z
];

234 
	`døw_game°©e_põ˚s
(
√xt
, 
off£t
, 
öfo
);

237 
	}
}

239 
	$døw_∑Àâe
(
I¡Paú
 
∑Àã_s¸ìn_°¨t
,

240 
GameS∑˚Camîa
 
ˇmîa_game
,

241 
VõwP‹tCamîa
 
ˇmîa_võwp‹t
,

242 
Edô‹UISèã
* 
ui_°©e
,

243 
∑Àã_Àngth
,

244 
Game°©eBrush
* 
∑Àã
,

245 
AŒWrôe
* 
œyî_døw
)

250 
glm
::
vec2
 
∑Àã_åue_°¨t
 = 
	`m©h_s¸ìn•a˚_to_game•a˚
(
∑Àã_s¸ìn_°¨t
, 
ˇmîa_game
, 
ˇmîa_võwp‹t
, 
ui_°©e
->
game_height_cuºít
);

251 
i
 = 0; i < 
∑Àã_Àngth
; i++)

253 i‡(
∑Àã
[
i
].
≠∂yFlo‹
)

255 
S¥ôeWrôe
* 
Êo‹
 = 
œyî_døw
->floor;

256 
ñe_image
 = 
	`ªsour˚_œyî_vÆue_to_œyî_•rôe_vÆue
(
∑Àã
[
i
].
Êo‹
, 
LN_FLOOR
);

257 
Êo‹
->
©œs_˝u
[Êo‹->
num_døw
] = flo‹->
©œs_m≠≥r
[
ñe_image
];

258 
Êo‹
->
m©rix_˝u
[Êo‹->
num_døw
] = 
	`m©h_å™¶©ed_m©rix
(
glm
::
	`vec3
(
∑Àã_åue_°¨t
.
x
 + 
i
,ÖÆëe_åue_°¨t.
y
,4));

259 
Êo‹
->
cﬁ‹_˝u
[Êo‹->
num_døw
] = 
glm
::
	`vec4
(1, 1, 1, 1);

260 
Êo‹
->
num_døw
++;

262 i‡(
∑Àã
[
i
].
≠∂yPõ˚
)

266 
S¥ôeWrôe
* 
põ˚
 = 
œyî_døw
->piece;

267 
ñe_image
 = 
	`ªsour˚_œyî_vÆue_to_œyî_•rôe_vÆue
(
∑Àã
[
i
].
põ˚
, 
LN_PIECE
);

268 
põ˚
->
©œs_˝u
[põ˚->
num_døw
] =Öõ˚->
©œs_m≠≥r
[
ñe_image
];

269 
põ˚
->
m©rix_˝u
[põ˚->
num_døw
] = 
	`m©h_å™¶©ed_m©rix
(
glm
::
	`vec3
(
∑Àã_åue_°¨t
.
x
 + 
i
,ÖÆëe_åue_°¨t.
y
, 5));

270 
põ˚
->
cﬁ‹_˝u
[põ˚->
num_døw
] = 
glm
::
	`vec4
(1, 1, 1, 1);

271 
põ˚
->
num_døw
++;

274 if(
∑Àã
[
i
].
≠∂yCøãPowî
)

277 
Põ˚D©a
 
põ˚_d©a
 = 
∑Àã
[
i
].piece_data;

278 
	`døw_põ˚_d©a
(
põ˚_d©a
,
glm
::
	`vec2
(
∑Àã_åue_°¨t
.
x
 + 
i
,∑Àã_åue_°¨t.
y
), 
œyî_døw
->
symbﬁ
, glm::
	`vec3
(1,1,1));

282 
	}
}

	@draw.h

1 #¥agm®
⁄˚


2 
	~"Anim©i⁄.h
"

3 
	~"Edô‹.h
"

4 
	~"Click.h
"

5 
	~"•rôe.h
"

6 
	~"ãxtuªAs£ts.h
"

10 
døw_œyî_to_game•a˚
(
GameSèã
** 
game°©es
, 
I¡Paú
* 
off£ts
, 
numbî_of_game°©es
, 
S¥ôeWrôe
* 
öfo
, 
œyî_ödex
);

11 
døw_game•a˚
(
GameSèã
** 
game°©es
, 
I¡Paú
* 
off£ts
, 
numbî_of_game°©es
, 
AŒWrôe
* 
öfo
);

12 
døw_game°©es_ouéöes_to_game•a˚
(

13 
GameSèã
** 
game°©es
,

14 
I¡Paú
* 
off£ts
,

15 
Àngth_fun˘i⁄_öput
,

16 
S¥ôeWrôe
* 
öfo
,

17 
ödex
);

18 
døw_∑Àâe
(
I¡Paú
 
∑Àã_s¸ìn_°¨t
,

19 
GameS∑˚Camîa
 
ˇmîa_game
,

20 
VõwP‹tCamîa
 
ˇmîa_võwp‹t
,

21 
Edô‹UISèã
* 
ui_°©e
,

22 
∑Àã_Àngth
,

23 
Game°©eBrush
* 
∑Àã
,

24 
AŒWrôe
* 
œyî_døw
);

25 
døw_bœck_box_ovî_s¸ìn
(
GameS∑˚Camîa
 
s¸ìn
, 
S¥ôeWrôe
* 
öfo
);

26 
døw_ouéöe_to_game•a˚
(
AABB
 
ouéöe
, 
S¥ôeWrôe
* 
öfo
);

27 
døw_buâ⁄_to_game•a˚
(
GameS∑˚Camîa
 
døw_¨ó
, 
S¥ôeWrôe
* 
ui_døw
, 
glm
::
vec4
 
cﬁ‹
 = glm::vec4(1,1,1,1));

28 
døw_ui_to_game•a˚
(
GameS∑˚Camîa
 
døw_¨ó
, 
ödex
, 
S¥ôeWrôe
* 
døw_öfo
, 
glm
::
vec4
 
cﬁ‹
 = glm::vec4(1, 1, 1, 1));

	@gui.h

1 #¥agm®
⁄˚


2 
	~<°rög
>

3 
	~"glm/glm.hµ
"

5 (*
	tgui_fun˘i⁄
)();

6 
	sGUI


11 
	sGUI_Text


13 
°d
::
°rög
 
ãxt
;

14 
glm
::
vec3
 
posôi⁄
;

15 
glm
::
vec2
 
sˇÀ
;

18 
	sGUI_Buâ⁄


20 
°d
::
°rög
 
ãxt
;

21 
glm
::
vec3
 
posôi⁄
;

22 
glm
::
vec2
 
sˇÀ
;

23 
glm
::
vec4
 
cﬁ‹
;

24 
gui_fun˘i⁄
 
fun˘i⁄
;

26 
	sGUI_Buâ⁄s


28 
°d
::
°rög
* 
ãxts
;

29 
glm
::
vec3
* 
posôi⁄s
;

30 
glm
::
vec2
 
sˇÀs
;

31 
glm
::
vec4
 
cﬁ‹s
;

32 
gui_fun˘i⁄
* 
fun˘i⁄s
;

34 
	sGUI_Míu


36 
Àngth
;

37 
buâ⁄_£À˘ed
;

38 
GUI_Buâ⁄
* 
buâ⁄s
;

41 
	$ˇlcuœã_buâ⁄_˛icked_ªad⁄ly
(
GUI_Buâ⁄
* 
buâ⁄s
, 
glm
::
vec2
 
mou£pos
)

44 
	}
}

	@sprite.cpp

1 
	~"•rôe.h
"

3 
S¥ôeWrôe
* 
	$•rôe_wrôe_make
(
GLuöt
 
©œs_ãxtuª
, 
Shadî
 
shadî
, 
Mem‹y
* 
≥rm™ít_mem‹y
, 
max_døw
, GLuöà
vîti˚s_VBO
, GLuöà
vîti˚s_EBO
, 
glm
::
vec4
* 
©œs_m≠≥r
)

5 
S¥ôeWrôe
* 
ªsu…
 = (S¥ôeWrôe*)
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (SpriteWrite));

6 
ªsu…
->
shadî
 = shader;

7 
ªsu…
->
©œs_ãxtuª
 =átlas_texture;

8 
ªsu…
->
max_døw
 = 0;

9 
ªsu…
->
num_døw
 = 0;

10 
ªsu…
->
©œs_˝u
 = (
glm
::
vec4
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
max_døw
 * (glm::vec4));

11 
ªsu…
->
©œs_m≠≥r
 =átlas_mapper;

12 
ªsu…
->
m©rix_˝u
 = (
glm
::
m©4
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
max_døw
 * (glm::mat4));

13 
ªsu…
->
cﬁ‹_˝u
 = (
glm
::
vec4
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
max_døw
 * (glm::vec4));

15 
	`shadî_u£
(
shadî
);

18 
	`glGíVîãxAºays
(1, &
ªsu…
->
VAO
);

19 
	`glBödVîãxAºay
(
ªsu…
->
VAO
);

21 
	`glGíVîãxAºays
(1, &
ªsu…
->
VAO
); 
CHK


22 
	`glBödVîãxAºay
(
ªsu…
->
VAO
); 
CHK


24 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
vîti˚s_VBO
); 
CHK


25 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vîti˚s_EBO
); 
CHK


27 
posôi⁄
 = 
	`glGëAâribLoˇti⁄
(
shadî
, "pos"); 
CHK


28 
	`glVîãxAâribPoöãr
(
posôi⁄
, 3, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)0); 
CHK


29 
	`glE«bÀVîãxAâribAºay
(
posôi⁄
); 
CHK


31 
ãxCo‹d
 = 
	`glGëAâribLoˇti⁄
(
shadî
, "öputTexCo‹d"); 
CHK


32 
	`glVîãxAâribPoöãr
(
ãxCo‹d
, 2, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)(3 * ())); 
CHK


33 
	`glE«bÀVîãxAâribAºay
(
ãxCo‹d
); 
CHK


35 
	`glGíBuf„rs
(1, &
ªsu…
->
m©rix_buf
); 
CHK


36 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
ªsu…
->
m©rix_buf
); 
CHK


37 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
m©4
Ë* 
max_døw
, 
NULL
, 
GL_DYNAMIC_DRAW
); 
CHK


39 
m©rixOff£t
 = 4;

40 
	`glVîãxAâribPoöãr
(
m©rixOff£t
, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)0); 
CHK


41 
	`glVîãxAâribPoöãr
(
m©rixOff£t
 + 1, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)(4 * ())); 
CHK


43 
	`glVîãxAâribPoöãr
(
m©rixOff£t
 + 2, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)(8 * ())); 
CHK


44 
	`glVîãxAâribPoöãr
(
m©rixOff£t
 + 3, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)(12 * ())); 
CHK


45 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
); 
CHK


46 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
 + 1); 
CHK


47 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
 + 2); 
CHK


48 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
 + 3); 
CHK


49 
	`glVîãxAâribDivis‹
(
m©rixOff£t
, 1); 
CHK


50 
	`glVîãxAâribDivis‹
(
m©rixOff£t
 + 1, 1); 
CHK


51 
	`glVîãxAâribDivis‹
(
m©rixOff£t
 + 2, 1); 
CHK


52 
	`glVîãxAâribDivis‹
(
m©rixOff£t
 + 3, 1); 
CHK


54 
	`glGíBuf„rs
(1, &
ªsu…
->
©œs_buf
); 
CHK


55 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
ªsu…
->
©œs_buf
); 
CHK


56 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
vec4
Ë* 
max_døw
, 
NULL
, 
GL_DYNAMIC_DRAW
); 
CHK


58 
©œsOff£t
 = 
	`glGëAâribLoˇti⁄
(
shadî
, "atlasCoord");

59 
	`glVîãxAâribPoöãr
(
©œsOff£t
, 4, 
GL_FLOAT
, 
Ál£
, 4 * (), (*)(0)); 
CHK


60 
	`glE«bÀVîãxAâribAºay
(
©œsOff£t
); 
CHK


61 
	`glVîãxAâribDivis‹
(
©œsOff£t
, 1); 
CHK


63 
	`glGíBuf„rs
(1, &
ªsu…
->
cﬁ‹_buf
); 
CHK


64 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
ªsu…
->
cﬁ‹_buf
); 
CHK


65 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
vec4
Ë* 
max_døw
, 
NULL
, 
GL_DYNAMIC_DRAW
); 
CHK


67 
cﬁ‹Off£t
 = 3;

68 
	`glVîãxAâribPoöãr
(
cﬁ‹Off£t
, 4, 
GL_FLOAT
, 
Ál£
, 4 * (), (*)(0)); 
CHK


69 
	`glE«bÀVîãxAâribAºay
(
cﬁ‹Off£t
); 
CHK


70 
	`glVîãxAâribDivis‹
(
cﬁ‹Off£t
, 1); 
CHK


71 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
vîti˚s_VBO
); 
CHK


72 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vîti˚s_EBO
); 
CHK


74  
ªsu…
;

75 
	}
}

77 
	$•rôe_wrôe_out
(
S¥ôeWrôe
* 
out
, 
glm
::
m©4
 
ˇmîa
)

79 
	`shadî_£t_unif‹m_m©4
(
out
->
shadî
, "võwProje˘i⁄M©rix", 
ˇmîa
);

81 
	`glU£Progøm
(
out
->
shadî
);

82 
	`glBödVîãxAºay
(
out
->
VAO
);

83 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
out
->
©œs_buf
);

84 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
vec4
Ë* 
out
->
num_døw
, out->
©œs_˝u
);

86 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
out
->
m©rix_buf
);

87 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
m©4
Ë* 
out
->
num_døw
, out->
m©rix_˝u
);

89 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
out
->
cﬁ‹_buf
);

90 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
vec4
Ë* 
out
->
num_døw
, out->
cﬁ‹_˝u
);

92 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
out
->
©œs_ãxtuª
);

93 
	`glDøwEÀmítsIn°™˚d
(
GL_TRIANGLES
, 6, 
GL_UNSIGNED_INT
, 0, 
out
->
num_døw
);

94 
	}
}

	@sprite.h

1 #¥agm®
⁄˚


3 #¥agm®
⁄˚


5 
	~"M©h.h
"

6 
	~"Shadî.h
"

7 
	~"Hñ≥rGL.h
"

8 
	~"TextDøw.h
"

11 
	tuöt
;

16 
	sS¥ôeWrôe
 {

17 
Shadî
 
	mshadî
;

18 
uöt
 
	m©œs_ãxtuª
;

20 
uöt
 
	mVAO
;

21 
uöt
 
	mm©rix_buf
;

22 
uöt
 
	m©œs_buf
;

23 
uöt
 
	mcﬁ‹_buf
;

25 
uöt
 
	mmax_døw
;

26 
uöt
 
	mnum_døw
;

27 
	mglm
::
vec4
* 
©œs_m≠≥r
;

28 
	mglm
::
vec4
* 
©œs_˝u
;

29 
	mglm
::
m©4
* 
m©rix_˝u
;

30 
	mglm
::
vec4
* 
cﬁ‹_˝u
;

32 
	sAŒWrôe


34 
S¥ôeWrôe
* 
	mÊo‹
;

35 
S¥ôeWrôe
* 
	mpõ˚
;

36 
S¥ôeWrôe
* 
	msymbﬁ
;

37 
S¥ôeWrôe
* 
	mui
;

38 
TextWrôe
* 
	mãxt
;

41 
S¥ôeWrôe
* 
•rôe_wrôe_make
(
GLuöt
 
©œs_ãxtuª
, 
Shadî
 
shadî
, 
Mem‹y
* 
≥rm™ít_mem‹y
, 
max_døw
, GLuöà
vîti˚s_VBO
, GLuöà
vîti˚s_EBO
, 
glm
::
vec4
* 
©œs_m≠≥r
);

43 
•rôe_wrôe_out
(
S¥ôeWrôe
* 
out
, 
glm
::
m©4
 
ˇmîa
);

	@stb_image.h

114 #i‚de‡
STBI_INCLUDE_STB_IMAGE_H


115 
	#STBI_INCLUDE_STB_IMAGE_H


	)

323 #i‚de‡
STBI_NO_STDIO


324 
	~<°dio.h
>

327 
	#STBI_VERSION
 1

	)

331 
	mSTBI_deÁu…
 = 0,

333 
	mSTBI_gªy
 = 1,

334 
	mSTBI_gªy_Æpha
 = 2,

335 
	mSTBI_rgb
 = 3,

336 
	mSTBI_rgb_Æpha
 = 4

339 
	~<°dlib.h
>

340 
	t°bi_uc
;

341 
	t°bi_us
;

343 #ifde‡
__˝lu•lus


347 #i‚de‡
STBIDEF


348 #ifde‡
STB_IMAGE_STATIC


349 
	#STBIDEF
 

	)

351 
	#STBIDEF
 

	)

366 (*
ªad
Ë(*
u£r
,*
d©a
,
size
);

367 (*
skù
Ë(*
u£r
,
n
);

368 (*
eof
Ë(*
u£r
);

369 } 
	t°bi_io_ˇŒbacks
;

376 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_‰om_mem‹y
 (°bi_u¯c⁄° *
buf„r
, 
Àn
 , *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

377 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
 , *
u£r
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

379 #i‚de‡
STBI_NO_STDIO


380 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd
 (c⁄° *
fûíame
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

381 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_‰om_fûe
 (
FILE
 *
f
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

385 #i‚de‡
STBI_NO_GIF


386 
STBIDEF
 
°bi_uc
 *
°bi_lﬂd_gif_‰om_mem‹y
(°bi_u¯c⁄° *
buf„r
, 
Àn
, **
dñays
, *
x
, *
y
, *
z
, *
comp
, 
ªq_comp
);

389 #ifde‡
STBI_WINDOWS_UTF8


390 
STBIDEF
 
°bi_c⁄vît_wch¨_to_utf8
(*
buf„r
, 
size_t
 
buf„æí
, c⁄° 
wch¨_t
* 
öput
);

398 
STBIDEF
 
°bi_us
 *
°bi_lﬂd_16_‰om_mem‹y
 (
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

399 
STBIDEF
 
°bi_us
 *
°bi_lﬂd_16_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

401 #i‚de‡
STBI_NO_STDIO


402 
STBIDEF
 
°bi_us
 *
°bi_lﬂd_16
 (c⁄° *
fûíame
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

403 
STBIDEF
 
°bi_us
 *
°bi_lﬂd_‰om_fûe_16
(
FILE
 *
f
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

410 #i‚de‡
STBI_NO_LINEAR


411 
STBIDEF
 *
°bi_lﬂdf_‰om_mem‹y
 (
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

412 
STBIDEF
 *
°bi_lﬂdf_‰om_ˇŒbacks
 (
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

414 #i‚de‡
STBI_NO_STDIO


415 
STBIDEF
 *
°bi_lﬂdf
 (c⁄° *
fûíame
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

416 
STBIDEF
 *
°bi_lﬂdf_‰om_fûe
 (
FILE
 *
f
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
);

420 #i‚de‡
STBI_NO_HDR


421 
STBIDEF
 
°bi_hdr_to_ldr_gamma
(
gamma
);

422 
STBIDEF
 
°bi_hdr_to_ldr_sˇÀ
(
sˇÀ
);

425 #i‚de‡
STBI_NO_LINEAR


426 
STBIDEF
 
°bi_ldr_to_hdr_gamma
(
gamma
);

427 
STBIDEF
 
°bi_ldr_to_hdr_sˇÀ
(
sˇÀ
);

431 
STBIDEF
 
°bi_is_hdr_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
);

432 
STBIDEF
 
°bi_is_hdr_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
);

433 #i‚de‡
STBI_NO_STDIO


434 
STBIDEF
 
°bi_is_hdr
 (c⁄° *
fûíame
);

435 
STBIDEF
 
°bi_is_hdr_‰om_fûe
(
FILE
 *
f
);

441 
STBIDEF
 c⁄° *
°bi_Áûuª_ªas⁄
 ();

444 
STBIDEF
 
°bi_image_‰ì
 (*
ªtvÆ_‰om_°bi_lﬂd
);

447 
STBIDEF
 
°bi_öfo_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
);

448 
STBIDEF
 
°bi_öfo_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
);

449 
STBIDEF
 
°bi_is_16_bô_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
);

450 
STBIDEF
 
°bi_is_16_bô_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
);

452 #i‚de‡
STBI_NO_STDIO


453 
STBIDEF
 
°bi_öfo
 (c⁄° *
fûíame
, *
x
, *
y
, *
comp
);

454 
STBIDEF
 
°bi_öfo_‰om_fûe
 (
FILE
 *
f
, *
x
, *
y
, *
comp
);

455 
STBIDEF
 
°bi_is_16_bô
 (c⁄° *
fûíame
);

456 
STBIDEF
 
°bi_is_16_bô_‰om_fûe
(
FILE
 *
f
);

464 
STBIDEF
 
°bi_£t_u≈ªmu…ùly_⁄_lﬂd
(
Êag_åue_if_should_u≈ªmu…ùly
);

468 
STBIDEF
 
°bi_c⁄vît_ùh⁄e_≤g_to_rgb
(
Êag_åue_if_should_c⁄vît
);

471 
STBIDEF
 
°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd
(
Êag_åue_if_should_Êù
);

476 
STBIDEF
 
°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd_thªad
(
Êag_åue_if_should_Êù
);

480 
STBIDEF
 *
°bi_zlib_decode_mÆloc_guesssize
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
);

481 
STBIDEF
 *
°bi_zlib_decode_mÆloc_guesssize_hódîÊag
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
, 
∑r£_hódî
);

482 
STBIDEF
 *
°bi_zlib_decode_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
);

483 
STBIDEF
 
°bi_zlib_decode_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
);

485 
STBIDEF
 *
°bi_zlib_decode_nohódî_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
);

486 
STBIDEF
 
°bi_zlib_decode_nohódî_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
);

489 #ifde‡
__˝lu•lus


498 #ifde‡
STB_IMAGE_IMPLEMENTATION


500 #i‡
deföed
(
STBI_ONLY_JPEG
Ë|| deföed(
STBI_ONLY_PNG
Ë|| deföed(
STBI_ONLY_BMP
) \

501 || 
deföed
(
STBI_ONLY_TGA
Ë|| deföed(
STBI_ONLY_GIF
Ë|| deföed(
STBI_ONLY_PSD
) \

502 || 
deföed
(
STBI_ONLY_HDR
Ë|| deföed(
STBI_ONLY_PIC
Ë|| deföed(
STBI_ONLY_PNM
) \

503 || 
	$deföed
(
STBI_ONLY_ZLIB
)

504 #i‚de‡
STBI_ONLY_JPEG


505 
	#STBI_NO_JPEG


	)

507 #i‚de‡
STBI_ONLY_PNG


508 
	#STBI_NO_PNG


	)

510 #i‚de‡
STBI_ONLY_BMP


511 
	#STBI_NO_BMP


	)

513 #i‚de‡
STBI_ONLY_PSD


514 
	#STBI_NO_PSD


	)

516 #i‚de‡
STBI_ONLY_TGA


517 
	#STBI_NO_TGA


	)

519 #i‚de‡
STBI_ONLY_GIF


520 
	#STBI_NO_GIF


	)

522 #i‚de‡
STBI_ONLY_HDR


523 
	#STBI_NO_HDR


	)

525 #i‚de‡
STBI_ONLY_PIC


526 
	#STBI_NO_PIC


	)

528 #i‚de‡
STBI_ONLY_PNM


529 
	#STBI_NO_PNM


	)

533 #i‡
	`deföed
(
STBI_NO_PNG
Ë&& !deföed(
STBI_SUPPORT_ZLIB
Ë&& !deföed(
STBI_NO_ZLIB
)

534 
	#STBI_NO_ZLIB


	)

538 
	~<°d¨g.h
>

539 
	~<°ddef.h
>

540 
	~<°dlib.h
>

541 
	~<°rög.h
>

542 
	~<limôs.h
>

544 #i‡!
	`deföed
(
STBI_NO_LINEAR
Ë|| !deföed(
STBI_NO_HDR
)

545 
	~<m©h.h
>

548 #i‚de‡
STBI_NO_STDIO


549 
	~<°dio.h
>

552 #i‚de‡
STBI_ASSERT


553 
	~<as£π.h
>

554 
	#STBI_ASSERT
(
x
Ë
	`as£π
(x)

	)

557 #ifde‡
__˝lu•lus


558 
	#STBI_EXTERN
 "C"

	)

560 
	#STBI_EXTERN
 

	)

564 #i‚de‡
_MSC_VER


565 #ifde‡
__˝lu•lus


566 
	#°bi_ölöe
 
ölöe


	)

568 
	#°bi_ölöe


	)

571 
	#°bi_ölöe
 
__f‹˚ölöe


	)

574 #i‚de‡
STBI_NO_THREAD_LOCALS


575 #i‡
	`deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

576 
	#STBI_THREAD_LOCAL
 
thªad_loˇl


	)

577 #ñi‡
	`deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

578 
	#STBI_THREAD_LOCAL
 
_Thªad_loˇl


	)

579 #ñi‡
	`deföed
(
__GNUC__
)

580 
	#STBI_THREAD_LOCAL
 
__thªad


	)

581 #ñi‡
	`deföed
(
_MSC_VER
)

582 
	#STBI_THREAD_LOCAL
 
	`__de˛•ec
(
thªad
)

	)

586 #ifde‡
_MSC_VER


587 
	t°bi__uöt16
;

588 sig√d 
	t°bi__öt16
;

589 
	t°bi__uöt32
;

590 sig√d 
	t°bi__öt32
;

592 
	~<°döt.h
>

593 
uöt16_t
 
	t°bi__uöt16
;

594 
öt16_t
 
	t°bi__öt16
;

595 
uöt32_t
 
	t°bi__uöt32
;

596 
öt32_t
 
	t°bi__öt32
;

600 
	tvÆid©e_uöt32
[(
°bi__uöt32
)==4 ? 1 : -1];

602 #ifde‡
_MSC_VER


603 
	#STBI_NOTUSED
(
v
Ë()(v)

	)

605 
	#STBI_NOTUSED
(
v
Ë()(v)

	)

608 #ifde‡
_MSC_VER


609 
	#STBI_HAS_LROTL


	)

612 #ifde‡
STBI_HAS_LROTL


613 
	#°bi_ÃŸ
(
x
,
y
Ë
	`_ÃŸl
(x,y)

	)

615 
	#°bi_ÃŸ
(
x
,
y
Ë(((xË<< (y)Ë| ((xË>> (32 - (y))))

	)

618 #i‡
	`deföed
(
STBI_MALLOC
Ë&& deföed(
STBI_FREE
Ë&& (deföed(
STBI_REALLOC
Ë|| deföed(
STBI_REALLOC_SIZED
))

620 #ñi‡!
	`deföed
(
STBI_MALLOC
Ë&& !deföed(
STBI_FREE
Ë&& !deföed(
STBI_REALLOC
Ë&& !deföed(
STBI_REALLOC_SIZED
)

626 #i‚de‡
STBI_MALLOC


627 
	#STBI_MALLOC
(
sz
Ë
	`mÆloc
(sz)

	)

628 
	#STBI_REALLOC
(
p
,
√wsz
Ë
	`ªÆloc
’,√wsz)

	)

629 
	#STBI_FREE
(
p
Ë
	`‰ì
’)

	)

632 #i‚de‡
STBI_REALLOC_SIZED


633 
	#STBI_REALLOC_SIZED
(
p
,
ﬁdsz
,
√wsz
Ë
	`STBI_REALLOC
’,√wsz)

	)

637 #i‡
	`deföed
(
__x86_64__
Ë|| deföed(
_M_X64
)

638 
	#STBI__X64_TARGET


	)

639 #ñi‡
	`deföed
(
__i386
Ë|| deföed(
_M_IX86
)

640 
	#STBI__X86_TARGET


	)

643 #i‡
	`deföed
(
__GNUC__
Ë&& deföed(
STBI__X86_TARGET
Ë&& !deföed(
__SSE2__
Ë&& !deföed(
STBI_NO_SIMD
)

651 
	#STBI_NO_SIMD


	)

654 #i‡
	`deföed
(
__MINGW32__
Ë&& deföed(
STBI__X86_TARGET
Ë&& !deföed(
STBI_MINGW_ENABLE_SSE2
Ë&& !deföed(
STBI_NO_SIMD
)

666 
	#STBI_NO_SIMD


	)

669 #i‡!
	`deföed
(
STBI_NO_SIMD
Ë&& (deföed(
STBI__X86_TARGET
Ë|| deföed(
STBI__X64_TARGET
))

670 
	#STBI_SSE2


	)

671 
	~<emmöåö.h
>

673 #ifde‡
_MSC_VER


675 #i‡
_MSC_VER
 >= 1400

676 
	~<öåö.h
>

677 
	$°bi__˝uid3
()

679 
öfo
[4];

680 
	`__˝uid
(
öfo
,1);

681  
öfo
[3];

682 
	}
}

684 
	$°bi__˝uid3
()

686 
ªs
;

687 
__asm
 {

688 
mov
 
óx
,1

689 
˝uid


690 
mov
 
ªs
,
edx


692  
ªs
;

693 
	}
}

696 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ë
	`__de˛•ec
(
	`Æign
(16)Ëty≥ 
	)
name

698 #i‡!
deföed
(
STBI_NO_JPEG
Ë&& deföed(
STBI_SSE2
)

699 
	$°bi__s£2_avaûabÀ
()

701 
öfo3
 = 
	`°bi__˝uid3
();

702  ((
öfo3
 >> 26) & 1) != 0;

703 
	}
}

707 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ëty≥Çamê
	`__©åibuã__
((
	`Æig√d
(16)))

	)

709 #i‡!
deföed
(
STBI_NO_JPEG
Ë&& deföed(
STBI_SSE2
)

710 
	$°bi__s£2_avaûabÀ
()

716 
	}
}

723 #i‡
deföed
(
STBI_NO_SIMD
Ë&& deföed(
STBI_NEON
)

724 #unde‡
STBI_NEON


727 #ifde‡
STBI_NEON


728 
	~<¨m_√⁄.h
>

730 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ëty≥Çamê
	`__©åibuã__
((
	`Æig√d
(16)))

	)

733 #i‚de‡
STBI_SIMD_ALIGN


734 
	#STBI_SIMD_ALIGN
(
ty≥
, 
«me
Ëty≥ 
	)
name

745 
°bi__uöt32
 
	mimg_x
, 
	mimg_y
;

746 
	mimg_n
, 
	mimg_out_n
;

748 
°bi_io_ˇŒbacks
 
	mio
;

749 *
	mio_u£r_d©a
;

751 
	mªad_‰om_ˇŒbacks
;

752 
	mbuÊí
;

753 
°bi_uc
 
	mbuf„r_°¨t
[128];

755 
°bi_uc
 *
	mimg_buf„r
, *
	mimg_buf„r_íd
;

756 
°bi_uc
 *
	mimg_buf„r_‹igöÆ
, *
	mimg_buf„r_‹igöÆ_íd
;

757 } 
	t°bi__c⁄ãxt
;

760 
°bi__ªfûl_buf„r
(
°bi__c⁄ãxt
 *
s
);

763 
	$°bi__°¨t_mem
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 c⁄° *
buf„r
, 
Àn
)

765 
s
->
io
.
ªad
 = 
NULL
;

766 
s
->
ªad_‰om_ˇŒbacks
 = 0;

767 
s
->
img_buf„r
 = s->
img_buf„r_‹igöÆ
 = (
°bi_uc
 *Ë
buf„r
;

768 
s
->
img_buf„r_íd
 = s->
img_buf„r_‹igöÆ_íd
 = (
°bi_uc
 *Ë
buf„r
+
Àn
;

769 
	}
}

772 
	$°bi__°¨t_ˇŒbacks
(
°bi__c⁄ãxt
 *
s
, 
°bi_io_ˇŒbacks
 *
c
, *
u£r
)

774 
s
->
io
 = *
c
;

775 
s
->
io_u£r_d©a
 = 
u£r
;

776 
s
->
buÊí
 = (s->
buf„r_°¨t
);

777 
s
->
ªad_‰om_ˇŒbacks
 = 1;

778 
s
->
img_buf„r_‹igöÆ
 = s->
buf„r_°¨t
;

779 
	`°bi__ªfûl_buf„r
(
s
);

780 
s
->
img_buf„r_‹igöÆ_íd
 = s->
img_buf„r_íd
;

781 
	}
}

783 #i‚de‡
STBI_NO_STDIO


785 
	$°bi__°dio_ªad
(*
u£r
, *
d©a
, 
size
)

787  (Ë
	`‰ód
(
d©a
,1,
size
,(
FILE
*Ë
u£r
);

788 
	}
}

790 
	$°bi__°dio_skù
(*
u£r
, 
n
)

792 
	`f£ek
((
FILE
*Ë
u£r
, 
n
, 
SEEK_CUR
);

793 
	}
}

795 
	$°bi__°dio_eof
(*
u£r
)

797  
	`„of
((
FILE
*Ë
u£r
);

798 
	}
}

800 
°bi_io_ˇŒbacks
 
	g°bi__°dio_ˇŒbacks
 =

802 
°bi__°dio_ªad
,

803 
°bi__°dio_skù
,

804 
°bi__°dio_eof
,

807 
	$°bi__°¨t_fûe
(
°bi__c⁄ãxt
 *
s
, 
FILE
 *
f
)

809 
	`°bi__°¨t_ˇŒbacks
(
s
, &
°bi__°dio_ˇŒbacks
, (*Ë
f
);

810 
	}
}

816 
	$°bi__ªwöd
(
°bi__c⁄ãxt
 *
s
)

821 
s
->
img_buf„r
 = s->
img_buf„r_‹igöÆ
;

822 
s
->
img_buf„r_íd
 = s->
img_buf„r_‹igöÆ_íd
;

823 
	}
}

827 
	mSTBI_ORDER_RGB
,

828 
	mSTBI_ORDER_BGR


833 
	mbôs_≥r_ch™√l
;

834 
	mnum_ch™√ls
;

835 
	mch™√l_‹dî
;

836 } 
	t°bi__ªsu…_öfo
;

838 #i‚de‡
STBI_NO_JPEG


839 
°bi__j≥g_ã°
(
°bi__c⁄ãxt
 *
s
);

840 *
°bi__j≥g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

841 
°bi__j≥g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

844 #i‚de‡
STBI_NO_PNG


845 
°bi__≤g_ã°
(
°bi__c⁄ãxt
 *
s
);

846 *
°bi__≤g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

847 
°bi__≤g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

848 
°bi__≤g_is16
(
°bi__c⁄ãxt
 *
s
);

851 #i‚de‡
STBI_NO_BMP


852 
°bi__bmp_ã°
(
°bi__c⁄ãxt
 *
s
);

853 *
°bi__bmp_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

854 
°bi__bmp_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

857 #i‚de‡
STBI_NO_TGA


858 
°bi__tga_ã°
(
°bi__c⁄ãxt
 *
s
);

859 *
°bi__tga_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

860 
°bi__tga_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

863 #i‚de‡
STBI_NO_PSD


864 
°bi__psd_ã°
(
°bi__c⁄ãxt
 *
s
);

865 *
°bi__psd_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
, 
bpc
);

866 
°bi__psd_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

867 
°bi__psd_is16
(
°bi__c⁄ãxt
 *
s
);

870 #i‚de‡
STBI_NO_HDR


871 
°bi__hdr_ã°
(
°bi__c⁄ãxt
 *
s
);

872 *
°bi__hdr_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

873 
°bi__hdr_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

876 #i‚de‡
STBI_NO_PIC


877 
°bi__pic_ã°
(
°bi__c⁄ãxt
 *
s
);

878 *
°bi__pic_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

879 
°bi__pic_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

882 #i‚de‡
STBI_NO_GIF


883 
°bi__gif_ã°
(
°bi__c⁄ãxt
 *
s
);

884 *
°bi__gif_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

885 *
°bi__lﬂd_gif_maö
(
°bi__c⁄ãxt
 *
s
, **
dñays
, *
x
, *
y
, *
z
, *
comp
, 
ªq_comp
);

886 
°bi__gif_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

889 #i‚de‡
STBI_NO_PNM


890 
°bi__≤m_ã°
(
°bi__c⁄ãxt
 *
s
);

891 *
°bi__≤m_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
);

892 
°bi__≤m_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
);

896 #ifde‡
STBI_THREAD_LOCAL


897 
	gSTBI_THREAD_LOCAL


899 c⁄° *
	g°bi__g_Áûuª_ªas⁄
;

901 
STBIDEF
 c⁄° *
	$°bi_Áûuª_ªas⁄
()

903  
°bi__g_Áûuª_ªas⁄
;

904 
	}
}

906 #i‚de‡
STBI_NO_FAILURE_STRINGS


907 
	$°bi__îr
(c⁄° *
°r
)

909 
°bi__g_Áûuª_ªas⁄
 = 
°r
;

911 
	}
}

914 *
	$°bi__mÆloc
(
size_t
 
size
)

916  
	`STBI_MALLOC
(
size
);

917 
	}
}

931 
	$°bi__addsizes_vÆid
(
a
, 
b
)

933 i‡(
b
 < 0)  0;

938  
a
 <
INT_MAX
 - 
b
;

939 
	}
}

943 
	$°bi__mul2sizes_vÆid
(
a
, 
b
)

945 i‡(
a
 < 0 || 
b
 < 0)  0;

946 i‡(
b
 == 0)  1;

948  
a
 <
INT_MAX
/
b
;

949 
	}
}

951 #i‡!
deföed
(
STBI_NO_JPEG
Ë|| !deföed(
STBI_NO_PNG
Ë|| !deföed(
STBI_NO_TGA
Ë|| !deföed(
STBI_NO_HDR
)

953 
	$°bi__mad2sizes_vÆid
(
a
, 
b
, 
add
)

955  
	`°bi__mul2sizes_vÆid
(
a
, 
b
Ë&& 
	`°bi__addsizes_vÆid
◊*b, 
add
);

956 
	}
}

960 
	$°bi__mad3sizes_vÆid
(
a
, 
b
, 
c
, 
add
)

962  
	`°bi__mul2sizes_vÆid
(
a
, 
b
Ë&& stbi__mul2sizes_vÆid◊*b, 
c
) &&

963 
	`°bi__addsizes_vÆid
(
a
*
b
*
c
, 
add
);

964 
	}
}

967 #i‡!
deföed
(
STBI_NO_LINEAR
Ë|| !deföed(
STBI_NO_HDR
)

968 
	$°bi__mad4sizes_vÆid
(
a
, 
b
, 
c
, 
d
, 
add
)

970  
	`°bi__mul2sizes_vÆid
(
a
, 
b
Ë&& stbi__mul2sizes_vÆid◊*b, 
c
) &&

971 
	`°bi__mul2sizes_vÆid
(
a
*
b
*
c
, 
d
Ë&& 
	`°bi__addsizes_vÆid
◊*b*c*d, 
add
);

972 
	}
}

975 #i‡!
deföed
(
STBI_NO_JPEG
Ë|| !deföed(
STBI_NO_PNG
Ë|| !deföed(
STBI_NO_TGA
Ë|| !deföed(
STBI_NO_HDR
)

977 *
	$°bi__mÆloc_mad2
(
a
, 
b
, 
add
)

979 i‡(!
	`°bi__mad2sizes_vÆid
(
a
, 
b
, 
add
)Ë 
NULL
;

980  
	`°bi__mÆloc
(
a
*
b
 + 
add
);

981 
	}
}

984 *
	$°bi__mÆloc_mad3
(
a
, 
b
, 
c
, 
add
)

986 i‡(!
	`°bi__mad3sizes_vÆid
(
a
, 
b
, 
c
, 
add
)Ë 
NULL
;

987  
	`°bi__mÆloc
(
a
*
b
*
c
 + 
add
);

988 
	}
}

990 #i‡!
deföed
(
STBI_NO_LINEAR
Ë|| !deföed(
STBI_NO_HDR
)

991 *
	$°bi__mÆloc_mad4
(
a
, 
b
, 
c
, 
d
, 
add
)

993 i‡(!
	`°bi__mad4sizes_vÆid
(
a
, 
b
, 
c
, 
d
, 
add
)Ë 
NULL
;

994  
	`°bi__mÆloc
(
a
*
b
*
c
*
d
 + 
add
);

995 
	}
}

1002 #ifde‡
STBI_NO_FAILURE_STRINGS


1003 
	#°bi__îr
(
x
,
y
Ë0

	)

1004 #ñi‡
deföed
(
STBI_FAILURE_USERMSG
)

1005 
	#°bi__îr
(
x
,
y
Ë
	`°bi__îr
(y)

	)

1007 
	#°bi__îr
(
x
,
y
Ë
	`°bi__îr
(x)

	)

1010 
	#°bi__îΩf
(
x
,
y
Ë((*)(
size_t
Ë(
	`°bi__îr
(x,y)?
NULL
:NULL))

	)

1011 
	#°bi__îΩuc
(
x
,
y
Ë((*)(
size_t
Ë(
	`°bi__îr
(x,y)?
NULL
:NULL))

	)

1013 
STBIDEF
 
	$°bi_image_‰ì
(*
ªtvÆ_‰om_°bi_lﬂd
)

1015 
	`STBI_FREE
(
ªtvÆ_‰om_°bi_lﬂd
);

1016 
	}
}

1018 #i‚de‡
STBI_NO_LINEAR


1019 *
°bi__ldr_to_hdr
(
°bi_uc
 *
d©a
, 
x
, 
y
, 
comp
);

1022 #i‚de‡
STBI_NO_HDR


1023 
°bi_uc
 *
°bi__hdr_to_ldr
(*
d©a
, 
x
, 
y
, 
comp
);

1026 
	g°bi__vîtiˇŒy_Êù_⁄_lﬂd_globÆ
 = 0;

1028 
STBIDEF
 
	$°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd
(
Êag_åue_if_should_Êù
)

1030 
°bi__vîtiˇŒy_Êù_⁄_lﬂd_globÆ
 = 
Êag_åue_if_should_Êù
;

1031 
	}
}

1033 #i‚de‡
STBI_THREAD_LOCAL


1034 
	#°bi__vîtiˇŒy_Êù_⁄_lﬂd
 
°bi__vîtiˇŒy_Êù_⁄_lﬂd_globÆ


	)

1036 
STBI_THREAD_LOCAL
 
	g°bi__vîtiˇŒy_Êù_⁄_lﬂd_loˇl
, 
	g°bi__vîtiˇŒy_Êù_⁄_lﬂd_£t
;

1038 
STBIDEF
 
	$°bi_£t_Êù_vîtiˇŒy_⁄_lﬂd_thªad
(
Êag_åue_if_should_Êù
)

1040 
°bi__vîtiˇŒy_Êù_⁄_lﬂd_loˇl
 = 
Êag_åue_if_should_Êù
;

1041 
°bi__vîtiˇŒy_Êù_⁄_lﬂd_£t
 = 1;

1042 
	}
}

1044 
	#°bi__vîtiˇŒy_Êù_⁄_lﬂd
 (
°bi__vîtiˇŒy_Êù_⁄_lﬂd_£t
 \

1045 ? 
°bi__vîtiˇŒy_Êù_⁄_lﬂd_loˇl
 \

1046 : 
°bi__vîtiˇŒy_Êù_⁄_lﬂd_globÆ
)

	)

1049 *
	$°bi__lﬂd_maö
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
, 
bpc
)

1051 
	`mem£t
(
ri
, 0, (*ri));

1052 
ri
->
bôs_≥r_ch™√l
 = 8;

1053 
ri
->
ch™√l_‹dî
 = 
STBI_ORDER_RGB
;

1054 
ri
->
num_ch™√ls
 = 0;

1056 #i‚de‡
STBI_NO_JPEG


1057 i‡(
	`°bi__j≥g_ã°
(
s
)Ë 
	`°bi__j≥g_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1059 #i‚de‡
STBI_NO_PNG


1060 i‡(
	`°bi__≤g_ã°
(
s
)Ë 
	`°bi__≤g_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1062 #i‚de‡
STBI_NO_BMP


1063 i‡(
	`°bi__bmp_ã°
(
s
)Ë 
	`°bi__bmp_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1065 #i‚de‡
STBI_NO_GIF


1066 i‡(
	`°bi__gif_ã°
(
s
)Ë 
	`°bi__gif_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1068 #i‚de‡
STBI_NO_PSD


1069 i‡(
	`°bi__psd_ã°
(
s
)Ë 
	`°bi__psd_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
, 
bpc
);

1071 
	`STBI_NOTUSED
(
bpc
);

1073 #i‚de‡
STBI_NO_PIC


1074 i‡(
	`°bi__pic_ã°
(
s
)Ë 
	`°bi__pic_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1076 #i‚de‡
STBI_NO_PNM


1077 i‡(
	`°bi__≤m_ã°
(
s
)Ë 
	`°bi__≤m_lﬂd
(s,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1080 #i‚de‡
STBI_NO_HDR


1081 i‡(
	`°bi__hdr_ã°
(
s
)) {

1082 *
hdr
 = 
	`°bi__hdr_lﬂd
(
s
, 
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1083  
	`°bi__hdr_to_ldr
(
hdr
, *
x
, *
y
, 
ªq_comp
 ?Ñeq_com∞: *
comp
);

1087 #i‚de‡
STBI_NO_TGA


1089 i‡(
	`°bi__tga_ã°
(
s
))

1090  
	`°bi__tga_lﬂd
(
s
,
x
,
y
,
comp
,
ªq_comp
, 
ri
);

1093  
	`°bi__îΩuc
("unknown imageÅype", "ImageÇot ofány knownÅype, or corrupt");

1094 
	}
}

1096 
°bi_uc
 *
	$°bi__c⁄vît_16_to_8
(
°bi__uöt16
 *
‹ig
, 
w
, 
h
, 
ch™√ls
)

1098 
i
;

1099 
img_Àn
 = 
w
 * 
h
 * 
ch™√ls
;

1100 
°bi_uc
 *
ªdu˚d
;

1102 
ªdu˚d
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
img_Àn
);

1103 i‡(
ªdu˚d
 =
NULL
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

1105 
i
 = 0; i < 
img_Àn
; ++i)

1106 
ªdu˚d
[
i
] = (
°bi_uc
)((
‹ig
[i] >> 8) & 0xFF);

1108 
	`STBI_FREE
(
‹ig
);

1109  
ªdu˚d
;

1110 
	}
}

1112 
°bi__uöt16
 *
	$°bi__c⁄vît_8_to_16
(
°bi_uc
 *
‹ig
, 
w
, 
h
, 
ch™√ls
)

1114 
i
;

1115 
img_Àn
 = 
w
 * 
h
 * 
ch™√ls
;

1116 
°bi__uöt16
 *
íœrged
;

1118 
íœrged
 = (
°bi__uöt16
 *Ë
	`°bi__mÆloc
(
img_Àn
*2);

1119 i‡(
íœrged
 =
NULL
Ë (
°bi__uöt16
 *Ë
	`°bi__îΩuc
("outofmem", "Out of memory");

1121 
i
 = 0; i < 
img_Àn
; ++i)

1122 
íœrged
[
i
] = (
°bi__uöt16
)((
‹ig
[i] << 8) + orig[i]);

1124 
	`STBI_FREE
(
‹ig
);

1125  
íœrged
;

1126 
	}
}

1128 
	$°bi__vîtiˇl_Êù
(*
image
, 
w
, 
h
, 
byãs_≥r_pixñ
)

1130 
row
;

1131 
size_t
 
byãs_≥r_row
 = (size_t)
w
 * 
byãs_≥r_pixñ
;

1132 
°bi_uc
 
ãmp
[2048];

1133 
°bi_uc
 *
byãs
 = (°bi_u¯*)
image
;

1135 
row
 = 0;Ñow < (
h
>>1);Ñow++) {

1136 
°bi_uc
 *
row0
 = 
byãs
 + 
row
*
byãs_≥r_row
;

1137 
°bi_uc
 *
row1
 = 
byãs
 + (
h
 - 
row
 - 1)*
byãs_≥r_row
;

1139 
size_t
 
byãs_À·
 = 
byãs_≥r_row
;

1140 
byãs_À·
) {

1141 
size_t
 
byãs_c›y
 = (
byãs_À·
 < (
ãmp
)) ? bytes_left : (temp);

1142 
	`mem˝y
(
ãmp
, 
row0
, 
byãs_c›y
);

1143 
	`mem˝y
(
row0
, 
row1
, 
byãs_c›y
);

1144 
	`mem˝y
(
row1
, 
ãmp
, 
byãs_c›y
);

1145 
row0
 +
byãs_c›y
;

1146 
row1
 +
byãs_c›y
;

1147 
byãs_À·
 -
byãs_c›y
;

1150 
	}
}

1152 #i‚de‡
STBI_NO_GIF


1153 
	$°bi__vîtiˇl_Êù_¶i˚s
(*
image
, 
w
, 
h
, 
z
, 
byãs_≥r_pixñ
)

1155 
¶i˚
;

1156 
¶i˚_size
 = 
w
 * 
h
 * 
byãs_≥r_pixñ
;

1158 
°bi_uc
 *
byãs
 = (°bi_u¯*)
image
;

1159 
¶i˚
 = 0; sli˚ < 
z
; ++slice) {

1160 
	`°bi__vîtiˇl_Êù
(
byãs
, 
w
, 
h
, 
byãs_≥r_pixñ
);

1161 
byãs
 +
¶i˚_size
;

1163 
	}
}

1166 *
	$°bi__lﬂd_™d_po°¥o˚ss_8bô
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1168 
°bi__ªsu…_öfo
 
ri
;

1169 *
ªsu…
 = 
	`°bi__lﬂd_maö
(
s
, 
x
, 
y
, 
comp
, 
ªq_comp
, &
ri
, 8);

1171 i‡(
ªsu…
 =
NULL
)

1172  
NULL
;

1174 i‡(
ri
.
bôs_≥r_ch™√l
 != 8) {

1175 
	`STBI_ASSERT
(
ri
.
bôs_≥r_ch™√l
 == 16);

1176 
ªsu…
 = 
	`°bi__c⁄vît_16_to_8
((
°bi__uöt16
 *Ëªsu…, *
x
, *
y
, 
ªq_comp
 =0 ? *
comp
 :Ñeq_comp);

1177 
ri
.
bôs_≥r_ch™√l
 = 8;

1182 i‡(
°bi__vîtiˇŒy_Êù_⁄_lﬂd
) {

1183 
ch™√ls
 = 
ªq_comp
 ?Ñeq_com∞: *
comp
;

1184 
	`°bi__vîtiˇl_Êù
(
ªsu…
, *
x
, *
y
, 
ch™√ls
 * (
°bi_uc
));

1187  (*Ë
ªsu…
;

1188 
	}
}

1190 
°bi__uöt16
 *
	$°bi__lﬂd_™d_po°¥o˚ss_16bô
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1192 
°bi__ªsu…_öfo
 
ri
;

1193 *
ªsu…
 = 
	`°bi__lﬂd_maö
(
s
, 
x
, 
y
, 
comp
, 
ªq_comp
, &
ri
, 16);

1195 i‡(
ªsu…
 =
NULL
)

1196  
NULL
;

1198 i‡(
ri
.
bôs_≥r_ch™√l
 != 16) {

1199 
	`STBI_ASSERT
(
ri
.
bôs_≥r_ch™√l
 == 8);

1200 
ªsu…
 = 
	`°bi__c⁄vît_8_to_16
((
°bi_uc
 *Ëªsu…, *
x
, *
y
, 
ªq_comp
 =0 ? *
comp
 :Ñeq_comp);

1201 
ri
.
bôs_≥r_ch™√l
 = 16;

1207 i‡(
°bi__vîtiˇŒy_Êù_⁄_lﬂd
) {

1208 
ch™√ls
 = 
ªq_comp
 ?Ñeq_com∞: *
comp
;

1209 
	`°bi__vîtiˇl_Êù
(
ªsu…
, *
x
, *
y
, 
ch™√ls
 * (
°bi__uöt16
));

1212  (
°bi__uöt16
 *Ë
ªsu…
;

1213 
	}
}

1215 #i‡!
deföed
(
STBI_NO_HDR
Ë&& !deföed(
STBI_NO_LINEAR
)

1216 
	$°bi__Êﬂt_po°¥o˚ss
(*
ªsu…
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1218 i‡(
°bi__vîtiˇŒy_Êù_⁄_lﬂd
 && 
ªsu…
 !
NULL
) {

1219 
ch™√ls
 = 
ªq_comp
 ?Ñeq_com∞: *
comp
;

1220 
	`°bi__vîtiˇl_Êù
(
ªsu…
, *
x
, *
y
, 
ch™√ls
 * ());

1222 
	}
}

1225 #i‚de‡
STBI_NO_STDIO


1227 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
STBI_WINDOWS_UTF8
)

1228 
STBI_EXTERN
 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`Mu…iByãToWideCh¨
(
˝
, 
Êags
, c⁄° *
°r
, 
cbmb
, 
wch¨_t
 *
wide°r
, 
cchwide
);

1229 
STBI_EXTERN
 
	$__de˛•ec
(
dŒimp‹t
Ë
__°dˇŒ
 
	`WideCh¨ToMu…iByã
(
˝
, 
Êags
, c⁄° 
wch¨_t
 *
wide°r
, 
cchwide
, *
°r
, 
cbmb
, c⁄° *
defch¨
, *
u£d_deÁu…
);

1232 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
STBI_WINDOWS_UTF8
)

1233 
STBIDEF
 
	$°bi_c⁄vît_wch¨_to_utf8
(*
buf„r
, 
size_t
 
buf„æí
, c⁄° 
wch¨_t
* 
öput
)

1235  
	`WideCh¨ToMu…iByã
(65001 , 0, 
öput
, -1, 
buf„r
, (Ë
buf„æí
, 
NULL
, NULL);

1236 
	}
}

1239 
FILE
 *
	$°bi__f›í
(c⁄° *
fûíame
, c⁄° *
mode
)

1241 
FILE
 *
f
;

1242 #i‡
	`deföed
(
_MSC_VER
Ë&& deföed(
STBI_WINDOWS_UTF8
)

1243 
wch¨_t
 
wMode
[64];

1244 
wch¨_t
 
wFûíame
[1024];

1245 i‡(0 =
	`Mu…iByãToWideCh¨
(65001 , 0, 
fûíame
, -1, 
wFûíame
, (wFilename)))

1248 i‡(0 =
	`Mu…iByãToWideCh¨
(65001 , 0, 
mode
, -1, 
wMode
, (wMode)))

1251 #i‡
_MSC_VER
 >= 1400

1252 i‡(0 !
	`_wf›í_s
(&
f
, 
wFûíame
, 
wMode
))

1253 
f
 = 0;

1255 
f
 = 
	`_wf›í
(
wFûíame
, 
wMode
);

1258 #ñi‡
	`deföed
(
_MSC_VER
) && _MSC_VER >= 1400

1259 i‡(0 !
	`f›í_s
(&
f
, 
fûíame
, 
mode
))

1260 
f
=0;

1262 
f
 = 
	`f›í
(
fûíame
, 
mode
);

1264  
f
;

1265 
	}
}

1268 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1270 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1271 *
ªsu…
;

1272 i‡(!
f
Ë 
	`°bi__îΩuc
("can't fopen", "UnableÅo open file");

1273 
ªsu…
 = 
	`°bi_lﬂd_‰om_fûe
(
f
,
x
,
y
,
comp
,
ªq_comp
);

1274 
	`f˛o£
(
f
);

1275  
ªsu…
;

1276 
	}
}

1278 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_‰om_fûe
(
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1280 *
ªsu…
;

1281 
°bi__c⁄ãxt
 
s
;

1282 
	`°bi__°¨t_fûe
(&
s
,
f
);

1283 
ªsu…
 = 
	`°bi__lﬂd_™d_po°¥o˚ss_8bô
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1284 i‡(
ªsu…
) {

1286 
	`f£ek
(
f
, - (Ë(
s
.
img_buf„r_íd
 - s.
img_buf„r
), 
SEEK_CUR
);

1288  
ªsu…
;

1289 
	}
}

1291 
STBIDEF
 
°bi__uöt16
 *
	$°bi_lﬂd_‰om_fûe_16
(
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1293 
°bi__uöt16
 *
ªsu…
;

1294 
°bi__c⁄ãxt
 
s
;

1295 
	`°bi__°¨t_fûe
(&
s
,
f
);

1296 
ªsu…
 = 
	`°bi__lﬂd_™d_po°¥o˚ss_16bô
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1297 i‡(
ªsu…
) {

1299 
	`f£ek
(
f
, - (Ë(
s
.
img_buf„r_íd
 - s.
img_buf„r
), 
SEEK_CUR
);

1301  
ªsu…
;

1302 
	}
}

1304 
STBIDEF
 
°bi_us
 *
	$°bi_lﬂd_16
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1306 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1307 
°bi__uöt16
 *
ªsu…
;

1308 i‡(!
f
Ë (
°bi_us
 *Ë
	`°bi__îΩuc
("can't fopen", "UnableÅo open file");

1309 
ªsu…
 = 
	`°bi_lﬂd_‰om_fûe_16
(
f
,
x
,
y
,
comp
,
ªq_comp
);

1310 
	`f˛o£
(
f
);

1311  
ªsu…
;

1312 
	}
}

1317 
STBIDEF
 
°bi_us
 *
	$°bi_lﬂd_16_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
)

1319 
°bi__c⁄ãxt
 
s
;

1320 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1321  
	`°bi__lﬂd_™d_po°¥o˚ss_16bô
(&
s
,
x
,
y
,
ch™√ls_ö_fûe
,
desúed_ch™√ls
);

1322 
	}
}

1324 
STBIDEF
 
°bi_us
 *
	$°bi_lﬂd_16_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
ch™√ls_ö_fûe
, 
desúed_ch™√ls
)

1326 
°bi__c⁄ãxt
 
s
;

1327 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *)
˛bk
, 
u£r
);

1328  
	`°bi__lﬂd_™d_po°¥o˚ss_16bô
(&
s
,
x
,
y
,
ch™√ls_ö_fûe
,
desúed_ch™√ls
);

1329 
	}
}

1331 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1333 
°bi__c⁄ãxt
 
s
;

1334 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1335  
	`°bi__lﬂd_™d_po°¥o˚ss_8bô
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1336 
	}
}

1338 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1340 
°bi__c⁄ãxt
 
s
;

1341 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
˛bk
, 
u£r
);

1342  
	`°bi__lﬂd_™d_po°¥o˚ss_8bô
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1343 
	}
}

1345 #i‚de‡
STBI_NO_GIF


1346 
STBIDEF
 
°bi_uc
 *
	$°bi_lﬂd_gif_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, **
dñays
, *
x
, *
y
, *
z
, *
comp
, 
ªq_comp
)

1348 *
ªsu…
;

1349 
°bi__c⁄ãxt
 
s
;

1350 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1352 
ªsu…
 = (*Ë
	`°bi__lﬂd_gif_maö
(&
s
, 
dñays
, 
x
, 
y
, 
z
, 
comp
, 
ªq_comp
);

1353 i‡(
°bi__vîtiˇŒy_Êù_⁄_lﬂd
) {

1354 
	`°bi__vîtiˇl_Êù_¶i˚s
–
ªsu…
, *
x
, *
y
, *
z
, *
comp
 );

1357  
ªsu…
;

1358 
	}
}

1361 #i‚de‡
STBI_NO_LINEAR


1362 *
	$°bi__lﬂdf_maö
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1364 *
d©a
;

1365 #i‚de‡
STBI_NO_HDR


1366 i‡(
	`°bi__hdr_ã°
(
s
)) {

1367 
°bi__ªsu…_öfo
 
ri
;

1368 *
hdr_d©a
 = 
	`°bi__hdr_lﬂd
(
s
,
x
,
y
,
comp
,
ªq_comp
, &
ri
);

1369 i‡(
hdr_d©a
)

1370 
	`°bi__Êﬂt_po°¥o˚ss
(
hdr_d©a
,
x
,
y
,
comp
,
ªq_comp
);

1371  
hdr_d©a
;

1374 
d©a
 = 
	`°bi__lﬂd_™d_po°¥o˚ss_8bô
(
s
, 
x
, 
y
, 
comp
, 
ªq_comp
);

1375 i‡(
d©a
)

1376  
	`°bi__ldr_to_hdr
(
d©a
, *
x
, *
y
, 
ªq_comp
 ?Ñeq_com∞: *
comp
);

1377  
	`°bi__îΩf
("unknown imageÅype", "ImageÇot ofány knownÅype, or corrupt");

1378 
	}
}

1380 
STBIDEF
 *
	$°bi_lﬂdf_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1382 
°bi__c⁄ãxt
 
s
;

1383 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1384  
	`°bi__lﬂdf_maö
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1385 
	}
}

1387 
STBIDEF
 *
	$°bi_lﬂdf_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1389 
°bi__c⁄ãxt
 
s
;

1390 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
˛bk
, 
u£r
);

1391  
	`°bi__lﬂdf_maö
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1392 
	}
}

1394 #i‚de‡
STBI_NO_STDIO


1395 
STBIDEF
 *
	$°bi_lﬂdf
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1397 *
ªsu…
;

1398 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1399 i‡(!
f
Ë 
	`°bi__îΩf
("can't fopen", "UnableÅo open file");

1400 
ªsu…
 = 
	`°bi_lﬂdf_‰om_fûe
(
f
,
x
,
y
,
comp
,
ªq_comp
);

1401 
	`f˛o£
(
f
);

1402  
ªsu…
;

1403 
	}
}

1405 
STBIDEF
 *
	$°bi_lﬂdf_‰om_fûe
(
FILE
 *
f
, *
x
, *
y
, *
comp
, 
ªq_comp
)

1407 
°bi__c⁄ãxt
 
s
;

1408 
	`°bi__°¨t_fûe
(&
s
,
f
);

1409  
	`°bi__lﬂdf_maö
(&
s
,
x
,
y
,
comp
,
ªq_comp
);

1410 
	}
}

1419 
STBIDEF
 
	$°bi_is_hdr_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
)

1421 #i‚de‡
STBI_NO_HDR


1422 
°bi__c⁄ãxt
 
s
;

1423 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

1424  
	`°bi__hdr_ã°
(&
s
);

1426 
	`STBI_NOTUSED
(
buf„r
);

1427 
	`STBI_NOTUSED
(
Àn
);

1430 
	}
}

1432 #i‚de‡
STBI_NO_STDIO


1433 
STBIDEF
 
	$°bi_is_hdr
 (c⁄° *
fûíame
)

1435 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

1436 
ªsu…
=0;

1437 i‡(
f
) {

1438 
ªsu…
 = 
	`°bi_is_hdr_‰om_fûe
(
f
);

1439 
	`f˛o£
(
f
);

1441  
ªsu…
;

1442 
	}
}

1444 
STBIDEF
 
	$°bi_is_hdr_‰om_fûe
(
FILE
 *
f
)

1446 #i‚de‡
STBI_NO_HDR


1447 
pos
 = 
	`·ñl
(
f
);

1448 
ªs
;

1449 
°bi__c⁄ãxt
 
s
;

1450 
	`°bi__°¨t_fûe
(&
s
,
f
);

1451 
ªs
 = 
	`°bi__hdr_ã°
(&
s
);

1452 
	`f£ek
(
f
, 
pos
, 
SEEK_SET
);

1453  
ªs
;

1455 
	`STBI_NOTUSED
(
f
);

1458 
	}
}

1461 
STBIDEF
 
	$°bi_is_hdr_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
˛bk
, *
u£r
)

1463 #i‚de‡
STBI_NO_HDR


1464 
°bi__c⁄ãxt
 
s
;

1465 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
˛bk
, 
u£r
);

1466  
	`°bi__hdr_ã°
(&
s
);

1468 
	`STBI_NOTUSED
(
˛bk
);

1469 
	`STBI_NOTUSED
(
u£r
);

1472 
	}
}

1474 #i‚de‡
STBI_NO_LINEAR


1475 
	g°bi__l2h_gamma
=2.2f, 
	g°bi__l2h_sˇÀ
=1.0f;

1477 
STBIDEF
 
	$°bi_ldr_to_hdr_gamma
(
gamma
Ë{ 
°bi__l2h_gamma
 = gamma; 
	}
}

1478 
STBIDEF
 
	$°bi_ldr_to_hdr_sˇÀ
(
sˇÀ
Ë{ 
°bi__l2h_sˇÀ
 = sˇÀ; 
	}
}

1481 
	g°bi__h2l_gamma_i
=1.0f/2.2f, 
	g°bi__h2l_sˇÀ_i
=1.0f;

1483 
STBIDEF
 
	$°bi_hdr_to_ldr_gamma
(
gamma
Ë{ 
°bi__h2l_gamma_i
 = 1/gamma; 
	}
}

1484 
STBIDEF
 
	$°bi_hdr_to_ldr_sˇÀ
(
sˇÀ
Ë{ 
°bi__h2l_sˇÀ_i
 = 1/sˇÀ; 
	}
}

1494 
	mSTBI__SCAN_lﬂd
=0,

1495 
	mSTBI__SCAN_ty≥
,

1496 
	mSTBI__SCAN_hódî


1499 
	$°bi__ªfûl_buf„r
(
°bi__c⁄ãxt
 *
s
)

1501 
n
 = (
s
->
io
.
ªad
)(s->
io_u£r_d©a
,(*)s->
buf„r_°¨t
,s->
buÊí
);

1502 i‡(
n
 == 0) {

1505 
s
->
ªad_‰om_ˇŒbacks
 = 0;

1506 
s
->
img_buf„r
 = s->
buf„r_°¨t
;

1507 
s
->
img_buf„r_íd
 = s->
buf„r_°¨t
+1;

1508 *
s
->
img_buf„r
 = 0;

1510 
s
->
img_buf„r
 = s->
buf„r_°¨t
;

1511 
s
->
img_buf„r_íd
 = s->
buf„r_°¨t
 + 
n
;

1513 
	}
}

1515 
°bi_ölöe
 
°bi_uc
 
	$°bi__gë8
(
°bi__c⁄ãxt
 *
s
)

1517 i‡(
s
->
img_buf„r
 < s->
img_buf„r_íd
)

1518  *
s
->
img_buf„r
++;

1519 i‡(
s
->
ªad_‰om_ˇŒbacks
) {

1520 
	`°bi__ªfûl_buf„r
(
s
);

1521  *
s
->
img_buf„r
++;

1524 
	}
}

1526 #i‡
deföed
(
STBI_NO_JPEG
Ë&& deföed(
STBI_NO_HDR
Ë&& deföed(
STBI_NO_PIC
Ë&& deföed(
STBI_NO_PNM
)

1529 
°bi_ölöe
 
	$°bi__©_eof
(
°bi__c⁄ãxt
 *
s
)

1531 i‡(
s
->
io
.
ªad
) {

1532 i‡(!(
s
->
io
.
eof
)(s->
io_u£r_d©a
))  0;

1535 i‡(
s
->
ªad_‰om_ˇŒbacks
 == 0)  1;

1538  
s
->
img_buf„r
 >s->
img_buf„r_íd
;

1539 
	}
}

1542 #i‡
deföed
(
STBI_NO_JPEG
Ë&& deföed(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_BMP
Ë&& deföed(
STBI_NO_PSD
Ë&& deföed(
STBI_NO_TGA
Ë&& deföed(
STBI_NO_GIF
Ë&& deföed(
STBI_NO_PIC
)

1545 
	$°bi__skù
(
°bi__c⁄ãxt
 *
s
, 
n
)

1547 i‡(
n
 < 0) {

1548 
s
->
img_buf„r
 = s->
img_buf„r_íd
;

1551 i‡(
s
->
io
.
ªad
) {

1552 
bÀn
 = (Ë(
s
->
img_buf„r_íd
 - s->
img_buf„r
);

1553 i‡(
bÀn
 < 
n
) {

1554 
s
->
img_buf„r
 = s->
img_buf„r_íd
;

1555 (
s
->
io
.
skù
)(s->
io_u£r_d©a
, 
n
 - 
bÀn
);

1559 
s
->
img_buf„r
 +
n
;

1560 
	}
}

1563 #i‡
deföed
(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_TGA
Ë&& deföed(
STBI_NO_HDR
Ë&& deföed(
STBI_NO_PNM
)

1566 
	$°bi__gën
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 *
buf„r
, 
n
)

1568 i‡(
s
->
io
.
ªad
) {

1569 
bÀn
 = (Ë(
s
->
img_buf„r_íd
 - s->
img_buf„r
);

1570 i‡(
bÀn
 < 
n
) {

1571 
ªs
, 
cou¡
;

1573 
	`mem˝y
(
buf„r
, 
s
->
img_buf„r
, 
bÀn
);

1575 
cou¡
 = (
s
->
io
.
ªad
)(s->
io_u£r_d©a
, (*Ë
buf„r
 + 
bÀn
, 
n
 - blen);

1576 
ªs
 = (
cou¡
 =(
n
-
bÀn
));

1577 
s
->
img_buf„r
 = s->
img_buf„r_íd
;

1578  
ªs
;

1582 i‡(
s
->
img_buf„r
+
n
 <s->
img_buf„r_íd
) {

1583 
	`mem˝y
(
buf„r
, 
s
->
img_buf„r
, 
n
);

1584 
s
->
img_buf„r
 +
n
;

1588 
	}
}

1591 #i‡
deföed
(
STBI_NO_JPEG
Ë&& deföed(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_PSD
Ë&& deföed(
STBI_NO_PIC
)

1594 
	$°bi__gë16be
(
°bi__c⁄ãxt
 *
s
)

1596 
z
 = 
	`°bi__gë8
(
s
);

1597  (
z
 << 8Ë+ 
	`°bi__gë8
(
s
);

1598 
	}
}

1601 #i‡
deföed
(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_PSD
Ë&& deföed(
STBI_NO_PIC
)

1604 
°bi__uöt32
 
	$°bi__gë32be
(
°bi__c⁄ãxt
 *
s
)

1606 
°bi__uöt32
 
z
 = 
	`°bi__gë16be
(
s
);

1607  (
z
 << 16Ë+ 
	`°bi__gë16be
(
s
);

1608 
	}
}

1611 #i‡
deföed
(
STBI_NO_BMP
Ë&& deföed(
STBI_NO_TGA
Ë&& deföed(
STBI_NO_GIF
)

1614 
	$°bi__gë16À
(
°bi__c⁄ãxt
 *
s
)

1616 
z
 = 
	`°bi__gë8
(
s
);

1617  
z
 + (
	`°bi__gë8
(
s
) << 8);

1618 
	}
}

1621 #i‚de‡
STBI_NO_BMP


1622 
°bi__uöt32
 
	$°bi__gë32À
(
°bi__c⁄ãxt
 *
s
)

1624 
°bi__uöt32
 
z
 = 
	`°bi__gë16À
(
s
);

1625  
z
 + (
	`°bi__gë16À
(
s
) << 16);

1626 
	}
}

1629 
	#STBI__BYTECAST
(
x
Ë((
°bi_uc
) ((x) & 255))

1630 

	)

1631 #i‡
deföed
(
STBI_NO_JPEG
Ë&& deföed(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_BMP
Ë&& deföed(
STBI_NO_PSD
Ë&& deföed(
STBI_NO_TGA
Ë&& deföed(
STBI_NO_GIF
Ë&& deföed(
STBI_NO_PIC
Ë&& deföed(
STBI_NO_PNM
)

1645 
°bi_uc
 
	$°bi__compuã_y
(
r
, 
g
, 
b
)

1647  (
°bi_uc
Ë(((
r
*77Ë+ (
g
*150Ë+ (29*
b
)) >> 8);

1648 
	}
}

1651 #i‡
deföed
(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_BMP
Ë&& deföed(
STBI_NO_PSD
Ë&& deföed(
STBI_NO_TGA
Ë&& deföed(
STBI_NO_GIF
Ë&& deföed(
STBI_NO_PIC
Ë&& deföed(
STBI_NO_PNM
)

1654 *
	$°bi__c⁄vît_f‹m©
(*
d©a
, 
img_n
, 
ªq_comp
, 
x
, 
y
)

1656 
i
,
j
;

1657 *
good
;

1659 i‡(
ªq_comp
 =
img_n
Ë 
d©a
;

1660 
	`STBI_ASSERT
(
ªq_comp
 >= 1 &&Ñeq_comp <= 4);

1662 
good
 = (*Ë
	`°bi__mÆloc_mad3
(
ªq_comp
, 
x
, 
y
, 0);

1663 i‡(
good
 =
NULL
) {

1664 
	`STBI_FREE
(
d©a
);

1665  
	`°bi__îΩuc
("outofmem", "Out of memory");

1668 
j
=0; j < (Ë
y
; ++j) {

1669 *
§c
 = 
d©a
 + 
j
 * 
x
 * 
img_n
 ;

1670 *
de°
 = 
good
 + 
j
 * 
x
 * 
ªq_comp
;

1672 
	#STBI__COMBO
(
a
,
b
Ë(◊)*8+(b))

	)

1673 
	#STBI__CASE
(
a
,
b
Ë
	`STBI__COMBO
◊,b): 
i
=
x
-1; i >0; --i, 
§c
 +a, 
de°
 +b)

	)

1676 
	`STBI__COMBO
(
img_n
, 
ªq_comp
)) {

1677 
	`STBI__CASE
(1,2Ë{ 
de°
[0]=
§c
[0]; dest[1]=255; } ;

1678 
	`STBI__CASE
(1,3Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; } ;

1679 
	`STBI__CASE
(1,4Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; dest[3]=255; } ;

1680 
	`STBI__CASE
(2,1Ë{ 
de°
[0]=
§c
[0]; } ;

1681 
	`STBI__CASE
(2,3Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; } ;

1682 
	`STBI__CASE
(2,4Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; dest[3]=src[1]; } ;

1683 
	`STBI__CASE
(3,4Ë{ 
de°
[0]=
§c
[0];dest[1]=src[1];dest[2]=src[2];dest[3]=255; } ;

1684 
	`STBI__CASE
(3,1Ë{ 
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]); } ;

1685 
	`STBI__CASE
(3,2Ë{ 
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]); dest[1] = 255; } ;

1686 
	`STBI__CASE
(4,1Ë{ 
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]); } ;

1687 
	`STBI__CASE
(4,2Ë{ 
de°
[0]=
	`°bi__compuã_y
(
§c
[0],src[1],src[2]); dest[1] = src[3]; } ;

1688 
	`STBI__CASE
(4,3Ë{ 
de°
[0]=
§c
[0];dest[1]=src[1];dest[2]=src[2]; } ;

1689 : 
	`STBI_ASSERT
(0);

1691 #unde‡
STBI__CASE


1694 
	`STBI_FREE
(
d©a
);

1695  
good
;

1696 
	}
}

1699 #i‡
deföed
(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_PSD
)

1702 
°bi__uöt16
 
	$°bi__compuã_y_16
(
r
, 
g
, 
b
)

1704  (
°bi__uöt16
Ë(((
r
*77Ë+ (
g
*150Ë+ (29*
b
)) >> 8);

1705 
	}
}

1708 #i‡
deföed
(
STBI_NO_PNG
Ë&& deföed(
STBI_NO_PSD
)

1711 
°bi__uöt16
 *
	$°bi__c⁄vît_f‹m©16
(
°bi__uöt16
 *
d©a
, 
img_n
, 
ªq_comp
, 
x
, 
y
)

1713 
i
,
j
;

1714 
°bi__uöt16
 *
good
;

1716 i‡(
ªq_comp
 =
img_n
Ë 
d©a
;

1717 
	`STBI_ASSERT
(
ªq_comp
 >= 1 &&Ñeq_comp <= 4);

1719 
good
 = (
°bi__uöt16
 *Ë
	`°bi__mÆloc
(
ªq_comp
 * 
x
 * 
y
 * 2);

1720 i‡(
good
 =
NULL
) {

1721 
	`STBI_FREE
(
d©a
);

1722  (
°bi__uöt16
 *Ë
	`°bi__îΩuc
("outofmem", "Out of memory");

1725 
j
=0; j < (Ë
y
; ++j) {

1726 
°bi__uöt16
 *
§c
 = 
d©a
 + 
j
 * 
x
 * 
img_n
 ;

1727 
°bi__uöt16
 *
de°
 = 
good
 + 
j
 * 
x
 * 
ªq_comp
;

1729 
	#STBI__COMBO
(
a
,
b
Ë(◊)*8+(b))

	)

1730 
	#STBI__CASE
(
a
,
b
Ë
	`STBI__COMBO
◊,b): 
i
=
x
-1; i >0; --i, 
§c
 +a, 
de°
 +b)

	)

1733 
	`STBI__COMBO
(
img_n
, 
ªq_comp
)) {

1734 
	`STBI__CASE
(1,2Ë{ 
de°
[0]=
§c
[0]; dest[1]=0xffff; } ;

1735 
	`STBI__CASE
(1,3Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; } ;

1736 
	`STBI__CASE
(1,4Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; dest[3]=0xffff; } ;

1737 
	`STBI__CASE
(2,1Ë{ 
de°
[0]=
§c
[0]; } ;

1738 
	`STBI__CASE
(2,3Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; } ;

1739 
	`STBI__CASE
(2,4Ë{ 
de°
[0]=de°[1]=de°[2]=
§c
[0]; dest[3]=src[1]; } ;

1740 
	`STBI__CASE
(3,4Ë{ 
de°
[0]=
§c
[0];dest[1]=src[1];dest[2]=src[2];dest[3]=0xffff; } ;

1741 
	`STBI__CASE
(3,1Ë{ 
de°
[0]=
	`°bi__compuã_y_16
(
§c
[0],src[1],src[2]); } ;

1742 
	`STBI__CASE
(3,2Ë{ 
de°
[0]=
	`°bi__compuã_y_16
(
§c
[0],src[1],src[2]); dest[1] = 0xffff; } ;

1743 
	`STBI__CASE
(4,1Ë{ 
de°
[0]=
	`°bi__compuã_y_16
(
§c
[0],src[1],src[2]); } ;

1744 
	`STBI__CASE
(4,2Ë{ 
de°
[0]=
	`°bi__compuã_y_16
(
§c
[0],src[1],src[2]); dest[1] = src[3]; } ;

1745 
	`STBI__CASE
(4,3Ë{ 
de°
[0]=
§c
[0];dest[1]=src[1];dest[2]=src[2]; } ;

1746 : 
	`STBI_ASSERT
(0);

1748 #unde‡
STBI__CASE


1751 
	`STBI_FREE
(
d©a
);

1752  
good
;

1753 
	}
}

1756 #i‚de‡
STBI_NO_LINEAR


1757 *
	$°bi__ldr_to_hdr
(
°bi_uc
 *
d©a
, 
x
, 
y
, 
comp
)

1759 
i
,
k
,
n
;

1760 *
ouçut
;

1761 i‡(!
d©a
Ë 
NULL
;

1762 
ouçut
 = (*Ë
	`°bi__mÆloc_mad4
(
x
, 
y
, 
comp
, (), 0);

1763 i‡(
ouçut
 =
NULL
Ë{ 
	`STBI_FREE
(
d©a
);  
	`°bi__îΩf
("outofmem", "Out of memory"); }

1765 i‡(
comp
 & 1Ë
n
 = comp; n = comp-1;

1766 
i
=0; i < 
x
*
y
; ++i) {

1767 
k
=0; k < 
n
; ++k) {

1768 
ouçut
[
i
*
comp
 + 
k
] = (Ë(
	`pow
(
d©a
[i*comp+k]/255.0f, 
°bi__l2h_gamma
Ë* 
°bi__l2h_sˇÀ
);

1771 i‡(
n
 < 
comp
) {

1772 
i
=0; i < 
x
*
y
; ++i) {

1773 
ouçut
[
i
*
comp
 + 
n
] = 
d©a
[i*comp +Ç]/255.0f;

1776 
	`STBI_FREE
(
d©a
);

1777  
ouçut
;

1778 
	}
}

1781 #i‚de‡
STBI_NO_HDR


1782 
	#°bi__Êﬂt2öt
(
x
Ë((Ë(x))

	)

1783 
°bi_uc
 *
	$°bi__hdr_to_ldr
(*
d©a
, 
x
, 
y
, 
comp
)

1785 
i
,
k
,
n
;

1786 
°bi_uc
 *
ouçut
;

1787 i‡(!
d©a
Ë 
NULL
;

1788 
ouçut
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
x
, 
y
, 
comp
, 0);

1789 i‡(
ouçut
 =
NULL
Ë{ 
	`STBI_FREE
(
d©a
);  
	`°bi__îΩuc
("outofmem", "Out of memory"); }

1791 i‡(
comp
 & 1Ë
n
 = comp; n = comp-1;

1792 
i
=0; i < 
x
*
y
; ++i) {

1793 
k
=0; k < 
n
; ++k) {

1794 
z
 = (Ë
	`pow
(
d©a
[
i
*
comp
+
k
]*
°bi__h2l_sˇÀ_i
, 
°bi__h2l_gamma_i
) * 255 + 0.5f;

1795 i‡(
z
 < 0) z = 0;

1796 i‡(
z
 > 255) z = 255;

1797 
ouçut
[
i
*
comp
 + 
k
] = (
°bi_uc
Ë
	`°bi__Êﬂt2öt
(
z
);

1799 i‡(
k
 < 
comp
) {

1800 
z
 = 
d©a
[
i
*
comp
+
k
] * 255 + 0.5f;

1801 i‡(
z
 < 0) z = 0;

1802 i‡(
z
 > 255) z = 255;

1803 
ouçut
[
i
*
comp
 + 
k
] = (
°bi_uc
Ë
	`°bi__Êﬂt2öt
(
z
);

1806 
	`STBI_FREE
(
d©a
);

1807  
ouçut
;

1808 
	}
}

1832 #i‚de‡
STBI_NO_JPEG


1835 
	#FAST_BITS
 9

1836 

	)

1839 
°bi_uc
 
	mÁ°
[1 << 
FAST_BITS
];

1841 
°bi__uöt16
 
	mcode
[256];

1842 
°bi_uc
 
	mvÆues
[256];

1843 
°bi_uc
 
	msize
[257];

1844 
	mmaxcode
[18];

1845 
	mdñè
[17];

1846 } 
	t°bi__huffm™
;

1850 
°bi__c⁄ãxt
 *
	ms
;

1851 
°bi__huffm™
 
	mhuff_dc
[4];

1852 
°bi__huffm™
 
	mhuff_ac
[4];

1853 
°bi__uöt16
 
	mdequ™t
[4][64];

1854 
°bi__öt16
 
	mÁ°_ac
[4][1 << 
FAST_BITS
];

1857 
	mimg_h_max
, 
	mimg_v_max
;

1858 
	mimg_mcu_x
, 
	mimg_mcu_y
;

1859 
	mimg_mcu_w
, 
	mimg_mcu_h
;

1864 
	mid
;

1865 
	mh
,
	mv
;

1866 
	mtq
;

1867 
	mhd
,
	mha
;

1868 
	mdc_¥ed
;

1870 
	mx
,
	my
,
	mw2
,
	mh2
;

1871 
°bi_uc
 *
	md©a
;

1872 *
	møw_d©a
, *
	møw_c€ff
;

1873 
°bi_uc
 *
	mlöebuf
;

1874 *
	mc€ff
;

1875 
	mc€ff_w
, 
	mc€ff_h
;

1876 } 
	mimg_comp
[4];

1878 
°bi__uöt32
 
	mcode_buf„r
;

1879 
	mcode_bôs
;

1880 
	mm¨kî
;

1881 
	mnom‹e
;

1883 
	m¥ogªssive
;

1884 
	m•ec_°¨t
;

1885 
	m•ec_íd
;

1886 
	msucc_high
;

1887 
	msucc_low
;

1888 
	meob_run
;

1889 
	mjfif
;

1890 
	m≠p14_cﬁ‹_å™sf‹m
;

1891 
	mrgb
;

1893 
	msˇn_n
, 
	m‹dî
[4];

1894 
	mª°¨t_öãrvÆ
, 
	mtodo
;

1897 (*
	mid˘_block_kî√l
)(
°bi_uc
 *
	mout
, 
	mout_°ride
, 
	md©a
[64]);

1898 (*
	mYCbCr_to_RGB_kî√l
)(
°bi_uc
 *
	mout
, c⁄° stbi_u¯*
	my
, c⁄° stbi_u¯*
	mpcb
, c⁄° stbi_u¯*
	mp¸
, 
	mcou¡
, 
	m°ï
);

1899 
	m°bi_uc
 *(*
	mªßm∂e_row_hv_2_kî√l
)(
°bi_uc
 *
	mout
, stbi_u¯*
	mö_√¨
, stbi_u¯*
	mö_Ár
, 
	mw
, 
	mhs
);

1900 } 
	t°bi__j≥g
;

1902 
	$°bi__buûd_huffm™
(
°bi__huffm™
 *
h
, *
cou¡
)

1904 
i
,
j
,
k
=0;

1905 
code
;

1907 
i
=0; i < 16; ++i)

1908 
j
=0; j < 
cou¡
[
i
]; ++j)

1909 
h
->
size
[
k
++] = (
°bi_uc
Ë(
i
+1);

1910 
h
->
size
[
k
] = 0;

1913 
code
 = 0;

1914 
k
 = 0;

1915 
j
=1; j <= 16; ++j) {

1917 
h
->
dñè
[
j
] = 
k
 - 
code
;

1918 i‡(
h
->
size
[
k
] =
j
) {

1919 
h
->
size
[
k
] =
j
)

1920 
h
->
code
[
k
++] = (
°bi__uöt16
) (code++);

1921 i‡(
code
-1 >(1u << 
j
)Ë 
	`°bi__îr
("bad codeÜengths","Corrupt JPEG");

1924 
h
->
maxcode
[
j
] = 
code
 << (16-j);

1925 
code
 <<= 1;

1927 
h
->
maxcode
[
j
] = 0xffffffff;

1930 
	`mem£t
(
h
->
Á°
, 255, 1 << 
FAST_BITS
);

1931 
i
=0; i < 
k
; ++i) {

1932 
s
 = 
h
->
size
[
i
];

1933 i‡(
s
 <
FAST_BITS
) {

1934 
c
 = 
h
->
code
[
i
] << (
FAST_BITS
-
s
);

1935 
m
 = 1 << (
FAST_BITS
-
s
);

1936 
j
=0; j < 
m
; ++j) {

1937 
h
->
Á°
[
c
+
j
] = (
°bi_uc
Ë
i
;

1942 
	}
}

1946 
	$°bi__buûd_Á°_ac
(
°bi__öt16
 *
Á°_ac
, 
°bi__huffm™
 *
h
)

1948 
i
;

1949 
i
=0; i < (1 << 
FAST_BITS
); ++i) {

1950 
°bi_uc
 
Á°
 = 
h
->Á°[
i
];

1951 
Á°_ac
[
i
] = 0;

1952 i‡(
Á°
 < 255) {

1953 
rs
 = 
h
->
vÆues
[
Á°
];

1954 
run
 = (
rs
 >> 4) & 15;

1955 
magbôs
 = 
rs
 & 15;

1956 
Àn
 = 
h
->
size
[
Á°
];

1958 i‡(
magbôs
 && 
Àn
 + magbô†<
FAST_BITS
) {

1960 
k
 = ((
i
 << 
Àn
Ë& ((1 << 
FAST_BITS
Ë- 1)Ë>> (FAST_BITS - 
magbôs
);

1961 
m
 = 1 << (
magbôs
 - 1);

1962 i‡(
k
 < 
m
Ëk +(~0U << 
magbôs
) + 1;

1964 i‡(
k
 >= -128 && k <= 127)

1965 
Á°_ac
[
i
] = (
°bi__öt16
Ë((
k
 * 256Ë+ (
run
 * 16Ë+ (
Àn
 + 
magbôs
));

1969 
	}
}

1971 
	$°bi__grow_buf„r_unß„
(
°bi__j≥g
 *
j
)

1974 
b
 = 
j
->
nom‹e
 ? 0 : 
	`°bi__gë8
(j->
s
);

1975 i‡(
b
 == 0xff) {

1976 
c
 = 
	`°bi__gë8
(
j
->
s
);

1977 
c
 =0xffË¯
	`°bi__gë8
(
j
->
s
);

1978 i‡(
c
 != 0) {

1979 
j
->
m¨kî
 = (Ë
c
;

1980 
j
->
nom‹e
 = 1;

1984 
j
->
code_buf„r
 |
b
 << (24 - j->
code_bôs
);

1985 
j
->
code_bôs
 += 8;

1986 } 
j
->
code_bôs
 <= 24);

1987 
	}
}

1990 c⁄° 
°bi__uöt32
 
	g°bi__bmask
[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};

1993 
°bi_ölöe
 
	$°bi__j≥g_huff_decode
(
°bi__j≥g
 *
j
, 
°bi__huffm™
 *
h
)

1995 
ãmp
;

1996 
c
,
k
;

1998 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

2002 
c
 = (
j
->
code_buf„r
 >> (32 - 
FAST_BITS
)) & ((1 << FAST_BITS)-1);

2003 
k
 = 
h
->
Á°
[
c
];

2004 i‡(
k
 < 255) {

2005 
s
 = 
h
->
size
[
k
];

2006 i‡(
s
 > 
j
->
code_bôs
)

2008 
j
->
code_buf„r
 <<
s
;

2009 
j
->
code_bôs
 -
s
;

2010  
h
->
vÆues
[
k
];

2019 
ãmp
 = 
j
->
code_buf„r
 >> 16;

2020 
k
=
FAST_BITS
+1 ; ; ++k)

2021 i‡(
ãmp
 < 
h
->
maxcode
[
k
])

2023 i‡(
k
 == 17) {

2025 
j
->
code_bôs
 -= 16;

2029 i‡(
k
 > 
j
->
code_bôs
)

2033 
c
 = ((
j
->
code_buf„r
 >> (32 - 
k
)Ë& 
°bi__bmask
[k]Ë+ 
h
->
dñè
[k];

2034 
	`STBI_ASSERT
((((
j
->
code_buf„r
Ë>> (32 - 
h
->
size
[
c
])Ë& 
°bi__bmask
[h->size[c]]Ë=h->
code
[c]);

2037 
j
->
code_bôs
 -
k
;

2038 
j
->
code_buf„r
 <<
k
;

2039  
h
->
vÆues
[
c
];

2040 
	}
}

2043 c⁄° 
	g°bi__jbüs
[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};

2047 
°bi_ölöe
 
	$°bi__exãnd_ª˚ive
(
°bi__j≥g
 *
j
, 
n
)

2049 
k
;

2050 
sgn
;

2051 i‡(
j
->
code_bôs
 < 
n
Ë
	`°bi__grow_buf„r_unß„
(j);

2053 
sgn
 = (
°bi__öt32
)
j
->
code_buf„r
 >> 31;

2054 
k
 = 
	`°bi_ÃŸ
(
j
->
code_buf„r
, 
n
);

2055 
	`STBI_ASSERT
(
n
 >0 &&Ç < (Ë((
°bi__bmask
)/(*stbi__bmask)));

2056 
j
->
code_buf„r
 = 
k
 & ~
°bi__bmask
[
n
];

2057 
k
 &
°bi__bmask
[
n
];

2058 
j
->
code_bôs
 -
n
;

2059  
k
 + (
°bi__jbüs
[
n
] & ~
sgn
);

2060 
	}
}

2063 
°bi_ölöe
 
	$°bi__j≥g_gë_bôs
(
°bi__j≥g
 *
j
, 
n
)

2065 
k
;

2066 i‡(
j
->
code_bôs
 < 
n
Ë
	`°bi__grow_buf„r_unß„
(j);

2067 
k
 = 
	`°bi_ÃŸ
(
j
->
code_buf„r
, 
n
);

2068 
j
->
code_buf„r
 = 
k
 & ~
°bi__bmask
[
n
];

2069 
k
 &
°bi__bmask
[
n
];

2070 
j
->
code_bôs
 -
n
;

2071  
k
;

2072 
	}
}

2074 
°bi_ölöe
 
	$°bi__j≥g_gë_bô
(
°bi__j≥g
 *
j
)

2076 
k
;

2077 i‡(
j
->
code_bôs
 < 1Ë
	`°bi__grow_buf„r_unß„
(j);

2078 
k
 = 
j
->
code_buf„r
;

2079 
j
->
code_buf„r
 <<= 1;

2080 --
j
->
code_bôs
;

2081  
k
 & 0x80000000;

2082 
	}
}

2086 c⁄° 
°bi_uc
 
	g°bi__j≥g_dezigzag
[64+15] =

2102 
	$°bi__j≥g_decode_block
(
°bi__j≥g
 *
j
, 
d©a
[64], 
°bi__huffm™
 *
hdc
, stbi__huffm™ *
hac
, 
°bi__öt16
 *
Ác
, 
b
, 
°bi__uöt16
 *
dequ™t
)

2104 
diff
,
dc
,
k
;

2105 
t
;

2107 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

2108 
t
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hdc
);

2109 i‡(
t
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

2112 
	`mem£t
(
d©a
,0,64*(data[0]));

2114 
diff
 = 
t
 ? 
	`°bi__exãnd_ª˚ive
(
j
,Å) : 0;

2115 
dc
 = 
j
->
img_comp
[
b
].
dc_¥ed
 + 
diff
;

2116 
j
->
img_comp
[
b
].
dc_¥ed
 = 
dc
;

2117 
d©a
[0] = (Ë(
dc
 * 
dequ™t
[0]);

2120 
k
 = 1;

2122 
zig
;

2123 
c
,
r
,
s
;

2124 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

2125 
c
 = (
j
->
code_buf„r
 >> (32 - 
FAST_BITS
)) & ((1 << FAST_BITS)-1);

2126 
r
 = 
Ác
[
c
];

2127 i‡(
r
) {

2128 
k
 +(
r
 >> 4) & 15;

2129 
s
 = 
r
 & 15;

2130 
j
->
code_buf„r
 <<
s
;

2131 
j
->
code_bôs
 -
s
;

2133 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

2134 
d©a
[
zig
] = (Ë((
r
 >> 8Ë* 
dequ™t
[zig]);

2136 
rs
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hac
);

2137 i‡(
rs
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

2138 
s
 = 
rs
 & 15;

2139 
r
 = 
rs
 >> 4;

2140 i‡(
s
 == 0) {

2141 i‡(
rs
 != 0xf0) ;

2142 
k
 += 16;

2144 
k
 +
r
;

2146 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

2147 
d©a
[
zig
] = (Ë(
	`°bi__exãnd_ª˚ive
(
j
,
s
Ë* 
dequ™t
[zig]);

2150 } 
k
 < 64);

2152 
	}
}

2154 
	$°bi__j≥g_decode_block_¥og_dc
(
°bi__j≥g
 *
j
, 
d©a
[64], 
°bi__huffm™
 *
hdc
, 
b
)

2156 
diff
,
dc
;

2157 
t
;

2158 i‡(
j
->
•ec_íd
 !0Ë 
	`°bi__îr
("can't merge dcándác", "Corrupt JPEG");

2160 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

2162 i‡(
j
->
succ_high
 == 0) {

2164 
	`mem£t
(
d©a
,0,64*(data[0]));

2165 
t
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hdc
);

2166 
diff
 = 
t
 ? 
	`°bi__exãnd_ª˚ive
(
j
,Å) : 0;

2168 
dc
 = 
j
->
img_comp
[
b
].
dc_¥ed
 + 
diff
;

2169 
j
->
img_comp
[
b
].
dc_¥ed
 = 
dc
;

2170 
d©a
[0] = (Ë(
dc
 << 
j
->
succ_low
);

2173 i‡(
	`°bi__j≥g_gë_bô
(
j
))

2174 
d©a
[0] +(Ë(1 << 
j
->
succ_low
);

2177 
	}
}

2181 
	$°bi__j≥g_decode_block_¥og_ac
(
°bi__j≥g
 *
j
, 
d©a
[64], 
°bi__huffm™
 *
hac
, 
°bi__öt16
 *
Ác
)

2183 
k
;

2184 i‡(
j
->
•ec_°¨t
 =0Ë 
	`°bi__îr
("can't merge dcándác", "Corrupt JPEG");

2186 i‡(
j
->
succ_high
 == 0) {

2187 
shi·
 = 
j
->
succ_low
;

2189 i‡(
j
->
eob_run
) {

2190 --
j
->
eob_run
;

2194 
k
 = 
j
->
•ec_°¨t
;

2196 
zig
;

2197 
c
,
r
,
s
;

2198 i‡(
j
->
code_bôs
 < 16Ë
	`°bi__grow_buf„r_unß„
(j);

2199 
c
 = (
j
->
code_buf„r
 >> (32 - 
FAST_BITS
)) & ((1 << FAST_BITS)-1);

2200 
r
 = 
Ác
[
c
];

2201 i‡(
r
) {

2202 
k
 +(
r
 >> 4) & 15;

2203 
s
 = 
r
 & 15;

2204 
j
->
code_buf„r
 <<
s
;

2205 
j
->
code_bôs
 -
s
;

2206 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

2207 
d©a
[
zig
] = (Ë((
r
 >> 8Ë<< 
shi·
);

2209 
rs
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hac
);

2210 i‡(
rs
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

2211 
s
 = 
rs
 & 15;

2212 
r
 = 
rs
 >> 4;

2213 i‡(
s
 == 0) {

2214 i‡(
r
 < 15) {

2215 
j
->
eob_run
 = (1 << 
r
);

2216 i‡(
r
)

2217 
j
->
eob_run
 +
	`°bi__j≥g_gë_bôs
(j, 
r
);

2218 --
j
->
eob_run
;

2221 
k
 += 16;

2223 
k
 +
r
;

2224 
zig
 = 
°bi__j≥g_dezigzag
[
k
++];

2225 
d©a
[
zig
] = (Ë(
	`°bi__exãnd_ª˚ive
(
j
,
s
Ë<< 
shi·
);

2228 } 
k
 <
j
->
•ec_íd
);

2232 
bô
 = (Ë(1 << 
j
->
succ_low
);

2234 i‡(
j
->
eob_run
) {

2235 --
j
->
eob_run
;

2236 
k
 = 
j
->
•ec_°¨t
; k <j->
•ec_íd
; ++k) {

2237 *
p
 = &
d©a
[
°bi__j≥g_dezigzag
[
k
]];

2238 i‡(*
p
 != 0)

2239 i‡(
	`°bi__j≥g_gë_bô
(
j
))

2240 i‡((*
p
 & 
bô
)==0) {

2241 i‡(*
p
 > 0)

2242 *
p
 +
bô
;

2244 *
p
 -
bô
;

2248 
k
 = 
j
->
•ec_°¨t
;

2250 
r
,
s
;

2251 
rs
 = 
	`°bi__j≥g_huff_decode
(
j
, 
hac
);

2252 i‡(
rs
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt JPEG");

2253 
s
 = 
rs
 & 15;

2254 
r
 = 
rs
 >> 4;

2255 i‡(
s
 == 0) {

2256 i‡(
r
 < 15) {

2257 
j
->
eob_run
 = (1 << 
r
) - 1;

2258 i‡(
r
)

2259 
j
->
eob_run
 +
	`°bi__j≥g_gë_bôs
(j, 
r
);

2260 
r
 = 64;

2267 i‡(
s
 !1Ë 
	`°bi__îr
("bad huffman code", "Corrupt JPEG");

2269 i‡(
	`°bi__j≥g_gë_bô
(
j
))

2270 
s
 = 
bô
;

2272 
s
 = -
bô
;

2276 
k
 <
j
->
•ec_íd
) {

2277 *
p
 = &
d©a
[
°bi__j≥g_dezigzag
[
k
++]];

2278 i‡(*
p
 != 0) {

2279 i‡(
	`°bi__j≥g_gë_bô
(
j
))

2280 i‡((*
p
 & 
bô
)==0) {

2281 i‡(*
p
 > 0)

2282 *
p
 +
bô
;

2284 *
p
 -
bô
;

2287 i‡(
r
 == 0) {

2288 *
p
 = (Ë
s
;

2291 --
r
;

2294 } 
k
 <
j
->
•ec_íd
);

2298 
	}
}

2301 
°bi_ölöe
 
°bi_uc
 
	$°bi__˛amp
(
x
)

2304 i‡((Ë
x
 > 255) {

2305 i‡(
x
 < 0)  0;

2306 i‡(
x
 > 255)  255;

2308  (
°bi_uc
Ë
x
;

2309 
	}
}

2311 
	#°bi__f2f
(
x
Ë((Ë(((xË* 4096 + 0.5)))

	)

2312 
	#°bi__fsh
(
x
Ë((xË* 4096)

	)

2315 
	#STBI__IDCT_1D
(
s0
,
s1
,
s2
,
s3
,
s4
,
s5
,
s6
,
s7
) \

2316 
t0
,
t1
,
t2
,
t3
,
p1
,
p2
,
p3
,
p4
,
p5
,
x0
,
x1
,
x2
,
x3
; \

2317 
p2
 = 
s2
; \

2318 
p3
 = 
s6
; \

2319 
p1
 = (
p2
+
p3
Ë* 
	`°bi__f2f
(0.5411961f); \

2320 
t2
 = 
p1
 + 
p3
*
	`°bi__f2f
(-1.847759065f); \

2321 
t3
 = 
p1
 + 
p2
*
	`°bi__f2f
( 0.765366865f); \

2322 
p2
 = 
s0
; \

2323 
p3
 = 
s4
; \

2324 
t0
 = 
	`°bi__fsh
(
p2
+
p3
); \

2325 
t1
 = 
	`°bi__fsh
(
p2
-
p3
); \

2326 
x0
 = 
t0
+
t3
; \

2327 
x3
 = 
t0
-
t3
; \

2328 
x1
 = 
t1
+
t2
; \

2329 
x2
 = 
t1
-
t2
; \

2330 
t0
 = 
s7
; \

2331 
t1
 = 
s5
; \

2332 
t2
 = 
s3
; \

2333 
t3
 = 
s1
; \

2334 
p3
 = 
t0
+
t2
; \

2335 
p4
 = 
t1
+
t3
; \

2336 
p1
 = 
t0
+
t3
; \

2337 
p2
 = 
t1
+
t2
; \

2338 
p5
 = (
p3
+
p4
)*
	`°bi__f2f
( 1.175875602f); \

2339 
t0
 =Å0*
	`°bi__f2f
( 0.298631336f); \

2340 
t1
 =Å1*
	`°bi__f2f
( 2.053119869f); \

2341 
t2
 =Å2*
	`°bi__f2f
( 3.072711026f); \

2342 
t3
 =Å3*
	`°bi__f2f
( 1.501321110f); \

2343 
p1
 = 
p5
 +Ö1*
	`°bi__f2f
(-0.899976223f); \

2344 
p2
 = 
p5
 +Ö2*
	`°bi__f2f
(-2.562915447f); \

2345 
p3
 =Ö3*
	`°bi__f2f
(-1.961570560f); \

2346 
p4
 =Ö4*
	`°bi__f2f
(-0.390180644f); \

2347 
t3
 +
p1
+
p4
; \

2348 
t2
 +
p2
+
p3
; \

2349 
t1
 +
p2
+
p4
; \

2350 
t0
 +
p1
+
p3
;

	)

2352 
	$°bi__id˘_block
(
°bi_uc
 *
out
, 
out_°ride
, 
d©a
[64])

2354 
i
,
vÆ
[64],*
v
=val;

2355 
°bi_uc
 *
o
;

2356 *
d
 = 
d©a
;

2359 
i
=0; i < 8; ++i,++
d
, ++
v
) {

2361 i‡(
d
[ 8]==0 && d[16]==0 && d[24]==0 && d[32]==0

2362 && 
d
[40]==0 && d[48]==0 && d[56]==0) {

2367 
d˘îm
 = 
d
[0]*4;

2368 
v
[0] = v[8] = v[16] = v[24] = v[32] = v[40] = v[48] = v[56] = 
d˘îm
;

2370 
	`STBI__IDCT_1D
(
d
[ 0],d[ 8],d[16],d[24],d[32],d[40],d[48],d[56])

2373 
x0
 +512; 
x1
 +512; 
x2
 +512; 
x3
 += 512;

2374 
v
[ 0] = (
x0
+
t3
) >> 10;

2375 
v
[56] = (
x0
-
t3
) >> 10;

2376 
v
[ 8] = (
x1
+
t2
) >> 10;

2377 
v
[48] = (
x1
-
t2
) >> 10;

2378 
v
[16] = (
x2
+
t1
) >> 10;

2379 
v
[40] = (
x2
-
t1
) >> 10;

2380 
v
[24] = (
x3
+
t0
) >> 10;

2381 
v
[32] = (
x3
-
t0
) >> 10;

2385 
i
=0, 
v
=
vÆ
, 
o
=
out
; i < 8; ++i,v+=8,o+=
out_°ride
) {

2387 
	`STBI__IDCT_1D
(
v
[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7])

2394 
x0
 += 65536 + (128<<17);

2395 
x1
 += 65536 + (128<<17);

2396 
x2
 += 65536 + (128<<17);

2397 
x3
 += 65536 + (128<<17);

2400 
o
[0] = 
	`°bi__˛amp
((
x0
+
t3
) >> 17);

2401 
o
[7] = 
	`°bi__˛amp
((
x0
-
t3
) >> 17);

2402 
o
[1] = 
	`°bi__˛amp
((
x1
+
t2
) >> 17);

2403 
o
[6] = 
	`°bi__˛amp
((
x1
-
t2
) >> 17);

2404 
o
[2] = 
	`°bi__˛amp
((
x2
+
t1
) >> 17);

2405 
o
[5] = 
	`°bi__˛amp
((
x2
-
t1
) >> 17);

2406 
o
[3] = 
	`°bi__˛amp
((
x3
+
t0
) >> 17);

2407 
o
[4] = 
	`°bi__˛amp
((
x3
-
t0
) >> 17);

2409 
	}
}

2411 #ifde‡
STBI_SSE2


2415 
	$°bi__id˘_simd
(
°bi_uc
 *
out
, 
out_°ride
, 
d©a
[64])

2418 
__m128i
 
row0
, 
row1
, 
row2
, 
row3
, 
row4
, 
row5
, 
row6
, 
row7
;

2419 
__m128i
 
tmp
;

2422 
	#d˘_c⁄°
(
x
,
y
Ë
	`_mm_£å_ïi16
((x),(y),(x),(y),(x),(y),(x),(y))

	)

2426 
	#d˘_rŸ
(
out0
,
out1
, 
x
,
y
,
c0
,
c1
) \

2427 
__m128i
 
c0
##
lo
 = 
	`_mm_u≈acklo_ïi16
((
x
),(
y
)); \

2428 
__m128i
 
c0
##
hi
 = 
	`_mm_u≈ackhi_ïi16
((
x
),(
y
)); \

2429 
__m128i
 
out0
##
_l
 = 
	`_mm_madd_ïi16
(
c0
##
lo
, c0); \

2430 
__m128i
 
out0
##
_h
 = 
	`_mm_madd_ïi16
(
c0
##
hi
, c0); \

2431 
__m128i
 
out1
##
_l
 = 
	`_mm_madd_ïi16
(
c0
##
lo
, 
c1
); \

2432 
__m128i
 
out1
##
_h
 = 
	`_mm_madd_ïi16
(
c0
##
hi
, 
c1
)

	)

2435 
	#d˘_widí
(
out
, 
ö
) \

2436 
__m128i
 
out
##
_l
 = 
	`_mm_§ai_ïi32
(
	`_mm_u≈acklo_ïi16
(
	`_mm_£tzîo_si128
(), (
ö
)), 4); \

2437 
__m128i
 
out
##
_h
 = 
	`_mm_§ai_ïi32
(
	`_mm_u≈ackhi_ïi16
(
	`_mm_£tzîo_si128
(), (
ö
)), 4)

	)

2440 
	#d˘_wadd
(
out
, 
a
, 
b
) \

2441 
__m128i
 
out
##
_l
 = 
	`_mm_add_ïi32
(
a
##_l, 
b
##_l); \

2442 
__m128i
 
out
##
_h
 = 
	`_mm_add_ïi32
(
a
##_h, 
b
##_h)

	)

2445 
	#d˘_wsub
(
out
, 
a
, 
b
) \

2446 
__m128i
 
out
##
_l
 = 
	`_mm_sub_ïi32
(
a
##_l, 
b
##_l); \

2447 
__m128i
 
out
##
_h
 = 
	`_mm_sub_ïi32
(
a
##_h, 
b
##_h)

	)

2450 
	#d˘_bÊy32o
(
out0
, 
out1
, 
a
,
b
,
büs
,
s
) \

2452 
__m128i
 
abü£d_l
 = 
	`_mm_add_ïi32
(
a
##
_l
, 
büs
); \

2453 
__m128i
 
abü£d_h
 = 
	`_mm_add_ïi32
(
a
##
_h
, 
büs
); \

2454 
	`d˘_wadd
(
sum
, 
abü£d
, 
b
); \

2455 
	`d˘_wsub
(
dif
, 
abü£d
, 
b
); \

2456 
out0
 = 
	`_mm_∑cks_ïi32
(
	`_mm_§ai_ïi32
(
sum_l
, 
s
), _mm_§ai_ïi32(
sum_h
, s)); \

2457 
out1
 = 
	`_mm_∑cks_ïi32
(
	`_mm_§ai_ïi32
(
dif_l
, 
s
), _mm_§ai_ïi32(
dif_h
, s)); \

2458 }

	)

2461 
	#d˘_öãæóve8
(
a
, 
b
) \

2462 
tmp
 = 
a
; \

2463 
a
 = 
	`_mm_u≈acklo_ïi8
◊, 
b
); \

2464 
b
 = 
	`_mm_u≈ackhi_ïi8
(
tmp
, b)

	)

2467 
	#d˘_öãæóve16
(
a
, 
b
) \

2468 
tmp
 = 
a
; \

2469 
a
 = 
	`_mm_u≈acklo_ïi16
◊, 
b
); \

2470 
b
 = 
	`_mm_u≈ackhi_ïi16
(
tmp
, b)

	)

2472 
	#d˘_∑ss
(
büs
,
shi·
) \

2475 
	`d˘_rŸ
(
t2e
,
t3e
, 
row2
,
row6
, 
rŸ0_0
,
rŸ0_1
); \

2476 
__m128i
 
sum04
 = 
	`_mm_add_ïi16
(
row0
, 
row4
); \

2477 
__m128i
 
dif04
 = 
	`_mm_sub_ïi16
(
row0
, 
row4
); \

2478 
	`d˘_widí
(
t0e
, 
sum04
); \

2479 
	`d˘_widí
(
t1e
, 
dif04
); \

2480 
	`d˘_wadd
(
x0
, 
t0e
, 
t3e
); \

2481 
	`d˘_wsub
(
x3
, 
t0e
, 
t3e
); \

2482 
	`d˘_wadd
(
x1
, 
t1e
, 
t2e
); \

2483 
	`d˘_wsub
(
x2
, 
t1e
, 
t2e
); \

2485 
	`d˘_rŸ
(
y0o
,
y2o
, 
row7
,
row3
, 
rŸ2_0
,
rŸ2_1
); \

2486 
	`d˘_rŸ
(
y1o
,
y3o
, 
row5
,
row1
, 
rŸ3_0
,
rŸ3_1
); \

2487 
__m128i
 
sum17
 = 
	`_mm_add_ïi16
(
row1
, 
row7
); \

2488 
__m128i
 
sum35
 = 
	`_mm_add_ïi16
(
row3
, 
row5
); \

2489 
	`d˘_rŸ
(
y4o
,
y5o
, 
sum17
,
sum35
, 
rŸ1_0
,
rŸ1_1
); \

2490 
	`d˘_wadd
(
x4
, 
y0o
, 
y4o
); \

2491 
	`d˘_wadd
(
x5
, 
y1o
, 
y5o
); \

2492 
	`d˘_wadd
(
x6
, 
y2o
, 
y5o
); \

2493 
	`d˘_wadd
(
x7
, 
y3o
, 
y4o
); \

2494 
	`d˘_bÊy32o
(
row0
,
row7
, 
x0
,
x7
,
büs
,
shi·
); \

2495 
	`d˘_bÊy32o
(
row1
,
row6
, 
x1
,
x6
,
büs
,
shi·
); \

2496 
	`d˘_bÊy32o
(
row2
,
row5
, 
x2
,
x5
,
büs
,
shi·
); \

2497 
	`d˘_bÊy32o
(
row3
,
row4
, 
x3
,
x4
,
büs
,
shi·
); \

2498 }

	)

2500 
__m128i
 
rŸ0_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(0.5411961f), stbi__f2f(0.5411961f) + stbi__f2f(-1.847759065f));

2501 
__m128i
 
rŸ0_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(0.5411961f) + stbi__f2f( 0.765366865f), stbi__f2f(0.5411961f));

2502 
__m128i
 
rŸ1_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(1.175875602f) + stbi__f2f(-0.899976223f), stbi__f2f(1.175875602f));

2503 
__m128i
 
rŸ1_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(1.175875602f), stbi__f2f(1.175875602f) + stbi__f2f(-2.562915447f));

2504 
__m128i
 
rŸ2_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-1.961570560f) + stbi__f2f( 0.298631336f), stbi__f2f(-1.961570560f));

2505 
__m128i
 
rŸ2_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-1.961570560f), stbi__f2f(-1.961570560f) + stbi__f2f( 3.072711026f));

2506 
__m128i
 
rŸ3_0
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-0.390180644f) + stbi__f2f( 2.053119869f), stbi__f2f(-0.390180644f));

2507 
__m128i
 
rŸ3_1
 = 
	`d˘_c⁄°
(
	`°bi__f2f
(-0.390180644f), stbi__f2f(-0.390180644f) + stbi__f2f( 1.501321110f));

2510 
__m128i
 
büs_0
 = 
	`_mm_£t1_ïi32
(512);

2511 
__m128i
 
büs_1
 = 
	`_mm_£t1_ïi32
(65536 + (128<<17));

2514 
row0
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 0*8));

2515 
row1
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 1*8));

2516 
row2
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 2*8));

2517 
row3
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 3*8));

2518 
row4
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 4*8));

2519 
row5
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 5*8));

2520 
row6
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 6*8));

2521 
row7
 = 
	`_mm_lﬂd_si128
((c⁄° 
__m128i
 *Ë(
d©a
 + 7*8));

2524 
	`d˘_∑ss
(
büs_0
, 10);

2528 
	`d˘_öãæóve16
(
row0
, 
row4
);

2529 
	`d˘_öãæóve16
(
row1
, 
row5
);

2530 
	`d˘_öãæóve16
(
row2
, 
row6
);

2531 
	`d˘_öãæóve16
(
row3
, 
row7
);

2534 
	`d˘_öãæóve16
(
row0
, 
row2
);

2535 
	`d˘_öãæóve16
(
row1
, 
row3
);

2536 
	`d˘_öãæóve16
(
row4
, 
row6
);

2537 
	`d˘_öãæóve16
(
row5
, 
row7
);

2540 
	`d˘_öãæóve16
(
row0
, 
row1
);

2541 
	`d˘_öãæóve16
(
row2
, 
row3
);

2542 
	`d˘_öãæóve16
(
row4
, 
row5
);

2543 
	`d˘_öãæóve16
(
row6
, 
row7
);

2547 
	`d˘_∑ss
(
büs_1
, 17);

2551 
__m128i
 
p0
 = 
	`_mm_∑ckus_ïi16
(
row0
, 
row1
);

2552 
__m128i
 
p1
 = 
	`_mm_∑ckus_ïi16
(
row2
, 
row3
);

2553 
__m128i
 
p2
 = 
	`_mm_∑ckus_ïi16
(
row4
, 
row5
);

2554 
__m128i
 
p3
 = 
	`_mm_∑ckus_ïi16
(
row6
, 
row7
);

2557 
	`d˘_öãæóve8
(
p0
, 
p2
);

2558 
	`d˘_öãæóve8
(
p1
, 
p3
);

2561 
	`d˘_öãæóve8
(
p0
, 
p1
);

2562 
	`d˘_öãæóve8
(
p2
, 
p3
);

2565 
	`d˘_öãæóve8
(
p0
, 
p2
);

2566 
	`d˘_öãæóve8
(
p1
, 
p3
);

2569 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p0
); ouà+
out_°ride
;

2570 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p0
, 0x4e)); ouà+
out_°ride
;

2571 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p2
); ouà+
out_°ride
;

2572 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p2
, 0x4e)); ouà+
out_°ride
;

2573 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p1
); ouà+
out_°ride
;

2574 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p1
, 0x4e)); ouà+
out_°ride
;

2575 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
p3
); ouà+
out_°ride
;

2576 
	`_mm_°‹ñ_ïi64
((
__m128i
 *Ë
out
, 
	`_mm_shufÊe_ïi32
(
p3
, 0x4e));

2579 #unde‡
d˘_c⁄°


2580 #unde‡
d˘_rŸ


2581 #unde‡
d˘_widí


2582 #unde‡
d˘_wadd


2583 #unde‡
d˘_wsub


2584 #unde‡
d˘_bÊy32o


2585 #unde‡
d˘_öãæóve8


2586 #unde‡
d˘_öãæóve16


2587 #unde‡
d˘_∑ss


2588 
	}
}

2592 #ifde‡
STBI_NEON


2596 
	$°bi__id˘_simd
(
°bi_uc
 *
out
, 
out_°ride
, 
põ˚_d©a
[64])

2598 
öt16x8_t
 
row0
, 
row1
, 
row2
, 
row3
, 
row4
, 
row5
, 
row6
, 
row7
;

2600 
öt16x4_t
 
rŸ0_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
(0.5411961f));

2601 
öt16x4_t
 
rŸ0_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-1.847759065f));

2602 
öt16x4_t
 
rŸ0_2
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 0.765366865f));

2603 
öt16x4_t
 
rŸ1_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 1.175875602f));

2604 
öt16x4_t
 
rŸ1_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-0.899976223f));

2605 
öt16x4_t
 
rŸ1_2
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-2.562915447f));

2606 
öt16x4_t
 
rŸ2_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-1.961570560f));

2607 
öt16x4_t
 
rŸ2_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
(-0.390180644f));

2608 
öt16x4_t
 
rŸ3_0
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 0.298631336f));

2609 
öt16x4_t
 
rŸ3_1
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 2.053119869f));

2610 
öt16x4_t
 
rŸ3_2
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 3.072711026f));

2611 
öt16x4_t
 
rŸ3_3
 = 
	`vdup_n_s16
(
	`°bi__f2f
( 1.501321110f));

2613 
	#d˘_l⁄g_mul
(
out
, 
öq
, 
c€ff
) \

2614 
öt32x4_t
 
out
##
_l
 = 
	`vmuŒ_s16
(
	`vgë_low_s16
(
öq
), 
c€ff
); \

2615 
öt32x4_t
 
out
##
_h
 = 
	`vmuŒ_s16
(
	`vgë_high_s16
(
öq
), 
c€ff
)

	)

2617 
	#d˘_l⁄g_mac
(
out
, 
acc
, 
öq
, 
c€ff
) \

2618 
öt32x4_t
 
out
##
_l
 = 
	`vmœl_s16
(
acc
##_l, 
	`vgë_low_s16
(
öq
), 
c€ff
); \

2619 
öt32x4_t
 
out
##
_h
 = 
	`vmœl_s16
(
acc
##_h, 
	`vgë_high_s16
(
öq
), 
c€ff
)

	)

2621 
	#d˘_widí
(
out
, 
öq
) \

2622 
öt32x4_t
 
out
##
_l
 = 
	`vshŒ_n_s16
(
	`vgë_low_s16
(
öq
), 12); \

2623 
öt32x4_t
 
out
##
_h
 = 
	`vshŒ_n_s16
(
	`vgë_high_s16
(
öq
), 12)

	)

2626 
	#d˘_wadd
(
out
, 
a
, 
b
) \

2627 
öt32x4_t
 
out
##
_l
 = 
	`vaddq_s32
(
a
##_l, 
b
##_l); \

2628 
öt32x4_t
 
out
##
_h
 = 
	`vaddq_s32
(
a
##_h, 
b
##_h)

	)

2631 
	#d˘_wsub
(
out
, 
a
, 
b
) \

2632 
öt32x4_t
 
out
##
_l
 = 
	`vsubq_s32
(
a
##_l, 
b
##_l); \

2633 
öt32x4_t
 
out
##
_h
 = 
	`vsubq_s32
(
a
##_h, 
b
##_h)

	)

2636 
	#d˘_bÊy32o
(
out0
,
out1
, 
a
,
b
,
shi·›
,
s
) \

2638 
	`d˘_wadd
(
sum
, 
a
, 
b
); \

2639 
	`d˘_wsub
(
dif
, 
a
, 
b
); \

2640 
out0
 = 
	`vcomböe_s16
(
	`shi·›
(
sum_l
, 
s
), shi·›(
sum_h
, s)); \

2641 
out1
 = 
	`vcomböe_s16
(
	`shi·›
(
dif_l
, 
s
), shi·›(
dif_h
, s)); \

2642 }

	)

2644 
	#d˘_∑ss
(
shi·›
, 
shi·
) \

2647 
öt16x8_t
 
sum26
 = 
	`vaddq_s16
(
row2
, 
row6
); \

2648 
	`d˘_l⁄g_mul
(
p1e
, 
sum26
, 
rŸ0_0
); \

2649 
	`d˘_l⁄g_mac
(
t2e
, 
p1e
, 
row6
, 
rŸ0_1
); \

2650 
	`d˘_l⁄g_mac
(
t3e
, 
p1e
, 
row2
, 
rŸ0_2
); \

2651 
öt16x8_t
 
sum04
 = 
	`vaddq_s16
(
row0
, 
row4
); \

2652 
öt16x8_t
 
dif04
 = 
	`vsubq_s16
(
row0
, 
row4
); \

2653 
	`d˘_widí
(
t0e
, 
sum04
); \

2654 
	`d˘_widí
(
t1e
, 
dif04
); \

2655 
	`d˘_wadd
(
x0
, 
t0e
, 
t3e
); \

2656 
	`d˘_wsub
(
x3
, 
t0e
, 
t3e
); \

2657 
	`d˘_wadd
(
x1
, 
t1e
, 
t2e
); \

2658 
	`d˘_wsub
(
x2
, 
t1e
, 
t2e
); \

2660 
öt16x8_t
 
sum15
 = 
	`vaddq_s16
(
row1
, 
row5
); \

2661 
öt16x8_t
 
sum17
 = 
	`vaddq_s16
(
row1
, 
row7
); \

2662 
öt16x8_t
 
sum35
 = 
	`vaddq_s16
(
row3
, 
row5
); \

2663 
öt16x8_t
 
sum37
 = 
	`vaddq_s16
(
row3
, 
row7
); \

2664 
öt16x8_t
 
sumodd
 = 
	`vaddq_s16
(
sum17
, 
sum35
); \

2665 
	`d˘_l⁄g_mul
(
p5o
, 
sumodd
, 
rŸ1_0
); \

2666 
	`d˘_l⁄g_mac
(
p1o
, 
p5o
, 
sum17
, 
rŸ1_1
); \

2667 
	`d˘_l⁄g_mac
(
p2o
, 
p5o
, 
sum35
, 
rŸ1_2
); \

2668 
	`d˘_l⁄g_mul
(
p3o
, 
sum37
, 
rŸ2_0
); \

2669 
	`d˘_l⁄g_mul
(
p4o
, 
sum15
, 
rŸ2_1
); \

2670 
	`d˘_wadd
(
sump13o
, 
p1o
, 
p3o
); \

2671 
	`d˘_wadd
(
sump24o
, 
p2o
, 
p4o
); \

2672 
	`d˘_wadd
(
sump23o
, 
p2o
, 
p3o
); \

2673 
	`d˘_wadd
(
sump14o
, 
p1o
, 
p4o
); \

2674 
	`d˘_l⁄g_mac
(
x4
, 
sump13o
, 
row7
, 
rŸ3_0
); \

2675 
	`d˘_l⁄g_mac
(
x5
, 
sump24o
, 
row5
, 
rŸ3_1
); \

2676 
	`d˘_l⁄g_mac
(
x6
, 
sump23o
, 
row3
, 
rŸ3_2
); \

2677 
	`d˘_l⁄g_mac
(
x7
, 
sump14o
, 
row1
, 
rŸ3_3
); \

2678 
	`d˘_bÊy32o
(
row0
,
row7
, 
x0
,
x7
,
shi·›
,
shi·
); \

2679 
	`d˘_bÊy32o
(
row1
,
row6
, 
x1
,
x6
,
shi·›
,
shi·
); \

2680 
	`d˘_bÊy32o
(
row2
,
row5
, 
x2
,
x5
,
shi·›
,
shi·
); \

2681 
	`d˘_bÊy32o
(
row3
,
row4
, 
x3
,
x4
,
shi·›
,
shi·
); \

2682 }

	)

2685 
row0
 = 
	`vld1q_s16
(
põ˚_d©a
 + 0*8);

2686 
row1
 = 
	`vld1q_s16
(
põ˚_d©a
 + 1*8);

2687 
row2
 = 
	`vld1q_s16
(
põ˚_d©a
 + 2*8);

2688 
row3
 = 
	`vld1q_s16
(
põ˚_d©a
 + 3*8);

2689 
row4
 = 
	`vld1q_s16
(
põ˚_d©a
 + 4*8);

2690 
row5
 = 
	`vld1q_s16
(
põ˚_d©a
 + 5*8);

2691 
row6
 = 
	`vld1q_s16
(
põ˚_d©a
 + 6*8);

2692 
row7
 = 
	`vld1q_s16
(
põ˚_d©a
 + 7*8);

2695 
row0
 = 
	`vaddq_s16
‘ow0, 
	`v£tq_œ√_s16
(1024, 
	`vdupq_n_s16
(0), 0));

2698 
	`d˘_∑ss
(
vrsh∫_n_s32
, 10);

2704 
	#d˘_ån16
(
x
, 
y
Ë{ 
öt16x8x2_t
 
t
 = 
	`vånq_s16
(x, y); x =Å.
vÆ
[0]; y =Å.vÆ[1]; }

	)

2705 
	#d˘_ån32
(
x
, 
y
Ë{ 
öt32x4x2_t
 
t
 = 
	`vånq_s32
(
	`vªöãΩªtq_s32_s16
(x), vªöãΩªtq_s32_s16(y)); x = 
	`vªöãΩªtq_s16_s32
—.
vÆ
[0]); y = vªöãΩªtq_s16_s32—.vÆ[1]); }

	)

2706 
	#d˘_ån64
(
x
, 
y
Ë{ 
öt16x8_t
 
x0
 = x; i¡16x8_à
y0
 = y; x = 
	`vcomböe_s16
(
	`vgë_low_s16
(x0), vgë_low_s16(y0)); y = vcomböe_s16(
	`vgë_high_s16
(x0), vgë_high_s16(y0)); }

	)

2709 
	`d˘_ån16
(
row0
, 
row1
);

2710 
	`d˘_ån16
(
row2
, 
row3
);

2711 
	`d˘_ån16
(
row4
, 
row5
);

2712 
	`d˘_ån16
(
row6
, 
row7
);

2715 
	`d˘_ån32
(
row0
, 
row2
);

2716 
	`d˘_ån32
(
row1
, 
row3
);

2717 
	`d˘_ån32
(
row4
, 
row6
);

2718 
	`d˘_ån32
(
row5
, 
row7
);

2721 
	`d˘_ån64
(
row0
, 
row4
);

2722 
	`d˘_ån64
(
row1
, 
row5
);

2723 
	`d˘_ån64
(
row2
, 
row6
);

2724 
	`d˘_ån64
(
row3
, 
row7
);

2726 #unde‡
d˘_ån16


2727 #unde‡
d˘_ån32


2728 #unde‡
d˘_ån64


2735 
	`d˘_∑ss
(
vsh∫_n_s32
, 16);

2739 
uöt8x8_t
 
p0
 = 
	`vqrshrun_n_s16
(
row0
, 1);

2740 
uöt8x8_t
 
p1
 = 
	`vqrshrun_n_s16
(
row1
, 1);

2741 
uöt8x8_t
 
p2
 = 
	`vqrshrun_n_s16
(
row2
, 1);

2742 
uöt8x8_t
 
p3
 = 
	`vqrshrun_n_s16
(
row3
, 1);

2743 
uöt8x8_t
 
p4
 = 
	`vqrshrun_n_s16
(
row4
, 1);

2744 
uöt8x8_t
 
p5
 = 
	`vqrshrun_n_s16
(
row5
, 1);

2745 
uöt8x8_t
 
p6
 = 
	`vqrshrun_n_s16
(
row6
, 1);

2746 
uöt8x8_t
 
p7
 = 
	`vqrshrun_n_s16
(
row7
, 1);

2749 
	#d˘_ån8_8
(
x
, 
y
Ë{ 
uöt8x8x2_t
 
t
 = 
	`vån_u8
(x, y); x =Å.
vÆ
[0]; y =Å.vÆ[1]; }

	)

2750 
	#d˘_ån8_16
(
x
, 
y
Ë{ 
uöt16x4x2_t
 
t
 = 
	`vån_u16
(
	`vªöãΩªt_u16_u8
(x), vªöãΩªt_u16_u8(y)); x = 
	`vªöãΩªt_u8_u16
—.
vÆ
[0]); y = vªöãΩªt_u8_u16—.vÆ[1]); }

	)

2751 
	#d˘_ån8_32
(
x
, 
y
Ë{ 
uöt32x2x2_t
 
t
 = 
	`vån_u32
(
	`vªöãΩªt_u32_u8
(x), vªöãΩªt_u32_u8(y)); x = 
	`vªöãΩªt_u8_u32
—.
vÆ
[0]); y = vªöãΩªt_u8_u32—.vÆ[1]); }

	)

2757 
	`d˘_ån8_8
(
p0
, 
p1
);

2758 
	`d˘_ån8_8
(
p2
, 
p3
);

2759 
	`d˘_ån8_8
(
p4
, 
p5
);

2760 
	`d˘_ån8_8
(
p6
, 
p7
);

2763 
	`d˘_ån8_16
(
p0
, 
p2
);

2764 
	`d˘_ån8_16
(
p1
, 
p3
);

2765 
	`d˘_ån8_16
(
p4
, 
p6
);

2766 
	`d˘_ån8_16
(
p5
, 
p7
);

2769 
	`d˘_ån8_32
(
p0
, 
p4
);

2770 
	`d˘_ån8_32
(
p1
, 
p5
);

2771 
	`d˘_ån8_32
(
p2
, 
p6
);

2772 
	`d˘_ån8_32
(
p3
, 
p7
);

2775 
	`v°1_u8
(
out
, 
p0
); ouà+
out_°ride
;

2776 
	`v°1_u8
(
out
, 
p1
); ouà+
out_°ride
;

2777 
	`v°1_u8
(
out
, 
p2
); ouà+
out_°ride
;

2778 
	`v°1_u8
(
out
, 
p3
); ouà+
out_°ride
;

2779 
	`v°1_u8
(
out
, 
p4
); ouà+
out_°ride
;

2780 
	`v°1_u8
(
out
, 
p5
); ouà+
out_°ride
;

2781 
	`v°1_u8
(
out
, 
p6
); ouà+
out_°ride
;

2782 
	`v°1_u8
(
out
, 
p7
);

2784 #unde‡
d˘_ån8_8


2785 #unde‡
d˘_ån8_16


2786 #unde‡
d˘_ån8_32


2789 #unde‡
d˘_l⁄g_mul


2790 #unde‡
d˘_l⁄g_mac


2791 #unde‡
d˘_widí


2792 #unde‡
d˘_wadd


2793 #unde‡
d˘_wsub


2794 #unde‡
d˘_bÊy32o


2795 #unde‡
d˘_∑ss


2796 
	}
}

2800 
	#STBI__MARKER_n⁄e
 0xff

	)

2804 
°bi_uc
 
	$°bi__gë_m¨kî
(
°bi__j≥g
 *
j
)

2806 
°bi_uc
 
x
;

2807 i‡(
j
->
m¨kî
 !
STBI__MARKER_n⁄e
Ë{ 
x
 = j->marker; j->marker = STBI__MARKER_none;  x; }

2808 
x
 = 
	`°bi__gë8
(
j
->
s
);

2809 i‡(
x
 !0xffË 
STBI__MARKER_n⁄e
;

2810 
x
 == 0xff)

2811 
x
 = 
	`°bi__gë8
(
j
->
s
);

2812  
x
;

2813 
	}
}

2817 
	#STBI__RESTART
(
x
Ë((xË>0xd0 && (xË<0xd7)

	)

2821 
	$°bi__j≥g_ª£t
(
°bi__j≥g
 *
j
)

2823 
j
->
code_bôs
 = 0;

2824 
j
->
code_buf„r
 = 0;

2825 
j
->
nom‹e
 = 0;

2826 
j
->
img_comp
[0].
dc_¥ed
 = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;

2827 
j
->
m¨kî
 = 
STBI__MARKER_n⁄e
;

2828 
j
->
todo
 = j->
ª°¨t_öãrvÆ
 ? j->restart_interval : 0x7fffffff;

2829 
j
->
eob_run
 = 0;

2832 
	}
}

2834 
	$°bi__∑r£_íå›y_coded_d©a
(
°bi__j≥g
 *
z
)

2836 
	`°bi__j≥g_ª£t
(
z
);

2837 i‡(!
z
->
¥ogªssive
) {

2838 i‡(
z
->
sˇn_n
 == 1) {

2839 
i
,
j
;

2840 
	`STBI_SIMD_ALIGN
(, 
d©a
[64]);

2841 
n
 = 
z
->
‹dî
[0];

2846 
w
 = (
z
->
img_comp
[
n
].
x
+7) >> 3;

2847 
h
 = (
z
->
img_comp
[
n
].
y
+7) >> 3;

2848 
j
=0; j < 
h
; ++j) {

2849 
i
=0; i < 
w
; ++i) {

2850 
ha
 = 
z
->
img_comp
[
n
].ha;

2851 i‡(!
	`°bi__j≥g_decode_block
(
z
, 
d©a
, z->
huff_dc
+z->
img_comp
[
n
].
hd
, z->
huff_ac
+
ha
, z->
Á°_ac
[ha],Ç, z->
dequ™t
[z->img_comp[n].
tq
]))  0;

2852 
z
->
	`id˘_block_kî√l
(z->
img_comp
[
n
].
d©a
+z->img_comp[n].
w2
*
j
*8+
i
*8, z->img_comp[n].w2, data);

2854 i‡(--
z
->
todo
 <= 0) {

2855 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2858 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2859 
	`°bi__j≥g_ª£t
(
z
);

2865 
i
,
j
,
k
,
x
,
y
;

2866 
	`STBI_SIMD_ALIGN
(, 
d©a
[64]);

2867 
j
=0; j < 
z
->
img_mcu_y
; ++j) {

2868 
i
=0; i < 
z
->
img_mcu_x
; ++i) {

2870 
k
=0; k < 
z
->
sˇn_n
; ++k) {

2871 
n
 = 
z
->
‹dî
[
k
];

2874 
y
=0; y < 
z
->
img_comp
[
n
].
v
; ++y) {

2875 
x
=0; x < 
z
->
img_comp
[
n
].
h
; ++x) {

2876 
x2
 = (
i
*
z
->
img_comp
[
n
].
h
 + 
x
)*8;

2877 
y2
 = (
j
*
z
->
img_comp
[
n
].
v
 + 
y
)*8;

2878 
ha
 = 
z
->
img_comp
[
n
].ha;

2879 i‡(!
	`°bi__j≥g_decode_block
(
z
, 
d©a
, z->
huff_dc
+z->
img_comp
[
n
].
hd
, z->
huff_ac
+
ha
, z->
Á°_ac
[ha],Ç, z->
dequ™t
[z->img_comp[n].
tq
]))  0;

2880 
z
->
	`id˘_block_kî√l
(z->
img_comp
[
n
].
d©a
+z->img_comp[n].
w2
*
y2
+
x2
, z->img_comp[n].w2, data);

2886 i‡(--
z
->
todo
 <= 0) {

2887 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2888 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2889 
	`°bi__j≥g_ª£t
(
z
);

2896 i‡(
z
->
sˇn_n
 == 1) {

2897 
i
,
j
;

2898 
n
 = 
z
->
‹dî
[0];

2903 
w
 = (
z
->
img_comp
[
n
].
x
+7) >> 3;

2904 
h
 = (
z
->
img_comp
[
n
].
y
+7) >> 3;

2905 
j
=0; j < 
h
; ++j) {

2906 
i
=0; i < 
w
; ++i) {

2907 *
d©a
 = 
z
->
img_comp
[
n
].
c€ff
 + 64 * (
i
 + 
j
 * z->img_comp[n].
c€ff_w
);

2908 i‡(
z
->
•ec_°¨t
 == 0) {

2909 i‡(!
	`°bi__j≥g_decode_block_¥og_dc
(
z
, 
d©a
, &z->
huff_dc
[z->
img_comp
[
n
].
hd
],Ç))

2912 
ha
 = 
z
->
img_comp
[
n
].ha;

2913 i‡(!
	`°bi__j≥g_decode_block_¥og_ac
(
z
, 
d©a
, &z->
huff_ac
[
ha
], z->
Á°_ac
[ha]))

2917 i‡(--
z
->
todo
 <= 0) {

2918 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2919 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2920 
	`°bi__j≥g_ª£t
(
z
);

2926 
i
,
j
,
k
,
x
,
y
;

2927 
j
=0; j < 
z
->
img_mcu_y
; ++j) {

2928 
i
=0; i < 
z
->
img_mcu_x
; ++i) {

2930 
k
=0; k < 
z
->
sˇn_n
; ++k) {

2931 
n
 = 
z
->
‹dî
[
k
];

2934 
y
=0; y < 
z
->
img_comp
[
n
].
v
; ++y) {

2935 
x
=0; x < 
z
->
img_comp
[
n
].
h
; ++x) {

2936 
x2
 = (
i
*
z
->
img_comp
[
n
].
h
 + 
x
);

2937 
y2
 = (
j
*
z
->
img_comp
[
n
].
v
 + 
y
);

2938 *
d©a
 = 
z
->
img_comp
[
n
].
c€ff
 + 64 * (
x2
 + 
y2
 * z->img_comp[n].
c€ff_w
);

2939 i‡(!
	`°bi__j≥g_decode_block_¥og_dc
(
z
, 
d©a
, &z->
huff_dc
[z->
img_comp
[
n
].
hd
],Ç))

2946 i‡(--
z
->
todo
 <= 0) {

2947 i‡(
z
->
code_bôs
 < 24Ë
	`°bi__grow_buf„r_unß„
(z);

2948 i‡(!
	`STBI__RESTART
(
z
->
m¨kî
))  1;

2949 
	`°bi__j≥g_ª£t
(
z
);

2956 
	}
}

2958 
	$°bi__j≥g_dequ™tize
(*
d©a
, 
°bi__uöt16
 *
dequ™t
)

2960 
i
;

2961 
i
=0; i < 64; ++i)

2962 
d©a
[
i
] *
dequ™t
[i];

2963 
	}
}

2965 
	$°bi__j≥g_föish
(
°bi__j≥g
 *
z
)

2967 i‡(
z
->
¥ogªssive
) {

2969 
i
,
j
,
n
;

2970 
n
=0;Ç < 
z
->
s
->
img_n
; ++n) {

2971 
w
 = (
z
->
img_comp
[
n
].
x
+7) >> 3;

2972 
h
 = (
z
->
img_comp
[
n
].
y
+7) >> 3;

2973 
j
=0; j < 
h
; ++j) {

2974 
i
=0; i < 
w
; ++i) {

2975 *
d©a
 = 
z
->
img_comp
[
n
].
c€ff
 + 64 * (
i
 + 
j
 * z->img_comp[n].
c€ff_w
);

2976 
	`°bi__j≥g_dequ™tize
(
d©a
, 
z
->
dequ™t
[z->
img_comp
[
n
].
tq
]);

2977 
z
->
	`id˘_block_kî√l
(z->
img_comp
[
n
].
d©a
+z->img_comp[n].
w2
*
j
*8+
i
*8, z->img_comp[n].w2, data);

2982 
	}
}

2984 
	$°bi__¥o˚ss_m¨kî
(
°bi__j≥g
 *
z
, 
m
)

2986 
L
;

2987 
m
) {

2988 
STBI__MARKER_n⁄e
:

2989  
	`°bi__îr
("expected marker","Corrupt JPEG");

2992 i‡(
	`°bi__gë16be
(
z
->
s
Ë!4Ë 
	`°bi__îr
("bad DRIÜen","Corrupt JPEG");

2993 
z
->
ª°¨t_öãrvÆ
 = 
	`°bi__gë16be
(z->
s
);

2997 
L
 = 
	`°bi__gë16be
(
z
->
s
)-2;

2998 
L
 > 0) {

2999 
q
 = 
	`°bi__gë8
(
z
->
s
);

3000 
p
 = 
q
 >> 4, 
sixãí
 = (p != 0);

3001 
t
 = 
q
 & 15,
i
;

3002 i‡(
p
 !0 &&Ö !1Ë 
	`°bi__îr
("bad DQTÅype","Corrupt JPEG");

3003 i‡(
t
 > 3Ë 
	`°bi__îr
("bad DQTÅable","Corrupt JPEG");

3005 
i
=0; i < 64; ++i)

3006 
z
->
dequ™t
[
t
][
°bi__j≥g_dezigzag
[
i
]] = (
°bi__uöt16
)(
sixãí
 ? 
	`°bi__gë16be
(z->
s
Ë: 
	`°bi__gë8
(z->s));

3007 
L
 -(
sixãí
 ? 129 : 65);

3009  
L
==0;

3012 
L
 = 
	`°bi__gë16be
(
z
->
s
)-2;

3013 
L
 > 0) {

3014 
°bi_uc
 *
v
;

3015 
sizes
[16],
i
,
n
=0;

3016 
q
 = 
	`°bi__gë8
(
z
->
s
);

3017 
tc
 = 
q
 >> 4;

3018 
th
 = 
q
 & 15;

3019 i‡(
tc
 > 1 || 
th
 > 3Ë 
	`°bi__îr
("bad DHT header","Corrupt JPEG");

3020 
i
=0; i < 16; ++i) {

3021 
sizes
[
i
] = 
	`°bi__gë8
(
z
->
s
);

3022 
n
 +
sizes
[
i
];

3024 
L
 -= 17;

3025 i‡(
tc
 == 0) {

3026 i‡(!
	`°bi__buûd_huffm™
(
z
->
huff_dc
+
th
, 
sizes
))  0;

3027 
v
 = 
z
->
huff_dc
[
th
].
vÆues
;

3029 i‡(!
	`°bi__buûd_huffm™
(
z
->
huff_ac
+
th
, 
sizes
))  0;

3030 
v
 = 
z
->
huff_ac
[
th
].
vÆues
;

3032 
i
=0; i < 
n
; ++i)

3033 
v
[
i
] = 
	`°bi__gë8
(
z
->
s
);

3034 i‡(
tc
 != 0)

3035 
	`°bi__buûd_Á°_ac
(
z
->
Á°_ac
[
th
], z->
huff_ac
 +Åh);

3036 
L
 -
n
;

3038  
L
==0;

3042 i‡((
m
 >= 0xE0 && m <= 0xEF) || m == 0xFE) {

3043 
L
 = 
	`°bi__gë16be
(
z
->
s
);

3044 i‡(
L
 < 2) {

3045 i‡(
m
 == 0xFE)

3046  
	`°bi__îr
("bad COMÜen","Corrupt JPEG");

3048  
	`°bi__îr
("bad APPÜen","Corrupt JPEG");

3050 
L
 -= 2;

3052 i‡(
m
 =0xE0 && 
L
 >= 5) {

3053 c⁄° 
èg
[5] = {'J','F','I','F','\0'};

3054 
ok
 = 1;

3055 
i
;

3056 
i
=0; i < 5; ++i)

3057 i‡(
	`°bi__gë8
(
z
->
s
Ë!
èg
[
i
])

3058 
ok
 = 0;

3059 
L
 -= 5;

3060 i‡(
ok
)

3061 
z
->
jfif
 = 1;

3062 } i‡(
m
 =0xEE && 
L
 >= 12) {

3063 c⁄° 
èg
[6] = {'A','d','o','b','e','\0'};

3064 
ok
 = 1;

3065 
i
;

3066 
i
=0; i < 6; ++i)

3067 i‡(
	`°bi__gë8
(
z
->
s
Ë!
èg
[
i
])

3068 
ok
 = 0;

3069 
L
 -= 6;

3070 i‡(
ok
) {

3071 
	`°bi__gë8
(
z
->
s
);

3072 
	`°bi__gë16be
(
z
->
s
);

3073 
	`°bi__gë16be
(
z
->
s
);

3074 
z
->
≠p14_cﬁ‹_å™sf‹m
 = 
	`°bi__gë8
(z->
s
);

3075 
L
 -= 6;

3079 
	`°bi__skù
(
z
->
s
, 
L
);

3083  
	`°bi__îr
("unknown marker","Corrupt JPEG");

3084 
	}
}

3087 
	$°bi__¥o˚ss_sˇn_hódî
(
°bi__j≥g
 *
z
)

3089 
i
;

3090 
Ls
 = 
	`°bi__gë16be
(
z
->
s
);

3091 
z
->
sˇn_n
 = 
	`°bi__gë8
(z->
s
);

3092 i‡(
z
->
sˇn_n
 < 1 || z->sˇn_¿> 4 || z->sˇn_¿> (Ëz->
s
->
img_n
Ë 
	`°bi__îr
("bad SOS component count","Corrupt JPEG");

3093 i‡(
Ls
 !6+2*
z
->
sˇn_n
Ë 
	`°bi__îr
("bad SOSÜen","Corrupt JPEG");

3094 
i
=0; i < 
z
->
sˇn_n
; ++i) {

3095 
id
 = 
	`°bi__gë8
(
z
->
s
), 
which
;

3096 
q
 = 
	`°bi__gë8
(
z
->
s
);

3097 
which
 = 0; which < 
z
->
s
->
img_n
; ++which)

3098 i‡(
z
->
img_comp
[
which
].
id
 == id)

3100 i‡(
which
 =
z
->
s
->
img_n
)  0;

3101 
z
->
img_comp
[
which
].
hd
 = 
q
 >> 4; i‡(z->img_comp[which].hd > 3Ë 
	`°bi__îr
("bad DC huff","Corrupt JPEG");

3102 
z
->
img_comp
[
which
].
ha
 = 
q
 & 15; i‡(z->img_comp[which].h®> 3Ë 
	`°bi__îr
("bad AC huff","Corrupt JPEG");

3103 
z
->
‹dî
[
i
] = 
which
;

3107 
Ø
;

3108 
z
->
•ec_°¨t
 = 
	`°bi__gë8
(z->
s
);

3109 
z
->
•ec_íd
 = 
	`°bi__gë8
(z->
s
);

3110 
Ø
 = 
	`°bi__gë8
(
z
->
s
);

3111 
z
->
succ_high
 = (
Ø
 >> 4);

3112 
z
->
succ_low
 = (
Ø
 & 15);

3113 i‡(
z
->
¥ogªssive
) {

3114 i‡(
z
->
•ec_°¨t
 > 63 || z->
•ec_íd
 > 63 || z->•ec_°¨à> z->•ec_íd || z->
succ_high
 > 13 || z->
succ_low
 > 13)

3115  
	`°bi__îr
("bad SOS", "Corrupt JPEG");

3117 i‡(
z
->
•ec_°¨t
 !0Ë 
	`°bi__îr
("bad SOS","Corrupt JPEG");

3118 i‡(
z
->
succ_high
 !0 || z->
succ_low
 !0Ë 
	`°bi__îr
("bad SOS","Corrupt JPEG");

3119 
z
->
•ec_íd
 = 63;

3124 
	}
}

3126 
	$°bi__‰ì_j≥g_comp⁄íts
(
°bi__j≥g
 *
z
, 
ncomp
, 
why
)

3128 
i
;

3129 
i
=0; i < 
ncomp
; ++i) {

3130 i‡(
z
->
img_comp
[
i
].
øw_d©a
) {

3131 
	`STBI_FREE
(
z
->
img_comp
[
i
].
øw_d©a
);

3132 
z
->
img_comp
[
i
].
øw_d©a
 = 
NULL
;

3133 
z
->
img_comp
[
i
].
d©a
 = 
NULL
;

3135 i‡(
z
->
img_comp
[
i
].
øw_c€ff
) {

3136 
	`STBI_FREE
(
z
->
img_comp
[
i
].
øw_c€ff
);

3137 
z
->
img_comp
[
i
].
øw_c€ff
 = 0;

3138 
z
->
img_comp
[
i
].
c€ff
 = 0;

3140 i‡(
z
->
img_comp
[
i
].
löebuf
) {

3141 
	`STBI_FREE
(
z
->
img_comp
[
i
].
löebuf
);

3142 
z
->
img_comp
[
i
].
löebuf
 = 
NULL
;

3145  
why
;

3146 
	}
}

3148 
	$°bi__¥o˚ss_‰ame_hódî
(
°bi__j≥g
 *
z
, 
sˇn
)

3150 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

3151 
Lf
,
p
,
i
,
q
, 
h_max
=1,
v_max
=1,
c
;

3152 
Lf
 = 
	`°bi__gë16be
(
s
); i‡(L‡< 11Ë 
	`°bi__îr
("bad SOFÜen","Corrupt JPEG");

3153 
p
 = 
	`°bi__gë8
(
s
); i‡’ !8Ë 
	`°bi__îr
("only 8-bit","JPEG formatÇot supported: 8-bit only");

3154 
s
->
img_y
 = 
	`°bi__gë16be
(s); i‡(s->img_y =0Ë 
	`°bi__îr
("no header height", "JPEG formatÇot supported: delayed height");

3155 
s
->
img_x
 = 
	`°bi__gë16be
(s); i‡(s->img_x =0Ë 
	`°bi__îr
("0 width","Corrupt JPEG");

3156 
c
 = 
	`°bi__gë8
(
s
);

3157 i‡(
c
 !3 && c !1 && c !4Ë 
	`°bi__îr
("bad component count","Corrupt JPEG");

3158 
s
->
img_n
 = 
c
;

3159 
i
=0; i < 
c
; ++i) {

3160 
z
->
img_comp
[
i
].
d©a
 = 
NULL
;

3161 
z
->
img_comp
[
i
].
löebuf
 = 
NULL
;

3164 i‡(
Lf
 !8+3*
s
->
img_n
Ë 
	`°bi__îr
("bad SOFÜen","Corrupt JPEG");

3166 
z
->
rgb
 = 0;

3167 
i
=0; i < 
s
->
img_n
; ++i) {

3168 c⁄° 
rgb
[3] = { 'R', 'G', 'B' };

3169 
z
->
img_comp
[
i
].
id
 = 
	`°bi__gë8
(
s
);

3170 i‡(
s
->
img_n
 =3 && 
z
->
img_comp
[
i
].
id
 =
rgb
[i])

3171 ++
z
->
rgb
;

3172 
q
 = 
	`°bi__gë8
(
s
);

3173 
z
->
img_comp
[
i
].
h
 = (
q
 >> 4); i‡(!z->img_comp[i].h || z->img_comp[i].h > 4Ë 
	`°bi__îr
("bad H","Corrupt JPEG");

3174 
z
->
img_comp
[
i
].
v
 = 
q
 & 15; i‡(!z->img_comp[i].v || z->img_comp[i].v > 4Ë 
	`°bi__îr
("bad V","Corrupt JPEG");

3175 
z
->
img_comp
[
i
].
tq
 = 
	`°bi__gë8
(
s
); i‡(z->img_comp[i].tq > 3Ë 
	`°bi__îr
("bad TQ","Corrupt JPEG");

3178 i‡(
sˇn
 !
STBI__SCAN_lﬂd
)  1;

3180 i‡(!
	`°bi__mad3sizes_vÆid
(
s
->
img_x
, s->
img_y
, s->
img_n
, 0)Ë 
	`°bi__îr
("tooÜarge", "ImageÅooÜargeÅo decode");

3182 
i
=0; i < 
s
->
img_n
; ++i) {

3183 i‡(
z
->
img_comp
[
i
].
h
 > 
h_max
) h_max = z->img_comp[i].h;

3184 i‡(
z
->
img_comp
[
i
].
v
 > 
v_max
) v_max = z->img_comp[i].v;

3188 
z
->
img_h_max
 = 
h_max
;

3189 
z
->
img_v_max
 = 
v_max
;

3190 
z
->
img_mcu_w
 = 
h_max
 * 8;

3191 
z
->
img_mcu_h
 = 
v_max
 * 8;

3193 
z
->
img_mcu_x
 = (
s
->
img_x
 + z->
img_mcu_w
-1) / z->img_mcu_w;

3194 
z
->
img_mcu_y
 = (
s
->
img_y
 + z->
img_mcu_h
-1) / z->img_mcu_h;

3196 
i
=0; i < 
s
->
img_n
; ++i) {

3198 
z
->
img_comp
[
i
].
x
 = (
s
->
img_x
 * z->img_comp[i].
h
 + 
h_max
-1) / h_max;

3199 
z
->
img_comp
[
i
].
y
 = (
s
->
img_y
 * z->img_comp[i].
v
 + 
v_max
-1) / v_max;

3207 
z
->
img_comp
[
i
].
w2
 = z->
img_mcu_x
 * z->img_comp[i].
h
 * 8;

3208 
z
->
img_comp
[
i
].
h2
 = z->
img_mcu_y
 * z->img_comp[i].
v
 * 8;

3209 
z
->
img_comp
[
i
].
c€ff
 = 0;

3210 
z
->
img_comp
[
i
].
øw_c€ff
 = 0;

3211 
z
->
img_comp
[
i
].
löebuf
 = 
NULL
;

3212 
z
->
img_comp
[
i
].
øw_d©a
 = 
	`°bi__mÆloc_mad2
(z->img_comp[i].
w2
, z->img_comp[i].
h2
, 15);

3213 i‡(
z
->
img_comp
[
i
].
øw_d©a
 =
NULL
)

3214  
	`°bi__‰ì_j≥g_comp⁄íts
(
z
, 
i
+1, 
	`°bi__îr
("outofmem", "Out of memory"));

3216 
z
->
img_comp
[
i
].
d©a
 = (
°bi_uc
*Ë(((
size_t
Ëz->img_comp[i].
øw_d©a
 + 15) & ~15);

3217 i‡(
z
->
¥ogªssive
) {

3219 
z
->
img_comp
[
i
].
c€ff_w
 = z->img_comp[i].
w2
 / 8;

3220 
z
->
img_comp
[
i
].
c€ff_h
 = z->img_comp[i].
h2
 / 8;

3221 
z
->
img_comp
[
i
].
øw_c€ff
 = 
	`°bi__mÆloc_mad3
(z->img_comp[i].
w2
, z->img_comp[i].
h2
, (), 15);

3222 i‡(
z
->
img_comp
[
i
].
øw_c€ff
 =
NULL
)

3223  
	`°bi__‰ì_j≥g_comp⁄íts
(
z
, 
i
+1, 
	`°bi__îr
("outofmem", "Out of memory"));

3224 
z
->
img_comp
[
i
].
c€ff
 = (*Ë(((
size_t
Ëz->img_comp[i].
øw_c€ff
 + 15) & ~15);

3229 
	}
}

3232 
	#°bi__DNL
(
x
Ë((xË=0xdc)

	)

3233 
	#°bi__SOI
(
x
Ë((xË=0xd8)

	)

3234 
	#°bi__EOI
(
x
Ë((xË=0xd9)

	)

3235 
	#°bi__SOF
(
x
Ë((xË=0xc0 || (xË=0xc1 || (xË=0xc2)

	)

3236 
	#°bi__SOS
(
x
Ë((xË=0xda)

	)

3238 
	#°bi__SOF_¥ogªssive
(
x
Ë((xË=0xc2)

	)

3240 
	$°bi__decode_j≥g_hódî
(
°bi__j≥g
 *
z
, 
sˇn
)

3242 
m
;

3243 
z
->
jfif
 = 0;

3244 
z
->
≠p14_cﬁ‹_å™sf‹m
 = -1;

3245 
z
->
m¨kî
 = 
STBI__MARKER_n⁄e
;

3246 
m
 = 
	`°bi__gë_m¨kî
(
z
);

3247 i‡(!
	`°bi__SOI
(
m
)Ë 
	`°bi__îr
("no SOI","Corrupt JPEG");

3248 i‡(
sˇn
 =
STBI__SCAN_ty≥
)  1;

3249 
m
 = 
	`°bi__gë_m¨kî
(
z
);

3250 !
	`°bi__SOF
(
m
)) {

3251 i‡(!
	`°bi__¥o˚ss_m¨kî
(
z
,
m
))  0;

3252 
m
 = 
	`°bi__gë_m¨kî
(
z
);

3253 
m
 =
STBI__MARKER_n⁄e
) {

3255 i‡(
	`°bi__©_eof
(
z
->
s
)Ë 
	`°bi__îr
("no SOF", "Corrupt JPEG");

3256 
m
 = 
	`°bi__gë_m¨kî
(
z
);

3259 
z
->
¥ogªssive
 = 
	`°bi__SOF_¥ogªssive
(
m
);

3260 i‡(!
	`°bi__¥o˚ss_‰ame_hódî
(
z
, 
sˇn
))  0;

3262 
	}
}

3265 
	$°bi__decode_j≥g_image
(
°bi__j≥g
 *
j
)

3267 
m
;

3268 
m
 = 0; m < 4; m++) {

3269 
j
->
img_comp
[
m
].
øw_d©a
 = 
NULL
;

3270 
j
->
img_comp
[
m
].
øw_c€ff
 = 
NULL
;

3272 
j
->
ª°¨t_öãrvÆ
 = 0;

3273 i‡(!
	`°bi__decode_j≥g_hódî
(
j
, 
STBI__SCAN_lﬂd
))  0;

3274 
m
 = 
	`°bi__gë_m¨kî
(
j
);

3275 !
	`°bi__EOI
(
m
)) {

3276 i‡(
	`°bi__SOS
(
m
)) {

3277 i‡(!
	`°bi__¥o˚ss_sˇn_hódî
(
j
))  0;

3278 i‡(!
	`°bi__∑r£_íå›y_coded_d©a
(
j
))  0;

3279 i‡(
j
->
m¨kî
 =
STBI__MARKER_n⁄e
 ) {

3281 !
	`°bi__©_eof
(
j
->
s
)) {

3282 
x
 = 
	`°bi__gë8
(
j
->
s
);

3283 i‡(
x
 == 255) {

3284 
j
->
m¨kî
 = 
	`°bi__gë8
(j->
s
);

3290 } i‡(
	`°bi__DNL
(
m
)) {

3291 
Ld
 = 
	`°bi__gë16be
(
j
->
s
);

3292 
°bi__uöt32
 
NL
 = 
	`°bi__gë16be
(
j
->
s
);

3293 i‡(
Ld
 !4Ë 
	`°bi__îr
("bad DNLÜen", "Corrupt JPEG");

3294 i‡(
NL
 !
j
->
s
->
img_y
Ë 
	`°bi__îr
("bad DNL height", "Corrupt JPEG");

3296 i‡(!
	`°bi__¥o˚ss_m¨kî
(
j
, 
m
))  0;

3298 
m
 = 
	`°bi__gë_m¨kî
(
j
);

3300 i‡(
j
->
¥ogªssive
)

3301 
	`°bi__j≥g_föish
(
j
);

3303 
	}
}

3307 
	g°bi_uc
 *(*
	tªßm∂e_row_func
)(
	t°bi_uc
 *
	tout
, stbi_u¯*
	tö0
, stbi_u¯*
	tö1
,

3308 
	tw
, 
	ths
);

3310 
	#°bi__div4
(
x
Ë((
°bi_uc
Ë((xË>> 2))

	)

3312 
°bi_uc
 *
	$ªßm∂e_row_1
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3314 
	`STBI_NOTUSED
(
out
);

3315 
	`STBI_NOTUSED
(
ö_Ár
);

3316 
	`STBI_NOTUSED
(
w
);

3317 
	`STBI_NOTUSED
(
hs
);

3318  
ö_√¨
;

3319 
	}
}

3321 
°bi_uc
* 
	$°bi__ªßm∂e_row_v_2
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3324 
i
;

3325 
	`STBI_NOTUSED
(
hs
);

3326 
i
=0; i < 
w
; ++i)

3327 
out
[
i
] = 
	`°bi__div4
(3*
ö_√¨
[i] + 
ö_Ár
[i] + 2);

3328  
out
;

3329 
	}
}

3331 
°bi_uc
* 
	$°bi__ªßm∂e_row_h_2
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3334 
i
;

3335 
°bi_uc
 *
öput
 = 
ö_√¨
;

3337 i‡(
w
 == 1) {

3339 
out
[0] = out[1] = 
öput
[0];

3340  
out
;

3343 
out
[0] = 
öput
[0];

3344 
out
[1] = 
	`°bi__div4
(
öput
[0]*3 + input[1] + 2);

3345 
i
=1; i < 
w
-1; ++i) {

3346 
n
 = 3*
öput
[
i
]+2;

3347 
out
[
i
*2+0] = 
	`°bi__div4
(
n
+
öput
[i-1]);

3348 
out
[
i
*2+1] = 
	`°bi__div4
(
n
+
öput
[i+1]);

3350 
out
[
i
*2+0] = 
	`°bi__div4
(
öput
[
w
-2]*3 + input[w-1] + 2);

3351 
out
[
i
*2+1] = 
öput
[
w
-1];

3353 
	`STBI_NOTUSED
(
ö_Ár
);

3354 
	`STBI_NOTUSED
(
hs
);

3356  
out
;

3357 
	}
}

3359 
	#°bi__div16
(
x
Ë((
°bi_uc
Ë((xË>> 4))

	)

3361 
°bi_uc
 *
	$°bi__ªßm∂e_row_hv_2
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3364 
i
,
t0
,
t1
;

3365 i‡(
w
 == 1) {

3366 
out
[0] = out[1] = 
	`°bi__div4
(3*
ö_√¨
[0] + 
ö_Ár
[0] + 2);

3367  
out
;

3370 
t1
 = 3*
ö_√¨
[0] + 
ö_Ár
[0];

3371 
out
[0] = 
	`°bi__div4
(
t1
+2);

3372 
i
=1; i < 
w
; ++i) {

3373 
t0
 = 
t1
;

3374 
t1
 = 3*
ö_√¨
[
i
]+
ö_Ár
[i];

3375 
out
[
i
*2-1] = 
	`°bi__div16
(3*
t0
 + 
t1
 + 8);

3376 
out
[
i
*2 ] = 
	`°bi__div16
(3*
t1
 + 
t0
 + 8);

3378 
out
[
w
*2-1] = 
	`°bi__div4
(
t1
+2);

3380 
	`STBI_NOTUSED
(
hs
);

3382  
out
;

3383 
	}
}

3385 #i‡
deföed
(
STBI_SSE2
Ë|| deföed(
STBI_NEON
)

3386 
°bi_uc
 *
	$°bi__ªßm∂e_row_hv_2_simd
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3389 
i
=0,
t0
,
t1
;

3391 i‡(
w
 == 1) {

3392 
out
[0] = out[1] = 
	`°bi__div4
(3*
ö_√¨
[0] + 
ö_Ár
[0] + 2);

3393  
out
;

3396 
t1
 = 3*
ö_√¨
[0] + 
ö_Ár
[0];

3400 ; 
i
 < ((
w
-1) & ~7); i += 8) {

3401 #i‡
	`deföed
(
STBI_SSE2
)

3404 
__m128i
 
zîo
 = 
	`_mm_£tzîo_si128
();

3405 
__m128i
 
Árb
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
ö_Ár
 + 
i
));

3406 
__m128i
 
√¨b
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
ö_√¨
 + 
i
));

3407 
__m128i
 
Árw
 = 
	`_mm_u≈acklo_ïi8
(
Árb
, 
zîo
);

3408 
__m128i
 
√¨w
 = 
	`_mm_u≈acklo_ïi8
(
√¨b
, 
zîo
);

3409 
__m128i
 
diff
 = 
	`_mm_sub_ïi16
(
Árw
, 
√¨w
);

3410 
__m128i
 
√¨s
 = 
	`_mm_¶li_ïi16
(
√¨w
, 2);

3411 
__m128i
 
cuº
 = 
	`_mm_add_ïi16
(
√¨s
, 
diff
);

3418 
__m128i
 
¥v0
 = 
	`_mm_¶li_si128
(
cuº
, 2);

3419 
__m128i
 
nxt0
 = 
	`_mm_§li_si128
(
cuº
, 2);

3420 
__m128i
 
¥ev
 = 
	`_mm_ö£π_ïi16
(
¥v0
, 
t1
, 0);

3421 
__m128i
 
√xt
 = 
	`_mm_ö£π_ïi16
(
nxt0
, 3*
ö_√¨
[
i
+8] + 
ö_Ár
[i+8], 7);

3427 
__m128i
 
büs
 = 
	`_mm_£t1_ïi16
(8);

3428 
__m128i
 
curs
 = 
	`_mm_¶li_ïi16
(
cuº
, 2);

3429 
__m128i
 
¥vd
 = 
	`_mm_sub_ïi16
(
¥ev
, 
cuº
);

3430 
__m128i
 
nxtd
 = 
	`_mm_sub_ïi16
(
√xt
, 
cuº
);

3431 
__m128i
 
curb
 = 
	`_mm_add_ïi16
(
curs
, 
büs
);

3432 
__m128i
 
eví
 = 
	`_mm_add_ïi16
(
¥vd
, 
curb
);

3433 
__m128i
 
odd
 = 
	`_mm_add_ïi16
(
nxtd
, 
curb
);

3436 
__m128i
 
öt0
 = 
	`_mm_u≈acklo_ïi16
(
eví
, 
odd
);

3437 
__m128i
 
öt1
 = 
	`_mm_u≈ackhi_ïi16
(
eví
, 
odd
);

3438 
__m128i
 
de0
 = 
	`_mm_§li_ïi16
(
öt0
, 4);

3439 
__m128i
 
de1
 = 
	`_mm_§li_ïi16
(
öt1
, 4);

3442 
__m128i
 
outv
 = 
	`_mm_∑ckus_ïi16
(
de0
, 
de1
);

3443 
	`_mm_°‹eu_si128
((
__m128i
 *Ë(
out
 + 
i
*2), 
outv
);

3444 #ñi‡
	`deföed
(
STBI_NEON
)

3447 
uöt8x8_t
 
Árb
 = 
	`vld1_u8
(
ö_Ár
 + 
i
);

3448 
uöt8x8_t
 
√¨b
 = 
	`vld1_u8
(
ö_√¨
 + 
i
);

3449 
öt16x8_t
 
diff
 = 
	`vªöãΩªtq_s16_u16
(
	`vsubl_u8
(
Árb
, 
√¨b
));

3450 
öt16x8_t
 
√¨s
 = 
	`vªöãΩªtq_s16_u16
(
	`vshŒ_n_u8
(
√¨b
, 2));

3451 
öt16x8_t
 
cuº
 = 
	`vaddq_s16
(
√¨s
, 
diff
);

3458 
öt16x8_t
 
¥v0
 = 
	`vextq_s16
(
cuº
, curr, 7);

3459 
öt16x8_t
 
nxt0
 = 
	`vextq_s16
(
cuº
, curr, 1);

3460 
öt16x8_t
 
¥ev
 = 
	`v£tq_œ√_s16
(
t1
, 
¥v0
, 0);

3461 
öt16x8_t
 
√xt
 = 
	`v£tq_œ√_s16
(3*
ö_√¨
[
i
+8] + 
ö_Ár
[i+8], 
nxt0
, 7);

3467 
öt16x8_t
 
curs
 = 
	`vshlq_n_s16
(
cuº
, 2);

3468 
öt16x8_t
 
¥vd
 = 
	`vsubq_s16
(
¥ev
, 
cuº
);

3469 
öt16x8_t
 
nxtd
 = 
	`vsubq_s16
(
√xt
, 
cuº
);

3470 
öt16x8_t
 
eví
 = 
	`vaddq_s16
(
curs
, 
¥vd
);

3471 
öt16x8_t
 
odd
 = 
	`vaddq_s16
(
curs
, 
nxtd
);

3474 
uöt8x8x2_t
 
o
;

3475 
o
.
vÆ
[0] = 
	`vqrshrun_n_s16
(
eví
, 4);

3476 
o
.
vÆ
[1] = 
	`vqrshrun_n_s16
(
odd
, 4);

3477 
	`v°2_u8
(
out
 + 
i
*2, 
o
);

3481 
t1
 = 3*
ö_√¨
[
i
+7] + 
ö_Ár
[i+7];

3484 
t0
 = 
t1
;

3485 
t1
 = 3*
ö_√¨
[
i
] + 
ö_Ár
[i];

3486 
out
[
i
*2] = 
	`°bi__div16
(3*
t1
 + 
t0
 + 8);

3488 ++
i
; i < 
w
; ++i) {

3489 
t0
 = 
t1
;

3490 
t1
 = 3*
ö_√¨
[
i
]+
ö_Ár
[i];

3491 
out
[
i
*2-1] = 
	`°bi__div16
(3*
t0
 + 
t1
 + 8);

3492 
out
[
i
*2 ] = 
	`°bi__div16
(3*
t1
 + 
t0
 + 8);

3494 
out
[
w
*2-1] = 
	`°bi__div4
(
t1
+2);

3496 
	`STBI_NOTUSED
(
hs
);

3498  
out
;

3499 
	}
}

3502 
°bi_uc
 *
	$°bi__ªßm∂e_row_gíîic
(
°bi_uc
 *
out
, stbi_u¯*
ö_√¨
, stbi_u¯*
ö_Ár
, 
w
, 
hs
)

3505 
i
,
j
;

3506 
	`STBI_NOTUSED
(
ö_Ár
);

3507 
i
=0; i < 
w
; ++i)

3508 
j
=0; j < 
hs
; ++j)

3509 
out
[
i
*
hs
+
j
] = 
ö_√¨
[i];

3510  
out
;

3511 
	}
}

3515 
	#°bi__Êﬂt2fixed
(
x
Ë(((Ë((xË* 4096.0‡+ 0.5f)Ë<< 8)

	)

3516 
	$°bi__YCbCr_to_RGB_row
(
°bi_uc
 *
out
, c⁄° stbi_u¯*
y
, c⁄° stbi_u¯*
pcb
, c⁄° stbi_u¯*
p¸
, 
cou¡
, 
°ï
)

3518 
i
;

3519 
i
=0; i < 
cou¡
; ++i) {

3520 
y_fixed
 = (
y
[
i
] << 20) + (1<<19);

3521 
r
,
g
,
b
;

3522 
¸
 = 
p¸
[
i
] - 128;

3523 
cb
 = 
pcb
[
i
] - 128;

3524 
r
 = 
y_fixed
 + 
¸
* 
	`°bi__Êﬂt2fixed
(1.40200f);

3525 
g
 = 
y_fixed
 + (
¸
*-
	`°bi__Êﬂt2fixed
(0.71414f)Ë+ ((
cb
*-stbi__float2fixed(0.34414f)) & 0xffff0000);

3526 
b
 = 
y_fixed
 + 
cb
* 
	`°bi__Êﬂt2fixed
(1.77200f);

3527 
r
 >>= 20;

3528 
g
 >>= 20;

3529 
b
 >>= 20;

3530 i‡((Ë
r
 > 255) { if (r < 0)Ñ = 0; r = 255; }

3531 i‡((Ë
g
 > 255) { if (g < 0) g = 0; g = 255; }

3532 i‡((Ë
b
 > 255) { if (b < 0) b = 0; b = 255; }

3533 
out
[0] = (
°bi_uc
)
r
;

3534 
out
[1] = (
°bi_uc
)
g
;

3535 
out
[2] = (
°bi_uc
)
b
;

3536 
out
[3] = 255;

3537 
out
 +
°ï
;

3539 
	}
}

3541 #i‡
deföed
(
STBI_SSE2
Ë|| deföed(
STBI_NEON
)

3542 
	$°bi__YCbCr_to_RGB_simd
(
°bi_uc
 *
out
, stbi_u¯c⁄° *
y
, stbi_u¯c⁄° *
pcb
, stbi_u¯c⁄° *
p¸
, 
cou¡
, 
°ï
)

3544 
i
 = 0;

3546 #ifde‡
STBI_SSE2


3550 i‡(
°ï
 == 4) {

3552 
__m128i
 
signÊù
 = 
	`_mm_£t1_ïi8
(-0x80);

3553 
__m128i
 
¸_c⁄°0
 = 
	`_mm_£t1_ïi16
( () ( 1.40200f*4096.0f+0.5f));

3554 
__m128i
 
¸_c⁄°1
 = 
	`_mm_£t1_ïi16
( - () ( 0.71414f*4096.0f+0.5f));

3555 
__m128i
 
cb_c⁄°0
 = 
	`_mm_£t1_ïi16
( - () ( 0.34414f*4096.0f+0.5f));

3556 
__m128i
 
cb_c⁄°1
 = 
	`_mm_£t1_ïi16
( () ( 1.77200f*4096.0f+0.5f));

3557 
__m128i
 
y_büs
 = 
	`_mm_£t1_ïi8
(() () 128);

3558 
__m128i
 
xw
 = 
	`_mm_£t1_ïi16
(255);

3560 ; 
i
+7 < 
cou¡
; i += 8) {

3562 
__m128i
 
y_byãs
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
y
+
i
));

3563 
__m128i
 
¸_byãs
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
p¸
+
i
));

3564 
__m128i
 
cb_byãs
 = 
	`_mm_lﬂdl_ïi64
((__m128ò*Ë(
pcb
+
i
));

3565 
__m128i
 
¸_bü£d
 = 
	`_mm_x‹_si128
(
¸_byãs
, 
signÊù
);

3566 
__m128i
 
cb_bü£d
 = 
	`_mm_x‹_si128
(
cb_byãs
, 
signÊù
);

3569 
__m128i
 
yw
 = 
	`_mm_u≈acklo_ïi8
(
y_büs
, 
y_byãs
);

3570 
__m128i
 
¸w
 = 
	`_mm_u≈acklo_ïi8
(
	`_mm_£tzîo_si128
(), 
¸_bü£d
);

3571 
__m128i
 
cbw
 = 
	`_mm_u≈acklo_ïi8
(
	`_mm_£tzîo_si128
(), 
cb_bü£d
);

3574 
__m128i
 
yws
 = 
	`_mm_§li_ïi16
(
yw
, 4);

3575 
__m128i
 
¸0
 = 
	`_mm_mulhi_ïi16
(
¸_c⁄°0
, 
¸w
);

3576 
__m128i
 
cb0
 = 
	`_mm_mulhi_ïi16
(
cb_c⁄°0
, 
cbw
);

3577 
__m128i
 
cb1
 = 
	`_mm_mulhi_ïi16
(
cbw
, 
cb_c⁄°1
);

3578 
__m128i
 
¸1
 = 
	`_mm_mulhi_ïi16
(
¸w
, 
¸_c⁄°1
);

3579 
__m128i
 
rws
 = 
	`_mm_add_ïi16
(
¸0
, 
yws
);

3580 
__m128i
 
gwt
 = 
	`_mm_add_ïi16
(
cb0
, 
yws
);

3581 
__m128i
 
bws
 = 
	`_mm_add_ïi16
(
yws
, 
cb1
);

3582 
__m128i
 
gws
 = 
	`_mm_add_ïi16
(
gwt
, 
¸1
);

3585 
__m128i
 
rw
 = 
	`_mm_§ai_ïi16
(
rws
, 4);

3586 
__m128i
 
bw
 = 
	`_mm_§ai_ïi16
(
bws
, 4);

3587 
__m128i
 
gw
 = 
	`_mm_§ai_ïi16
(
gws
, 4);

3590 
__m128i
 
brb
 = 
	`_mm_∑ckus_ïi16
(
rw
, 
bw
);

3591 
__m128i
 
gxb
 = 
	`_mm_∑ckus_ïi16
(
gw
, 
xw
);

3594 
__m128i
 
t0
 = 
	`_mm_u≈acklo_ïi8
(
brb
, 
gxb
);

3595 
__m128i
 
t1
 = 
	`_mm_u≈ackhi_ïi8
(
brb
, 
gxb
);

3596 
__m128i
 
o0
 = 
	`_mm_u≈acklo_ïi16
(
t0
, 
t1
);

3597 
__m128i
 
o1
 = 
	`_mm_u≈ackhi_ïi16
(
t0
, 
t1
);

3600 
	`_mm_°‹eu_si128
((
__m128i
 *Ë(
out
 + 0), 
o0
);

3601 
	`_mm_°‹eu_si128
((
__m128i
 *Ë(
out
 + 16), 
o1
);

3602 
out
 += 32;

3607 #ifde‡
STBI_NEON


3609 i‡(
°ï
 == 4) {

3611 
uöt8x8_t
 
signÊù
 = 
	`vdup_n_u8
(0x80);

3612 
öt16x8_t
 
¸_c⁄°0
 = 
	`vdupq_n_s16
( () ( 1.40200f*4096.0f+0.5f));

3613 
öt16x8_t
 
¸_c⁄°1
 = 
	`vdupq_n_s16
( - () ( 0.71414f*4096.0f+0.5f));

3614 
öt16x8_t
 
cb_c⁄°0
 = 
	`vdupq_n_s16
( - () ( 0.34414f*4096.0f+0.5f));

3615 
öt16x8_t
 
cb_c⁄°1
 = 
	`vdupq_n_s16
( () ( 1.77200f*4096.0f+0.5f));

3617 ; 
i
+7 < 
cou¡
; i += 8) {

3619 
uöt8x8_t
 
y_byãs
 = 
	`vld1_u8
(
y
 + 
i
);

3620 
uöt8x8_t
 
¸_byãs
 = 
	`vld1_u8
(
p¸
 + 
i
);

3621 
uöt8x8_t
 
cb_byãs
 = 
	`vld1_u8
(
pcb
 + 
i
);

3622 
öt8x8_t
 
¸_bü£d
 = 
	`vªöãΩªt_s8_u8
(
	`vsub_u8
(
¸_byãs
, 
signÊù
));

3623 
öt8x8_t
 
cb_bü£d
 = 
	`vªöãΩªt_s8_u8
(
	`vsub_u8
(
cb_byãs
, 
signÊù
));

3626 
öt16x8_t
 
yws
 = 
	`vªöãΩªtq_s16_u16
(
	`vshŒ_n_u8
(
y_byãs
, 4));

3627 
öt16x8_t
 
¸w
 = 
	`vshŒ_n_s8
(
¸_bü£d
, 7);

3628 
öt16x8_t
 
cbw
 = 
	`vshŒ_n_s8
(
cb_bü£d
, 7);

3631 
öt16x8_t
 
¸0
 = 
	`vqdmulhq_s16
(
¸w
, 
¸_c⁄°0
);

3632 
öt16x8_t
 
cb0
 = 
	`vqdmulhq_s16
(
cbw
, 
cb_c⁄°0
);

3633 
öt16x8_t
 
¸1
 = 
	`vqdmulhq_s16
(
¸w
, 
¸_c⁄°1
);

3634 
öt16x8_t
 
cb1
 = 
	`vqdmulhq_s16
(
cbw
, 
cb_c⁄°1
);

3635 
öt16x8_t
 
rws
 = 
	`vaddq_s16
(
yws
, 
¸0
);

3636 
öt16x8_t
 
gws
 = 
	`vaddq_s16
(vaddq_s16(
yws
, 
cb0
), 
¸1
);

3637 
öt16x8_t
 
bws
 = 
	`vaddq_s16
(
yws
, 
cb1
);

3640 
uöt8x8x4_t
 
o
;

3641 
o
.
vÆ
[0] = 
	`vqrshrun_n_s16
(
rws
, 4);

3642 
o
.
vÆ
[1] = 
	`vqrshrun_n_s16
(
gws
, 4);

3643 
o
.
vÆ
[2] = 
	`vqrshrun_n_s16
(
bws
, 4);

3644 
o
.
vÆ
[3] = 
	`vdup_n_u8
(255);

3647 
	`v°4_u8
(
out
, 
o
);

3648 
out
 += 8*4;

3653 ; 
i
 < 
cou¡
; ++i) {

3654 
y_fixed
 = (
y
[
i
] << 20) + (1<<19);

3655 
r
,
g
,
b
;

3656 
¸
 = 
p¸
[
i
] - 128;

3657 
cb
 = 
pcb
[
i
] - 128;

3658 
r
 = 
y_fixed
 + 
¸
* 
	`°bi__Êﬂt2fixed
(1.40200f);

3659 
g
 = 
y_fixed
 + 
¸
*-
	`°bi__Êﬂt2fixed
(0.71414fË+ ((
cb
*-stbi__float2fixed(0.34414f)) & 0xffff0000);

3660 
b
 = 
y_fixed
 + 
cb
* 
	`°bi__Êﬂt2fixed
(1.77200f);

3661 
r
 >>= 20;

3662 
g
 >>= 20;

3663 
b
 >>= 20;

3664 i‡((Ë
r
 > 255) { if (r < 0)Ñ = 0; r = 255; }

3665 i‡((Ë
g
 > 255) { if (g < 0) g = 0; g = 255; }

3666 i‡((Ë
b
 > 255) { if (b < 0) b = 0; b = 255; }

3667 
out
[0] = (
°bi_uc
)
r
;

3668 
out
[1] = (
°bi_uc
)
g
;

3669 
out
[2] = (
°bi_uc
)
b
;

3670 
out
[3] = 255;

3671 
out
 +
°ï
;

3673 
	}
}

3677 
	$°bi__£tup_j≥g
(
°bi__j≥g
 *
j
)

3679 
j
->
id˘_block_kî√l
 = 
°bi__id˘_block
;

3680 
j
->
YCbCr_to_RGB_kî√l
 = 
°bi__YCbCr_to_RGB_row
;

3681 
j
->
ªßm∂e_row_hv_2_kî√l
 = 
°bi__ªßm∂e_row_hv_2
;

3683 #ifde‡
STBI_SSE2


3684 i‡(
	`°bi__s£2_avaûabÀ
()) {

3685 
j
->
id˘_block_kî√l
 = 
°bi__id˘_simd
;

3686 
j
->
YCbCr_to_RGB_kî√l
 = 
°bi__YCbCr_to_RGB_simd
;

3687 
j
->
ªßm∂e_row_hv_2_kî√l
 = 
°bi__ªßm∂e_row_hv_2_simd
;

3691 #ifde‡
STBI_NEON


3692 
j
->
id˘_block_kî√l
 = 
°bi__id˘_simd
;

3693 
j
->
YCbCr_to_RGB_kî√l
 = 
°bi__YCbCr_to_RGB_simd
;

3694 
j
->
ªßm∂e_row_hv_2_kî√l
 = 
°bi__ªßm∂e_row_hv_2_simd
;

3696 
	}
}

3699 
	$°bi__˛ónup_j≥g
(
°bi__j≥g
 *
j
)

3701 
	`°bi__‰ì_j≥g_comp⁄íts
(
j
, j->
s
->
img_n
, 0);

3702 
	}
}

3706 
ªßm∂e_row_func
 
	mªßm∂e
;

3707 
°bi_uc
 *
	mlöe0
,*
	mlöe1
;

3708 
	mhs
,
	mvs
;

3709 
	mw_l‹es
;

3710 
	my°ï
;

3711 
	mypos
;

3712 } 
	t°bi__ªßm∂e
;

3715 
°bi_uc
 
	$°bi__blön_8x8
(
°bi_uc
 
x
, stbi_u¯
y
)

3717 
t
 = 
x
*
y
 + 128;

3718  (
°bi_uc
Ë((
t
 + (t >>8)) >> 8);

3719 
	}
}

3721 
°bi_uc
 *
	$lﬂd_j≥g_image
(
°bi__j≥g
 *
z
, *
out_x
, *
out_y
, *
comp
, 
ªq_comp
)

3723 
n
, 
decode_n
, 
is_rgb
;

3724 
z
->
s
->
img_n
 = 0;

3727 i‡(
ªq_comp
 < 0 ||Ñeq_com∞> 4Ë 
	`°bi__îΩuc
("badÑeq_comp", "InternalÉrror");

3730 i‡(!
	`°bi__decode_j≥g_image
(
z
)Ë{ 
	`°bi__˛ónup_j≥g
(z);  
NULL
; }

3733 
n
 = 
ªq_comp
 ?Ñeq_com∞: 
z
->
s
->
img_n
 >= 3 ? 3 : 1;

3735 
is_rgb
 = 
z
->
s
->
img_n
 =3 && (z->
rgb
 =3 || (z->
≠p14_cﬁ‹_å™sf‹m
 =0 && !z->
jfif
));

3737 i‡(
z
->
s
->
img_n
 =3 && 
n
 < 3 && !
is_rgb
)

3738 
decode_n
 = 1;

3740 
decode_n
 = 
z
->
s
->
img_n
;

3744 
k
;

3745 
i
,
j
;

3746 
°bi_uc
 *
ouçut
;

3747 
°bi_uc
 *
couçut
[4] = { 
NULL
, NULL, NULL, NULL };

3749 
°bi__ªßm∂e
 
ªs_comp
[4];

3751 
k
=0; k < 
decode_n
; ++k) {

3752 
°bi__ªßm∂e
 *
r
 = &
ªs_comp
[
k
];

3756 
z
->
img_comp
[
k
].
löebuf
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(z->
s
->
img_x
 + 3);

3757 i‡(!
z
->
img_comp
[
k
].
löebuf
Ë{ 
	`°bi__˛ónup_j≥g
(z);  
	`°bi__îΩuc
("outofmem", "Out of memory"); }

3759 
r
->
hs
 = 
z
->
img_h_max
 / z->
img_comp
[
k
].
h
;

3760 
r
->
vs
 = 
z
->
img_v_max
 / z->
img_comp
[
k
].
v
;

3761 
r
->
y°ï
 =Ñ->
vs
 >> 1;

3762 
r
->
w_l‹es
 = (
z
->
s
->
img_x
 +Ñ->
hs
-1) /Ñ->hs;

3763 
r
->
ypos
 = 0;

3764 
r
->
löe0
 =Ñ->
löe1
 = 
z
->
img_comp
[
k
].
d©a
;

3766 i‡(
r
->
hs
 =1 &&Ñ->
vs
 =1Ër->
ªßm∂e
 = 
ªßm∂e_row_1
;

3767 i‡(
r
->
hs
 =1 &&Ñ->
vs
 =2Ër->
ªßm∂e
 = 
°bi__ªßm∂e_row_v_2
;

3768 i‡(
r
->
hs
 =2 &&Ñ->
vs
 =1Ër->
ªßm∂e
 = 
°bi__ªßm∂e_row_h_2
;

3769 i‡(
r
->
hs
 =2 &&Ñ->
vs
 =2Ër->
ªßm∂e
 = 
z
->
ªßm∂e_row_hv_2_kî√l
;

3770 
r
->
ªßm∂e
 = 
°bi__ªßm∂e_row_gíîic
;

3774 
ouçut
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
n
, 
z
->
s
->
img_x
, z->s->
img_y
, 1);

3775 i‡(!
ouçut
Ë{ 
	`°bi__˛ónup_j≥g
(
z
);  
	`°bi__îΩuc
("outofmem", "Out of memory"); }

3778 
j
=0; j < 
z
->
s
->
img_y
; ++j) {

3779 
°bi_uc
 *
out
 = 
ouçut
 + 
n
 * 
z
->
s
->
img_x
 * 
j
;

3780 
k
=0; k < 
decode_n
; ++k) {

3781 
°bi__ªßm∂e
 *
r
 = &
ªs_comp
[
k
];

3782 
y_bŸ
 = 
r
->
y°ï
 >‘->
vs
 >> 1);

3783 
couçut
[
k
] = 
r
->
	`ªßm∂e
(
z
->
img_comp
[k].
löebuf
,

3784 
y_bŸ
 ? 
r
->
löe1
 :Ñ->
löe0
,

3785 
y_bŸ
 ? 
r
->
löe0
 :Ñ->
löe1
,

3786 
r
->
w_l‹es
,Ñ->
hs
);

3787 i‡(++
r
->
y°ï
 >r->
vs
) {

3788 
r
->
y°ï
 = 0;

3789 
r
->
löe0
 =Ñ->
löe1
;

3790 i‡(++
r
->
ypos
 < 
z
->
img_comp
[
k
].
y
)

3791 
r
->
löe1
 +
z
->
img_comp
[
k
].
w2
;

3794 i‡(
n
 >= 3) {

3795 
°bi_uc
 *
y
 = 
couçut
[0];

3796 i‡(
z
->
s
->
img_n
 == 3) {

3797 i‡(
is_rgb
) {

3798 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3799 
out
[0] = 
y
[
i
];

3800 
out
[1] = 
couçut
[1][
i
];

3801 
out
[2] = 
couçut
[2][
i
];

3802 
out
[3] = 255;

3803 
out
 +
n
;

3806 
z
->
	`YCbCr_to_RGB_kî√l
(
out
, 
y
, 
couçut
[1], couçut[2], z->
s
->
img_x
, 
n
);

3808 } i‡(
z
->
s
->
img_n
 == 4) {

3809 i‡(
z
->
≠p14_cﬁ‹_å™sf‹m
 == 0) {

3810 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3811 
°bi_uc
 
m
 = 
couçut
[3][
i
];

3812 
out
[0] = 
	`°bi__blön_8x8
(
couçut
[0][
i
], 
m
);

3813 
out
[1] = 
	`°bi__blön_8x8
(
couçut
[1][
i
], 
m
);

3814 
out
[2] = 
	`°bi__blön_8x8
(
couçut
[2][
i
], 
m
);

3815 
out
[3] = 255;

3816 
out
 +
n
;

3818 } i‡(
z
->
≠p14_cﬁ‹_å™sf‹m
 == 2) {

3819 
z
->
	`YCbCr_to_RGB_kî√l
(
out
, 
y
, 
couçut
[1], couçut[2], z->
s
->
img_x
, 
n
);

3820 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3821 
°bi_uc
 
m
 = 
couçut
[3][
i
];

3822 
out
[0] = 
	`°bi__blön_8x8
(255 - out[0], 
m
);

3823 
out
[1] = 
	`°bi__blön_8x8
(255 - out[1], 
m
);

3824 
out
[2] = 
	`°bi__blön_8x8
(255 - out[2], 
m
);

3825 
out
 +
n
;

3828 
z
->
	`YCbCr_to_RGB_kî√l
(
out
, 
y
, 
couçut
[1], couçut[2], z->
s
->
img_x
, 
n
);

3831 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3832 
out
[0] = out[1] = out[2] = 
y
[
i
];

3833 
out
[3] = 255;

3834 
out
 +
n
;

3837 i‡(
is_rgb
) {

3838 i‡(
n
 == 1)

3839 
i
=0; i < 
z
->
s
->
img_x
; ++i)

3840 *
out
++ = 
	`°bi__compuã_y
(
couçut
[0][
i
], coutput[1][i], coutput[2][i]);

3842 
i
=0; i < 
z
->
s
->
img_x
; ++i, 
out
 += 2) {

3843 
out
[0] = 
	`°bi__compuã_y
(
couçut
[0][
i
], coutput[1][i], coutput[2][i]);

3844 
out
[1] = 255;

3847 } i‡(
z
->
s
->
img_n
 =4 && z->
≠p14_cﬁ‹_å™sf‹m
 == 0) {

3848 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3849 
°bi_uc
 
m
 = 
couçut
[3][
i
];

3850 
°bi_uc
 
r
 = 
	`°bi__blön_8x8
(
couçut
[0][
i
], 
m
);

3851 
°bi_uc
 
g
 = 
	`°bi__blön_8x8
(
couçut
[1][
i
], 
m
);

3852 
°bi_uc
 
b
 = 
	`°bi__blön_8x8
(
couçut
[2][
i
], 
m
);

3853 
out
[0] = 
	`°bi__compuã_y
(
r
, 
g
, 
b
);

3854 
out
[1] = 255;

3855 
out
 +
n
;

3857 } i‡(
z
->
s
->
img_n
 =4 && z->
≠p14_cﬁ‹_å™sf‹m
 == 2) {

3858 
i
=0; i < 
z
->
s
->
img_x
; ++i) {

3859 
out
[0] = 
	`°bi__blön_8x8
(255 - 
couçut
[0][
i
], coutput[3][i]);

3860 
out
[1] = 255;

3861 
out
 +
n
;

3864 
°bi_uc
 *
y
 = 
couçut
[0];

3865 i‡(
n
 == 1)

3866 
i
=0; i < 
z
->
s
->
img_x
; ++iË
out
[i] = 
y
[i];

3868 
i
=0; i < 
z
->
s
->
img_x
; ++iË{ *
out
++ = 
y
[i]; *out++ = 255; }

3872 
	`°bi__˛ónup_j≥g
(
z
);

3873 *
out_x
 = 
z
->
s
->
img_x
;

3874 *
out_y
 = 
z
->
s
->
img_y
;

3875 i‡(
comp
Ë*com∞
z
->
s
->
img_n
 >= 3 ? 3 : 1;

3876  
ouçut
;

3878 
	}
}

3880 *
	$°bi__j≥g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

3882 * 
ªsu…
;

3883 
°bi__j≥g
* 
j
 = (°bi__j≥g*Ë
	`°bi__mÆloc
((stbi__jpeg));

3884 
	`STBI_NOTUSED
(
ri
);

3885 
j
->
s
 = s;

3886 
	`°bi__£tup_j≥g
(
j
);

3887 
ªsu…
 = 
	`lﬂd_j≥g_image
(
j
, 
x
,
y
,
comp
,
ªq_comp
);

3888 
	`STBI_FREE
(
j
);

3889  
ªsu…
;

3890 
	}
}

3892 
	$°bi__j≥g_ã°
(
°bi__c⁄ãxt
 *
s
)

3894 
r
;

3895 
°bi__j≥g
* 
j
 = (°bi__j≥g*)
	`°bi__mÆloc
((stbi__jpeg));

3896 
j
->
s
 = s;

3897 
	`°bi__£tup_j≥g
(
j
);

3898 
r
 = 
	`°bi__decode_j≥g_hódî
(
j
, 
STBI__SCAN_ty≥
);

3899 
	`°bi__ªwöd
(
s
);

3900 
	`STBI_FREE
(
j
);

3901  
r
;

3902 
	}
}

3904 
	$°bi__j≥g_öfo_øw
(
°bi__j≥g
 *
j
, *
x
, *
y
, *
comp
)

3906 i‡(!
	`°bi__decode_j≥g_hódî
(
j
, 
STBI__SCAN_hódî
)) {

3907 
	`°bi__ªwöd
–
j
->
s
 );

3910 i‡(
x
Ë*x = 
j
->
s
->
img_x
;

3911 i‡(
y
Ë*y = 
j
->
s
->
img_y
;

3912 i‡(
comp
Ë*com∞
j
->
s
->
img_n
 >= 3 ? 3 : 1;

3914 
	}
}

3916 
	$°bi__j≥g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

3918 
ªsu…
;

3919 
°bi__j≥g
* 
j
 = (°bi__j≥g*Ë(
	`°bi__mÆloc
((stbi__jpeg)));

3920 
j
->
s
 = s;

3921 
ªsu…
 = 
	`°bi__j≥g_öfo_øw
(
j
, 
x
, 
y
, 
comp
);

3922 
	`STBI_FREE
(
j
);

3923  
ªsu…
;

3924 
	}
}

3934 #i‚de‡
STBI_NO_ZLIB


3937 
	#STBI__ZFAST_BITS
 9

3938 
	#STBI__ZFAST_MASK
 ((1 << 
STBI__ZFAST_BITS
Ë- 1)

	)

3944 
°bi__uöt16
 
	mÁ°
[1 << 
STBI__ZFAST_BITS
];

3945 
°bi__uöt16
 
	mfú°code
[16];

3946 
	mmaxcode
[17];

3947 
°bi__uöt16
 
	mfú°symbﬁ
[16];

3948 
°bi_uc
 
	msize
[288];

3949 
°bi__uöt16
 
	mvÆue
[288];

3950 } 
	t°bi__zhuffm™
;

3952 
°bi_ölöe
 
	$°bi__bôªvî£16
(
n
)

3954 
n
 = ((n & 0xAAAA) >> 1) | ((n & 0x5555) << 1);

3955 
n
 = ((n & 0xCCCC) >> 2) | ((n & 0x3333) << 2);

3956 
n
 = ((n & 0xF0F0) >> 4) | ((n & 0x0F0F) << 4);

3957 
n
 = ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);

3958  
n
;

3959 
	}
}

3961 
°bi_ölöe
 
	$°bi__bô_ªvî£
(
v
, 
bôs
)

3963 
	`STBI_ASSERT
(
bôs
 <= 16);

3966  
	`°bi__bôªvî£16
(
v
Ë>> (16-
bôs
);

3967 
	}
}

3969 
	$°bi__zbuûd_huffm™
(
°bi__zhuffm™
 *
z
, c⁄° 
°bi_uc
 *
sizñi°
, 
num
)

3971 
i
,
k
=0;

3972 
code
, 
√xt_code
[16], 
sizes
[17];

3975 
	`mem£t
(
sizes
, 0, (sizes));

3976 
	`mem£t
(
z
->
Á°
, 0, (z->fast));

3977 
i
=0; i < 
num
; ++i)

3978 ++
sizes
[
sizñi°
[
i
]];

3979 
sizes
[0] = 0;

3980 
i
=1; i < 16; ++i)

3981 i‡(
sizes
[
i
] > (1 << i))

3982  
	`°bi__îr
("bad sizes", "Corrupt PNG");

3983 
code
 = 0;

3984 
i
=1; i < 16; ++i) {

3985 
√xt_code
[
i
] = 
code
;

3986 
z
->
fú°code
[
i
] = (
°bi__uöt16
Ë
code
;

3987 
z
->
fú°symbﬁ
[
i
] = (
°bi__uöt16
Ë
k
;

3988 
code
 = (codê+ 
sizes
[
i
]);

3989 i‡(
sizes
[
i
])

3990 i‡(
code
-1 >(1 << 
i
)Ë 
	`°bi__îr
("bad codelengths","Corrupt PNG");

3991 
z
->
maxcode
[
i
] = 
code
 << (16-i);

3992 
code
 <<= 1;

3993 
k
 +
sizes
[
i
];

3995 
z
->
maxcode
[16] = 0x10000;

3996 
i
=0; i < 
num
; ++i) {

3997 
s
 = 
sizñi°
[
i
];

3998 i‡(
s
) {

3999 
c
 = 
√xt_code
[
s
] - 
z
->
fú°code
[s] + z->
fú°symbﬁ
[s];

4000 
°bi__uöt16
 
Á°v
 = (°bi__uöt16Ë((
s
 << 9Ë| 
i
);

4001 
z
->
size
 [
c
] = (
°bi_uc
 ) 
s
;

4002 
z
->
vÆue
[
c
] = (
°bi__uöt16
Ë
i
;

4003 i‡(
s
 <
STBI__ZFAST_BITS
) {

4004 
j
 = 
	`°bi__bô_ªvî£
(
√xt_code
[
s
],s);

4005 
j
 < (1 << 
STBI__ZFAST_BITS
)) {

4006 
z
->
Á°
[
j
] = 
Á°v
;

4007 
j
 +(1 << 
s
);

4010 ++
√xt_code
[
s
];

4014 
	}
}

4024 
°bi_uc
 *
	mzbuf„r
, *
	mzbuf„r_íd
;

4025 
	mnum_bôs
;

4026 
°bi__uöt32
 
	mcode_buf„r
;

4028 *
	mzout
;

4029 *
	mzout_°¨t
;

4030 *
	mzout_íd
;

4031 
	mz_ex∑ndabÀ
;

4033 
°bi__zhuffm™
 
	mz_Àngth
, 
	mz_di°™˚
;

4034 } 
	t°bi__zbuf
;

4036 
°bi_ölöe
 
°bi_uc
 
	$°bi__zgë8
(
°bi__zbuf
 *
z
)

4038 i‡(
z
->
zbuf„r
 >z->
zbuf„r_íd
)  0;

4039  *
z
->
zbuf„r
++;

4040 
	}
}

4042 
	$°bi__fûl_bôs
(
°bi__zbuf
 *
z
)

4045 
	`STBI_ASSERT
(
z
->
code_buf„r
 < (1U << z->
num_bôs
));

4046 
z
->
code_buf„r
 |(Ë
	`°bi__zgë8
(zË<< z->
num_bôs
;

4047 
z
->
num_bôs
 += 8;

4048 } 
z
->
num_bôs
 <= 24);

4049 
	}
}

4051 
°bi_ölöe
 
	$°bi__zª˚ive
(
°bi__zbuf
 *
z
, 
n
)

4053 
k
;

4054 i‡(
z
->
num_bôs
 < 
n
Ë
	`°bi__fûl_bôs
(z);

4055 
k
 = 
z
->
code_buf„r
 & ((1 << 
n
) - 1);

4056 
z
->
code_buf„r
 >>
n
;

4057 
z
->
num_bôs
 -
n
;

4058  
k
;

4059 
	}
}

4061 
	$°bi__zhuffm™_decode_¶ow∑th
(
°bi__zbuf
 *
a
, 
°bi__zhuffm™
 *
z
)

4063 
b
,
s
,
k
;

4066 
k
 = 
	`°bi__bô_ªvî£
(
a
->
code_buf„r
, 16);

4067 
s
=
STBI__ZFAST_BITS
+1; ; ++s)

4068 i‡(
k
 < 
z
->
maxcode
[
s
])

4070 i‡(
s
 == 16)  -1;

4072 
b
 = (
k
 >> (16-
s
)Ë- 
z
->
fú°code
[s] + z->
fú°symbﬁ
[s];

4073 
	`STBI_ASSERT
(
z
->
size
[
b
] =
s
);

4074 
a
->
code_buf„r
 >>
s
;

4075 
a
->
num_bôs
 -
s
;

4076  
z
->
vÆue
[
b
];

4077 
	}
}

4079 
°bi_ölöe
 
	$°bi__zhuffm™_decode
(
°bi__zbuf
 *
a
, 
°bi__zhuffm™
 *
z
)

4081 
b
,
s
;

4082 i‡(
a
->
num_bôs
 < 16Ë
	`°bi__fûl_bôs
(a);

4083 
b
 = 
z
->
Á°
[
a
->
code_buf„r
 & 
STBI__ZFAST_MASK
];

4084 i‡(
b
) {

4085 
s
 = 
b
 >> 9;

4086 
a
->
code_buf„r
 >>
s
;

4087 
a
->
num_bôs
 -
s
;

4088  
b
 & 511;

4090  
	`°bi__zhuffm™_decode_¶ow∑th
(
a
, 
z
);

4091 
	}
}

4093 
	$°bi__zex∑nd
(
°bi__zbuf
 *
z
, *
zout
, 
n
)

4095 *
q
;

4096 
cur
, 
limô
, 
ﬁd_limô
;

4097 
z
->
zout
 = zout;

4098 i‡(!
z
->
z_ex∑ndabÀ
Ë 
	`°bi__îr
("output bufferÜimit","Corrupt PNG");

4099 
cur
 = (Ë(
z
->
zout
 - z->
zout_°¨t
);

4100 
limô
 = 
ﬁd_limô
 = (Ë(
z
->
zout_íd
 - z->
zout_°¨t
);

4101 
cur
 + 
n
 > 
limô
)

4102 
limô
 *= 2;

4103 
q
 = (*Ë
	`STBI_REALLOC_SIZED
(
z
->
zout_°¨t
, 
ﬁd_limô
, 
limô
);

4104 
	`STBI_NOTUSED
(
ﬁd_limô
);

4105 i‡(
q
 =
NULL
Ë 
	`°bi__îr
("outofmem", "Out of memory");

4106 
z
->
zout_°¨t
 = 
q
;

4107 
z
->
zout
 = 
q
 + 
cur
;

4108 
z
->
zout_íd
 = 
q
 + 
limô
;

4110 
	}
}

4112 c⁄° 
	g°bi__zÀngth_ba£
[31] = {

4117 c⁄° 
	g°bi__zÀngth_exåa
[31]=

4120 c⁄° 
	g°bi__zdi°_ba£
[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,

4123 c⁄° 
	g°bi__zdi°_exåa
[32] =

4126 
	$°bi__∑r£_huffm™_block
(
°bi__zbuf
 *
a
)

4128 *
zout
 = 
a
->zout;

4130 
z
 = 
	`°bi__zhuffm™_decode
(
a
, &a->
z_Àngth
);

4131 i‡(
z
 < 256) {

4132 i‡(
z
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt PNG");

4133 i‡(
zout
 >
a
->
zout_íd
) {

4134 i‡(!
	`°bi__zex∑nd
(
a
, 
zout
, 1))  0;

4135 
zout
 = 
a
->zout;

4137 *
zout
++ = (Ë
z
;

4139 
°bi_uc
 *
p
;

4140 
Àn
,
di°
;

4141 i‡(
z
 == 256) {

4142 
a
->
zout
 = zout;

4145 
z
 -= 257;

4146 
Àn
 = 
°bi__zÀngth_ba£
[
z
];

4147 i‡(
°bi__zÀngth_exåa
[
z
]Ë
Àn
 +
	`°bi__zª˚ive
(
a
, stbi__zlength_extra[z]);

4148 
z
 = 
	`°bi__zhuffm™_decode
(
a
, &a->
z_di°™˚
);

4149 i‡(
z
 < 0Ë 
	`°bi__îr
("bad huffman code","Corrupt PNG");

4150 
di°
 = 
°bi__zdi°_ba£
[
z
];

4151 i‡(
°bi__zdi°_exåa
[
z
]Ë
di°
 +
	`°bi__zª˚ive
(
a
, stbi__zdist_extra[z]);

4152 i‡(
zout
 - 
a
->
zout_°¨t
 < 
di°
Ë 
	`°bi__îr
("bad dist","Corrupt PNG");

4153 i‡(
zout
 + 
Àn
 > 
a
->
zout_íd
) {

4154 i‡(!
	`°bi__zex∑nd
(
a
, 
zout
, 
Àn
))  0;

4155 
zout
 = 
a
->zout;

4157 
p
 = (
°bi_uc
 *Ë(
zout
 - 
di°
);

4158 i‡(
di°
 == 1) {

4159 
°bi_uc
 
v
 = *
p
;

4160 i‡(
Àn
Ë{ dÿ*
zout
++ = 
v
; --len); }

4162 i‡(
Àn
Ë{ dÿ*
zout
++ = *
p
++; --len); }

4166 
	}
}

4168 
	$°bi__compuã_huffm™_codes
(
°bi__zbuf
 *
a
)

4170 c⁄° 
°bi_uc
 
Àngth_dezigzag
[19] = { 16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15 };

4171 
°bi__zhuffm™
 
z_codñígth
;

4172 
°bi_uc
 
Àncodes
[286+32+137];

4173 
°bi_uc
 
codñígth_sizes
[19];

4174 
i
,
n
;

4176 
hlô
 = 
	`°bi__zª˚ive
(
a
,5) + 257;

4177 
hdi°
 = 
	`°bi__zª˚ive
(
a
,5) + 1;

4178 
h˛í
 = 
	`°bi__zª˚ive
(
a
,4) + 4;

4179 
¡Ÿ
 = 
hlô
 + 
hdi°
;

4181 
	`mem£t
(
codñígth_sizes
, 0, (codelength_sizes));

4182 
i
=0; i < 
h˛í
; ++i) {

4183 
s
 = 
	`°bi__zª˚ive
(
a
,3);

4184 
codñígth_sizes
[
Àngth_dezigzag
[
i
]] = (
°bi_uc
Ë
s
;

4186 i‡(!
	`°bi__zbuûd_huffm™
(&
z_codñígth
, 
codñígth_sizes
, 19))  0;

4188 
n
 = 0;

4189 
n
 < 
¡Ÿ
) {

4190 
c
 = 
	`°bi__zhuffm™_decode
(
a
, &
z_codñígth
);

4191 i‡(
c
 < 0 || c >19Ë 
	`°bi__îr
("bad codelengths", "Corrupt PNG");

4192 i‡(
c
 < 16)

4193 
Àncodes
[
n
++] = (
°bi_uc
Ë
c
;

4195 
°bi_uc
 
fûl
 = 0;

4196 i‡(
c
 == 16) {

4197 
c
 = 
	`°bi__zª˚ive
(
a
,2)+3;

4198 i‡(
n
 =0Ë 
	`°bi__îr
("bad codelengths", "Corrupt PNG");

4199 
fûl
 = 
Àncodes
[
n
-1];

4200 } i‡(
c
 == 17)

4201 
c
 = 
	`°bi__zª˚ive
(
a
,3)+3;

4203 
	`STBI_ASSERT
(
c
 == 18);

4204 
c
 = 
	`°bi__zª˚ive
(
a
,7)+11;

4206 i‡(
¡Ÿ
 - 
n
 < 
c
Ë 
	`°bi__îr
("bad codelengths", "Corrupt PNG");

4207 
	`mem£t
(
Àncodes
+
n
, 
fûl
, 
c
);

4208 
n
 +
c
;

4211 i‡(
n
 !
¡Ÿ
Ë 
	`°bi__îr
("bad codelengths","Corrupt PNG");

4212 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_Àngth
, 
Àncodes
, 
hlô
))  0;

4213 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_di°™˚
, 
Àncodes
+
hlô
, 
hdi°
))  0;

4215 
	}
}

4217 
	$°bi__∑r£_uncom¥es£d_block
(
°bi__zbuf
 *
a
)

4219 
°bi_uc
 
hódî
[4];

4220 
Àn
,
∆í
,
k
;

4221 i‡(
a
->
num_bôs
 & 7)

4222 
	`°bi__zª˚ive
(
a
,á->
num_bôs
 & 7);

4224 
k
 = 0;

4225 
a
->
num_bôs
 > 0) {

4226 
hódî
[
k
++] = (
°bi_uc
Ë(
a
->
code_buf„r
 & 255);

4227 
a
->
code_buf„r
 >>= 8;

4228 
a
->
num_bôs
 -= 8;

4230 
	`STBI_ASSERT
(
a
->
num_bôs
 == 0);

4232 
k
 < 4)

4233 
hódî
[
k
++] = 
	`°bi__zgë8
(
a
);

4234 
Àn
 = 
hódî
[1] * 256 + header[0];

4235 
∆í
 = 
hódî
[3] * 256 + header[2];

4236 i‡(
∆í
 !(
Àn
 ^ 0xffff)Ë 
	`°bi__îr
("zlib corrupt","Corrupt PNG");

4237 i‡(
a
->
zbuf„r
 + 
Àn
 >á->
zbuf„r_íd
Ë 
	`°bi__îr
("readÖast buffer","Corrupt PNG");

4238 i‡(
a
->
zout
 + 
Àn
 >á->
zout_íd
)

4239 i‡(!
	`°bi__zex∑nd
(
a
,á->
zout
, 
Àn
))  0;

4240 
	`mem˝y
(
a
->
zout
,á->
zbuf„r
, 
Àn
);

4241 
a
->
zbuf„r
 +
Àn
;

4242 
a
->
zout
 +
Àn
;

4244 
	}
}

4246 
	$°bi__∑r£_zlib_hódî
(
°bi__zbuf
 *
a
)

4248 
cmf
 = 
	`°bi__zgë8
(
a
);

4249 
cm
 = 
cmf
 & 15;

4251 
Êg
 = 
	`°bi__zgë8
(
a
);

4252 i‡((
cmf
*256+
Êg
Ë% 31 !0Ë 
	`°bi__îr
("bad zlib header","Corrupt PNG");

4253 i‡(
Êg
 & 32Ë 
	`°bi__îr
("noÖreset dict","Corrupt PNG");

4254 i‡(
cm
 !8Ë 
	`°bi__îr
("bad compression","Corrupt PNG");

4257 
	}
}

4259 c⁄° 
°bi_uc
 
	g°bi__zdeÁu…_Àngth
[288] =

4271 c⁄° 
°bi_uc
 
	g°bi__zdeÁu…_di°™˚
[32] =

4288 
	$°bi__∑r£_zlib
(
°bi__zbuf
 *
a
, 
∑r£_hódî
)

4290 
föÆ
, 
ty≥
;

4291 i‡(
∑r£_hódî
)

4292 i‡(!
	`°bi__∑r£_zlib_hódî
(
a
))  0;

4293 
a
->
num_bôs
 = 0;

4294 
a
->
code_buf„r
 = 0;

4296 
föÆ
 = 
	`°bi__zª˚ive
(
a
,1);

4297 
ty≥
 = 
	`°bi__zª˚ive
(
a
,2);

4298 i‡(
ty≥
 == 0) {

4299 i‡(!
	`°bi__∑r£_uncom¥es£d_block
(
a
))  0;

4300 } i‡(
ty≥
 == 3) {

4303 i‡(
ty≥
 == 1) {

4305 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_Àngth
 , 
°bi__zdeÁu…_Àngth
 , 288))  0;

4306 i‡(!
	`°bi__zbuûd_huffm™
(&
a
->
z_di°™˚
, 
°bi__zdeÁu…_di°™˚
, 32))  0;

4308 i‡(!
	`°bi__compuã_huffm™_codes
(
a
))  0;

4310 i‡(!
	`°bi__∑r£_huffm™_block
(
a
))  0;

4312 } !
föÆ
);

4314 
	}
}

4316 
	$°bi__do_zlib
(
°bi__zbuf
 *
a
, *
obuf
, 
ﬁí
, 
exp
, 
∑r£_hódî
)

4318 
a
->
zout_°¨t
 = 
obuf
;

4319 
a
->
zout
 = 
obuf
;

4320 
a
->
zout_íd
 = 
obuf
 + 
ﬁí
;

4321 
a
->
z_ex∑ndabÀ
 = 
exp
;

4323  
	`°bi__∑r£_zlib
(
a
, 
∑r£_hódî
);

4324 
	}
}

4326 
STBIDEF
 *
	$°bi_zlib_decode_mÆloc_guesssize
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
)

4328 
°bi__zbuf
 
a
;

4329 *
p
 = (*Ë
	`°bi__mÆloc
(
öôül_size
);

4330 i‡(
p
 =
NULL
)  NULL;

4331 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
buf„r
;

4332 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
buf„r
 + 
Àn
;

4333 i‡(
	`°bi__do_zlib
(&
a
, 
p
, 
öôül_size
, 1, 1)) {

4334 i‡(
ouéí
Ë*ouéí = (Ë(
a
.
zout
 -á.
zout_°¨t
);

4335  
a
.
zout_°¨t
;

4337 
	`STBI_FREE
(
a
.
zout_°¨t
);

4338  
NULL
;

4340 
	}
}

4342 
STBIDEF
 *
	$°bi_zlib_decode_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
)

4344  
	`°bi_zlib_decode_mÆloc_guesssize
(
buf„r
, 
Àn
, 16384, 
ouéí
);

4345 
	}
}

4347 
STBIDEF
 *
	$°bi_zlib_decode_mÆloc_guesssize_hódîÊag
(c⁄° *
buf„r
, 
Àn
, 
öôül_size
, *
ouéí
, 
∑r£_hódî
)

4349 
°bi__zbuf
 
a
;

4350 *
p
 = (*Ë
	`°bi__mÆloc
(
öôül_size
);

4351 i‡(
p
 =
NULL
)  NULL;

4352 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
buf„r
;

4353 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
buf„r
 + 
Àn
;

4354 i‡(
	`°bi__do_zlib
(&
a
, 
p
, 
öôül_size
, 1, 
∑r£_hódî
)) {

4355 i‡(
ouéí
Ë*ouéí = (Ë(
a
.
zout
 -á.
zout_°¨t
);

4356  
a
.
zout_°¨t
;

4358 
	`STBI_FREE
(
a
.
zout_°¨t
);

4359  
NULL
;

4361 
	}
}

4363 
STBIDEF
 
	$°bi_zlib_decode_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
)

4365 
°bi__zbuf
 
a
;

4366 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
ibuf„r
;

4367 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
ibuf„r
 + 
ûí
;

4368 i‡(
	`°bi__do_zlib
(&
a
, 
obuf„r
, 
ﬁí
, 0, 1))

4369  (Ë(
a
.
zout
 -á.
zout_°¨t
);

4372 
	}
}

4374 
STBIDEF
 *
	$°bi_zlib_decode_nohódî_mÆloc
(c⁄° *
buf„r
, 
Àn
, *
ouéí
)

4376 
°bi__zbuf
 
a
;

4377 *
p
 = (*Ë
	`°bi__mÆloc
(16384);

4378 i‡(
p
 =
NULL
)  NULL;

4379 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
buf„r
;

4380 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
buf„r
+
Àn
;

4381 i‡(
	`°bi__do_zlib
(&
a
, 
p
, 16384, 1, 0)) {

4382 i‡(
ouéí
Ë*ouéí = (Ë(
a
.
zout
 -á.
zout_°¨t
);

4383  
a
.
zout_°¨t
;

4385 
	`STBI_FREE
(
a
.
zout_°¨t
);

4386  
NULL
;

4388 
	}
}

4390 
STBIDEF
 
	$°bi_zlib_decode_nohódî_buf„r
(*
obuf„r
, 
ﬁí
, c⁄° *
ibuf„r
, 
ûí
)

4392 
°bi__zbuf
 
a
;

4393 
a
.
zbuf„r
 = (
°bi_uc
 *Ë
ibuf„r
;

4394 
a
.
zbuf„r_íd
 = (
°bi_uc
 *Ë
ibuf„r
 + 
ûí
;

4395 i‡(
	`°bi__do_zlib
(&
a
, 
obuf„r
, 
ﬁí
, 0, 0))

4396  (Ë(
a
.
zout
 -á.
zout_°¨t
);

4399 
	}
}

4412 #i‚de‡
STBI_NO_PNG


4415 
°bi__uöt32
 
	mÀngth
;

4416 
°bi__uöt32
 
	mty≥
;

4417 } 
	t°bi__≤gchunk
;

4419 
°bi__≤gchunk
 
	$°bi__gë_chunk_hódî
(
°bi__c⁄ãxt
 *
s
)

4421 
°bi__≤gchunk
 
c
;

4422 
c
.
Àngth
 = 
	`°bi__gë32be
(
s
);

4423 
c
.
ty≥
 = 
	`°bi__gë32be
(
s
);

4424  
c
;

4425 
	}
}

4427 
	$°bi__check_≤g_hódî
(
°bi__c⁄ãxt
 *
s
)

4429 c⁄° 
°bi_uc
 
≤g_sig
[8] = { 137,80,78,71,13,10,26,10 };

4430 
i
;

4431 
i
=0; i < 8; ++i)

4432 i‡(
	`°bi__gë8
(
s
Ë!
≤g_sig
[
i
]Ë 
	`°bi__îr
("badÖng sig","Notá PNG");

4434 
	}
}

4438 
°bi__c⁄ãxt
 *
	ms
;

4439 
°bi_uc
 *
	mid©a
, *
	mex∑nded
, *
	mout
;

4440 
	mdïth
;

4441 } 
	t°bi__≤g
;

4445 
	mSTBI__F_n⁄e
=0,

4446 
	mSTBI__F_sub
=1,

4447 
	mSTBI__F_up
=2,

4448 
	mSTBI__F_avg
=3,

4449 
	mSTBI__F_∑ëh
=4,

4451 
	mSTBI__F_avg_fú°
,

4452 
	mSTBI__F_∑ëh_fú°


4455 
°bi_uc
 
	gfú°_row_fûãr
[5] =

4457 
STBI__F_n⁄e
,

4458 
STBI__F_sub
,

4459 
STBI__F_n⁄e
,

4460 
STBI__F_avg_fú°
,

4461 
STBI__F_∑ëh_fú°


4464 
	$°bi__∑ëh
(
a
, 
b
, 
c
)

4466 
p
 = 
a
 + 
b
 - 
c
;

4467 
∑
 = 
	`abs
(
p
-
a
);

4468 
pb
 = 
	`abs
(
p
-
b
);

4469 
pc
 = 
	`abs
(
p
-
c
);

4470 i‡(
∑
 <
pb
 &&Ö®<
pc
Ë 
a
;

4471 i‡(
pb
 <
pc
Ë 
b
;

4472  
c
;

4473 
	}
}

4475 c⁄° 
°bi_uc
 
	g°bi__dïth_sˇÀ_èbÀ
[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };

4478 
	$°bi__¸óã_≤g_image_øw
(
°bi__≤g
 *
a
, 
°bi_uc
 *
øw
, 
°bi__uöt32
 
øw_Àn
, 
out_n
, stbi__uöt32 
x
, stbi__uöt32 
y
, 
dïth
, 
cﬁ‹
)

4480 
byãs
 = (
dïth
 == 16? 2 : 1);

4481 
°bi__c⁄ãxt
 *
s
 = 
a
->s;

4482 
°bi__uöt32
 
i
,
j
,
°ride
 = 
x
*
out_n
*
byãs
;

4483 
°bi__uöt32
 
img_Àn
, 
img_width_byãs
;

4484 
k
;

4485 
img_n
 = 
s
->img_n;

4487 
ouçut_byãs
 = 
out_n
*
byãs
;

4488 
fûãr_byãs
 = 
img_n
*
byãs
;

4489 
width
 = 
x
;

4491 
	`STBI_ASSERT
(
out_n
 =
s
->
img_n
 || out_n == s->img_n+1);

4492 
a
->
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
x
, 
y
, 
ouçut_byãs
, 0);

4493 i‡(!
a
->
out
Ë 
	`°bi__îr
("outofmem", "Out of memory");

4495 i‡(!
	`°bi__mad3sizes_vÆid
(
img_n
, 
x
, 
dïth
, 7)Ë 
	`°bi__îr
("tooÜarge", "Corrupt PNG");

4496 
img_width_byãs
 = (((
img_n
 * 
x
 * 
dïth
) + 7) >> 3);

4497 
img_Àn
 = (
img_width_byãs
 + 1Ë* 
y
;

4502 i‡(
øw_Àn
 < 
img_Àn
Ë 
	`°bi__îr
("notÉnoughÖixels","Corrupt PNG");

4504 
j
=0; j < 
y
; ++j) {

4505 
°bi_uc
 *
cur
 = 
a
->
out
 + 
°ride
*
j
;

4506 
°bi_uc
 *
¥i‹
;

4507 
fûãr
 = *
øw
++;

4509 i‡(
fûãr
 > 4)

4510  
	`°bi__îr
("invalid filter","Corrupt PNG");

4512 i‡(
dïth
 < 8) {

4513 
	`STBI_ASSERT
(
img_width_byãs
 <
x
);

4514 
cur
 +
x
*
out_n
 - 
img_width_byãs
;

4515 
fûãr_byãs
 = 1;

4516 
width
 = 
img_width_byãs
;

4518 
¥i‹
 = 
cur
 - 
°ride
;

4521 i‡(
j
 =0Ë
fûãr
 = 
fú°_row_fûãr
[filter];

4524 
k
=0; k < 
fûãr_byãs
; ++k) {

4525 
fûãr
) {

4526 
STBI__F_n⁄e
 : 
cur
[
k
] = 
øw
[k]; ;

4527 
STBI__F_sub
 : 
cur
[
k
] = 
øw
[k]; ;

4528 
STBI__F_up
 : 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
¥i‹
[k]); ;

4529 
STBI__F_avg
 : 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + (
¥i‹
[k]>>1)); ;

4530 
STBI__F_∑ëh
 : 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(0,
¥i‹
[k],0)); ;

4531 
STBI__F_avg_fú°
 : 
cur
[
k
] = 
øw
[k]; ;

4532 
STBI__F_∑ëh_fú°
: 
cur
[
k
] = 
øw
[k]; ;

4536 i‡(
dïth
 == 8) {

4537 i‡(
img_n
 !
out_n
)

4538 
cur
[
img_n
] = 255;

4539 
øw
 +
img_n
;

4540 
cur
 +
out_n
;

4541 
¥i‹
 +
out_n
;

4542 } i‡(
dïth
 == 16) {

4543 i‡(
img_n
 !
out_n
) {

4544 
cur
[
fûãr_byãs
] = 255;

4545 
cur
[
fûãr_byãs
+1] = 255;

4547 
øw
 +
fûãr_byãs
;

4548 
cur
 +
ouçut_byãs
;

4549 
¥i‹
 +
ouçut_byãs
;

4551 
øw
 += 1;

4552 
cur
 += 1;

4553 
¥i‹
 += 1;

4557 i‡(
dïth
 < 8 || 
img_n
 =
out_n
) {

4558 
nk
 = (
width
 - 1)*
fûãr_byãs
;

4559 
	#STBI__CASE
(
f
) \

4560 
f
: \

4561 
k
=0; k < 
nk
; ++k)

	)

4562 
fûãr
) {

4564 
STBI__F_n⁄e
: 
	`mem˝y
(
cur
, 
øw
, 
nk
); ;

4565 
	`STBI__CASE
(
STBI__F_sub
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + cur[k-
fûãr_byãs
]); } ;

4566 
	`STBI__CASE
(
STBI__F_up
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
¥i‹
[k]); } ;

4567 
	`STBI__CASE
(
STBI__F_avg
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + ((
¥i‹
[k] + cur[k-
fûãr_byãs
])>>1)); } ;

4568 
	`STBI__CASE
(
STBI__F_∑ëh
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k-
fûãr_byãs
],
¥i‹
[k],prior[k-filter_bytes])); } ;

4569 
	`STBI__CASE
(
STBI__F_avg_fú°
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + (cur[k-
fûãr_byãs
] >> 1)); } ;

4570 
	`STBI__CASE
(
STBI__F_∑ëh_fú°
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k-
fûãr_byãs
],0,0)); } ;

4572 #unde‡
STBI__CASE


4573 
øw
 +
nk
;

4575 
	`STBI_ASSERT
(
img_n
+1 =
out_n
);

4576 
	#STBI__CASE
(
f
) \

4577 
f
: \

4578 
i
=
x
-1; i >1; --i, 
cur
[
fûãr_byãs
]=255,
øw
+=fûãr_byãs,cur+=
ouçut_byãs
,
¥i‹
+=output_bytes) \

4579 
k
=0; k < 
fûãr_byãs
; ++k)

	)

4580 
fûãr
) {

4581 
	`STBI__CASE
(
STBI__F_n⁄e
Ë{ 
cur
[
k
] = 
øw
[k]; } ;

4582 
	`STBI__CASE
(
STBI__F_sub
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + cur[k- 
ouçut_byãs
]); } ;

4583 
	`STBI__CASE
(
STBI__F_up
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
¥i‹
[k]); } ;

4584 
	`STBI__CASE
(
STBI__F_avg
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + ((
¥i‹
[k] + cur[k- 
ouçut_byãs
])>>1)); } ;

4585 
	`STBI__CASE
(
STBI__F_∑ëh
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k- 
ouçut_byãs
],
¥i‹
[k],prior[k- output_bytes])); } ;

4586 
	`STBI__CASE
(
STBI__F_avg_fú°
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + (cur[k- 
ouçut_byãs
] >> 1)); } ;

4587 
	`STBI__CASE
(
STBI__F_∑ëh_fú°
Ë{ 
cur
[
k
] = 
	`STBI__BYTECAST
(
øw
[k] + 
	`°bi__∑ëh
(cur[k- 
ouçut_byãs
],0,0)); } ;

4589 #unde‡
STBI__CASE


4593 i‡(
dïth
 == 16) {

4594 
cur
 = 
a
->
out
 + 
°ride
*
j
;

4595 
i
=0; i < 
x
; ++i,
cur
+=
ouçut_byãs
) {

4596 
cur
[
fûãr_byãs
+1] = 255;

4605 i‡(
dïth
 < 8) {

4606 
j
=0; j < 
y
; ++j) {

4607 
°bi_uc
 *
cur
 = 
a
->
out
 + 
°ride
*
j
;

4608 
°bi_uc
 *
ö
 = 
a
->
out
 + 
°ride
*
j
 + 
x
*
out_n
 - 
img_width_byãs
;

4611 
°bi_uc
 
sˇÀ
 = (
cﬁ‹
 =0Ë? 
°bi__dïth_sˇÀ_èbÀ
[
dïth
] : 1;

4619 i‡(
dïth
 == 4) {

4620 
k
=
x
*
img_n
; k >2; k-=2, ++
ö
) {

4621 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) );

4622 *
cur
++ = 
sˇÀ
 * ((*
ö
 ) & 0x0f);

4624 i‡(
k
 > 0Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) );

4625 } i‡(
dïth
 == 2) {

4626 
k
=
x
*
img_n
; k >4; k-=4, ++
ö
) {

4627 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) );

4628 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x03);

4629 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x03);

4630 *
cur
++ = 
sˇÀ
 * ((*
ö
 ) & 0x03);

4632 i‡(
k
 > 0Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) );

4633 i‡(
k
 > 1Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x03);

4634 i‡(
k
 > 2Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x03);

4635 } i‡(
dïth
 == 1) {

4636 
k
=
x
*
img_n
; k >8; k-=8, ++
ö
) {

4637 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 7) );

4638 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) & 0x01);

4639 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 5) & 0x01);

4640 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x01);

4641 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 3) & 0x01);

4642 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x01);

4643 *
cur
++ = 
sˇÀ
 * ((*
ö
 >> 1) & 0x01);

4644 *
cur
++ = 
sˇÀ
 * ((*
ö
 ) & 0x01);

4646 i‡(
k
 > 0Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 7) );

4647 i‡(
k
 > 1Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 6) & 0x01);

4648 i‡(
k
 > 2Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 5) & 0x01);

4649 i‡(
k
 > 3Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 4) & 0x01);

4650 i‡(
k
 > 4Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 3) & 0x01);

4651 i‡(
k
 > 5Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 2) & 0x01);

4652 i‡(
k
 > 6Ë*
cur
++ = 
sˇÀ
 * ((*
ö
 >> 1) & 0x01);

4654 i‡(
img_n
 !
out_n
) {

4655 
q
;

4657 
cur
 = 
a
->
out
 + 
°ride
*
j
;

4658 i‡(
img_n
 == 1) {

4659 
q
=
x
-1; q >= 0; --q) {

4660 
cur
[
q
*2+1] = 255;

4661 
cur
[
q
*2+0] = cur[q];

4664 
	`STBI_ASSERT
(
img_n
 == 3);

4665 
q
=
x
-1; q >= 0; --q) {

4666 
cur
[
q
*4+3] = 255;

4667 
cur
[
q
*4+2] = cur[q*3+2];

4668 
cur
[
q
*4+1] = cur[q*3+1];

4669 
cur
[
q
*4+0] = cur[q*3+0];

4674 } i‡(
dïth
 == 16) {

4679 
°bi_uc
 *
cur
 = 
a
->
out
;

4680 
°bi__uöt16
 *
cur16
 = (°bi__uöt16*)
cur
;

4682 
i
=0; i < 
x
*
y
*
out_n
; ++i,
cur16
++,
cur
+=2) {

4683 *
cur16
 = (
cur
[0] << 8) | cur[1];

4688 
	}
}

4690 
	$°bi__¸óã_≤g_image
(
°bi__≤g
 *
a
, 
°bi_uc
 *
image_d©a
, 
°bi__uöt32
 
image_d©a_Àn
, 
out_n
, 
dïth
, 
cﬁ‹
, 
öãæa˚d
)

4692 
byãs
 = (
dïth
 == 16 ? 2 : 1);

4693 
out_byãs
 = 
out_n
 * 
byãs
;

4694 
°bi_uc
 *
föÆ
;

4695 
p
;

4696 i‡(!
öãæa˚d
)

4697  
	`°bi__¸óã_≤g_image_øw
(
a
, 
image_d©a
, 
image_d©a_Àn
, 
out_n
,á->
s
->
img_x
,á->s->
img_y
, 
dïth
, 
cﬁ‹
);

4700 
föÆ
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
a
->
s
->
img_x
,á->s->
img_y
, 
out_byãs
, 0);

4701 
p
=0;Ö < 7; ++p) {

4702 
x‹ig
[] = { 0,4,0,2,0,1,0 };

4703 
y‹ig
[] = { 0,0,4,0,2,0,1 };

4704 
x•c
[] = { 8,8,4,4,2,2,1 };

4705 
y•c
[] = { 8,8,8,4,4,2,2 };

4706 
i
,
j
,
x
,
y
;

4708 
x
 = (
a
->
s
->
img_x
 - 
x‹ig
[
p
] + 
x•c
[p]-1) / xspc[p];

4709 
y
 = (
a
->
s
->
img_y
 - 
y‹ig
[
p
] + 
y•c
[p]-1) / yspc[p];

4710 i‡(
x
 && 
y
) {

4711 
°bi__uöt32
 
img_Àn
 = ((((
a
->
s
->
img_n
 * 
x
 * 
dïth
Ë+ 7Ë>> 3Ë+ 1Ë* 
y
;

4712 i‡(!
	`°bi__¸óã_≤g_image_øw
(
a
, 
image_d©a
, 
image_d©a_Àn
, 
out_n
, 
x
, 
y
, 
dïth
, 
cﬁ‹
)) {

4713 
	`STBI_FREE
(
föÆ
);

4716 
j
=0; j < 
y
; ++j) {

4717 
i
=0; i < 
x
; ++i) {

4718 
out_y
 = 
j
*
y•c
[
p
]+
y‹ig
[p];

4719 
out_x
 = 
i
*
x•c
[
p
]+
x‹ig
[p];

4720 
	`mem˝y
(
föÆ
 + 
out_y
*
a
->
s
->
img_x
*
out_byãs
 + 
out_x
*out_bytes,

4721 
a
->
out
 + (
j
*
x
+
i
)*
out_byãs
, out_bytes);

4724 
	`STBI_FREE
(
a
->
out
);

4725 
image_d©a
 +
img_Àn
;

4726 
image_d©a_Àn
 -
img_Àn
;

4729 
a
->
out
 = 
föÆ
;

4732 
	}
}

4734 
	$°bi__compuã_å™•¨ícy
(
°bi__≤g
 *
z
, 
°bi_uc
 
tc
[3], 
out_n
)

4736 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4737 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
s
->
img_x
 * s->
img_y
;

4738 
°bi_uc
 *
p
 = 
z
->
out
;

4742 
	`STBI_ASSERT
(
out_n
 == 2 || out_n == 4);

4744 i‡(
out_n
 == 2) {

4745 
i
=0; i < 
pixñ_cou¡
; ++i) {

4746 
p
[1] = (p[0] =
tc
[0] ? 0 : 255);

4747 
p
 += 2;

4750 
i
=0; i < 
pixñ_cou¡
; ++i) {

4751 i‡(
p
[0] =
tc
[0] &&Ö[1] ==Åc[1] &&Ö[2] ==Åc[2])

4752 
p
[3] = 0;

4753 
p
 += 4;

4757 
	}
}

4759 
	$°bi__compuã_å™•¨ícy16
(
°bi__≤g
 *
z
, 
°bi__uöt16
 
tc
[3], 
out_n
)

4761 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4762 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
s
->
img_x
 * s->
img_y
;

4763 
°bi__uöt16
 *
p
 = (°bi__uöt16*Ë
z
->
out
;

4767 
	`STBI_ASSERT
(
out_n
 == 2 || out_n == 4);

4769 i‡(
out_n
 == 2) {

4770 
i
 = 0; i < 
pixñ_cou¡
; ++i) {

4771 
p
[1] = (p[0] =
tc
[0] ? 0 : 65535);

4772 
p
 += 2;

4775 
i
 = 0; i < 
pixñ_cou¡
; ++i) {

4776 i‡(
p
[0] =
tc
[0] &&Ö[1] ==Åc[1] &&Ö[2] ==Åc[2])

4777 
p
[3] = 0;

4778 
p
 += 4;

4782 
	}
}

4784 
	$°bi__ex∑nd_≤g_∑Àâe
(
°bi__≤g
 *
a
, 
°bi_uc
 *
∑Àâe
, 
Àn
, 
∑l_img_n
)

4786 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
a
->
s
->
img_x
 *á->s->
img_y
;

4787 
°bi_uc
 *
p
, *
ãmp_out
, *
‹ig
 = 
a
->
out
;

4789 
p
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad2
(
pixñ_cou¡
, 
∑l_img_n
, 0);

4790 i‡(
p
 =
NULL
Ë 
	`°bi__îr
("outofmem", "Out of memory");

4793 
ãmp_out
 = 
p
;

4795 i‡(
∑l_img_n
 == 3) {

4796 
i
=0; i < 
pixñ_cou¡
; ++i) {

4797 
n
 = 
‹ig
[
i
]*4;

4798 
p
[0] = 
∑Àâe
[
n
 ];

4799 
p
[1] = 
∑Àâe
[
n
+1];

4800 
p
[2] = 
∑Àâe
[
n
+2];

4801 
p
 += 3;

4804 
i
=0; i < 
pixñ_cou¡
; ++i) {

4805 
n
 = 
‹ig
[
i
]*4;

4806 
p
[0] = 
∑Àâe
[
n
 ];

4807 
p
[1] = 
∑Àâe
[
n
+1];

4808 
p
[2] = 
∑Àâe
[
n
+2];

4809 
p
[3] = 
∑Àâe
[
n
+3];

4810 
p
 += 4;

4813 
	`STBI_FREE
(
a
->
out
);

4814 
a
->
out
 = 
ãmp_out
;

4816 
	`STBI_NOTUSED
(
Àn
);

4819 
	}
}

4821 
	g°bi__u≈ªmu…ùly_⁄_lﬂd
 = 0;

4822 
	g°bi__de_ùh⁄e_Êag
 = 0;

4824 
STBIDEF
 
	$°bi_£t_u≈ªmu…ùly_⁄_lﬂd
(
Êag_åue_if_should_u≈ªmu…ùly
)

4826 
°bi__u≈ªmu…ùly_⁄_lﬂd
 = 
Êag_åue_if_should_u≈ªmu…ùly
;

4827 
	}
}

4829 
STBIDEF
 
	$°bi_c⁄vît_ùh⁄e_≤g_to_rgb
(
Êag_åue_if_should_c⁄vît
)

4831 
°bi__de_ùh⁄e_Êag
 = 
Êag_åue_if_should_c⁄vît
;

4832 
	}
}

4834 
	$°bi__de_ùh⁄e
(
°bi__≤g
 *
z
)

4836 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4837 
°bi__uöt32
 
i
, 
pixñ_cou¡
 = 
s
->
img_x
 * s->
img_y
;

4838 
°bi_uc
 *
p
 = 
z
->
out
;

4840 i‡(
s
->
img_out_n
 == 3) {

4841 
i
=0; i < 
pixñ_cou¡
; ++i) {

4842 
°bi_uc
 
t
 = 
p
[0];

4843 
p
[0] =Ö[2];

4844 
p
[2] = 
t
;

4845 
p
 += 3;

4848 
	`STBI_ASSERT
(
s
->
img_out_n
 == 4);

4849 i‡(
°bi__u≈ªmu…ùly_⁄_lﬂd
) {

4851 
i
=0; i < 
pixñ_cou¡
; ++i) {

4852 
°bi_uc
 
a
 = 
p
[3];

4853 
°bi_uc
 
t
 = 
p
[0];

4854 i‡(
a
) {

4855 
°bi_uc
 
hÆf
 = 
a
 / 2;

4856 
p
[0] = (p[2] * 255 + 
hÆf
Ë/ 
a
;

4857 
p
[1] = (p[1] * 255 + 
hÆf
Ë/ 
a
;

4858 
p
[2] = ( 
t
 * 255 + 
hÆf
Ë/ 
a
;

4860 
p
[0] =Ö[2];

4861 
p
[2] = 
t
;

4863 
p
 += 4;

4867 
i
=0; i < 
pixñ_cou¡
; ++i) {

4868 
°bi_uc
 
t
 = 
p
[0];

4869 
p
[0] =Ö[2];

4870 
p
[2] = 
t
;

4871 
p
 += 4;

4875 
	}
}

4877 
	#STBI__PNG_TYPE
(
a
,
b
,
c
,
d
Ë(((Ë◊Ë<< 24Ë+ ((Ë(bË<< 16Ë+ ((Ë(cË<< 8Ë+ (Ë(d))

	)

4879 
	$°bi__∑r£_≤g_fûe
(
°bi__≤g
 *
z
, 
sˇn
, 
ªq_comp
)

4881 
°bi_uc
 
∑Àâe
[1024], 
∑l_img_n
=0;

4882 
°bi_uc
 
has_å™s
=0, 
tc
[3]={0};

4883 
°bi__uöt16
 
tc16
[3];

4884 
°bi__uöt32
 
ioff
=0, 
id©a_limô
=0, 
i
, 
∑l_Àn
=0;

4885 
fú°
=1,
k
,
öãæa˚
=0, 
cﬁ‹
=0, 
is_ùh⁄e
=0;

4886 
°bi__c⁄ãxt
 *
s
 = 
z
->s;

4888 
z
->
ex∑nded
 = 
NULL
;

4889 
z
->
id©a
 = 
NULL
;

4890 
z
->
out
 = 
NULL
;

4892 i‡(!
	`°bi__check_≤g_hódî
(
s
))  0;

4894 i‡(
sˇn
 =
STBI__SCAN_ty≥
)  1;

4897 
°bi__≤gchunk
 
c
 = 
	`°bi__gë_chunk_hódî
(
s
);

4898 
c
.
ty≥
) {

4899 
	`STBI__PNG_TYPE
('C','g','B','I'):

4900 
is_ùh⁄e
 = 1;

4901 
	`°bi__skù
(
s
, 
c
.
Àngth
);

4903 
	`STBI__PNG_TYPE
('I','H','D','R'): {

4904 
comp
,
fûãr
;

4905 i‡(!
fú°
Ë 
	`°bi__îr
("multiple IHDR","Corrupt PNG");

4906 
fú°
 = 0;

4907 i‡(
c
.
Àngth
 !13Ë 
	`°bi__îr
("bad IHDRÜen","Corrupt PNG");

4908 
s
->
img_x
 = 
	`°bi__gë32be
(s); i‡(s->img_x > (1 << 24)Ë 
	`°bi__îr
("tooÜarge","VeryÜarge image (corrupt?)");

4909 
s
->
img_y
 = 
	`°bi__gë32be
(s); i‡(s->img_y > (1 << 24)Ë 
	`°bi__îr
("tooÜarge","VeryÜarge image (corrupt?)");

4910 
z
->
dïth
 = 
	`°bi__gë8
(
s
); i‡(z->dïth !1 && z->dïth !2 && z->dïth !4 && z->dïth !8 && z->dïth !16Ë 
	`°bi__îr
("1/2/4/8/16-bit only","PNGÇot supported: 1/2/4/8/16-bit only");

4911 
cﬁ‹
 = 
	`°bi__gë8
(
s
); i‡(cﬁ‹ > 6Ë 
	`°bi__îr
("bad ctype","Corrupt PNG");

4912 i‡(
cﬁ‹
 =3 && 
z
->
dïth
 =16Ë 
	`°bi__îr
("bad ctype","Corrupt PNG");

4913 i‡(
cﬁ‹
 =3Ë
∑l_img_n
 = 3; i‡(cﬁ‹ & 1Ë 
	`°bi__îr
("bad ctype","Corrupt PNG");

4914 
comp
 = 
	`°bi__gë8
(
s
); i‡(compË 
	`°bi__îr
("bad comp method","Corrupt PNG");

4915 
fûãr

	`°bi__gë8
(
s
); i‡(fûãrË 
	`°bi__îr
("bad filter method","Corrupt PNG");

4916 
öãæa˚
 = 
	`°bi__gë8
(
s
); i‡(öãæa˚>1Ë 
	`°bi__îr
("bad interlace method","Corrupt PNG");

4917 i‡(!
s
->
img_x
 || !s->
img_y
Ë 
	`°bi__îr
("0-pixel image","Corrupt PNG");

4918 i‡(!
∑l_img_n
) {

4919 
s
->
img_n
 = (
cﬁ‹
 & 2 ? 3 : 1) + (color & 4 ? 1 : 0);

4920 i‡((1 << 30Ë/ 
s
->
img_x
 / s->
img_n
 < s->
img_y
Ë 
	`°bi__îr
("tooÜarge", "ImageÅooÜargeÅo decode");

4921 i‡(
sˇn
 =
STBI__SCAN_hódî
)  1;

4925 
s
->
img_n
 = 1;

4926 i‡((1 << 30Ë/ 
s
->
img_x
 / 4 < s->
img_y
Ë 
	`°bi__îr
("tooÜarge","Corrupt PNG");

4932 
	`STBI__PNG_TYPE
('P','L','T','E'): {

4933 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4934 i‡(
c
.
Àngth
 > 256*3Ë 
	`°bi__îr
("invalid PLTE","Corrupt PNG");

4935 
∑l_Àn
 = 
c
.
Àngth
 / 3;

4936 i‡(
∑l_Àn
 * 3 !
c
.
Àngth
Ë 
	`°bi__îr
("invalid PLTE","Corrupt PNG");

4937 
i
=0; i < 
∑l_Àn
; ++i) {

4938 
∑Àâe
[
i
*4+0] = 
	`°bi__gë8
(
s
);

4939 
∑Àâe
[
i
*4+1] = 
	`°bi__gë8
(
s
);

4940 
∑Àâe
[
i
*4+2] = 
	`°bi__gë8
(
s
);

4941 
∑Àâe
[
i
*4+3] = 255;

4946 
	`STBI__PNG_TYPE
('t','R','N','S'): {

4947 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4948 i‡(
z
->
id©a
Ë 
	`°bi__îr
("tRNSáfter IDAT","Corrupt PNG");

4949 i‡(
∑l_img_n
) {

4950 i‡(
sˇn
 =
STBI__SCAN_hódî
Ë{ 
s
->
img_n
 = 4;  1; }

4951 i‡(
∑l_Àn
 =0Ë 
	`°bi__îr
("tRNS before PLTE","Corrupt PNG");

4952 i‡(
c
.
Àngth
 > 
∑l_Àn
Ë 
	`°bi__îr
("badÅRNSÜen","Corrupt PNG");

4953 
∑l_img_n
 = 4;

4954 
i
=0; i < 
c
.
Àngth
; ++i)

4955 
∑Àâe
[
i
*4+3] = 
	`°bi__gë8
(
s
);

4957 i‡(!(
s
->
img_n
 & 1)Ë 
	`°bi__îr
("tRNS withálpha","Corrupt PNG");

4958 i‡(
c
.
Àngth
 !(
°bi__uöt32
Ë
s
->
img_n
*2Ë 
	`°bi__îr
("badÅRNSÜen","Corrupt PNG");

4959 
has_å™s
 = 1;

4960 i‡(
z
->
dïth
 == 16) {

4961 
k
 = 0; k < 
s
->
img_n
; ++kË
tc16
[k] = (
°bi__uöt16
)
	`°bi__gë16be
(s);

4963 
k
 = 0; k < 
s
->
img_n
; ++kË
tc
[k] = (
°bi_uc
)(
	`°bi__gë16be
(sË& 255Ë* 
°bi__dïth_sˇÀ_èbÀ
[
z
->
dïth
];

4969 
	`STBI__PNG_TYPE
('I','D','A','T'): {

4970 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4971 i‡(
∑l_img_n
 && !
∑l_Àn
Ë 
	`°bi__îr
("no PLTE","Corrupt PNG");

4972 i‡(
sˇn
 =
STBI__SCAN_hódî
Ë{ 
s
->
img_n
 = 
∑l_img_n
;  1; }

4973 i‡(()(
ioff
 + 
c
.
Àngth
) < ()ioff)  0;

4974 i‡(
ioff
 + 
c
.
Àngth
 > 
id©a_limô
) {

4975 
°bi__uöt32
 
id©a_limô_ﬁd
 = 
id©a_limô
;

4976 
°bi_uc
 *
p
;

4977 i‡(
id©a_limô
 =0Ëid©a_limô = 
c
.
Àngth
 > 4096 ? c.length : 4096;

4978 
ioff
 + 
c
.
Àngth
 > 
id©a_limô
)

4979 
id©a_limô
 *= 2;

4980 
	`STBI_NOTUSED
(
id©a_limô_ﬁd
);

4981 
p
 = (
°bi_uc
 *Ë
	`STBI_REALLOC_SIZED
(
z
->
id©a
, 
id©a_limô_ﬁd
, 
id©a_limô
); i‡’ =
NULL
Ë 
	`°bi__îr
("outofmem", "Out of memory");

4982 
z
->
id©a
 = 
p
;

4984 i‡(!
	`°bi__gën
(
s
, 
z
->
id©a
+
ioff
,
c
.
Àngth
)Ë 
	`°bi__îr
("outofdata","Corrupt PNG");

4985 
ioff
 +
c
.
Àngth
;

4989 
	`STBI__PNG_TYPE
('I','E','N','D'): {

4990 
°bi__uöt32
 
øw_Àn
, 
b∂
;

4991 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

4992 i‡(
sˇn
 !
STBI__SCAN_lﬂd
)  1;

4993 i‡(
z
->
id©a
 =
NULL
Ë 
	`°bi__îr
("no IDAT","Corrupt PNG");

4995 
b∂
 = (
s
->
img_x
 * 
z
->
dïth
 + 7) / 8;

4996 
øw_Àn
 = 
b∂
 * 
s
->
img_y
 * s->
img_n
 + s->img_y ;

4997 
z
->
ex∑nded
 = (
°bi_uc
 *Ë
	`°bi_zlib_decode_mÆloc_guesssize_hódîÊag
((*Ëz->
id©a
, 
ioff
, 
øw_Àn
, (*Ë&øw_Àn, !
is_ùh⁄e
);

4998 i‡(
z
->
ex∑nded
 =
NULL
)  0;

4999 
	`STBI_FREE
(
z
->
id©a
); z->id©®
NULL
;

5000 i‡((
ªq_comp
 =
s
->
img_n
+1 &&Ñeq_com∞!3 && !
∑l_img_n
Ë|| 
has_å™s
)

5001 
s
->
img_out_n
 = s->
img_n
+1;

5003 
s
->
img_out_n
 = s->
img_n
;

5004 i‡(!
	`°bi__¸óã_≤g_image
(
z
, z->
ex∑nded
, 
øw_Àn
, 
s
->
img_out_n
, z->
dïth
, 
cﬁ‹
, 
öãæa˚
))  0;

5005 i‡(
has_å™s
) {

5006 i‡(
z
->
dïth
 == 16) {

5007 i‡(!
	`°bi__compuã_å™•¨ícy16
(
z
, 
tc16
, 
s
->
img_out_n
))  0;

5009 i‡(!
	`°bi__compuã_å™•¨ícy
(
z
, 
tc
, 
s
->
img_out_n
))  0;

5012 i‡(
is_ùh⁄e
 && 
°bi__de_ùh⁄e_Êag
 && 
s
->
img_out_n
 > 2)

5013 
	`°bi__de_ùh⁄e
(
z
);

5014 i‡(
∑l_img_n
) {

5016 
s
->
img_n
 = 
∑l_img_n
;

5017 
s
->
img_out_n
 = 
∑l_img_n
;

5018 i‡(
ªq_comp
 >3Ë
s
->
img_out_n
 =Ñeq_comp;

5019 i‡(!
	`°bi__ex∑nd_≤g_∑Àâe
(
z
, 
∑Àâe
, 
∑l_Àn
, 
s
->
img_out_n
))

5021 } i‡(
has_å™s
) {

5023 ++
s
->
img_n
;

5025 
	`STBI_FREE
(
z
->
ex∑nded
); z->ex∑nded = 
NULL
;

5027 
	`°bi__gë32be
(
s
);

5033 i‡(
fú°
Ë 
	`°bi__îr
("firstÇot IHDR", "Corrupt PNG");

5034 i‡((
c
.
ty≥
 & (1 << 29)) == 0) {

5035 #i‚de‡
STBI_NO_FAILURE_STRINGS


5037 
övÆid_chunk
[] = "XXXX PNG chunkÇot known";

5038 
övÆid_chunk
[0] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 24);

5039 
övÆid_chunk
[1] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 16);

5040 
övÆid_chunk
[2] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 8);

5041 
övÆid_chunk
[3] = 
	`STBI__BYTECAST
(
c
.
ty≥
 >> 0);

5043  
	`°bi__îr
(
övÆid_chunk
, "PNGÇot supported: unknown PNG chunkÅype");

5045 
	`°bi__skù
(
s
, 
c
.
Àngth
);

5049 
	`°bi__gë32be
(
s
);

5051 
	}
}

5053 *
	$°bi__do_≤g
(
°bi__≤g
 *
p
, *
x
, *
y
, *
n
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

5055 *
ªsu…
=
NULL
;

5056 i‡(
ªq_comp
 < 0 ||Ñeq_com∞> 4Ë 
	`°bi__îΩuc
("badÑeq_comp", "InternalÉrror");

5057 i‡(
	`°bi__∑r£_≤g_fûe
(
p
, 
STBI__SCAN_lﬂd
, 
ªq_comp
)) {

5058 i‡(
p
->
dïth
 < 8)

5059 
ri
->
bôs_≥r_ch™√l
 = 8;

5061 
ri
->
bôs_≥r_ch™√l
 = 
p
->
dïth
;

5062 
ªsu…
 = 
p
->
out
;

5063 
p
->
out
 = 
NULL
;

5064 i‡(
ªq_comp
 &&Ñeq_com∞!
p
->
s
->
img_out_n
) {

5065 i‡(
ri
->
bôs_≥r_ch™√l
 == 8)

5066 
ªsu…
 = 
	`°bi__c⁄vît_f‹m©
((*Ëªsu…, 
p
->
s
->
img_out_n
, 
ªq_comp
,Ö->s->
img_x
,Ö->s->
img_y
);

5068 
ªsu…
 = 
	`°bi__c⁄vît_f‹m©16
((
°bi__uöt16
 *Ëªsu…, 
p
->
s
->
img_out_n
, 
ªq_comp
,Ö->s->
img_x
,Ö->s->
img_y
);

5069 
p
->
s
->
img_out_n
 = 
ªq_comp
;

5070 i‡(
ªsu…
 =
NULL
) Ñesult;

5072 *
x
 = 
p
->
s
->
img_x
;

5073 *
y
 = 
p
->
s
->
img_y
;

5074 i‡(
n
Ë*¿
p
->
s
->
img_n
;

5076 
	`STBI_FREE
(
p
->
out
);Ö->ouà
NULL
;

5077 
	`STBI_FREE
(
p
->
ex∑nded
);Ö->ex∑nded = 
NULL
;

5078 
	`STBI_FREE
(
p
->
id©a
);Ö->id©®
NULL
;

5080  
ªsu…
;

5081 
	}
}

5083 *
	$°bi__≤g_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

5085 
°bi__≤g
 
p
;

5086 
p
.
s
 = s;

5087  
	`°bi__do_≤g
(&
p
, 
x
,
y
,
comp
,
ªq_comp
, 
ri
);

5088 
	}
}

5090 
	$°bi__≤g_ã°
(
°bi__c⁄ãxt
 *
s
)

5092 
r
;

5093 
r
 = 
	`°bi__check_≤g_hódî
(
s
);

5094 
	`°bi__ªwöd
(
s
);

5095  
r
;

5096 
	}
}

5098 
	$°bi__≤g_öfo_øw
(
°bi__≤g
 *
p
, *
x
, *
y
, *
comp
)

5100 i‡(!
	`°bi__∑r£_≤g_fûe
(
p
, 
STBI__SCAN_hódî
, 0)) {

5101 
	`°bi__ªwöd
–
p
->
s
 );

5104 i‡(
x
Ë*x = 
p
->
s
->
img_x
;

5105 i‡(
y
Ë*y = 
p
->
s
->
img_y
;

5106 i‡(
comp
Ë*com∞
p
->
s
->
img_n
;

5108 
	}
}

5110 
	$°bi__≤g_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

5112 
°bi__≤g
 
p
;

5113 
p
.
s
 = s;

5114  
	`°bi__≤g_öfo_øw
(&
p
, 
x
, 
y
, 
comp
);

5115 
	}
}

5117 
	$°bi__≤g_is16
(
°bi__c⁄ãxt
 *
s
)

5119 
°bi__≤g
 
p
;

5120 
p
.
s
 = s;

5121 i‡(!
	`°bi__≤g_öfo_øw
(&
p
, 
NULL
, NULL, NULL))

5123 i‡(
p
.
dïth
 != 16) {

5124 
	`°bi__ªwöd
(
p
.
s
);

5128 
	}
}

5133 #i‚de‡
STBI_NO_BMP


5134 
	$°bi__bmp_ã°_øw
(
°bi__c⁄ãxt
 *
s
)

5136 
r
;

5137 
sz
;

5138 i‡(
	`°bi__gë8
(
s
) != 'B')  0;

5139 i‡(
	`°bi__gë8
(
s
) != 'M')  0;

5140 
	`°bi__gë32À
(
s
);

5141 
	`°bi__gë16À
(
s
);

5142 
	`°bi__gë16À
(
s
);

5143 
	`°bi__gë32À
(
s
);

5144 
sz
 = 
	`°bi__gë32À
(
s
);

5145 
r
 = (
sz
 == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124);

5146  
r
;

5147 
	}
}

5149 
	$°bi__bmp_ã°
(
°bi__c⁄ãxt
 *
s
)

5151 
r
 = 
	`°bi__bmp_ã°_øw
(
s
);

5152 
	`°bi__ªwöd
(
s
);

5153  
r
;

5154 
	}
}

5158 
	$°bi__high_bô
(
z
)

5160 
n
=0;

5161 i‡(
z
 == 0)  -1;

5162 i‡(
z
 >0x10000Ë{ 
n
 += 16; z >>= 16; }

5163 i‡(
z
 >0x00100Ë{ 
n
 += 8; z >>= 8; }

5164 i‡(
z
 >0x00010Ë{ 
n
 += 4; z >>= 4; }

5165 i‡(
z
 >0x00004Ë{ 
n
 += 2; z >>= 2; }

5166 i‡(
z
 >0x00002Ë{ 
n
 += 1; }

5167  
n
;

5168 
	}
}

5170 
	$°bi__bôcou¡
(
a
)

5172 
a
 = (a & 0x55555555) + ((a >> 1) & 0x55555555);

5173 
a
 = (a & 0x33333333) + ((a >> 2) & 0x33333333);

5174 
a
 = (a + (a >> 4)) & 0x0f0f0f0f;

5175 
a
 = (a + (a >> 8));

5176 
a
 = (a + (a >> 16));

5177  
a
 & 0xff;

5178 
	}
}

5183 
	$°bi__shi·sig√d
(
v
, 
shi·
, 
bôs
)

5185 
mul_èbÀ
[9] = {

5190 
shi·_èbÀ
[9] = {

5193 i‡(
shi·
 < 0)

5194 
v
 <<-
shi·
;

5196 
v
 >>
shi·
;

5197 
	`STBI_ASSERT
(
v
 < 256);

5198 
v
 >>(8-
bôs
);

5199 
	`STBI_ASSERT
(
bôs
 >= 0 && bits <= 8);

5200  (Ë((Ë
v
 * 
mul_èbÀ
[
bôs
]Ë>> 
shi·_èbÀ
[bits];

5201 
	}
}

5205 
	mbµ
, 
	moff£t
, 
	mhsz
;

5206 
	mmr
,
	mmg
,
	mmb
,
	mma
, 
	mÆl_a
;

5207 
	mexåa_ªad
;

5208 } 
	t°bi__bmp_d©a
;

5210 *
	$°bi__bmp_∑r£_hódî
(
°bi__c⁄ãxt
 *
s
, 
°bi__bmp_d©a
 *
öfo
)

5212 
hsz
;

5213 i‡(
	`°bi__gë8
(
s
Ë!'B' || stbi__gë8(sË!'M'Ë 
	`°bi__îΩuc
("not BMP", "Corrupt BMP");

5214 
	`°bi__gë32À
(
s
);

5215 
	`°bi__gë16À
(
s
);

5216 
	`°bi__gë16À
(
s
);

5217 
öfo
->
off£t
 = 
	`°bi__gë32À
(
s
);

5218 
öfo
->
hsz
 = hsz = 
	`°bi__gë32À
(
s
);

5219 
öfo
->
mr
 = info->
mg
 = info->
mb
 = info->
ma
 = 0;

5220 
öfo
->
exåa_ªad
 = 14;

5222 i‡(
hsz
 !12 && hsz !40 && hsz !56 && hsz !108 && hsz !124Ë 
	`°bi__îΩuc
("unknown BMP", "BMPÅypeÇot supported: unknown");

5223 i‡(
hsz
 == 12) {

5224 
s
->
img_x
 = 
	`°bi__gë16À
(s);

5225 
s
->
img_y
 = 
	`°bi__gë16À
(s);

5227 
s
->
img_x
 = 
	`°bi__gë32À
(s);

5228 
s
->
img_y
 = 
	`°bi__gë32À
(s);

5230 i‡(
	`°bi__gë16À
(
s
Ë!1Ë 
	`°bi__îΩuc
("bad BMP", "bad BMP");

5231 
öfo
->
bµ
 = 
	`°bi__gë16À
(
s
);

5232 i‡(
hsz
 != 12) {

5233 
com¥ess
 = 
	`°bi__gë32À
(
s
);

5234 i‡(
com¥ess
 =1 || com¥es†=2Ë 
	`°bi__îΩuc
("BMP RLE", "BMPÅypeÇot supported: RLE");

5235 
	`°bi__gë32À
(
s
);

5236 
	`°bi__gë32À
(
s
);

5237 
	`°bi__gë32À
(
s
);

5238 
	`°bi__gë32À
(
s
);

5239 
	`°bi__gë32À
(
s
);

5240 i‡(
hsz
 == 40 || hsz == 56) {

5241 i‡(
hsz
 == 56) {

5242 
	`°bi__gë32À
(
s
);

5243 
	`°bi__gë32À
(
s
);

5244 
	`°bi__gë32À
(
s
);

5245 
	`°bi__gë32À
(
s
);

5247 i‡(
öfo
->
bµ
 == 16 || info->bpp == 32) {

5248 i‡(
com¥ess
 == 0) {

5249 i‡(
öfo
->
bµ
 == 32) {

5250 
öfo
->
mr
 = 0xffu << 16;

5251 
öfo
->
mg
 = 0xffu << 8;

5252 
öfo
->
mb
 = 0xffu << 0;

5253 
öfo
->
ma
 = 0xffu << 24;

5254 
öfo
->
Æl_a
 = 0;

5256 
öfo
->
mr
 = 31u << 10;

5257 
öfo
->
mg
 = 31u << 5;

5258 
öfo
->
mb
 = 31u << 0;

5260 } i‡(
com¥ess
 == 3) {

5261 
öfo
->
mr
 = 
	`°bi__gë32À
(
s
);

5262 
öfo
->
mg
 = 
	`°bi__gë32À
(
s
);

5263 
öfo
->
mb
 = 
	`°bi__gë32À
(
s
);

5264 
öfo
->
exåa_ªad
 += 12;

5266 i‡(
öfo
->
mr
 =öfo->
mg
 && info->mg =öfo->
mb
) {

5268  
	`°bi__îΩuc
("bad BMP", "bad BMP");

5271  
	`°bi__îΩuc
("bad BMP", "bad BMP");

5274 
i
;

5275 i‡(
hsz
 != 108 && hsz != 124)

5276  
	`°bi__îΩuc
("bad BMP", "bad BMP");

5277 
öfo
->
mr
 = 
	`°bi__gë32À
(
s
);

5278 
öfo
->
mg
 = 
	`°bi__gë32À
(
s
);

5279 
öfo
->
mb
 = 
	`°bi__gë32À
(
s
);

5280 
öfo
->
ma
 = 
	`°bi__gë32À
(
s
);

5281 
	`°bi__gë32À
(
s
);

5282 
i
=0; i < 12; ++i)

5283 
	`°bi__gë32À
(
s
);

5284 i‡(
hsz
 == 124) {

5285 
	`°bi__gë32À
(
s
);

5286 
	`°bi__gë32À
(
s
);

5287 
	`°bi__gë32À
(
s
);

5288 
	`°bi__gë32À
(
s
);

5293 
	}
}

5296 *
	$°bi__bmp_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

5298 
°bi_uc
 *
out
;

5299 
mr
=0,
mg
=0,
mb
=0,
ma
=0, 
Æl_a
;

5300 
°bi_uc
 
∑l
[256][4];

5301 
psize
=0,
i
,
j
,
width
;

5302 
Êù_vîtiˇŒy
, 
∑d
, 
èrgë
;

5303 
°bi__bmp_d©a
 
öfo
;

5304 
	`STBI_NOTUSED
(
ri
);

5306 
öfo
.
Æl_a
 = 255;

5307 i‡(
	`°bi__bmp_∑r£_hódî
(
s
, &
öfo
Ë=
NULL
)

5308  
NULL
;

5310 
Êù_vîtiˇŒy
 = ((Ë
s
->
img_y
) > 0;

5311 
s
->
img_y
 = 
	`abs
(() s->img_y);

5313 
mr
 = 
öfo
.mr;

5314 
mg
 = 
öfo
.mg;

5315 
mb
 = 
öfo
.mb;

5316 
ma
 = 
öfo
.ma;

5317 
Æl_a
 = 
öfo
.all_a;

5319 i‡(
öfo
.
hsz
 == 12) {

5320 i‡(
öfo
.
bµ
 < 24)

5321 
psize
 = (
öfo
.
off£t
 - info.
exåa_ªad
 - 24) / 3;

5323 i‡(
öfo
.
bµ
 < 16)

5324 
psize
 = (
öfo
.
off£t
 - info.
exåa_ªad
 - info.
hsz
) >> 2;

5326 i‡(
psize
 == 0) {

5327 
	`STBI_ASSERT
(
öfo
.
off£t
 =(
s
->
img_buf„r
 - s->
buf„r_°¨t
));

5330 i‡(
öfo
.
bµ
 =24 && 
ma
 == 0xff000000)

5331 
s
->
img_n
 = 3;

5333 
s
->
img_n
 = 
ma
 ? 4 : 3;

5334 i‡(
ªq_comp
 &&Ñeq_comp >= 3)

5335 
èrgë
 = 
ªq_comp
;

5337 
èrgë
 = 
s
->
img_n
;

5340 i‡(!
	`°bi__mad3sizes_vÆid
(
èrgë
, 
s
->
img_x
, s->
img_y
, 0))

5341  
	`°bi__îΩuc
("tooÜarge", "Corrupt BMP");

5343 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
èrgë
, 
s
->
img_x
, s->
img_y
, 0);

5344 i‡(!
out
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

5345 i‡(
öfo
.
bµ
 < 16) {

5346 
z
=0;

5347 i‡(
psize
 =0 ||Ösizê> 256Ë{ 
	`STBI_FREE
(
out
);  
	`°bi__îΩuc
("invalid", "Corrupt BMP"); }

5348 
i
=0; i < 
psize
; ++i) {

5349 
∑l
[
i
][2] = 
	`°bi__gë8
(
s
);

5350 
∑l
[
i
][1] = 
	`°bi__gë8
(
s
);

5351 
∑l
[
i
][0] = 
	`°bi__gë8
(
s
);

5352 i‡(
öfo
.
hsz
 !12Ë
	`°bi__gë8
(
s
);

5353 
∑l
[
i
][3] = 255;

5355 
	`°bi__skù
(
s
, 
öfo
.
off£t
 - info.
exåa_ªad
 - info.
hsz
 - 
psize
 * (info.hsz == 12 ? 3 : 4));

5356 i‡(
öfo
.
bµ
 =1Ë
width
 = (
s
->
img_x
 + 7) >> 3;

5357 i‡(
öfo
.
bµ
 =4Ë
width
 = (
s
->
img_x
 + 1) >> 1;

5358 i‡(
öfo
.
bµ
 =8Ë
width
 = 
s
->
img_x
;

5359 { 
	`STBI_FREE
(
out
);  
	`°bi__îΩuc
("bad bpp", "Corrupt BMP"); }

5360 
∑d
 = (-
width
)&3;

5361 i‡(
öfo
.
bµ
 == 1) {

5362 
j
=0; j < (Ë
s
->
img_y
; ++j) {

5363 
bô_off£t
 = 7, 
v
 = 
	`°bi__gë8
(
s
);

5364 
i
=0; i < (Ë
s
->
img_x
; ++i) {

5365 
cﬁ‹
 = (
v
>>
bô_off£t
)&0x1;

5366 
out
[
z
++] = 
∑l
[
cﬁ‹
][0];

5367 
out
[
z
++] = 
∑l
[
cﬁ‹
][1];

5368 
out
[
z
++] = 
∑l
[
cﬁ‹
][2];

5369 i‡(
èrgë
 =4Ë
out
[
z
++] = 255;

5370 i‡(
i
+1 =(Ë
s
->
img_x
) ;

5371 if((--
bô_off£t
) < 0) {

5372 
bô_off£t
 = 7;

5373 
v
 = 
	`°bi__gë8
(
s
);

5376 
	`°bi__skù
(
s
, 
∑d
);

5379 
j
=0; j < (Ë
s
->
img_y
; ++j) {

5380 
i
=0; i < (Ë
s
->
img_x
; i += 2) {

5381 
v
=
	`°bi__gë8
(
s
),
v2
=0;

5382 i‡(
öfo
.
bµ
 == 4) {

5383 
v2
 = 
v
 & 15;

5384 
v
 >>= 4;

5386 
out
[
z
++] = 
∑l
[
v
][0];

5387 
out
[
z
++] = 
∑l
[
v
][1];

5388 
out
[
z
++] = 
∑l
[
v
][2];

5389 i‡(
èrgë
 =4Ë
out
[
z
++] = 255;

5390 i‡(
i
+1 =(Ë
s
->
img_x
) ;

5391 
v
 = (
öfo
.
bµ
 =8Ë? 
	`°bi__gë8
(
s
Ë: 
v2
;

5392 
out
[
z
++] = 
∑l
[
v
][0];

5393 
out
[
z
++] = 
∑l
[
v
][1];

5394 
out
[
z
++] = 
∑l
[
v
][2];

5395 i‡(
èrgë
 =4Ë
out
[
z
++] = 255;

5397 
	`°bi__skù
(
s
, 
∑d
);

5401 
rshi·
=0,
gshi·
=0,
bshi·
=0,
ashi·
=0,
rcou¡
=0,
gcou¡
=0,
bcou¡
=0,
acou¡
=0;

5402 
z
 = 0;

5403 
ósy
=0;

5404 
	`°bi__skù
(
s
, 
öfo
.
off£t
 - info.
exåa_ªad
 - info.
hsz
);

5405 i‡(
öfo
.
bµ
 =24Ë
width
 = 3 * 
s
->
img_x
;

5406 i‡(
öfo
.
bµ
 =16Ë
width
 = 2*
s
->
img_x
;

5407 
width
=0;

5408 
∑d
 = (-
width
) & 3;

5409 i‡(
öfo
.
bµ
 == 24) {

5410 
ósy
 = 1;

5411 } i‡(
öfo
.
bµ
 == 32) {

5412 i‡(
mb
 =0xf‡&& 
mg
 =0xff00 && 
mr
 =0x00ff0000 && 
ma
 == 0xff000000)

5413 
ósy
 = 2;

5415 i‡(!
ósy
) {

5416 i‡(!
mr
 || !
mg
 || !
mb
Ë{ 
	`STBI_FREE
(
out
);  
	`°bi__îΩuc
("bad masks", "Corrupt BMP"); }

5418 
rshi·
 = 
	`°bi__high_bô
(
mr
)-7; 
rcou¡
 = 
	`°bi__bôcou¡
(mr);

5419 
gshi·
 = 
	`°bi__high_bô
(
mg
)-7; 
gcou¡
 = 
	`°bi__bôcou¡
(mg);

5420 
bshi·
 = 
	`°bi__high_bô
(
mb
)-7; 
bcou¡
 = 
	`°bi__bôcou¡
(mb);

5421 
ashi·
 = 
	`°bi__high_bô
(
ma
)-7; 
acou¡
 = 
	`°bi__bôcou¡
(ma);

5423 
j
=0; j < (Ë
s
->
img_y
; ++j) {

5424 i‡(
ósy
) {

5425 
i
=0; i < (Ë
s
->
img_x
; ++i) {

5426 
a
;

5427 
out
[
z
+2] = 
	`°bi__gë8
(
s
);

5428 
out
[
z
+1] = 
	`°bi__gë8
(
s
);

5429 
out
[
z
+0] = 
	`°bi__gë8
(
s
);

5430 
z
 += 3;

5431 
a
 = (
ósy
 =2 ? 
	`°bi__gë8
(
s
) : 255);

5432 
Æl_a
 |
a
;

5433 i‡(
èrgë
 =4Ë
out
[
z
++] = 
a
;

5436 
bµ
 = 
öfo
.bpp;

5437 
i
=0; i < (Ë
s
->
img_x
; ++i) {

5438 
°bi__uöt32
 
v
 = (
bµ
 =16 ? (°bi__uöt32Ë
	`°bi__gë16À
(
s
Ë: 
	`°bi__gë32À
(s));

5439 
a
;

5440 
out
[
z
++] = 
	`STBI__BYTECAST
(
	`°bi__shi·sig√d
(
v
 & 
mr
, 
rshi·
, 
rcou¡
));

5441 
out
[
z
++] = 
	`STBI__BYTECAST
(
	`°bi__shi·sig√d
(
v
 & 
mg
, 
gshi·
, 
gcou¡
));

5442 
out
[
z
++] = 
	`STBI__BYTECAST
(
	`°bi__shi·sig√d
(
v
 & 
mb
, 
bshi·
, 
bcou¡
));

5443 
a
 = (
ma
 ? 
	`°bi__shi·sig√d
(
v
 & ma, 
ashi·
, 
acou¡
) : 255);

5444 
Æl_a
 |
a
;

5445 i‡(
èrgë
 =4Ë
out
[
z
++] = 
	`STBI__BYTECAST
(
a
);

5448 
	`°bi__skù
(
s
, 
∑d
);

5453 i‡(
èrgë
 =4 && 
Æl_a
 == 0)

5454 
i
=4*
s
->
img_x
*s->
img_y
-1; i >= 0; i -= 4)

5455 
out
[
i
] = 255;

5457 i‡(
Êù_vîtiˇŒy
) {

5458 
°bi_uc
 
t
;

5459 
j
=0; j < (Ë
s
->
img_y
>>1; ++j) {

5460 
°bi_uc
 *
p1
 = 
out
 + 
j
 *
s
->
img_x
*
èrgë
;

5461 
°bi_uc
 *
p2
 = 
out
 + (
s
->
img_y
-1-
j
)*s->
img_x
*
èrgë
;

5462 
i
=0; i < (Ë
s
->
img_x
*
èrgë
; ++i) {

5463 
t
 = 
p1
[
i
];Ö1[i] = 
p2
[i];Ö2[i] =Å;

5468 i‡(
ªq_comp
 &&Ñeq_com∞!
èrgë
) {

5469 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 
èrgë
, 
ªq_comp
, 
s
->
img_x
, s->
img_y
);

5470 i‡(
out
 =
NULL
)  out;

5473 *
x
 = 
s
->
img_x
;

5474 *
y
 = 
s
->
img_y
;

5475 i‡(
comp
Ë*com∞
s
->
img_n
;

5476  
out
;

5477 
	}
}

5482 #i‚de‡
STBI_NO_TGA


5484 
	$°bi__tga_gë_comp
(
bôs_≥r_pixñ
, 
is_gªy
, * 
is_rgb16
)

5487 i‡(
is_rgb16
) *is_rgb16 = 0;

5488 
bôs_≥r_pixñ
) {

5489 8:  
STBI_gªy
;

5490 16: if(
is_gªy
Ë 
STBI_gªy_Æpha
;

5492 15: if(
is_rgb16
) *is_rgb16 = 1;

5493  
STBI_rgb
;

5495 32:  
bôs_≥r_pixñ
/8;

5498 
	}
}

5500 
	$°bi__tga_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

5502 
tga_w
, 
tga_h
, 
tga_comp
, 
tga_image_ty≥
, 
tga_bôs_≥r_pixñ
, 
tga_cﬁ‹m≠_bµ
;

5503 
sz
, 
tga_cﬁ‹m≠_ty≥
;

5504 
	`°bi__gë8
(
s
);

5505 
tga_cﬁ‹m≠_ty≥
 = 
	`°bi__gë8
(
s
);

5506 if–
tga_cﬁ‹m≠_ty≥
 > 1 ) {

5507 
	`°bi__ªwöd
(
s
);

5510 
tga_image_ty≥
 = 
	`°bi__gë8
(
s
);

5511 i‡–
tga_cﬁ‹m≠_ty≥
 == 1 ) {

5512 i‡(
tga_image_ty≥
 != 1 &&Åga_image_type != 9) {

5513 
	`°bi__ªwöd
(
s
);

5516 
	`°bi__skù
(
s
,4);

5517 
sz
 = 
	`°bi__gë8
(
s
);

5518 i‡–(
sz
 != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) {

5519 
	`°bi__ªwöd
(
s
);

5522 
	`°bi__skù
(
s
,4);

5523 
tga_cﬁ‹m≠_bµ
 = 
sz
;

5525 i‡–(
tga_image_ty≥
 != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11) ) {

5526 
	`°bi__ªwöd
(
s
);

5529 
	`°bi__skù
(
s
,9);

5530 
tga_cﬁ‹m≠_bµ
 = 0;

5532 
tga_w
 = 
	`°bi__gë16À
(
s
);

5533 if–
tga_w
 < 1 ) {

5534 
	`°bi__ªwöd
(
s
);

5537 
tga_h
 = 
	`°bi__gë16À
(
s
);

5538 if–
tga_h
 < 1 ) {

5539 
	`°bi__ªwöd
(
s
);

5542 
tga_bôs_≥r_pixñ
 = 
	`°bi__gë8
(
s
);

5543 
	`°bi__gë8
(
s
);

5544 i‡(
tga_cﬁ‹m≠_bµ
 != 0) {

5545 if((
tga_bôs_≥r_pixñ
 != 8) && (tga_bits_per_pixel != 16)) {

5548 
	`°bi__ªwöd
(
s
);

5551 
tga_comp
 = 
	`°bi__tga_gë_comp
(
tga_cﬁ‹m≠_bµ
, 0, 
NULL
);

5553 
tga_comp
 = 
	`°bi__tga_gë_comp
(
tga_bôs_≥r_pixñ
, (
tga_image_ty≥
 =3Ë|| (tga_image_ty≥ =11), 
NULL
);

5555 if(!
tga_comp
) {

5556 
	`°bi__ªwöd
(
s
);

5559 i‡(
x
Ë*x = 
tga_w
;

5560 i‡(
y
Ë*y = 
tga_h
;

5561 i‡(
comp
Ë*com∞
tga_comp
;

5563 
	}
}

5565 
	$°bi__tga_ã°
(
°bi__c⁄ãxt
 *
s
)

5567 
ªs
 = 0;

5568 
sz
, 
tga_cﬁ‹_ty≥
;

5569 
	`°bi__gë8
(
s
);

5570 
tga_cﬁ‹_ty≥
 = 
	`°bi__gë8
(
s
);

5571 i‡–
tga_cﬁ‹_ty≥
 > 1 ) 
îr‹End
;

5572 
sz
 = 
	`°bi__gë8
(
s
);

5573 i‡–
tga_cﬁ‹_ty≥
 == 1 ) {

5574 i‡(
sz
 !1 && sz !9Ë
îr‹End
;

5575 
	`°bi__skù
(
s
,4);

5576 
sz
 = 
	`°bi__gë8
(
s
);

5577 i‡–(
sz
 !8Ë&& (sz !15Ë&& (sz !16Ë&& (sz !24Ë&& (sz !32ËË
îr‹End
;

5578 
	`°bi__skù
(
s
,4);

5580 i‡–(
sz
 !2Ë&& (sz !3Ë&& (sz !10Ë&& (sz !11ËË
îr‹End
;

5581 
	`°bi__skù
(
s
,9);

5583 i‡–
	`°bi__gë16À
(
s
Ë< 1 ) 
îr‹End
;

5584 i‡–
	`°bi__gë16À
(
s
Ë< 1 ) 
îr‹End
;

5585 
sz
 = 
	`°bi__gë8
(
s
);

5586 i‡–(
tga_cﬁ‹_ty≥
 =1Ë&& (
sz
 !8Ë&& (sz !16ËË
îr‹End
;

5587 i‡–(
sz
 !8Ë&& (sz !15Ë&& (sz !16Ë&& (sz !24Ë&& (sz !32ËË
îr‹End
;

5589 
ªs
 = 1;

5591 
îr‹End
:

5592 
	`°bi__ªwöd
(
s
);

5593  
ªs
;

5594 
	}
}

5597 
	$°bi__tga_ªad_rgb16
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
* 
out
)

5599 
°bi__uöt16
 
px
 = (°bi__uöt16)
	`°bi__gë16À
(
s
);

5600 
°bi__uöt16
 
fiveBôMask
 = 31;

5602 
r
 = (
px
 >> 10Ë& 
fiveBôMask
;

5603 
g
 = (
px
 >> 5Ë& 
fiveBôMask
;

5604 
b
 = 
px
 & 
fiveBôMask
;

5606 
out
[0] = (
°bi_uc
)((
r
 * 255)/31);

5607 
out
[1] = (
°bi_uc
)((
g
 * 255)/31);

5608 
out
[2] = (
°bi_uc
)((
b
 * 255)/31);

5614 
	}
}

5616 *
	$°bi__tga_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

5619 
tga_off£t
 = 
	`°bi__gë8
(
s
);

5620 
tga_ödexed
 = 
	`°bi__gë8
(
s
);

5621 
tga_image_ty≥
 = 
	`°bi__gë8
(
s
);

5622 
tga_is_RLE
 = 0;

5623 
tga_∑Àâe_°¨t
 = 
	`°bi__gë16À
(
s
);

5624 
tga_∑Àâe_Àn
 = 
	`°bi__gë16À
(
s
);

5625 
tga_∑Àâe_bôs
 = 
	`°bi__gë8
(
s
);

5626 
tga_x_‹igö
 = 
	`°bi__gë16À
(
s
);

5627 
tga_y_‹igö
 = 
	`°bi__gë16À
(
s
);

5628 
tga_width
 = 
	`°bi__gë16À
(
s
);

5629 
tga_height
 = 
	`°bi__gë16À
(
s
);

5630 
tga_bôs_≥r_pixñ
 = 
	`°bi__gë8
(
s
);

5631 
tga_comp
, 
tga_rgb16
=0;

5632 
tga_övîãd
 = 
	`°bi__gë8
(
s
);

5635 *
tga_d©a
;

5636 *
tga_∑Àâe
 = 
NULL
;

5637 
i
, 
j
;

5638 
øw_d©a
[4] = {0};

5639 
RLE_cou¡
 = 0;

5640 
RLE_ª≥©ög
 = 0;

5641 
ªad_√xt_pixñ
 = 1;

5642 
	`STBI_NOTUSED
(
ri
);

5643 
	`STBI_NOTUSED
(
tga_x_‹igö
);

5644 
	`STBI_NOTUSED
(
tga_y_‹igö
);

5647 i‡–
tga_image_ty≥
 >= 8 )

5649 
tga_image_ty≥
 -= 8;

5650 
tga_is_RLE
 = 1;

5652 
tga_övîãd
 = 1 - ((tga_inverted >> 5) & 1);

5655 i‡–
tga_ödexed
 ) 
tga_comp
 = 
	`°bi__tga_gë_comp
(
tga_∑Àâe_bôs
, 0, &
tga_rgb16
);

5656 
tga_comp
 = 
	`°bi__tga_gë_comp
(
tga_bôs_≥r_pixñ
, (
tga_image_ty≥
 =3), &
tga_rgb16
);

5658 if(!
tga_comp
)

5659  
	`°bi__îΩuc
("bad format", "Can't find out TGAÖixelformat");

5662 *
x
 = 
tga_width
;

5663 *
y
 = 
tga_height
;

5664 i‡(
comp
Ë*com∞
tga_comp
;

5666 i‡(!
	`°bi__mad3sizes_vÆid
(
tga_width
, 
tga_height
, 
tga_comp
, 0))

5667  
	`°bi__îΩuc
("tooÜarge", "Corrupt TGA");

5669 
tga_d©a
 = (*)
	`°bi__mÆloc_mad3
(
tga_width
, 
tga_height
, 
tga_comp
, 0);

5670 i‡(!
tga_d©a
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

5673 
	`°bi__skù
(
s
, 
tga_off£t
 );

5675 i‡–!
tga_ödexed
 && !
tga_is_RLE
 && !
tga_rgb16
 ) {

5676 
i
=0; i < 
tga_height
; ++i) {

5677 
row
 = 
tga_övîãd
 ? 
tga_height
 -
i
 - 1 : i;

5678 
°bi_uc
 *
tga_row
 = 
tga_d©a
 + 
row
*
tga_width
*
tga_comp
;

5679 
	`°bi__gën
(
s
, 
tga_row
, 
tga_width
 * 
tga_comp
);

5683 i‡–
tga_ödexed
)

5686 
	`°bi__skù
(
s
, 
tga_∑Àâe_°¨t
 );

5688 
tga_∑Àâe
 = (*)
	`°bi__mÆloc_mad2
(
tga_∑Àâe_Àn
, 
tga_comp
, 0);

5689 i‡(!
tga_∑Àâe
) {

5690 
	`STBI_FREE
(
tga_d©a
);

5691  
	`°bi__îΩuc
("outofmem", "Out of memory");

5693 i‡(
tga_rgb16
) {

5694 
°bi_uc
 *
∑l_íåy
 = 
tga_∑Àâe
;

5695 
	`STBI_ASSERT
(
tga_comp
 =
STBI_rgb
);

5696 
i
=0; i < 
tga_∑Àâe_Àn
; ++i) {

5697 
	`°bi__tga_ªad_rgb16
(
s
, 
∑l_íåy
);

5698 
∑l_íåy
 +
tga_comp
;

5700 } i‡(!
	`°bi__gën
(
s
, 
tga_∑Àâe
, 
tga_∑Àâe_Àn
 * 
tga_comp
)) {

5701 
	`STBI_FREE
(
tga_d©a
);

5702 
	`STBI_FREE
(
tga_∑Àâe
);

5703  
	`°bi__îΩuc
("badÖalette", "Corrupt TGA");

5707 
i
=0; i < 
tga_width
 * 
tga_height
; ++i)

5710 i‡–
tga_is_RLE
 )

5712 i‡–
RLE_cou¡
 == 0 )

5715 
RLE_cmd
 = 
	`°bi__gë8
(
s
);

5716 
RLE_cou¡
 = 1 + (
RLE_cmd
 & 127);

5717 
RLE_ª≥©ög
 = 
RLE_cmd
 >> 7;

5718 
ªad_√xt_pixñ
 = 1;

5719 } i‡–!
RLE_ª≥©ög
 )

5721 
ªad_√xt_pixñ
 = 1;

5725 
ªad_√xt_pixñ
 = 1;

5728 i‡–
ªad_√xt_pixñ
 )

5731 i‡–
tga_ödexed
 )

5734 
∑l_idx
 = (
tga_bôs_≥r_pixñ
 =8Ë? 
	`°bi__gë8
(
s
Ë: 
	`°bi__gë16À
(s);

5735 i‡–
∑l_idx
 >
tga_∑Àâe_Àn
 ) {

5737 
∑l_idx
 = 0;

5739 
∑l_idx
 *
tga_comp
;

5740 
j
 = 0; j < 
tga_comp
; ++j) {

5741 
øw_d©a
[
j
] = 
tga_∑Àâe
[
∑l_idx
+j];

5743 } if(
tga_rgb16
) {

5744 
	`STBI_ASSERT
(
tga_comp
 =
STBI_rgb
);

5745 
	`°bi__tga_ªad_rgb16
(
s
, 
øw_d©a
);

5748 
j
 = 0; j < 
tga_comp
; ++j) {

5749 
øw_d©a
[
j
] = 
	`°bi__gë8
(
s
);

5753 
ªad_√xt_pixñ
 = 0;

5757 
j
 = 0; j < 
tga_comp
; ++j)

5758 
tga_d©a
[
i
*
tga_comp
+
j
] = 
øw_d©a
[j];

5761 --
RLE_cou¡
;

5764 i‡–
tga_övîãd
 )

5766 
j
 = 0; j*2 < 
tga_height
; ++j)

5768 
ödex1
 = 
j
 * 
tga_width
 * 
tga_comp
;

5769 
ödex2
 = (
tga_height
 - 1 - 
j
Ë* 
tga_width
 * 
tga_comp
;

5770 
i
 = 
tga_width
 * 
tga_comp
; i > 0; --i)

5772 
ãmp
 = 
tga_d©a
[
ödex1
];

5773 
tga_d©a
[
ödex1
] =Åga_d©a[
ödex2
];

5774 
tga_d©a
[
ödex2
] = 
ãmp
;

5775 ++
ödex1
;

5776 ++
ödex2
;

5781 i‡–
tga_∑Àâe
 !
NULL
 )

5783 
	`STBI_FREE
–
tga_∑Àâe
 );

5788 i‡(
tga_comp
 >3 && !
tga_rgb16
)

5790 * 
tga_pixñ
 = 
tga_d©a
;

5791 
i
=0; i < 
tga_width
 * 
tga_height
; ++i)

5793 
ãmp
 = 
tga_pixñ
[0];

5794 
tga_pixñ
[0] =Åga_pixel[2];

5795 
tga_pixñ
[2] = 
ãmp
;

5796 
tga_pixñ
 +
tga_comp
;

5801 i‡(
ªq_comp
 &&Ñeq_com∞!
tga_comp
)

5802 
tga_d©a
 = 
	`°bi__c⁄vît_f‹m©
—ga_d©a, 
tga_comp
, 
ªq_comp
, 
tga_width
, 
tga_height
);

5806 
tga_∑Àâe_°¨t
 = 
tga_∑Àâe_Àn
 = 
tga_∑Àâe_bôs
 =

5807 
tga_x_‹igö
 = 
tga_y_‹igö
 = 0;

5808 
	`STBI_NOTUSED
(
tga_∑Àâe_°¨t
);

5810  
tga_d©a
;

5811 
	}
}

5817 #i‚de‡
STBI_NO_PSD


5818 
	$°bi__psd_ã°
(
°bi__c⁄ãxt
 *
s
)

5820 
r
 = (
	`°bi__gë32be
(
s
) == 0x38425053);

5821 
	`°bi__ªwöd
(
s
);

5822  
r
;

5823 
	}
}

5825 
	$°bi__psd_decode_æe
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 *
p
, 
pixñCou¡
)

5827 
cou¡
, 
∆e·
, 
Àn
;

5829 
cou¡
 = 0;

5830 (
∆e·
 = 
pixñCou¡
 - 
cou¡
) > 0) {

5831 
Àn
 = 
	`°bi__gë8
(
s
);

5832 i‡(
Àn
 == 128) {

5834 } i‡(
Àn
 < 128) {

5836 
Àn
++;

5837 i‡(
Àn
 > 
∆e·
)  0;

5838 
cou¡
 +
Àn
;

5839 
Àn
) {

5840 *
p
 = 
	`°bi__gë8
(
s
);

5841 
p
 += 4;

5842 
Àn
--;

5844 } i‡(
Àn
 > 128) {

5845 
°bi_uc
 
vÆ
;

5848 
Àn
 = 257 -Üen;

5849 i‡(
Àn
 > 
∆e·
)  0;

5850 
vÆ
 = 
	`°bi__gë8
(
s
);

5851 
cou¡
 +
Àn
;

5852 
Àn
) {

5853 *
p
 = 
vÆ
;

5854 
p
 += 4;

5855 
Àn
--;

5861 
	}
}

5863 *
	$°bi__psd_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
, 
bpc
)

5865 
pixñCou¡
;

5866 
ch™√lCou¡
, 
com¥essi⁄
;

5867 
ch™√l
, 
i
;

5868 
bôdïth
;

5869 
w
,
h
;

5870 
°bi_uc
 *
out
;

5871 
	`STBI_NOTUSED
(
ri
);

5874 i‡(
	`°bi__gë32be
(
s
) != 0x38425053)

5875  
	`°bi__îΩuc
("not PSD", "Corrupt PSD image");

5878 i‡(
	`°bi__gë16be
(
s
) != 1)

5879  
	`°bi__îΩuc
("wrong version", "Unsupported version of PSD image");

5882 
	`°bi__skù
(
s
, 6 );

5885 
ch™√lCou¡
 = 
	`°bi__gë16be
(
s
);

5886 i‡(
ch™√lCou¡
 < 0 || channelCount > 16)

5887  
	`°bi__îΩuc
("wrong channel count", "UnsupportedÇumber of channels in PSD image");

5890 
h
 = 
	`°bi__gë32be
(
s
);

5891 
w
 = 
	`°bi__gë32be
(
s
);

5894 
bôdïth
 = 
	`°bi__gë16be
(
s
);

5895 i‡(
bôdïth
 != 8 && bitdepth != 16)

5896  
	`°bi__îΩuc
("unsupported bit depth", "PSD bit depth isÇot 8 or 16 bit");

5908 i‡(
	`°bi__gë16be
(
s
) != 3)

5909  
	`°bi__îΩuc
("wrong color format", "PSD isÇot in RGB color format");

5912 
	`°bi__skù
(
s
,
	`°bi__gë32be
(s) );

5915 
	`°bi__skù
(
s
, 
	`°bi__gë32be
(s) );

5918 
	`°bi__skù
(
s
, 
	`°bi__gë32be
(s) );

5924 
com¥essi⁄
 = 
	`°bi__gë16be
(
s
);

5925 i‡(
com¥essi⁄
 > 1)

5926  
	`°bi__îΩuc
("bad compression", "PSD hasán unknown compression format");

5929 i‡(!
	`°bi__mad3sizes_vÆid
(4, 
w
, 
h
, 0))

5930  
	`°bi__îΩuc
("tooÜarge", "Corrupt PSD");

5934 i‡(!
com¥essi⁄
 && 
bôdïth
 =16 && 
bpc
 == 16) {

5935 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(8, 
w
, 
h
, 0);

5936 
ri
->
bôs_≥r_ch™√l
 = 16;

5938 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(4 * 
w
*
h
);

5940 i‡(!
out
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

5941 
pixñCou¡
 = 
w
*
h
;

5947 i‡(
com¥essi⁄
) {

5958 
	`°bi__skù
(
s
, 
h
 * 
ch™√lCou¡
 * 2 );

5961 
ch™√l
 = 0; channel < 4; channel++) {

5962 
°bi_uc
 *
p
;

5964 
p
 = 
out
+
ch™√l
;

5965 i‡(
ch™√l
 >
ch™√lCou¡
) {

5967 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

5968 *
p
 = (
ch™√l
 == 3 ? 255 : 0);

5971 i‡(!
	`°bi__psd_decode_æe
(
s
, 
p
, 
pixñCou¡
)) {

5972 
	`STBI_FREE
(
out
);

5973  
	`°bi__îΩuc
("corrupt", "bad RLEÖiece_data");

5983 
ch™√l
 = 0; channel < 4; channel++) {

5984 i‡(
ch™√l
 >
ch™√lCou¡
) {

5986 i‡(
bôdïth
 =16 && 
bpc
 == 16) {

5987 
°bi__uöt16
 *
q
 = ((°bi__uöt16 *Ë
out
Ë+ 
ch™√l
;

5988 
°bi__uöt16
 
vÆ
 = 
ch™√l
 == 3 ? 65535 : 0;

5989 
i
 = 0; i < 
pixñCou¡
; i++, 
q
 += 4)

5990 *
q
 = 
vÆ
;

5992 
°bi_uc
 *
p
 = 
out
+
ch™√l
;

5993 
°bi_uc
 
vÆ
 = 
ch™√l
 == 3 ? 255 : 0;

5994 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

5995 *
p
 = 
vÆ
;

5998 i‡(
ri
->
bôs_≥r_ch™√l
 == 16) {

5999 
°bi__uöt16
 *
q
 = ((°bi__uöt16 *Ë
out
Ë+ 
ch™√l
;

6000 
i
 = 0; i < 
pixñCou¡
; i++, 
q
 += 4)

6001 *
q
 = (
°bi__uöt16
Ë
	`°bi__gë16be
(
s
);

6003 
°bi_uc
 *
p
 = 
out
+
ch™√l
;

6004 i‡(
bôdïth
 == 16) {

6005 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

6006 *
p
 = (
°bi_uc
Ë(
	`°bi__gë16be
(
s
) >> 8);

6008 
i
 = 0; i < 
pixñCou¡
; i++, 
p
 += 4)

6009 *
p
 = 
	`°bi__gë8
(
s
);

6017 i‡(
ch™√lCou¡
 >= 4) {

6018 i‡(
ri
->
bôs_≥r_ch™√l
 == 16) {

6019 
i
=0; i < 
w
*
h
; ++i) {

6020 
°bi__uöt16
 *
pixñ
 = (°bi__uöt16 *Ë
out
 + 4*
i
;

6021 i‡(
pixñ
[3] != 0 &&Öixel[3] != 65535) {

6022 
a
 = 
pixñ
[3] / 65535.0f;

6023 
ø
 = 1.0‡/ 
a
;

6024 
öv_a
 = 65535.0‡* (1 - 
ø
);

6025 
pixñ
[0] = (
°bi__uöt16
Ë’ixñ[0]*
ø
 + 
öv_a
);

6026 
pixñ
[1] = (
°bi__uöt16
Ë’ixñ[1]*
ø
 + 
öv_a
);

6027 
pixñ
[2] = (
°bi__uöt16
Ë’ixñ[2]*
ø
 + 
öv_a
);

6031 
i
=0; i < 
w
*
h
; ++i) {

6032 *
pixñ
 = 
out
 + 4*
i
;

6033 i‡(
pixñ
[3] != 0 &&Öixel[3] != 255) {

6034 
a
 = 
pixñ
[3] / 255.0f;

6035 
ø
 = 1.0‡/ 
a
;

6036 
öv_a
 = 255.0‡* (1 - 
ø
);

6037 
pixñ
[0] = (Ë’ixñ[0]*
ø
 + 
öv_a
);

6038 
pixñ
[1] = (Ë’ixñ[1]*
ø
 + 
öv_a
);

6039 
pixñ
[2] = (Ë’ixñ[2]*
ø
 + 
öv_a
);

6046 i‡(
ªq_comp
 &&Ñeq_comp != 4) {

6047 i‡(
ri
->
bôs_≥r_ch™√l
 == 16)

6048 
out
 = (
°bi_uc
 *Ë
	`°bi__c⁄vît_f‹m©16
((
°bi__uöt16
 *Ëout, 4, 
ªq_comp
, 
w
, 
h
);

6050 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 4, 
ªq_comp
, 
w
, 
h
);

6051 i‡(
out
 =
NULL
)  out;

6054 i‡(
comp
) *comp = 4;

6055 *
y
 = 
h
;

6056 *
x
 = 
w
;

6058  
out
;

6059 
	}
}

6069 #i‚de‡
STBI_NO_PIC


6070 
	$°bi__pic_is4
(
°bi__c⁄ãxt
 *
s
,c⁄° *
°r
)

6072 
i
;

6073 
i
=0; i<4; ++i)

6074 i‡(
	`°bi__gë8
(
s
Ë!(
°bi_uc
)
°r
[
i
])

6078 
	}
}

6080 
	$°bi__pic_ã°_c‹e
(
°bi__c⁄ãxt
 *
s
)

6082 
i
;

6084 i‡(!
	`°bi__pic_is4
(
s
,"\x53\x80\xF6\x34"))

6087 
i
=0;i<84;++i)

6088 
	`°bi__gë8
(
s
);

6090 i‡(!
	`°bi__pic_is4
(
s
,"PICT"))

6094 
	}
}

6098 
°bi_uc
 
	msize
,
	mty≥
,
	mch™√l
;

6099 } 
	t°bi__pic_∑ckë
;

6101 
°bi_uc
 *
	$°bi__ªadvÆ
(
°bi__c⁄ãxt
 *
s
, 
ch™√l
, 
°bi_uc
 *
de°
)

6103 
mask
=0x80, 
i
;

6105 
i
=0; i<4; ++i, 
mask
>>=1) {

6106 i‡(
ch™√l
 & 
mask
) {

6107 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","PIC fileÅoo short");

6108 
de°
[
i
]=
	`°bi__gë8
(
s
);

6112  
de°
;

6113 
	}
}

6115 
	$°bi__c›yvÆ
(
ch™√l
,
°bi_uc
 *
de°
,c⁄° stbi_u¯*
§c
)

6117 
mask
=0x80,
i
;

6119 
i
=0;i<4; ++i, 
mask
>>=1)

6120 i‡(
ch™√l
&
mask
)

6121 
de°
[
i
]=
§c
[i];

6122 
	}
}

6124 
°bi_uc
 *
	$°bi__pic_lﬂd_c‹e
(
°bi__c⁄ãxt
 *
s
,
width
,
height
,*
comp
, 
°bi_uc
 *
ªsu…
)

6126 
a˘_comp
=0,
num_∑ckës
=0,
y
,
chaöed
;

6127 
°bi__pic_∑ckë
 
∑ckës
[10];

6132 
°bi__pic_∑ckë
 *
∑ckë
;

6134 i‡(
num_∑ckës
==(
∑ckës
)/(packets[0]))

6135  
	`°bi__îΩuc
("bad format","too manyÖackets");

6137 
∑ckë
 = &
∑ckës
[
num_∑ckës
++];

6139 
chaöed
 = 
	`°bi__gë8
(
s
);

6140 
∑ckë
->
size
 = 
	`°bi__gë8
(
s
);

6141 
∑ckë
->
ty≥
 = 
	`°bi__gë8
(
s
);

6142 
∑ckë
->
ch™√l
 = 
	`°bi__gë8
(
s
);

6144 
a˘_comp
 |
∑ckë
->
ch™√l
;

6146 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (readingÖackets)");

6147 i‡(
∑ckë
->
size
 !8Ë 
	`°bi__îΩuc
("bad format","packet isn't 8bpp");

6148 } 
chaöed
);

6150 *
comp
 = (
a˘_comp
 & 0x10 ? 4 : 3);

6152 
y
=0; y<
height
; ++y) {

6153 
∑ckë_idx
;

6155 
∑ckë_idx
=0;Öackë_idx < 
num_∑ckës
; ++packet_idx) {

6156 
°bi__pic_∑ckë
 *
∑ckë
 = &
∑ckës
[
∑ckë_idx
];

6157 
°bi_uc
 *
de°
 = 
ªsu…
+
y
*
width
*4;

6159 
∑ckë
->
ty≥
) {

6161  
	`°bi__îΩuc
("bad format","packet has bad compressionÅype");

6164 
x
;

6166 
x
=0;x<
width
;++x, 
de°
+=4)

6167 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
de°
))

6174 
À·
=
width
, 
i
;

6176 
À·
>0) {

6177 
°bi_uc
 
cou¡
,
vÆue
[4];

6179 
cou¡
=
	`°bi__gë8
(
s
);

6180 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (pureÑead count)");

6182 i‡(
cou¡
 > 
À·
)

6183 
cou¡
 = (
°bi_uc
Ë
À·
;

6185 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
vÆue
))  0;

6187 
i
=0; i<
cou¡
; ++i,
de°
+=4)

6188 
	`°bi__c›yvÆ
(
∑ckë
->
ch™√l
,
de°
,
vÆue
);

6189 
À·
 -
cou¡
;

6195 
À·
=
width
;

6196 
À·
>0) {

6197 
cou¡
 = 
	`°bi__gë8
(
s
), 
i
;

6198 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (mixedÑead count)");

6200 i‡(
cou¡
 >= 128) {

6201 
°bi_uc
 
vÆue
[4];

6203 i‡(
cou¡
==128)

6204 
cou¡
 = 
	`°bi__gë16be
(
s
);

6206 
cou¡
 -= 127;

6207 i‡(
cou¡
 > 
À·
)

6208  
	`°bi__îΩuc
("bad file","scanline overrun");

6210 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
vÆue
))

6213 
i
=0;i<
cou¡
;++i, 
de°
 += 4)

6214 
	`°bi__c›yvÆ
(
∑ckë
->
ch™√l
,
de°
,
vÆue
);

6216 ++
cou¡
;

6217 i‡(
cou¡
>
À·
Ë 
	`°bi__îΩuc
("bad file","scanline overrun");

6219 
i
=0;i<
cou¡
;++i, 
de°
+=4)

6220 i‡(!
	`°bi__ªadvÆ
(
s
,
∑ckë
->
ch™√l
,
de°
))

6223 
À·
-=
cou¡
;

6231  
ªsu…
;

6232 
	}
}

6234 *
	$°bi__pic_lﬂd
(
°bi__c⁄ãxt
 *
s
,*
px
,*
py
,*
comp
,
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

6236 
°bi_uc
 *
ªsu…
;

6237 
i
, 
x
,
y
, 
öã∫Æ_comp
;

6238 
	`STBI_NOTUSED
(
ri
);

6240 i‡(!
comp
Ëcom∞&
öã∫Æ_comp
;

6242 
i
=0; i<92; ++i)

6243 
	`°bi__gë8
(
s
);

6245 
x
 = 
	`°bi__gë16be
(
s
);

6246 
y
 = 
	`°bi__gë16be
(
s
);

6247 i‡(
	`°bi__©_eof
(
s
)Ë 
	`°bi__îΩuc
("bad file","fileÅoo short (pic header)");

6248 i‡(!
	`°bi__mad3sizes_vÆid
(
x
, 
y
, 4, 0)Ë 
	`°bi__îΩuc
("tooÜarge", "PIC imageÅooÜargeÅo decode");

6250 
	`°bi__gë32be
(
s
);

6251 
	`°bi__gë16be
(
s
);

6252 
	`°bi__gë16be
(
s
);

6255 
ªsu…
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
x
, 
y
, 4, 0);

6256 
	`mem£t
(
ªsu…
, 0xff, 
x
*
y
*4);

6258 i‡(!
	`°bi__pic_lﬂd_c‹e
(
s
,
x
,
y
,
comp
, 
ªsu…
)) {

6259 
	`STBI_FREE
(
ªsu…
);

6260 
ªsu…
=0;

6262 *
px
 = 
x
;

6263 *
py
 = 
y
;

6264 i‡(
ªq_comp
 =0Ëªq_com∞*
comp
;

6265 
ªsu…
=
	`°bi__c⁄vît_f‹m©
‘esu…,4,
ªq_comp
,
x
,
y
);

6267  
ªsu…
;

6268 
	}
}

6270 
	$°bi__pic_ã°
(
°bi__c⁄ãxt
 *
s
)

6272 
r
 = 
	`°bi__pic_ã°_c‹e
(
s
);

6273 
	`°bi__ªwöd
(
s
);

6274  
r
;

6275 
	}
}

6281 #i‚de‡
STBI_NO_GIF


6284 
°bi__öt16
 
	m¥efix
;

6285 
°bi_uc
 
	mfú°
;

6286 
°bi_uc
 
	msuffix
;

6287 } 
	t°bi__gif_lzw
;

6291 
	mw
,
	mh
;

6292 
°bi_uc
 *
	mout
;

6293 
°bi_uc
 *
	mbackground
;

6294 
°bi_uc
 *
	mhi°‹y
;

6295 
	mÊags
, 
	mbgödex
, 
	møtio
, 
	må™•¨ít
, 
	meÊags
;

6296 
°bi_uc
 
	m∑l
[256][4];

6297 
°bi_uc
 
	mÕÆ
[256][4];

6298 
°bi__gif_lzw
 
	mcodes
[8192];

6299 
°bi_uc
 *
	mcﬁ‹_èbÀ
;

6300 
	m∑r£
, 
	m°ï
;

6301 
	mlÊags
;

6302 
	m°¨t_x
, 
	m°¨t_y
;

6303 
	mmax_x
, 
	mmax_y
;

6304 
	mcur_x
, 
	mcur_y
;

6305 
	mlöe_size
;

6306 
	mdñay
;

6307 } 
	t°bi__gif
;

6309 
	$°bi__gif_ã°_øw
(
°bi__c⁄ãxt
 *
s
)

6311 
sz
;

6312 i‡(
	`°bi__gë8
(
s
) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')  0;

6313 
sz
 = 
	`°bi__gë8
(
s
);

6314 i‡(
sz
 != '9' && sz != '7')  0;

6315 i‡(
	`°bi__gë8
(
s
) != 'a')  0;

6317 
	}
}

6319 
	$°bi__gif_ã°
(
°bi__c⁄ãxt
 *
s
)

6321 
r
 = 
	`°bi__gif_ã°_øw
(
s
);

6322 
	`°bi__ªwöd
(
s
);

6323  
r
;

6324 
	}
}

6326 
	$°bi__gif_∑r£_cﬁ‹èbÀ
(
°bi__c⁄ãxt
 *
s
, 
°bi_uc
 
∑l
[256][4], 
num_íåõs
, 
å™•
)

6328 
i
;

6329 
i
=0; i < 
num_íåõs
; ++i) {

6330 
∑l
[
i
][2] = 
	`°bi__gë8
(
s
);

6331 
∑l
[
i
][1] = 
	`°bi__gë8
(
s
);

6332 
∑l
[
i
][0] = 
	`°bi__gë8
(
s
);

6333 
∑l
[
i
][3] = 
å™•
 == i ? 0 : 255;

6335 
	}
}

6337 
	$°bi__gif_hódî
(
°bi__c⁄ãxt
 *
s
, 
°bi__gif
 *
g
, *
comp
, 
is_öfo
)

6339 
°bi_uc
 
vîsi⁄
;

6340 i‡(
	`°bi__gë8
(
s
) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')

6341  
	`°bi__îr
("not GIF", "Corrupt GIF");

6343 
vîsi⁄
 = 
	`°bi__gë8
(
s
);

6344 i‡(
vîsi⁄
 !'7' && vîsi⁄ !'9'Ë 
	`°bi__îr
("not GIF", "Corrupt GIF");

6345 i‡(
	`°bi__gë8
(
s
Ë!'a'Ë 
	`°bi__îr
("not GIF", "Corrupt GIF");

6347 
°bi__g_Áûuª_ªas⁄
 = "";

6348 
g
->
w
 = 
	`°bi__gë16À
(
s
);

6349 
g
->
h
 = 
	`°bi__gë16À
(
s
);

6350 
g
->
Êags
 = 
	`°bi__gë8
(
s
);

6351 
g
->
bgödex
 = 
	`°bi__gë8
(
s
);

6352 
g
->
øtio
 = 
	`°bi__gë8
(
s
);

6353 
g
->
å™•¨ít
 = -1;

6355 i‡(
comp
 != 0) *comp = 4;

6357 i‡(
is_öfo
)  1;

6359 i‡(
g
->
Êags
 & 0x80)

6360 
	`°bi__gif_∑r£_cﬁ‹èbÀ
(
s
,
g
->
∑l
, 2 << (g->
Êags
 & 7), -1);

6363 
	}
}

6365 
	$°bi__gif_öfo_øw
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6367 
°bi__gif
* 
g
 = (°bi__gif*Ë
	`°bi__mÆloc
((stbi__gif));

6368 i‡(!
	`°bi__gif_hódî
(
s
, 
g
, 
comp
, 1)) {

6369 
	`STBI_FREE
(
g
);

6370 
	`°bi__ªwöd
–
s
 );

6373 i‡(
x
Ë*x = 
g
->
w
;

6374 i‡(
y
Ë*y = 
g
->
h
;

6375 
	`STBI_FREE
(
g
);

6377 
	}
}

6379 
	$°bi__out_gif_code
(
°bi__gif
 *
g
, 
°bi__uöt16
 
code
)

6381 
°bi_uc
 *
p
, *
c
;

6382 
idx
;

6386 i‡(
g
->
codes
[
code
].
¥efix
 >= 0)

6387 
	`°bi__out_gif_code
(
g
, g->
codes
[
code
].
¥efix
);

6389 i‡(
g
->
cur_y
 >g->
max_y
) ;

6391 
idx
 = 
g
->
cur_x
 + g->
cur_y
;

6392 
p
 = &
g
->
out
[
idx
];

6393 
g
->
hi°‹y
[
idx
 / 4] = 1;

6395 
c
 = &
g
->
cﬁ‹_èbÀ
[g->
codes
[
code
].
suffix
 * 4];

6396 i‡(
c
[3] > 128) {

6397 
p
[0] = 
c
[2];

6398 
p
[1] = 
c
[1];

6399 
p
[2] = 
c
[0];

6400 
p
[3] = 
c
[3];

6402 
g
->
cur_x
 += 4;

6404 i‡(
g
->
cur_x
 >g->
max_x
) {

6405 
g
->
cur_x
 = g->
°¨t_x
;

6406 
g
->
cur_y
 +g->
°ï
;

6408 
g
->
cur_y
 >g->
max_y
 && g->
∑r£
 > 0) {

6409 
g
->
°ï
 = (1 << g->
∑r£
Ë* g->
löe_size
;

6410 
g
->
cur_y
 = g->
°¨t_y
 + (g->
°ï
 >> 1);

6411 --
g
->
∑r£
;

6414 
	}
}

6416 
°bi_uc
 *
	$°bi__¥o˚ss_gif_ø°î
(
°bi__c⁄ãxt
 *
s
, 
°bi__gif
 *
g
)

6418 
°bi_uc
 
lzw_cs
;

6419 
°bi__öt32
 
Àn
, 
öô_code
;

6420 
°bi__uöt32
 
fú°
;

6421 
°bi__öt32
 
codesize
, 
codemask
, 
avaû
, 
ﬁdcode
, 
bôs
, 
vÆid_bôs
, 
˛ór
;

6422 
°bi__gif_lzw
 *
p
;

6424 
lzw_cs
 = 
	`°bi__gë8
(
s
);

6425 i‡(
lzw_cs
 > 12Ë 
NULL
;

6426 
˛ór
 = 1 << 
lzw_cs
;

6427 
fú°
 = 1;

6428 
codesize
 = 
lzw_cs
 + 1;

6429 
codemask
 = (1 << 
codesize
) - 1;

6430 
bôs
 = 0;

6431 
vÆid_bôs
 = 0;

6432 
öô_code
 = 0; inô_codê< 
˛ór
; init_code++) {

6433 
g
->
codes
[
öô_code
].
¥efix
 = -1;

6434 
g
->
codes
[
öô_code
].
fú°
 = (
°bi_uc
) init_code;

6435 
g
->
codes
[
öô_code
].
suffix
 = (
°bi_uc
) init_code;

6439 
avaû
 = 
˛ór
+2;

6440 
ﬁdcode
 = -1;

6442 
Àn
 = 0;

6444 i‡(
vÆid_bôs
 < 
codesize
) {

6445 i‡(
Àn
 == 0) {

6446 
Àn
 = 
	`°bi__gë8
(
s
);

6447 i‡(
Àn
 == 0)

6448  
g
->
out
;

6450 --
Àn
;

6451 
bôs
 |(
°bi__öt32
Ë
	`°bi__gë8
(
s
Ë<< 
vÆid_bôs
;

6452 
vÆid_bôs
 += 8;

6454 
°bi__öt32
 
code
 = 
bôs
 & 
codemask
;

6455 
bôs
 >>
codesize
;

6456 
vÆid_bôs
 -
codesize
;

6458 i‡(
code
 =
˛ór
) {

6459 
codesize
 = 
lzw_cs
 + 1;

6460 
codemask
 = (1 << 
codesize
) - 1;

6461 
avaû
 = 
˛ór
 + 2;

6462 
ﬁdcode
 = -1;

6463 
fú°
 = 0;

6464 } i‡(
code
 =
˛ór
 + 1) {

6465 
	`°bi__skù
(
s
, 
Àn
);

6466 (
Àn
 = 
	`°bi__gë8
(
s
)) > 0)

6467 
	`°bi__skù
(
s
,
Àn
);

6468  
g
->
out
;

6469 } i‡(
code
 <
avaû
) {

6470 i‡(
fú°
) {

6471  
	`°bi__îΩuc
("no clear code", "Corrupt GIF");

6474 i‡(
ﬁdcode
 >= 0) {

6475 
p
 = &
g
->
codes
[
avaû
++];

6476 i‡(
avaû
 > 8192) {

6477  
	`°bi__îΩuc
("too many codes", "Corrupt GIF");

6480 
p
->
¥efix
 = (
°bi__öt16
Ë
ﬁdcode
;

6481 
p
->
fú°
 = 
g
->
codes
[
ﬁdcode
].first;

6482 
p
->
suffix
 = (
code
 =
avaû
Ë?Ö->
fú°
 : 
g
->
codes
[code].first;

6483 } i‡(
code
 =
avaû
)

6484  
	`°bi__îΩuc
("illegal code inÑaster", "Corrupt GIF");

6486 
	`°bi__out_gif_code
(
g
, (
°bi__uöt16
Ë
code
);

6488 i‡((
avaû
 & 
codemask
) == 0 &&ávail <= 0x0FFF) {

6489 
codesize
++;

6490 
codemask
 = (1 << 
codesize
) - 1;

6493 
ﬁdcode
 = 
code
;

6495  
	`°bi__îΩuc
("illegal code inÑaster", "Corrupt GIF");

6499 
	}
}

6503 
°bi_uc
 *
	$°bi__gif_lﬂd_√xt
(
°bi__c⁄ãxt
 *
s
, 
°bi__gif
 *
g
, *
comp
, 
ªq_comp
, 
°bi_uc
 *
two_back
)

6505 
di•o£
;

6506 
fú°_‰ame
;

6507 
pi
;

6508 
pcou¡
;

6509 
	`STBI_NOTUSED
(
ªq_comp
);

6512 
fú°_‰ame
 = 0;

6513 i‡(
g
->
out
 == 0) {

6514 i‡(!
	`°bi__gif_hódî
(
s
, 
g
, 
comp
,0))  0;

6515 i‡(!
	`°bi__mad3sizes_vÆid
(4, 
g
->
w
, g->
h
, 0))

6516  
	`°bi__îΩuc
("tooÜarge", "GIF image isÅooÜarge");

6517 
pcou¡
 = 
g
->
w
 * g->
h
;

6518 
g
->
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(4 * 
pcou¡
);

6519 
g
->
background
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(4 * 
pcou¡
);

6520 
g
->
hi°‹y
 = (
°bi_uc
 *Ë
	`°bi__mÆloc
(
pcou¡
);

6521 i‡(!
g
->
out
 || !g->
background
 || !g->
hi°‹y
)

6522  
	`°bi__îΩuc
("outofmem", "Out of memory");

6527 
	`mem£t
(
g
->
out
, 0x00, 4 * 
pcou¡
);

6528 
	`mem£t
(
g
->
background
, 0x00, 4 * 
pcou¡
);

6529 
	`mem£t
(
g
->
hi°‹y
, 0x00, 
pcou¡
);

6530 
fú°_‰ame
 = 1;

6533 
di•o£
 = (
g
->
eÊags
 & 0x1C) >> 2;

6534 
pcou¡
 = 
g
->
w
 * g->
h
;

6536 i‡((
di•o£
 =3Ë&& (
two_back
 == 0)) {

6537 
di•o£
 = 2;

6540 i‡(
di•o£
 == 3) {

6541 
pi
 = 0;Öò< 
pcou¡
; ++pi) {

6542 i‡(
g
->
hi°‹y
[
pi
]) {

6543 
	`mem˝y
–&
g
->
out
[
pi
 * 4], &
two_back
[pi * 4], 4 );

6546 } i‡(
di•o£
 == 2) {

6548 
pi
 = 0;Öò< 
pcou¡
; ++pi) {

6549 i‡(
g
->
hi°‹y
[
pi
]) {

6550 
	`mem˝y
–&
g
->
out
[
pi
 * 4], &g->
background
[pi * 4], 4 );

6561 
	`mem˝y
–
g
->
background
, g->
out
, 4 * g->
w
 * g->
h
 );

6565 
	`mem£t
–
g
->
hi°‹y
, 0x00, g->
w
 * g->
h
 );

6568 
èg
 = 
	`°bi__gë8
(
s
);

6569 
èg
) {

6572 
°bi__öt32
 
x
, 
y
, 
w
, 
h
;

6573 
°bi_uc
 *
o
;

6575 
x
 = 
	`°bi__gë16À
(
s
);

6576 
y
 = 
	`°bi__gë16À
(
s
);

6577 
w
 = 
	`°bi__gë16À
(
s
);

6578 
h
 = 
	`°bi__gë16À
(
s
);

6579 i‡(((
x
 + 
w
Ë> (
g
->w)Ë|| ((
y
 + 
h
) > (g->h)))

6580  
	`°bi__îΩuc
("bad Image Descriptor", "Corrupt GIF");

6582 
g
->
löe_size
 = g->
w
 * 4;

6583 
g
->
°¨t_x
 = 
x
 * 4;

6584 
g
->
°¨t_y
 = 
y
 * g->
löe_size
;

6585 
g
->
max_x
 = g->
°¨t_x
 + 
w
 * 4;

6586 
g
->
max_y
 = g->
°¨t_y
 + 
h
 * g->
löe_size
;

6587 
g
->
cur_x
 = g->
°¨t_x
;

6588 
g
->
cur_y
 = g->
°¨t_y
;

6594 i‡(
w
 == 0)

6595 
g
->
cur_y
 = g->
max_y
;

6597 
g
->
lÊags
 = 
	`°bi__gë8
(
s
);

6599 i‡(
g
->
lÊags
 & 0x40) {

6600 
g
->
°ï
 = 8 * g->
löe_size
;

6601 
g
->
∑r£
 = 3;

6603 
g
->
°ï
 = g->
löe_size
;

6604 
g
->
∑r£
 = 0;

6607 i‡(
g
->
lÊags
 & 0x80) {

6608 
	`°bi__gif_∑r£_cﬁ‹èbÀ
(
s
,
g
->
ÕÆ
, 2 << (g->
lÊags
 & 7), g->
eÊags
 & 0x01 ? g->
å™•¨ít
 : -1);

6609 
g
->
cﬁ‹_èbÀ
 = (
°bi_uc
 *Ëg->
ÕÆ
;

6610 } i‡(
g
->
Êags
 & 0x80) {

6611 
g
->
cﬁ‹_èbÀ
 = (
°bi_uc
 *Ëg->
∑l
;

6613  
	`°bi__îΩuc
("missing colorÅable", "Corrupt GIF");

6615 
o
 = 
	`°bi__¥o˚ss_gif_ø°î
(
s
, 
g
);

6616 i‡(!
o
Ë 
NULL
;

6619 
pcou¡
 = 
g
->
w
 * g->
h
;

6620 i‡(
fú°_‰ame
 && (
g
->
bgödex
 > 0)) {

6622 
pi
 = 0;Öò< 
pcou¡
; ++pi) {

6623 i‡(
g
->
hi°‹y
[
pi
] == 0) {

6624 
g
->
∑l
[g->
bgödex
][3] = 255;

6625 
	`mem˝y
–&
g
->
out
[
pi
 * 4], &g->
∑l
[g->
bgödex
], 4 );

6630  
o
;

6635 
Àn
;

6636 
ext
 = 
	`°bi__gë8
(
s
);

6637 i‡(
ext
 == 0xF9) {

6638 
Àn
 = 
	`°bi__gë8
(
s
);

6639 i‡(
Àn
 == 4) {

6640 
g
->
eÊags
 = 
	`°bi__gë8
(
s
);

6641 
g
->
dñay
 = 10 * 
	`°bi__gë16À
(
s
);

6644 i‡(
g
->
å™•¨ít
 >= 0) {

6645 
g
->
∑l
[g->
å™•¨ít
][3] = 255;

6647 i‡(
g
->
eÊags
 & 0x01) {

6648 
g
->
å™•¨ít
 = 
	`°bi__gë8
(
s
);

6649 i‡(
g
->
å™•¨ít
 >= 0) {

6650 
g
->
∑l
[g->
å™•¨ít
][3] = 0;

6654 
	`°bi__skù
(
s
, 1);

6655 
g
->
å™•¨ít
 = -1;

6658 
	`°bi__skù
(
s
, 
Àn
);

6662 (
Àn
 = 
	`°bi__gë8
(
s
)) != 0) {

6663 
	`°bi__skù
(
s
, 
Àn
);

6669  (
°bi_uc
 *Ë
s
;

6672  
	`°bi__îΩuc
("unknown code", "Corrupt GIF");

6675 
	}
}

6677 *
	$°bi__lﬂd_gif_maö
(
°bi__c⁄ãxt
 *
s
, **
dñays
, *
x
, *
y
, *
z
, *
comp
, 
ªq_comp
)

6679 i‡(
	`°bi__gif_ã°
(
s
)) {

6680 
œyîs
 = 0;

6681 
°bi_uc
 *
u
 = 0;

6682 
°bi_uc
 *
out
 = 0;

6683 
°bi_uc
 *
two_back
 = 0;

6684 
°bi__gif
 
g
;

6685 
°ride
;

6686 
	`mem£t
(&
g
, 0, (g));

6687 i‡(
dñays
) {

6688 *
dñays
 = 0;

6692 
u
 = 
	`°bi__gif_lﬂd_√xt
(
s
, &
g
, 
comp
, 
ªq_comp
, 
two_back
);

6693 i‡(
u
 =(
°bi_uc
 *Ë
s
) u = 0;

6695 i‡(
u
) {

6696 *
x
 = 
g
.
w
;

6697 *
y
 = 
g
.
h
;

6698 ++
œyîs
;

6699 
°ride
 = 
g
.
w
 * g.
h
 * 4;

6701 i‡(
out
) {

6702 *
tmp
 = (
°bi_uc
*Ë
	`STBI_REALLOC
–
out
, 
œyîs
 * 
°ride
 );

6703 i‡(
NULL
 =
tmp
) {

6704 
	`STBI_FREE
(
g
.
out
);

6705 
	`STBI_FREE
(
g
.
hi°‹y
);

6706 
	`STBI_FREE
(
g
.
background
);

6707  
	`°bi__îΩuc
("outofmem", "Out of memory");

6710 
out
 = (
°bi_uc
*Ë
tmp
;

6711 i‡(
dñays
) {

6712 *
dñays
 = (*Ë
	`STBI_REALLOC
–*dñays, (Ë* 
œyîs
 );

6715 
out
 = (
°bi_uc
*)
	`°bi__mÆloc
–
œyîs
 * 
°ride
 );

6716 i‡(
dñays
) {

6717 *
dñays
 = (*Ë
	`°bi__mÆloc
–
œyîs
 * () );

6720 
	`mem˝y
–
out
 + ((
œyîs
 - 1Ë* 
°ride
), 
u
, stride );

6721 i‡(
œyîs
 >= 2) {

6722 
two_back
 = 
out
 - 2 * 
°ride
;

6725 i‡(
dñays
) {

6726 (*
dñays
)[
œyîs
 - 1U] = 
g
.
dñay
;

6729 } 
u
 != 0);

6732 
	`STBI_FREE
(
g
.
out
);

6733 
	`STBI_FREE
(
g
.
hi°‹y
);

6734 
	`STBI_FREE
(
g
.
background
);

6737 i‡(
ªq_comp
 &&Ñeq_comp != 4)

6738 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 4, 
ªq_comp
, 
œyîs
 * 
g
.
w
, g.
h
);

6740 *
z
 = 
œyîs
;

6741  
out
;

6743  
	`°bi__îΩuc
("not GIF", "Image wasÇotásá gifÅype.");

6745 
	}
}

6747 *
	$°bi__gif_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

6749 
°bi_uc
 *
u
 = 0;

6750 
°bi__gif
 
g
;

6751 
	`mem£t
(&
g
, 0, (g));

6752 
	`STBI_NOTUSED
(
ri
);

6754 
u
 = 
	`°bi__gif_lﬂd_√xt
(
s
, &
g
, 
comp
, 
ªq_comp
, 0);

6755 i‡(
u
 =(
°bi_uc
 *Ë
s
) u = 0;

6756 i‡(
u
) {

6757 *
x
 = 
g
.
w
;

6758 *
y
 = 
g
.
h
;

6762 i‡(
ªq_comp
 &&Ñeq_comp != 4)

6763 
u
 = 
	`°bi__c⁄vît_f‹m©
(u, 4, 
ªq_comp
, 
g
.
w
, g.
h
);

6764 } i‡(
g
.
out
) {

6766 
	`STBI_FREE
(
g
.
out
);

6770 
	`STBI_FREE
(
g
.
hi°‹y
);

6771 
	`STBI_FREE
(
g
.
background
);

6773  
u
;

6774 
	}
}

6776 
	$°bi__gif_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6778  
	`°bi__gif_öfo_øw
(
s
,
x
,
y
,
comp
);

6779 
	}
}

6785 #i‚de‡
STBI_NO_HDR


6786 
	$°bi__hdr_ã°_c‹e
(
°bi__c⁄ãxt
 *
s
, c⁄° *
sig«tuª
)

6788 
i
;

6789 
i
=0; 
sig«tuª
[i]; ++i)

6790 i‡(
	`°bi__gë8
(
s
Ë!
sig«tuª
[
i
])

6792 
	`°bi__ªwöd
(
s
);

6794 
	}
}

6796 
	$°bi__hdr_ã°
(
°bi__c⁄ãxt
* 
s
)

6798 
r
 = 
	`°bi__hdr_ã°_c‹e
(
s
, "#?RADIANCE\n");

6799 
	`°bi__ªwöd
(
s
);

6800 if(!
r
) {

6801 
r
 = 
	`°bi__hdr_ã°_c‹e
(
s
, "#?RGBE\n");

6802 
	`°bi__ªwöd
(
s
);

6804  
r
;

6805 
	}
}

6807 
	#STBI__HDR_BUFLEN
 1024

	)

6808 *
	$°bi__hdr_gëtokí
(
°bi__c⁄ãxt
 *
z
, *
buf„r
)

6810 
Àn
=0;

6811 
c
 = '\0';

6813 
c
 = (Ë
	`°bi__gë8
(
z
);

6815 !
	`°bi__©_eof
(
z
Ë&& 
c
 != '\n') {

6816 
buf„r
[
Àn
++] = 
c
;

6817 i‡(
Àn
 =
STBI__HDR_BUFLEN
-1) {

6819 !
	`°bi__©_eof
(
z
Ë&& 
	`°bi__gë8
(z) != '\n')

6823 
c
 = (Ë
	`°bi__gë8
(
z
);

6826 
buf„r
[
Àn
] = 0;

6827  
buf„r
;

6828 
	}
}

6830 
	$°bi__hdr_c⁄vît
(*
ouçut
, 
°bi_uc
 *
öput
, 
ªq_comp
)

6832 i‡–
öput
[3] != 0 ) {

6833 
f1
;

6835 
f1
 = (Ë
	`ldexp
(1.0f, 
öput
[3] - ()(128 + 8));

6836 i‡(
ªq_comp
 <= 2)

6837 
ouçut
[0] = (
öput
[0] + i≈ut[1] + i≈ut[2]Ë* 
f1
 / 3;

6839 
ouçut
[0] = 
öput
[0] * 
f1
;

6840 
ouçut
[1] = 
öput
[1] * 
f1
;

6841 
ouçut
[2] = 
öput
[2] * 
f1
;

6843 i‡(
ªq_comp
 =2Ë
ouçut
[1] = 1;

6844 i‡(
ªq_comp
 =4Ë
ouçut
[3] = 1;

6846 
ªq_comp
) {

6847 4: 
ouçut
[3] = 1;

6848 3: 
ouçut
[0] = output[1] = output[2] = 0;

6850 2: 
ouçut
[1] = 1;

6851 1: 
ouçut
[0] = 0;

6855 
	}
}

6857 *
	$°bi__hdr_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

6859 
buf„r
[
STBI__HDR_BUFLEN
];

6860 *
tokí
;

6861 
vÆid
 = 0;

6862 
width
, 
height
;

6863 
°bi_uc
 *
sˇ∆öe
;

6864 *
hdr_d©a
;

6865 
Àn
;

6866 
cou¡
, 
vÆue
;

6867 
i
, 
j
, 
k
, 
c1
,
c2
, 
z
;

6868 c⁄° *
hódîTokí
;

6869 
	`STBI_NOTUSED
(
ri
);

6872 
hódîTokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

6873 i‡(
	`°rcmp
(
hódîTokí
, "#?RADIANCE") != 0 && strcmp(headerToken, "#?RGBE") != 0)

6874  
	`°bi__îΩf
("not HDR", "Corrupt HDR image");

6878 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

6879 i‡(
tokí
[0] == 0) ;

6880 i‡(
	`°rcmp
(
tokí
, "FORMAT=32-bô_æe_rgbe"Ë=0Ë
vÆid
 = 1;

6883 i‡(!
vÆid
Ë 
	`°bi__îΩf
("unsupported format", "Unsupported HDR format");

6887 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

6888 i‡(
	`°∫cmp
(
tokí
, "-Y ", 3)Ë 
	`°bi__îΩf
("unsupportedÖiece_dataÜayout", "Unsupported HDR format");

6889 
tokí
 += 3;

6890 
height
 = (Ë
	`°πﬁ
(
tokí
, &token, 10);

6891 *
tokí
 == ' ') ++token;

6892 i‡(
	`°∫cmp
(
tokí
, "+X ", 3)Ë 
	`°bi__îΩf
("unsupportedÖiece_dataÜayout", "Unsupported HDR format");

6893 
tokí
 += 3;

6894 
width
 = (Ë
	`°πﬁ
(
tokí
, 
NULL
, 10);

6896 *
x
 = 
width
;

6897 *
y
 = 
height
;

6899 i‡(
comp
) *comp = 3;

6900 i‡(
ªq_comp
 == 0)Ñeq_comp = 3;

6902 i‡(!
	`°bi__mad4sizes_vÆid
(
width
, 
height
, 
ªq_comp
, (), 0))

6903  
	`°bi__îΩf
("tooÜarge", "HDR image isÅooÜarge");

6906 
hdr_d©a
 = (*Ë
	`°bi__mÆloc_mad4
(
width
, 
height
, 
ªq_comp
, (), 0);

6907 i‡(!
hdr_d©a
)

6908  
	`°bi__îΩf
("outofmem", "Out of memory");

6912 i‡–
width
 < 8 || width >= 32768) {

6914 
j
=0; j < 
height
; ++j) {

6915 
i
=0; i < 
width
; ++i) {

6916 
°bi_uc
 
rgbe
[4];

6917 
maö_decode_lo›
:

6918 
	`°bi__gën
(
s
, 
rgbe
, 4);

6919 
	`°bi__hdr_c⁄vît
(
hdr_d©a
 + 
j
 * 
width
 * 
ªq_comp
 + 
i
 *Ñeq_comp, 
rgbe
,Ñeq_comp);

6924 
sˇ∆öe
 = 
NULL
;

6926 
j
 = 0; j < 
height
; ++j) {

6927 
c1
 = 
	`°bi__gë8
(
s
);

6928 
c2
 = 
	`°bi__gë8
(
s
);

6929 
Àn
 = 
	`°bi__gë8
(
s
);

6930 i‡(
c1
 !2 || 
c2
 !2 || (
Àn
 & 0x80)) {

6933 
°bi_uc
 
rgbe
[4];

6934 
rgbe
[0] = (
°bi_uc
Ë
c1
;

6935 
rgbe
[1] = (
°bi_uc
Ë
c2
;

6936 
rgbe
[2] = (
°bi_uc
Ë
Àn
;

6937 
rgbe
[3] = (
°bi_uc
Ë
	`°bi__gë8
(
s
);

6938 
	`°bi__hdr_c⁄vît
(
hdr_d©a
, 
rgbe
, 
ªq_comp
);

6939 
i
 = 1;

6940 
j
 = 0;

6941 
	`STBI_FREE
(
sˇ∆öe
);

6942 
maö_decode_lo›
;

6944 
Àn
 <<= 8;

6945 
Àn
 |
	`°bi__gë8
(
s
);

6946 i‡(
Àn
 !
width
Ë{ 
	`STBI_FREE
(
hdr_d©a
); STBI_FREE(
sˇ∆öe
);  
	`°bi__îΩf
("invalid decoded scanlineÜength", "corrupt HDR"); }

6947 i‡(
sˇ∆öe
 =
NULL
) {

6948 
sˇ∆öe
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad2
(
width
, 4, 0);

6949 i‡(!
sˇ∆öe
) {

6950 
	`STBI_FREE
(
hdr_d©a
);

6951  
	`°bi__îΩf
("outofmem", "Out of memory");

6955 
k
 = 0; k < 4; ++k) {

6956 
∆e·
;

6957 
i
 = 0;

6958 (
∆e·
 = 
width
 - 
i
) > 0) {

6959 
cou¡
 = 
	`°bi__gë8
(
s
);

6960 i‡(
cou¡
 > 128) {

6962 
vÆue
 = 
	`°bi__gë8
(
s
);

6963 
cou¡
 -= 128;

6964 i‡(
cou¡
 > 
∆e·
Ë{ 
	`STBI_FREE
(
hdr_d©a
); STBI_FREE(
sˇ∆öe
);  
	`°bi__îΩf
("corrupt", "bad RLEÖiece_data in HDR"); }

6965 
z
 = 0; z < 
cou¡
; ++z)

6966 
sˇ∆öe
[
i
++ * 4 + 
k
] = 
vÆue
;

6969 i‡(
cou¡
 > 
∆e·
Ë{ 
	`STBI_FREE
(
hdr_d©a
); STBI_FREE(
sˇ∆öe
);  
	`°bi__îΩf
("corrupt", "bad RLEÖiece_data in HDR"); }

6970 
z
 = 0; z < 
cou¡
; ++z)

6971 
sˇ∆öe
[
i
++ * 4 + 
k
] = 
	`°bi__gë8
(
s
);

6975 
i
=0; i < 
width
; ++i)

6976 
	`°bi__hdr_c⁄vît
(
hdr_d©a
+(
j
*
width
 + 
i
)*
ªq_comp
, 
sˇ∆öe
 + i*4,Ñeq_comp);

6978 i‡(
sˇ∆öe
)

6979 
	`STBI_FREE
(
sˇ∆öe
);

6982  
hdr_d©a
;

6983 
	}
}

6985 
	$°bi__hdr_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

6987 
buf„r
[
STBI__HDR_BUFLEN
];

6988 *
tokí
;

6989 
vÆid
 = 0;

6990 
dummy
;

6992 i‡(!
x
Ëx = &
dummy
;

6993 i‡(!
y
Ëy = &
dummy
;

6994 i‡(!
comp
Ëcom∞&
dummy
;

6996 i‡(
	`°bi__hdr_ã°
(
s
) == 0) {

6997 
	`°bi__ªwöd
–
s
 );

7002 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

7003 i‡(
tokí
[0] == 0) ;

7004 i‡(
	`°rcmp
(
tokí
, "FORMAT=32-bô_æe_rgbe"Ë=0Ë
vÆid
 = 1;

7007 i‡(!
vÆid
) {

7008 
	`°bi__ªwöd
–
s
 );

7011 
tokí
 = 
	`°bi__hdr_gëtokí
(
s
,
buf„r
);

7012 i‡(
	`°∫cmp
(
tokí
, "-Y ", 3)) {

7013 
	`°bi__ªwöd
–
s
 );

7016 
tokí
 += 3;

7017 *
y
 = (Ë
	`°πﬁ
(
tokí
, &token, 10);

7018 *
tokí
 == ' ') ++token;

7019 i‡(
	`°∫cmp
(
tokí
, "+X ", 3)) {

7020 
	`°bi__ªwöd
–
s
 );

7023 
tokí
 += 3;

7024 *
x
 = (Ë
	`°πﬁ
(
tokí
, 
NULL
, 10);

7025 *
comp
 = 3;

7027 
	}
}

7030 #i‚de‡
STBI_NO_BMP


7031 
	$°bi__bmp_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

7033 *
p
;

7034 
°bi__bmp_d©a
 
öfo
;

7036 
öfo
.
Æl_a
 = 255;

7037 
p
 = 
	`°bi__bmp_∑r£_hódî
(
s
, &
öfo
);

7038 
	`°bi__ªwöd
–
s
 );

7039 i‡(
p
 =
NULL
)

7041 i‡(
x
Ë*x = 
s
->
img_x
;

7042 i‡(
y
Ë*y = 
s
->
img_y
;

7043 i‡(
comp
) {

7044 i‡(
öfo
.
bµ
 =24 && info.
ma
 == 0xff000000)

7045 *
comp
 = 3;

7047 *
comp
 = 
öfo
.
ma
 ? 4 : 3;

7050 
	}
}

7053 #i‚de‡
STBI_NO_PSD


7054 
	$°bi__psd_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

7056 
ch™√lCou¡
, 
dummy
, 
dïth
;

7057 i‡(!
x
Ëx = &
dummy
;

7058 i‡(!
y
Ëy = &
dummy
;

7059 i‡(!
comp
Ëcom∞&
dummy
;

7060 i‡(
	`°bi__gë32be
(
s
) != 0x38425053) {

7061 
	`°bi__ªwöd
–
s
 );

7064 i‡(
	`°bi__gë16be
(
s
) != 1) {

7065 
	`°bi__ªwöd
–
s
 );

7068 
	`°bi__skù
(
s
, 6);

7069 
ch™√lCou¡
 = 
	`°bi__gë16be
(
s
);

7070 i‡(
ch™√lCou¡
 < 0 || channelCount > 16) {

7071 
	`°bi__ªwöd
–
s
 );

7074 *
y
 = 
	`°bi__gë32be
(
s
);

7075 *
x
 = 
	`°bi__gë32be
(
s
);

7076 
dïth
 = 
	`°bi__gë16be
(
s
);

7077 i‡(
dïth
 != 8 && depth != 16) {

7078 
	`°bi__ªwöd
–
s
 );

7081 i‡(
	`°bi__gë16be
(
s
) != 3) {

7082 
	`°bi__ªwöd
–
s
 );

7085 *
comp
 = 4;

7087 
	}
}

7089 
	$°bi__psd_is16
(
°bi__c⁄ãxt
 *
s
)

7091 
ch™√lCou¡
, 
dïth
;

7092 i‡(
	`°bi__gë32be
(
s
) != 0x38425053) {

7093 
	`°bi__ªwöd
–
s
 );

7096 i‡(
	`°bi__gë16be
(
s
) != 1) {

7097 
	`°bi__ªwöd
–
s
 );

7100 
	`°bi__skù
(
s
, 6);

7101 
ch™√lCou¡
 = 
	`°bi__gë16be
(
s
);

7102 i‡(
ch™√lCou¡
 < 0 || channelCount > 16) {

7103 
	`°bi__ªwöd
–
s
 );

7106 (Ë
	`°bi__gë32be
(
s
);

7107 (Ë
	`°bi__gë32be
(
s
);

7108 
dïth
 = 
	`°bi__gë16be
(
s
);

7109 i‡(
dïth
 != 16) {

7110 
	`°bi__ªwöd
–
s
 );

7114 
	}
}

7117 #i‚de‡
STBI_NO_PIC


7118 
	$°bi__pic_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

7120 
a˘_comp
=0,
num_∑ckës
=0,
chaöed
,
dummy
;

7121 
°bi__pic_∑ckë
 
∑ckës
[10];

7123 i‡(!
x
Ëx = &
dummy
;

7124 i‡(!
y
Ëy = &
dummy
;

7125 i‡(!
comp
Ëcom∞&
dummy
;

7127 i‡(!
	`°bi__pic_is4
(
s
,"\x53\x80\xF6\x34")) {

7128 
	`°bi__ªwöd
(
s
);

7132 
	`°bi__skù
(
s
, 88);

7134 *
x
 = 
	`°bi__gë16be
(
s
);

7135 *
y
 = 
	`°bi__gë16be
(
s
);

7136 i‡(
	`°bi__©_eof
(
s
)) {

7137 
	`°bi__ªwöd
–
s
);

7140 i‡–(*
x
Ë!0 && (1 << 28Ë/ (*xË< (*
y
)) {

7141 
	`°bi__ªwöd
–
s
 );

7145 
	`°bi__skù
(
s
, 8);

7148 
°bi__pic_∑ckë
 *
∑ckë
;

7150 i‡(
num_∑ckës
==(
∑ckës
)/(packets[0]))

7153 
∑ckë
 = &
∑ckës
[
num_∑ckës
++];

7154 
chaöed
 = 
	`°bi__gë8
(
s
);

7155 
∑ckë
->
size
 = 
	`°bi__gë8
(
s
);

7156 
∑ckë
->
ty≥
 = 
	`°bi__gë8
(
s
);

7157 
∑ckë
->
ch™√l
 = 
	`°bi__gë8
(
s
);

7158 
a˘_comp
 |
∑ckë
->
ch™√l
;

7160 i‡(
	`°bi__©_eof
(
s
)) {

7161 
	`°bi__ªwöd
–
s
 );

7164 i‡(
∑ckë
->
size
 != 8) {

7165 
	`°bi__ªwöd
–
s
 );

7168 } 
chaöed
);

7170 *
comp
 = (
a˘_comp
 & 0x10 ? 4 : 3);

7173 
	}
}

7188 #i‚de‡
STBI_NO_PNM


7190 
	$°bi__≤m_ã°
(
°bi__c⁄ãxt
 *
s
)

7192 
p
, 
t
;

7193 
p
 = (Ë
	`°bi__gë8
(
s
);

7194 
t
 = (Ë
	`°bi__gë8
(
s
);

7195 i‡(
p
 !'P' || (
t
 != '5' &&Å != '6')) {

7196 
	`°bi__ªwöd
–
s
 );

7200 
	}
}

7202 *
	$°bi__≤m_lﬂd
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
, 
ªq_comp
, 
°bi__ªsu…_öfo
 *
ri
)

7204 
°bi_uc
 *
out
;

7205 
	`STBI_NOTUSED
(
ri
);

7207 i‡(!
	`°bi__≤m_öfo
(
s
, (*)&s->
img_x
, (*)&s->
img_y
, (*)&s->
img_n
))

7210 *
x
 = 
s
->
img_x
;

7211 *
y
 = 
s
->
img_y
;

7212 i‡(
comp
Ë*com∞
s
->
img_n
;

7214 i‡(!
	`°bi__mad3sizes_vÆid
(
s
->
img_n
, s->
img_x
, s->
img_y
, 0))

7215  
	`°bi__îΩuc
("tooÜarge", "PNMÅooÜarge");

7217 
out
 = (
°bi_uc
 *Ë
	`°bi__mÆloc_mad3
(
s
->
img_n
, s->
img_x
, s->
img_y
, 0);

7218 i‡(!
out
Ë 
	`°bi__îΩuc
("outofmem", "Out of memory");

7219 
	`°bi__gën
(
s
, 
out
, s->
img_n
 * s->
img_x
 * s->
img_y
);

7221 i‡(
ªq_comp
 &&Ñeq_com∞!
s
->
img_n
) {

7222 
out
 = 
	`°bi__c⁄vît_f‹m©
(out, 
s
->
img_n
, 
ªq_comp
, s->
img_x
, s->
img_y
);

7223 i‡(
out
 =
NULL
)  out;

7225  
out
;

7226 
	}
}

7228 
	$°bi__≤m_is•a˚
(
c
)

7230  
c
 == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';

7231 
	}
}

7233 
	$°bi__≤m_skù_whôe•a˚
(
°bi__c⁄ãxt
 *
s
, *
c
)

7236 !
	`°bi__©_eof
(
s
Ë&& 
	`°bi__≤m_is•a˚
(*
c
))

7237 *
c
 = (Ë
	`°bi__gë8
(
s
);

7239 i‡(
	`°bi__©_eof
(
s
Ë|| *
c
 != '#')

7242 !
	`°bi__©_eof
(
s
Ë&& *
c
 != '\n' && *c != '\r' )

7243 *
c
 = (Ë
	`°bi__gë8
(
s
);

7245 
	}
}

7247 
	$°bi__≤m_isdigô
(
c
)

7249  
c
 >= '0' && c <= '9';

7250 
	}
}

7252 
	$°bi__≤m_gëöãgî
(
°bi__c⁄ãxt
 *
s
, *
c
)

7254 
vÆue
 = 0;

7256 !
	`°bi__©_eof
(
s
Ë&& 
	`°bi__≤m_isdigô
(*
c
)) {

7257 
vÆue
 = vÆue*10 + (*
c
 - '0');

7258 *
c
 = (Ë
	`°bi__gë8
(
s
);

7261  
vÆue
;

7262 
	}
}

7264 
	$°bi__≤m_öfo
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

7266 
maxv
, 
dummy
;

7267 
c
, 
p
, 
t
;

7269 i‡(!
x
Ëx = &
dummy
;

7270 i‡(!
y
Ëy = &
dummy
;

7271 i‡(!
comp
Ëcom∞&
dummy
;

7273 
	`°bi__ªwöd
(
s
);

7276 
p
 = (Ë
	`°bi__gë8
(
s
);

7277 
t
 = (Ë
	`°bi__gë8
(
s
);

7278 i‡(
p
 !'P' || (
t
 != '5' &&Å != '6')) {

7279 
	`°bi__ªwöd
(
s
);

7283 *
comp
 = (
t
 == '6') ? 3 : 1;

7285 
c
 = (Ë
	`°bi__gë8
(
s
);

7286 
	`°bi__≤m_skù_whôe•a˚
(
s
, &
c
);

7288 *
x
 = 
	`°bi__≤m_gëöãgî
(
s
, &
c
);

7289 
	`°bi__≤m_skù_whôe•a˚
(
s
, &
c
);

7291 *
y
 = 
	`°bi__≤m_gëöãgî
(
s
, &
c
);

7292 
	`°bi__≤m_skù_whôe•a˚
(
s
, &
c
);

7294 
maxv
 = 
	`°bi__≤m_gëöãgî
(
s
, &
c
);

7296 i‡(
maxv
 > 255)

7297  
	`°bi__îr
("maxi value > 255", "PPM imageÇot 8-bit");

7300 
	}
}

7303 
	$°bi__öfo_maö
(
°bi__c⁄ãxt
 *
s
, *
x
, *
y
, *
comp
)

7305 #i‚de‡
STBI_NO_JPEG


7306 i‡(
	`°bi__j≥g_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7309 #i‚de‡
STBI_NO_PNG


7310 i‡(
	`°bi__≤g_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7313 #i‚de‡
STBI_NO_GIF


7314 i‡(
	`°bi__gif_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7317 #i‚de‡
STBI_NO_BMP


7318 i‡(
	`°bi__bmp_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7321 #i‚de‡
STBI_NO_PSD


7322 i‡(
	`°bi__psd_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7325 #i‚de‡
STBI_NO_PIC


7326 i‡(
	`°bi__pic_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7329 #i‚de‡
STBI_NO_PNM


7330 i‡(
	`°bi__≤m_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7333 #i‚de‡
STBI_NO_HDR


7334 i‡(
	`°bi__hdr_öfo
(
s
, 
x
, 
y
, 
comp
))  1;

7338 #i‚de‡
STBI_NO_TGA


7339 i‡(
	`°bi__tga_öfo
(
s
, 
x
, 
y
, 
comp
))

7342  
	`°bi__îr
("unknown imageÅype", "ImageÇot ofány knownÅype, or corrupt");

7343 
	}
}

7345 
	$°bi__is_16_maö
(
°bi__c⁄ãxt
 *
s
)

7347 #i‚de‡
STBI_NO_PNG


7348 i‡(
	`°bi__≤g_is16
(
s
))  1;

7351 #i‚de‡
STBI_NO_PSD


7352 i‡(
	`°bi__psd_is16
(
s
))  1;

7356 
	}
}

7358 #i‚de‡
STBI_NO_STDIO


7359 
STBIDEF
 
	$°bi_öfo
(c⁄° *
fûíame
, *
x
, *
y
, *
comp
)

7361 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

7362 
ªsu…
;

7363 i‡(!
f
Ë 
	`°bi__îr
("can't fopen", "UnableÅo open file");

7364 
ªsu…
 = 
	`°bi_öfo_‰om_fûe
(
f
, 
x
, 
y
, 
comp
);

7365 
	`f˛o£
(
f
);

7366  
ªsu…
;

7367 
	}
}

7369 
STBIDEF
 
	$°bi_öfo_‰om_fûe
(
FILE
 *
f
, *
x
, *
y
, *
comp
)

7371 
r
;

7372 
°bi__c⁄ãxt
 
s
;

7373 
pos
 = 
	`·ñl
(
f
);

7374 
	`°bi__°¨t_fûe
(&
s
, 
f
);

7375 
r
 = 
	`°bi__öfo_maö
(&
s
,
x
,
y
,
comp
);

7376 
	`f£ek
(
f
,
pos
,
SEEK_SET
);

7377  
r
;

7378 
	}
}

7380 
STBIDEF
 
	$°bi_is_16_bô
(c⁄° *
fûíame
)

7382 
FILE
 *
f
 = 
	`°bi__f›í
(
fûíame
, "rb");

7383 
ªsu…
;

7384 i‡(!
f
Ë 
	`°bi__îr
("can't fopen", "UnableÅo open file");

7385 
ªsu…
 = 
	`°bi_is_16_bô_‰om_fûe
(
f
);

7386 
	`f˛o£
(
f
);

7387  
ªsu…
;

7388 
	}
}

7390 
STBIDEF
 
	$°bi_is_16_bô_‰om_fûe
(
FILE
 *
f
)

7392 
r
;

7393 
°bi__c⁄ãxt
 
s
;

7394 
pos
 = 
	`·ñl
(
f
);

7395 
	`°bi__°¨t_fûe
(&
s
, 
f
);

7396 
r
 = 
	`°bi__is_16_maö
(&
s
);

7397 
	`f£ek
(
f
,
pos
,
SEEK_SET
);

7398  
r
;

7399 
	}
}

7402 
STBIDEF
 
	$°bi_öfo_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
, *
x
, *
y
, *
comp
)

7404 
°bi__c⁄ãxt
 
s
;

7405 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

7406  
	`°bi__öfo_maö
(&
s
,
x
,
y
,
comp
);

7407 
	}
}

7409 
STBIDEF
 
	$°bi_öfo_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
c
, *
u£r
, *
x
, *
y
, *
comp
)

7411 
°bi__c⁄ãxt
 
s
;

7412 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
c
, 
u£r
);

7413  
	`°bi__öfo_maö
(&
s
,
x
,
y
,
comp
);

7414 
	}
}

7416 
STBIDEF
 
	$°bi_is_16_bô_‰om_mem‹y
(
°bi_uc
 c⁄° *
buf„r
, 
Àn
)

7418 
°bi__c⁄ãxt
 
s
;

7419 
	`°bi__°¨t_mem
(&
s
,
buf„r
,
Àn
);

7420  
	`°bi__is_16_maö
(&
s
);

7421 
	}
}

7423 
STBIDEF
 
	$°bi_is_16_bô_‰om_ˇŒbacks
(
°bi_io_ˇŒbacks
 c⁄° *
c
, *
u£r
)

7425 
°bi__c⁄ãxt
 
s
;

7426 
	`°bi__°¨t_ˇŒbacks
(&
s
, (
°bi_io_ˇŒbacks
 *Ë
c
, 
u£r
);

7427  
	`°bi__is_16_maö
(&
s
);

7428 
	}
}

	@textureAssets.cpp

1 
	~"Mem‹y.h
"

2 
	~"ãxtuªAs£ts.h
"

4 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$FLOOR_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

5 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 11);

6 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.063477,0.063477);

7 
ªsu…
[1] = 
glm
::
	`vec4
(0.065430,0.000977,0.127930,0.063477);

8 
ªsu…
[2] = 
glm
::
	`vec4
(0.129883,0.000977,0.192383,0.063477);

9 
ªsu…
[3] = 
glm
::
	`vec4
(0.194336,0.000977,0.256836,0.063477);

10 
ªsu…
[4] = 
glm
::
	`vec4
(0.258789,0.000977,0.321289,0.063477);

11 
ªsu…
[5] = 
glm
::
	`vec4
(0.323242,0.000977,0.385742,0.063477);

12 
ªsu…
[6] = 
glm
::
	`vec4
(0.387695,0.000977,0.450195,0.063477);

13 
ªsu…
[7] = 
glm
::
	`vec4
(0.452148,0.000977,0.514648,0.063477);

14 
ªsu…
[8] = 
glm
::
	`vec4
(0.516602,0.000977,0.579102,0.063477);

15 
ªsu…
[9] = 
glm
::
	`vec4
(0.581055,0.000977,0.643555,0.063477);

16 
ªsu…
[10] = 
glm
::
	`vec4
(0.645508,0.000977,0.708008,0.063477);Ñesult;

17 
	}
}

19 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$PIECE_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

20 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 14);

21 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.063477,0.063477);

22 
ªsu…
[1] = 
glm
::
	`vec4
(0.065430,0.000977,0.127930,0.063477);

23 
ªsu…
[2] = 
glm
::
	`vec4
(0.129883,0.000977,0.192383,0.063477);

24 
ªsu…
[3] = 
glm
::
	`vec4
(0.194336,0.000977,0.256836,0.063477);

25 
ªsu…
[4] = 
glm
::
	`vec4
(0.258789,0.000977,0.321289,0.063477);

26 
ªsu…
[5] = 
glm
::
	`vec4
(0.323242,0.000977,0.385742,0.063477);

27 
ªsu…
[6] = 
glm
::
	`vec4
(0.387695,0.000977,0.450195,0.063477);

28 
ªsu…
[7] = 
glm
::
	`vec4
(0.452148,0.000977,0.514648,0.063477);

29 
ªsu…
[8] = 
glm
::
	`vec4
(0.516602,0.000977,0.579102,0.063477);

30 
ªsu…
[9] = 
glm
::
	`vec4
(0.581055,0.000977,0.643555,0.063477);

31 
ªsu…
[10] = 
glm
::
	`vec4
(0.645508,0.000977,0.708008,0.063477);

32 
ªsu…
[11] = 
glm
::
	`vec4
(0.709961,0.000977,0.772461,0.063477);

33 
ªsu…
[12] = 
glm
::
	`vec4
(0.774414,0.000977,0.836914,0.063477);

34 
ªsu…
[13] = 
glm
::
	`vec4
(0.838867,0.000977,0.901367,0.063477);Ñesult;

35 
	}
}

37 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$SYMBOLS_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

38 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 5);

39 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.063477,0.063477);

40 
ªsu…
[1] = 
glm
::
	`vec4
(0.065430,0.000977,0.127930,0.063477);

41 
ªsu…
[2] = 
glm
::
	`vec4
(0.129883,0.000977,0.192383,0.063477);

42 
ªsu…
[3] = 
glm
::
	`vec4
(0.194336,0.000977,0.256836,0.063477);

43 
ªsu…
[4] = 
glm
::
	`vec4
(0.258789,0.000977,0.321289,0.063477);Ñesult;

44 
	}
}

46 
	gglm
::
vec4
* 
ãxtuªAs£ts
::
	$UI_posôi⁄s
(
Mem‹y
* 
mem‹y
) {

47 
glm
::
vec4
* 
ªsu…
 = (glm::vec4*Ë
	`mem‹y_Æloc
(
mem‹y
,(glm::vec4) * 7);

48 
ªsu…
[0] = 
glm
::
	`vec4
(0.000977,0.000977,0.032227,0.063477);

49 
ªsu…
[1] = 
glm
::
	`vec4
(0.034180,0.000977,0.065430,0.063477);

50 
ªsu…
[2] = 
glm
::
	`vec4
(0.067383,0.000977,0.098633,0.063477);

51 
ªsu…
[3] = 
glm
::
	`vec4
(0.100586,0.000977,0.163086,0.063477);

52 
ªsu…
[4] = 
glm
::
	`vec4
(0.165039,0.000977,0.227539,0.063477);

53 
ªsu…
[5] = 
glm
::
	`vec4
(0.229492,0.000977,0.291992,0.063477);

54 
ªsu…
[6] = 
glm
::
	`vec4
(0.293945,0.000977,0.356445,0.063477);Ñesult;

55 
	}
}

	@textureAssets.h

1 #¥agm®
⁄˚


2 
	~"M©h.h
"

3 
«me•a˚
 
	gãxtuªAs£ts
 {

4 
	eFLOOR


6 
	gFlo‹
,

7 
	gGrûlCŸ
,

8 
	gGrûlHŸ
,

9 
	gOuéöe
,

10 
	gSèú
,

11 
	gSèúˇ£
,

12 
	gSèπ
,

13 
	gT¨gë
,

14 
	gTick
,

15 
	gZBœck
,

16 
	gZBZ


19 
	gglm
::
vec4
* 
FLOOR_posôi⁄s
(
Mem‹y
* 
mem‹y
);

20 
	ePIECE


22 
	gCøã
,

23 
	gCrumbÀ
,

24 
	gCur£dCøã
,

25 
	gCur£dPœyî
,

26 
	gCur£dPuŒCøã
,

27 
	gEm±y
,

28 
	gPœyî
,

29 
	gPuŒCøã
,

30 
	gSt›D
,

31 
	gSt›L
,

32 
	gSt›R
,

33 
	gSt›U
,

34 
	gWÆl
,

35 
	gWÆlA…


38 
	gglm
::
vec4
* 
PIECE_posôi⁄s
(
Mem‹y
* 
mem‹y
);

39 
	eSYMBOLS


41 
	gCú˛e
,

42 
	gHÆfCú˛e
,

43 
	gPlus
,

44 
	gSqu¨e
,

45 
	gTrüngÀ


48 
	gglm
::
vec4
* 
SYMBOLS_posôi⁄s
(
Mem‹y
* 
mem‹y
);

49 
	eUI


51 
	gBuâ⁄Cíãr
,

52 
	gBuâ⁄Le·HÆf
,

53 
	gBuâ⁄RightHÆf
,

54 
	gDownAºow
,

55 
	gLe·Aºow
,

56 
	gRightAºow
,

57 
	gUpAºow


60 
	gglm
::
vec4
* 
UI_posôi⁄s
(
Mem‹y
* 
mem‹y
);

	@tinyfiledialogs.c

98 #i‚de‡
__sun


99 
	#_POSIX_C_SOURCE
 2

	)

102 
	~<°dio.h
>

103 
	~<°dlib.h
>

104 
	~<°rög.h
>

105 
	~<˘y≥.h
>

106 
	~<sys/°©.h
>

108 #ifde‡
_WIN32


109 #ifde‡
__BORLANDC__


110 
	#_gëch
 
gëch


	)

112 #i‚de‡
_WIN32_WINNT


113 
	#_WIN32_WINNT
 0x0500

	)

115 #i‚de‡
TINYFD_NOLIB


116 
	~<wödows.h
>

117 
	~<commdlg.h
>

118 
	~<shlobj.h
>

120 
	~<c⁄io.h
>

121 
	~<dúe˘.h
>

122 
	#TINYFD_NOCCSUNICODE


	)

123 
	#SLASH
 "\\"

	)

125 
	~<limôs.h
>

126 
	~<uni°d.h
>

127 
	~<dúít.h
>

128 
	~<ãrmios.h
>

129 
	~<sys/ut¢ame.h
>

130 
	~<sig«l.h
>

131 
	#SLASH
 "/"

	)

134 
	~"töyfûedülogs.h
"

136 
	#MAX_PATH_OR_CMD
 1024

	)

138 #i‚de‡
MAX_MULTIPLE_FILES


139 
	#MAX_MULTIPLE_FILES
 1024

	)

141 
	#LOW_MULTIPLE_FILES
 32

	)

143 c⁄° 
	gtöyfd_vîsi⁄
[8] = "3.6.3";

148 #ifde‡
_WIN32


151 
	gtöyfd_wöUtf8
 = 1;

158 
	gtöyfd_vîbo£
 = 0 ;

159 
	gtöyfd_sûít
 = 1 ;

160 c⁄° 
	gtöyfd_ÆlowCur£sDülogs
 = 0 ;

162 #i‡
deföed
(
TINYFD_NOLIB
Ë&& deföed(
_WIN32
)

163 
	gtöyfd_f‹˚C⁄sﬁe
 = 1 ;

165 
	gtöyfd_f‹˚C⁄sﬁe
 = 0 ;

173 
	gtöyfd_ª•⁄£
[1024];

187 #i‡
deföed
(
TINYFD_NOLIB
Ë&& deföed(
_WIN32
)

188 
	ggW¨nögDi•œyed
 = 1 ;

190 
	ggW¨nögDi•œyed
 = 0 ;

193 c⁄° 
	ggTôÀ
[]="missing software! (we willÅry basic console input)";

195 #ifde‡
_WIN32


196 c⁄° 
	gtöyfd_√eds
[] = "\
___________\n\
/ \\ \n\
|Åiny file |\n\
| dialogs |\n\
\\_____ ____/\n\
\\|\
\ntiny file dialogs on WindowsÇeeds:\
\ná graphic display\
\nor dialog.exe (enhanced console mode)\
\norá console for basic input";

208 c⁄° 
	gtöyfd_√eds
[] = "\
___________\n\
/ \\ \n\
|Åiny file |\n\
| dialogs |\n\
\\_____ ____/\n\
\\|\
\ntiny file dialogs on UNIXÇeeds:\
\nápplescript\
\nor kdialog\
\nor zenity (or matedialog or qarma)\
\norÖython (2 or 3)\
\n +Åkinter +Öython-dbus (optional)\
\nor dialog (opens console ifÇeeded)\
\nor xterm + bash\
\n (opens console for basic input)\
\norÉxisting console for basic input";

227 #ifde‡
_MSC_VER


228 #¥agm®
w¨nög
(
dißbÀ
:4996)

229 #¥agm®
w¨nög
(
dißbÀ
:4100)

230 #¥agm®
w¨nög
(
dißbÀ
:4706)

233 * 
	$gëCurDú
()

235 
lCurDú
 [
MAX_PATH_OR_CMD
];

236  
	`gëcwd
(
lCurDú
, (lCurDir));

237 
	}
}

239 * 
	$gëP©hWôhoutFöÆSœsh
(

240 * 
aoDe°ö©i⁄
,

241 c⁄° * 
aSour˚
)

243 c⁄° * 
lTmp
 ;

244 i‡–
aSour˚
 )

246 
lTmp
 = 
	`°ºchr
(
aSour˚
, '/');

247 i‡(!
lTmp
)

249 
lTmp
 = 
	`°ºchr
(
aSour˚
, '\\');

251 i‡(
lTmp
)

253 
	`°∫˝y
(
aoDe°ö©i⁄
, 
aSour˚
, 
lTmp
 -áSource );

254 
aoDe°ö©i⁄
[
lTmp
 - 
aSour˚
] = '\0';

258 * 
aoDe°ö©i⁄
 = '\0';

263 * 
aoDe°ö©i⁄
 = '\0';

265  
aoDe°ö©i⁄
;

266 
	}
}

269 * 
	$gëLa°Name
(

270 * 
aoDe°ö©i⁄
,

271 c⁄° * 
aSour˚
)

274 c⁄° * 
lTmp
 ;

275 i‡–
aSour˚
 )

277 
lTmp
 = 
	`°ºchr
(
aSour˚
, '/');

278 i‡(!
lTmp
)

280 
lTmp
 = 
	`°ºchr
(
aSour˚
, '\\');

282 i‡(
lTmp
)

284 
	`°r˝y
(
aoDe°ö©i⁄
, 
lTmp
 + 1);

288 
	`°r˝y
(
aoDe°ö©i⁄
, 
aSour˚
);

293 * 
aoDe°ö©i⁄
 = '\0';

295  
aoDe°ö©i⁄
;

296 
	}
}

299 
	$ísuªFöÆSœsh
–* 
aioSåög
 )

301 i‡–
aioSåög
 && 
	`°æí
(áioString ) )

303 * 
œ°ˇr
 = 
aioSåög
 + 
	`°æí
(áioString ) - 1 ;

304 i‡–
	`°∫cmp
–
œ°ˇr
 , 
SLASH
 , 1 ) )

306 
	`°rˇt
–
œ°ˇr
 , 
SLASH
 ) ;

309 
	}
}

312 
	$Hex2RGB
–c⁄° 
aHexRGB
 [8] ,

313 
aoResu…RGB
 [3] )

315 
lCﬁ‹Ch™√l
 [8] ;

316 i‡–
aoResu…RGB
 )

318 i‡–
aHexRGB
 )

320 
	`°r˝y
(
lCﬁ‹Ch™√l
, 
aHexRGB
 ) ;

321 
aoResu…RGB
[2] = ()
	`°πoul
(
lCﬁ‹Ch™√l
+5,
NULL
,16);

322 
lCﬁ‹Ch™√l
[5] = '\0';

323 
aoResu…RGB
[1] = ()
	`°πoul
(
lCﬁ‹Ch™√l
+3,
NULL
,16);

324 
lCﬁ‹Ch™√l
[3] = '\0';

325 
aoResu…RGB
[0] = ()
	`°πoul
(
lCﬁ‹Ch™√l
+1,
NULL
,16);

330 
aoResu…RGB
[0]=0;

331 
aoResu…RGB
[1]=0;

332 
aoResu…RGB
[2]=0;

335 
	}
}

337 
	$RGB2Hex
–c⁄° 
aRGB
 [3] ,

338 
aoResu…HexRGB
 [8] )

340 i‡–
aoResu…HexRGB
 )

342 i‡–
aRGB
 )

344 #i‡(
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
)

345 
	`•rötf
(
aoResu…HexRGB
, "#%02hhx%02hhx%02hhx", 
aRGB
[0],áRGB[1],áRGB[2]);

347 
	`•rötf
(
aoResu…HexRGB
, "#%02hx%02hx%02hx", 
aRGB
[0],áRGB[1],áRGB[2]);

353 
aoResu…HexRGB
[0]=0;

354 
aoResu…HexRGB
[1]=0;

355 
aoResu…HexRGB
[2]=0;

358 
	}
}

361 
	$ª∂a˚SubSå
–c⁄° * 
aSour˚
 ,

362 c⁄° * 
aOldSubSå
 ,

363 c⁄° * 
aNewSubSå
 ,

364 * 
aoDe°ö©i⁄
 )

366 c⁄° * 
pOccuªn˚
 ;

367 c⁄° * 
p
 ;

368 c⁄° * 
lNewSubSå
 = "" ;

369 
size_t
 
lOldSubLí
 = 
	`°æí
–
aOldSubSå
 ) ;

371 i‡–! 
aSour˚
 )

373 * 
aoDe°ö©i⁄
 = '\0' ;

376 i‡–! 
aOldSubSå
 )

378 
	`°r˝y
–
aoDe°ö©i⁄
 , 
aSour˚
 ) ;

381 i‡–
aNewSubSå
 )

383 
lNewSubSå
 = 
aNewSubSå
 ;

385 
p
 = 
aSour˚
 ;

386 * 
aoDe°ö©i⁄
 = '\0' ;

387  ( 
pOccuªn˚
 = 
	`°r°r
–
p
 , 
aOldSubSå
 ) ) !
NULL
 )

389 
	`°∫ˇt
–
aoDe°ö©i⁄
 , 
p
 , 
pOccuªn˚
 -Ö ) ;

390 
	`°rˇt
–
aoDe°ö©i⁄
 , 
lNewSubSå
 ) ;

391 
p
 = 
pOccuªn˚
 + 
lOldSubLí
 ;

393 
	`°rˇt
–
aoDe°ö©i⁄
 , 
p
 ) ;

394 
	}
}

397 
	$fûíameVÆid
–c⁄° * 
aFûeNameWôhoutP©h
 )

399 i‡–! 
aFûeNameWôhoutP©h


400 || ! 
	`°æí
(
aFûeNameWôhoutP©h
)

401 || 
	`°Ωbrk
(
aFûeNameWôhoutP©h
 , "\\/:*?\"<>|") )

406 
	}
}

408 #i‚de‡
_WIN32


410 
	$fûeExi°s
–c⁄° * 
aFûeP©hAndName
 )

412 
FILE
 * 
lIn
 ;

413 i‡–! 
aFûeP©hAndName
 || ! 
	`°æí
(aFilePathAndName) )

417 
lIn
 = 
	`f›í
–
aFûeP©hAndName
 , "r" ) ;

418 i‡–! 
lIn
 )

422 
	`f˛o£
–
lIn
 ) ;

424 
	}
}

426 #ñi‡
deföed
(
TINYFD_NOLIB
)

428 
	$fûeExi°s
–c⁄° * 
aFûeP©hAndName
 )

430 
FILE
 * 
lIn
 ;

431 i‡–! 
aFûeP©hAndName
 || ! 
	`°æí
(aFilePathAndName) )

436 i‡–
töyfd_wöUtf8
 )

439 
lIn
 = 
	`f›í
–
aFûeP©hAndName
 , "r" ) ;

440 i‡–! 
lIn
 )

444 
	`f˛o£
–
lIn
 ) ;

446 
	}
}

451 
	$wùefûe
(c⁄° * 
aFûíame
)

453 
i
;

454 
°©
 
°
;

455 
FILE
 * 
lIn
;

457 i‡(
	`°©
(
aFûíame
, &
°
) == 0)

459 i‡((
lIn
 = 
	`f›í
(
aFûíame
, "w")))

461 
i
 = 0; i < 
°
.
°_size
; i++)

463 
	`Âutc
('A', 
lIn
);

466 
	`f˛o£
(
lIn
);

468 
	}
}

471 #ifde‡
_WIN32


474 
	$töyfd_£tWöUtf8
(
aIsUtf8
)

476 
töyfd_wöUtf8
 = 
aIsUtf8
;

477 
	}
}

480 
	$ª∂a˚Chr
–* 
aSåög
 ,

481 
aOldChr
 ,

482 
aNewChr
 )

484 * 
p
 ;

485 
lRes
 = 0 ;

487 i‡–! 
aSåög
 )

492 i‡–
aOldChr
 =
aNewChr
 )

497 
p
 = 
aSåög
 ;

498  (
p
 = 
	`°rchr
–∞, 
aOldChr
 )) )

500 * 
p
 = 
aNewChr
 ;

501 
p
 ++ ;

502 
lRes
 = 1 ;

504  
lRes
 ;

505 
	}
}

508 #i‡!
deföed
(
WC_ERR_INVALID_CHARS
)

510 
	#WC_ERR_INVALID_CHARS
 0x00000080

	)

513 
	$sizeUtf16From8
(c⁄° * 
aUtf8°rög
)

515  
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 
MB_ERR_INVALID_CHARS
,

516 
aUtf8°rög
, -1, 
NULL
, 0);

517 
	}
}

520 
	$sizeUtf16FromMbcs
(c⁄° * 
aMbcsSåög
)

522  
	`Mu…iByãToWideCh¨
(
CP_ACP
, 
MB_ERR_INVALID_CHARS
,

523 
aMbcsSåög
, -1, 
NULL
, 0);

524 
	}
}

527 
	$sizeUtf8
(
wch¨_t
 c⁄° * 
aUtf16°rög
)

529  
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 
WC_ERR_INVALID_CHARS
,

530 
aUtf16°rög
, -1, 
NULL
, 0, NULL, NULL);

531 
	}
}

534 
	$sizeMbcs
(
wch¨_t
 c⁄° * 
aMbcsSåög
)

536 
lRes
 = 
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0,

537 
aMbcsSåög
, -1, 
NULL
, 0, NULL, NULL);

539  
lRes
;

540 
	}
}

543 
wch¨_t
 * 
	$töyfd_utf8to16
(c⁄° * 
aUtf8°rög
)

545 
wch¨_t
 * 
lUtf16°rög
 = 
NULL
;

546 
lSize
;

548 
	`‰ì
(
lUtf16°rög
);

549 i‡(!
aUtf8°rög
Ë{
lUtf16°rög
 = 
NULL
;  NULL;}

550 
lSize
 = 
	`sizeUtf16From8
(
aUtf8°rög
);

551 
lUtf16°rög
 = (
wch¨_t
 *)
	`mÆloc
(
lSize
 * (wchar_t));

552 
lSize
 = 
	`Mu…iByãToWideCh¨
(
CP_UTF8
, 
MB_ERR_INVALID_CHARS
,

553 
aUtf8°rög
, -1, 
lUtf16°rög
, 
lSize
);

554 i‡(
lSize
 == 0)

556 
	`‰ì
(
lUtf16°rög
);

557 
lUtf16°rög
 = 
NULL
;

559  
lUtf16°rög
;

560 
	}
}

563 * 
	$utf16toMbcs
(
wch¨_t
 c⁄° * 
aUtf16°rög
)

565 * 
lMbcsSåög
 = 
NULL
;

566 
lSize
;

568 
	`‰ì
(
lMbcsSåög
);

569 i‡(!
aUtf16°rög
Ë{ 
lMbcsSåög
 = 
NULL
;  NULL; }

570 
lSize
 = 
	`sizeMbcs
(
aUtf16°rög
);

571 
lMbcsSåög
 = (*)
	`mÆloc
(
lSize
);

572 
lSize
 = 
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0,

573 
aUtf16°rög
, -1, 
lMbcsSåög
, 
lSize
, 
NULL
, NULL);

574 i‡(
lSize
 == 0)

576 
	`‰ì
(
lMbcsSåög
);

577 
lMbcsSåög
 = 
NULL
;

579  
lMbcsSåög
;

580 
	}
}

583 * 
	$töyfd_utf8toMbcs
(c⁄° * 
aUtf8°rög
)

585 
wch¨_t
 c⁄° * 
lUtf16°rög
;

586 
lUtf16°rög
 = 
	`töyfd_utf8to16
(
aUtf8°rög
);

587  
	`utf16toMbcs
(
lUtf16°rög
);

588 
	}
}

590 
wch¨_t
 * 
	$mbcsTo16
(c⁄° * 
aMbcsSåög
)

592 
wch¨_t
 * 
lMbcsSåög
 = 
NULL
;

593 
lSize
;

595 
	`‰ì
(
lMbcsSåög
);

596 i‡(!
aMbcsSåög
Ë{ 
lMbcsSåög
 = 
NULL
;  NULL; }

597 
lSize
 = 
	`sizeUtf16FromMbcs
(
aMbcsSåög
);

598 
lMbcsSåög
 = (
wch¨_t
 *)
	`mÆloc
(
lSize
 * (wchar_t));

599 
lSize
 = 
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0,

600 
aMbcsSåög
, -1, 
lMbcsSåög
, 
lSize
);

601 i‡(
lSize
 == 0)

603 
	`‰ì
(
lMbcsSåög
);

604 
lMbcsSåög
 = 
NULL
;

606  
lMbcsSåög
;

607 
	}
}

610 * 
	$töyfd_utf16to8
(
wch¨_t
 c⁄° * 
aUtf16°rög
)

612 * 
lUtf8°rög
 = 
NULL
;

613 
lSize
;

615 
	`‰ì
(
lUtf8°rög
);

616 i‡(!
aUtf16°rög
Ë{ 
lUtf8°rög
 = 
NULL
;  NULL; }

617 
lSize
 = 
	`sizeUtf8
(
aUtf16°rög
);

618 
lUtf8°rög
 = (*)
	`mÆloc
(
lSize
);

619 
lSize
 = 
	`WideCh¨ToMu…iByã
(
CP_UTF8
, 
WC_ERR_INVALID_CHARS
,

620 
aUtf16°rög
, -1, 
lUtf8°rög
, 
lSize
, 
NULL
, NULL);

621 i‡(
lSize
 == 0)

623 
	`‰ì
(
lUtf8°rög
);

624 
lUtf8°rög
 = 
NULL
;

626  
lUtf8°rög
;

627 
	}
}

630 * 
	$mbcsTo8
(c⁄° * 
aMbcsSåög
)

632 
wch¨_t
 c⁄° * 
lUtf16°rög
;

633 
lUtf16°rög
 = 
	`mbcsTo16
(
aMbcsSåög
);

634  
	`töyfd_utf16to8
(
lUtf16°rög
);

635 
	}
}

638 #ifde‡
TINYFD_NOLIB


640 
	$dúExi°s
(c⁄° * 
aDúP©h
)

642 
°©
 
lInfo
;

644 i‡(!
aDúP©h
 || !
	`°æí
(aDirPath))

646 i‡(
	`°©
(
aDúP©h
, &
lInfo
) != 0)

648 i‡–
töyfd_wöUtf8
 )

650 i‡(
lInfo
.
°_mode
 & 
S_IFDIR
)

654 
	}
}

657 
	$töyfd_bìp
()

659 
	`¥ötf
("\a");

660 
	}
}

664 
	$töyfd_bìp
()

666 
	`Bìp
(440,300);

667 
	}
}

670 
	$wùefûeW
(
wch¨_t
 c⁄° * 
aFûíame
)

672 
i
;

673 
_°©
 
°
;

674 
FILE
 * 
lIn
;

676 i‡(
	`_w°©
(
aFûíame
, &
°
) == 0)

678 i‡((
lIn
 = 
	`_wf›í
(
aFûíame
, 
L
"w")))

680 
i
 = 0; i < 
°
.
°_size
; i++)

682 
	`Âutc
('A', 
lIn
);

685 
	`f˛o£
(
lIn
);

687 
	}
}

690 
wch¨_t
 * 
	$gëP©hWôhoutFöÆSœshW
(

691 
wch¨_t
 * 
aoDe°ö©i⁄
,

692 
wch¨_t
 c⁄° * 
aSour˚
)

694 
wch¨_t
 c⁄° * 
lTmp
;

695 i‡(
aSour˚
)

697 
lTmp
 = 
	`wc§chr
(
aSour˚
, 
L
'/');

698 i‡(!
lTmp
)

700 
lTmp
 = 
	`wc§chr
(
aSour˚
, 
L
'\\');

702 i‡(
lTmp
)

704 
	`wc¢˝y
(
aoDe°ö©i⁄
, 
aSour˚
, 
lTmp
 -áSource);

705 
aoDe°ö©i⁄
[
lTmp
 - 
aSour˚
] = 
L
'\0';

709 *
aoDe°ö©i⁄
 = 
L
'\0';

714 *
aoDe°ö©i⁄
 = 
L
'\0';

716  
aoDe°ö©i⁄
;

717 
	}
}

720 
wch¨_t
 * 
	$gëLa°NameW
(

721 
wch¨_t
 * 
aoDe°ö©i⁄
,

722 
wch¨_t
 c⁄° * 
aSour˚
)

725 
wch¨_t
 c⁄° * 
lTmp
;

726 i‡(
aSour˚
)

728 
lTmp
 = 
	`wc§chr
(
aSour˚
, 
L
'/');

729 i‡(!
lTmp
)

731 
lTmp
 = 
	`wc§chr
(
aSour˚
, 
L
'\\');

733 i‡(
lTmp
)

735 
	`wcs˝y
(
aoDe°ö©i⁄
, 
lTmp
 + 1);

739 
	`wcs˝y
(
aoDe°ö©i⁄
, 
aSour˚
);

744 *
aoDe°ö©i⁄
 = 
L
'\0';

746  
aoDe°ö©i⁄
;

747 
	}
}

750 
	$Hex2RGBW
(
wch¨_t
 c⁄° 
aHexRGB
[8],

751 
aoResu…RGB
[3])

753 
wch¨_t
 
lCﬁ‹Ch™√l
[8];

754 i‡(
aoResu…RGB
)

756 i‡(
aHexRGB
)

758 
	`wcs˝y
(
lCﬁ‹Ch™√l
, 
aHexRGB
);

759 
aoResu…RGB
[2] = ()
	`wc°oul
(
lCﬁ‹Ch™√l
 + 5, 
NULL
, 16);

760 
lCﬁ‹Ch™√l
[5] = '\0';

761 
aoResu…RGB
[1] = ()
	`wc°oul
(
lCﬁ‹Ch™√l
 + 3, 
NULL
, 16);

762 
lCﬁ‹Ch™√l
[3] = '\0';

763 
aoResu…RGB
[0] = ()
	`wc°oul
(
lCﬁ‹Ch™√l
 + 1, 
NULL
, 16);

768 
aoResu…RGB
[0] = 0;

769 
aoResu…RGB
[1] = 0;

770 
aoResu…RGB
[2] = 0;

773 
	}
}

776 
	$RGB2HexW
(

777 c⁄° 
aRGB
[3],

778 
wch¨_t
 
aoResu…HexRGB
[8])

780 i‡(
aoResu…HexRGB
)

782 i‡(
aRGB
)

785 
	`sw¥ötf
(
aoResu…HexRGB
,

786 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

790 #i‡(
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
)

791 
L
"#%02hhx%02hhx%02hhx", 
aRGB
[0],áRGB[1],áRGB[2]);

793 
L
"#%02hx%02hx%02hx", 
aRGB
[0],áRGB[1],áRGB[2]);

798 
aoResu…HexRGB
[0] = 0;

799 
aoResu…HexRGB
[1] = 0;

800 
aoResu…HexRGB
[2] = 0;

803 
	}
}

806 
	$dúExi°s
(c⁄° * 
aDúP©h
)

808 
_°©
 
lInfo
;

809 
wch¨_t
 * 
lTmpWCh¨
;

810 
lSètRë
;

811 
lDúLí
;

813 i‡(!
aDúP©h
)

815 
lDúLí
 = 
	`°æí
(
aDúP©h
);

816 i‡(!
lDúLí
)

818 i‡–(
lDúLí
 =2Ë&& (
aDúP©h
[1] == ':') )

821 i‡(
töyfd_wöUtf8
)

823 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDúP©h
);

824 
lSètRë
 = 
	`_w°©
(
lTmpWCh¨
, &
lInfo
);

825 i‡(
lSètRë
 != 0)

827 i‡(
lInfo
.
°_mode
 & 
S_IFDIR
)

832 i‡(
	`_°©
(
aDúP©h
, &
lInfo
) != 0)

834 i‡(
lInfo
.
°_mode
 & 
S_IFDIR
)

838 
	}
}

841 
	$fûeExi°s
(c⁄° * 
aFûeP©hAndName
)

843 
_°©
 
lInfo
;

844 
wch¨_t
 * 
lTmpWCh¨
;

845 
lSètRë
;

846 
FILE
 * 
lIn
;

848 i‡(!
aFûeP©hAndName
 || !
	`°æí
(aFilePathAndName))

853 i‡(
töyfd_wöUtf8
)

855 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aFûeP©hAndName
);

856 
lSètRë
 = 
	`_w°©
(
lTmpWCh¨
, &
lInfo
);

857 i‡(
lSètRë
 != 0)

859 i‡(
lInfo
.
°_mode
 & 
_S_IFREG
)

866 
lIn
 = 
	`f›í
(
aFûeP©hAndName
, "r");

867 i‡(!
lIn
)

871 
	`f˛o£
(
lIn
);

874 
	}
}

876 
	$ª∂a˚Wch¨
(
wch¨_t
 * 
aSåög
,

877 
wch¨_t
 
aOldChr
,

878 
wch¨_t
 
aNewChr
)

880 
wch¨_t
 * 
p
;

881 
lRes
 = 0;

883 i‡(!
aSåög
)

888 i‡(
aOldChr
 =
aNewChr
)

893 
p
 = 
aSåög
;

894 (
p
 = 
	`wc§chr
’, 
aOldChr
)))

896 *
p
 = 
aNewChr
;

897 #ifde‡
TINYFD_NOCCSUNICODE


898 
p
++;

900 
p
++;

901 
lRes
 = 1;

903  
lRes
;

904 
	}
}

910 * 
	$ísuªFûesExi°
(* 
aDe°ö©i⁄
,

911 c⁄° * 
aSour˚P©hsAndNames
)

913 * 
lDe°ö©i⁄
 = 
aDe°ö©i⁄
;

914 c⁄° * 
p
;

915 c⁄° * 
p2
;

916 
size_t
 
lLí
;

918 i‡(!
aSour˚P©hsAndNames
)

920  
NULL
;

922 
lLí
 = 
	`°æí
(
aSour˚P©hsAndNames
);

923 i‡(!
lLí
)

925  
NULL
;

928 
p
 = 
aSour˚P©hsAndNames
;

929 (
p2
 = 
	`°rchr
(
p
, '|')Ë!
NULL
)

931 
lLí
 = 
p2
 - 
p
;

932 
	`memmove
(
lDe°ö©i⁄
, 
p
, 
lLí
);

933 
lDe°ö©i⁄
[
lLí
] = '\0';

934 i‡(
	`fûeExi°s
(
lDe°ö©i⁄
))

936 
lDe°ö©i⁄
 +
lLí
;

937 *
lDe°ö©i⁄
 = '|';

938 
lDe°ö©i⁄
++;

940 
p
 = 
p2
 + 1;

942 i‡(
	`fûeExi°s
(
p
))

944 
lLí
 = 
	`°æí
(
p
);

945 
	`memmove
(
lDe°ö©i⁄
, 
p
, 
lLí
);

946 
lDe°ö©i⁄
[
lLí
] = '\0';

950 *(
lDe°ö©i⁄
 - 1) = '\0';

952  
aDe°ö©i⁄
;

953 
	}
}

955 #ifde‡
_WIN32


956 #i‚de‡
TINYFD_NOLIB


958 
__°dˇŒ
 
	$EnumThªadWndProc
(
HWND
 
hwnd
, 
LPARAM
 
lP¨am
)

960 
wch¨_t
 
lTôÀName
[
MAX_PATH
];

961 
	`GëWödowTextW
(
hwnd
, 
lTôÀName
, 
MAX_PATH
);

963 i‡(
	`wcscmp
(
L
"töyfûedülogsT›Wödow", 
lTôÀName
) == 0)

965 
	`SëWödowPos
(
hwnd
, 
HWND_TOPMOST
, 0, 0, 0, 0, 
SWP_NOMOVE
 | 
SWP_NOSIZE
);

969 
	}
}

972 
	$hiddíC⁄sﬁeW
(
wch¨_t
 c⁄° * 
aSåög
, wch¨_àc⁄° * 
aDülogTôÀ
, 
aInFr⁄t
)

974 
STARTUPINFOW
 
SèπupInfo
;

975 
PROCESS_INFORMATION
 
Pro˚ssInfo
;

977 i‡(!
aSåög
 || !
	`wc¶í
(aString) ) ;

979 
	`mem£t
(&
SèπupInfo
, 0, (StartupInfo));

980 
SèπupInfo
.
cb
 = (
STARTUPINFOW
);

981 
SèπupInfo
.
dwFœgs
 = 
STARTF_USESHOWWINDOW
;

982 
SèπupInfo
.
wShowWödow
 = 
SW_HIDE
;

984 i‡(!
	`Cª©ePro˚ssW
(
NULL
, (
LPWSTR
)
aSåög
, NULL, NULL, 
FALSE
,

985 
CREATE_NEW_CONSOLE
, 
NULL
, NULL,

986 &
SèπupInfo
, &
Pro˚ssInfo
))

991 
	`WaôF‹I≈utIdÀ
(
Pro˚ssInfo
.
hPro˚ss
, 
INFINITE
);

992 i‡(
aInFr⁄t
)

994 
	`EnumWödows
(
EnumThªadWndProc
, (
LPARAM
)
NULL
)) {}

995 
	`SëWödowTextW
(
	`GëF‹egroundWödow
(), 
aDülogTôÀ
);

997 
	`WaôF‹SögÀObje˘
(
Pro˚ssInfo
.
hPro˚ss
, 
INFINITE
);

998 
	`Clo£H™dÀ
(
Pro˚ssInfo
.
hThªad
);

999 
	`Clo£H™dÀ
(
Pro˚ssInfo
.
hPro˚ss
);

1000 
	}
}

1003 
	$töyfd_mesßgeBoxW
(

1004 
wch¨_t
 c⁄° * 
aTôÀ
,

1005 
wch¨_t
 c⁄° * 
aMesßge
,

1006 
wch¨_t
 c⁄° * 
aDülogTy≥
,

1007 
wch¨_t
 c⁄° * 
aIc⁄Ty≥
,

1008 
aDeÁu…Buâ⁄
)

1010 
lBoxRëu∫VÆue
;

1011 
UINT
 
aCode
;

1013 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "windows_wchar");  1; }

1015 i‡(
aIc⁄Ty≥
 && !
	`wcscmp
(
L
"warning",áIconType))

1017 
aCode
 = 
MB_ICONWARNING
;

1019 i‡(
aIc⁄Ty≥
 && !
	`wcscmp
(
L
"error",áIconType))

1021 
aCode
 = 
MB_ICONERROR
;

1023 i‡(
aIc⁄Ty≥
 && !
	`wcscmp
(
L
"question",áIconType))

1025 
aCode
 = 
MB_ICONQUESTION
;

1029 
aCode
 = 
MB_ICONINFORMATION
;

1032 i‡(
aDülogTy≥
 && !
	`wcscmp
(
L
"okcancel",áDialogType))

1034 
aCode
 +
MB_OKCANCEL
;

1035 i‡(!
aDeÁu…Buâ⁄
)

1037 
aCode
 +
MB_DEFBUTTON2
;

1040 i‡(
aDülogTy≥
 && !
	`wcscmp
(
L
"yesno",áDialogType))

1042 
aCode
 +
MB_YESNO
;

1043 i‡(!
aDeÁu…Buâ⁄
)

1045 
aCode
 +
MB_DEFBUTTON2
;

1050 
aCode
 +
MB_OK
;

1053 
aCode
 +
MB_TOPMOST
;

1055 
lBoxRëu∫VÆue
 = 
	`MesßgeBoxW
(
	`GëF‹egroundWödow
(), 
aMesßge
, 
aTôÀ
, 
aCode
);

1056 i‡(((
aDülogTy≥


1057 && 
	`wcscmp
(
L
"okˇn˚l", 
aDülogTy≥
)

1058 && 
	`wcscmp
(
L
"ye¢o", 
aDülogTy≥
)))

1059 || (
lBoxRëu∫VÆue
 =
IDOK
)

1060 || (
lBoxRëu∫VÆue
 =
IDYES
))

1068 
	}
}

1071 
	$mesßgeBoxWöGui8
(

1072 c⁄° * 
aTôÀ
,

1073 c⁄° * 
aMesßge
,

1074 c⁄° * 
aDülogTy≥
,

1075 c⁄° * 
aIc⁄Ty≥
,

1076 
aDeÁu…Buâ⁄
)

1078 
lI¡RëVÆ
;

1079 
wch¨_t
 
lTôÀ
 [128] = 
L
"";

1080 
wch¨_t
 * 
lMesßge
 = 
NULL
;

1081 
wch¨_t
 
lDülogTy≥
 [16] = 
L
"";

1082 
wch¨_t
 
lIc⁄Ty≥
 [16] = 
L
"";

1083 
wch¨_t
 * 
lTmpWCh¨
;

1085 i‡(
aTôÀ
)

1087 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

1088 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1090 i‡(
aMesßge
)

1092 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aMesßge
);

1093 
lMesßge
 = 
	`mÆloc
((
	`wc¶í
(
lTmpWCh¨
Ë+ 1)* (
wch¨_t
));

1094 
	`wcs˝y
(
lMesßge
, 
lTmpWCh¨
);

1096 i‡(
aDülogTy≥
)

1098 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDülogTy≥
);

1099 
	`wcs˝y
(
lDülogTy≥
, 
lTmpWCh¨
);

1101 i‡(
aIc⁄Ty≥
)

1103 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aIc⁄Ty≥
);

1104 
	`wcs˝y
(
lIc⁄Ty≥
, 
lTmpWCh¨
);

1107 
lI¡RëVÆ
 = 
	`töyfd_mesßgeBoxW
(
lTôÀ
, 
lMesßge
,
lDülogTy≥
, 
lIc⁄Ty≥
, 
aDeÁu…Buâ⁄
 );

1109 
	`‰ì
(
lMesßge
);

1111  
lI¡RëVÆ
 ;

1112 
	}
}

1116 
	$töyfd_nŸifyP›upW
(

1117 
wch¨_t
 c⁄° * 
aTôÀ
,

1118 
wch¨_t
 c⁄° * 
aMesßge
,

1119 
wch¨_t
 c⁄° * 
aIc⁄Ty≥
)

1121 
wch¨_t
 * 
lDülogSåög
;

1122 
size_t
 
lTôÀLí
;

1123 
size_t
 
lMesßgeLí
;

1124 
size_t
 
lDülogSåögLí
;

1126 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "windows_wchar");  1; }

1128 
lTôÀLí
 = 
aTôÀ
 ? 
	`wc¶í
(aTitle) : 0;

1129 
lMesßgeLí
 = 
aMesßge
 ? 
	`wc¶í
(aMessage) : 0;

1130 
lDülogSåögLí
 = 3 * 
MAX_PATH_OR_CMD
 + 
lTôÀLí
 + 
lMesßgeLí
;

1131 
lDülogSåög
 = (
wch¨_t
 *)
	`mÆloc
(2 * 
lDülogSåögLí
);

1133 
	`wcs˝y
(
lDülogSåög
, 
L
"powershell.exe -command \"\
 Show-BalloonTip {\
[cmdletbinding()] \
( \
[string]$Title = ' ', \
[string]$Message = ' ', \
[ValidateSet('info', 'warning', 'error')] \
[string]$IconType = 'info');\
[system.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms') | Out-Null ; \
$balloon = New-Object System.Windows.Forms.NotifyIcon ; \
$path = Get-Process -id $pid | Select-Object -ExpandProperty Path ; \
$icon = [System.Drawing.Icon]::ExtractAssociatedIcon($path) ;");

1146 
	`wcsˇt
(
lDülogSåög
, 
L
"\
$balloon.Icon = $icon ; \
$balloon.BalloonTipIcon = $IconType ; \
$balloon.BalloonTipText = $Message ; \
$balloon.BalloonTipTitle = $Title ; \
$balloon.Text = 'lalala' ; \
$balloon.Visible = $true ; \
$balloon.ShowBalloonTip(5000)};\
-BalloonTip");

1156 i‡(
aTôÀ
 && 
	`wc¶í
(aTitle))

1158 
	`wcsˇt
(
lDülogSåög
, 
L
" -Title '");

1159 
	`wcsˇt
(
lDülogSåög
, 
aTôÀ
);

1160 
	`wcsˇt
(
lDülogSåög
, 
L
"'");

1162 i‡(
aMesßge
 && 
	`wc¶í
(aMessage))

1164 
	`wcsˇt
(
lDülogSåög
, 
L
" -Message '");

1165 
	`wcsˇt
(
lDülogSåög
, 
aMesßge
);

1166 
	`wcsˇt
(
lDülogSåög
, 
L
"'");

1168 i‡(
aMesßge
 && 
	`wc¶í
(
aIc⁄Ty≥
))

1170 
	`wcsˇt
(
lDülogSåög
, 
L
" -IconType '");

1171 
	`wcsˇt
(
lDülogSåög
, 
aIc⁄Ty≥
);

1172 
	`wcsˇt
(
lDülogSåög
, 
L
"'");

1174 
	`wcsˇt
(
lDülogSåög
, 
L
"\"");

1178 
	`hiddíC⁄sﬁeW
(
lDülogSåög
, 
aTôÀ
, 0);

1179 
	`‰ì
(
lDülogSåög
);

1181 
	}
}

1184 
	$nŸifyWöGui
(

1185 c⁄° * 
aTôÀ
,

1186 c⁄° * 
aMesßge
,

1187 c⁄° * 
aIc⁄Ty≥
)

1189 
wch¨_t
 
lTôÀ
 [128] = 
L
"";

1190 
wch¨_t
 * 
lMesßge
 = 
NULL
;

1191 
wch¨_t
 
lIc⁄Ty≥
[16] = 
L
"";

1192 
wch¨_t
 * 
lTmpWCh¨
;

1194 i‡(
töyfd_wöUtf8
)

1196 i‡(
aTôÀ
)

1198 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

1199 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1201 i‡(
aMesßge
)

1203 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aMesßge
);

1204 
lMesßge
 = 
	`mÆloc
((
	`wc¶í
(
lTmpWCh¨
Ë+ 1)* (
wch¨_t
));

1205 
	`wcs˝y
(
lMesßge
, 
lTmpWCh¨
);

1207 i‡(
aIc⁄Ty≥
)

1209 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aIc⁄Ty≥
);

1210 
	`wcs˝y
(
lIc⁄Ty≥
, 
lTmpWCh¨
);

1215 i‡(
aTôÀ
)

1217 
lTmpWCh¨
 = 
	`mbcsTo16
(
aTôÀ
);

1218 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1220 i‡(
aMesßge
)

1222 
lTmpWCh¨
 = 
	`mbcsTo16
(
aMesßge
);

1223 
lMesßge
 = 
	`mÆloc
((
	`wc¶í
(
lTmpWCh¨
Ë+ 1)* (
wch¨_t
));

1224 
	`wcs˝y
(
lMesßge
, 
lTmpWCh¨
);

1226 i‡(
aIc⁄Ty≥
)

1228 
lTmpWCh¨
 = 
	`mbcsTo16
(
aIc⁄Ty≥
);

1229 
	`wcs˝y
(
lIc⁄Ty≥
, 
lTmpWCh¨
);

1233 
	`töyfd_nŸifyP›upW
–
lTôÀ
, 
lMesßge
, 
lIc⁄Ty≥
);

1235 
	`‰ì
(
lMesßge
);

1238 
	}
}

1241 
wch¨_t
 * 
	$töyfd_öputBoxW
(

1242 
wch¨_t
 c⁄° * 
aTôÀ
,

1243 
wch¨_t
 c⁄° * 
aMesßge
,

1244 
wch¨_t
 c⁄° * 
aDeÁu…I≈ut
)

1246 
wch¨_t
 
lBuff
[
MAX_PATH_OR_CMD
];

1247 
wch¨_t
 * 
lDülogSåög
;

1248 
FILE
 * 
lIn
;

1249 
FILE
 * 
lFûe
;

1250 
lResu…
;

1251 
size_t
 
lTôÀLí
;

1252 
size_t
 
lMesßgeLí
;

1253 
size_t
 
lDülogSåögLí
;

1255 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "wödows_wch¨");  (
wch¨_t
 *)1; }

1257 
lTôÀLí
 = 
aTôÀ
 ? 
	`wc¶í
(aTitle) : 0 ;

1258 
lMesßgeLí
 = 
aMesßge
 ? 
	`wc¶í
(aMessage) : 0 ;

1259 
lDülogSåögLí
 = 3 * 
MAX_PATH_OR_CMD
 + 
lTôÀLí
 + 
lMesßgeLí
;

1260 
lDülogSåög
 = (
wch¨_t
 *)
	`mÆloc
(2 * 
lDülogSåögLí
);

1262 i‡(
aDeÁu…I≈ut
)

1264 
	`sw¥ötf
(
lDülogSåög
,

1265 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

1266 
lDülogSåögLí
,

1268 
L
"%ls\\AµD©a\\Loˇl\\Temp\\töyfd.vbs", 
	`_wgëív
(L"USERPROFILE"));

1272 
	`sw¥ötf
(
lDülogSåög
,

1273 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

1274 
lDülogSåögLí
,

1276 
L
"%ls\\AµD©a\\Loˇl\\Temp\\töyfd.hè", 
	`_wgëív
(L"USERPROFILE"));

1278 
lIn
 = 
	`_wf›í
(
lDülogSåög
, 
L
"w");

1279 i‡(!
lIn
)

1281 
	`‰ì
(
lDülogSåög
);

1282  
NULL
;

1285 i‡–
aDeÁu…I≈ut
 )

1287 
	`wcs˝y
(
lDülogSåög
, 
L
"DimÑesult:result=InputBox(\"");

1288 i‡(
aMesßge
 && 
	`wc¶í
(aMessage))

1290 
	`wcs˝y
(
lBuff
, 
aMesßge
);

1291 
	`ª∂a˚Wch¨
(
lBuff
, 
L
'\n', L' ');

1292 
	`wcsˇt
(
lDülogSåög
, 
lBuff
);

1294 
	`wcsˇt
(
lDülogSåög
, 
L
"\",\"tinyfiledialogsTopWindow\",\"");

1295 i‡(
aDeÁu…I≈ut
 && 
	`wc¶í
(aDefaultInput))

1297 
	`wcs˝y
(
lBuff
, 
aDeÁu…I≈ut
);

1298 
	`ª∂a˚Wch¨
(
lBuff
, 
L
'\n', L' ');

1299 
	`wcsˇt
(
lDülogSåög
, 
lBuff
);

1301 
	`wcsˇt
(
lDülogSåög
, 
L
"\"):If IsEmpty(result)Åhen:WScript.Echo 0");

1302 
	`wcsˇt
(
lDülogSåög
, 
L
":Else: WScript.Echo \"1\" &Ñesult : End If");

1306 
	`wcs˝y
(
lDülogSåög
, 
L
"\n\
<html>\n\
<head>\n\
<title>");

1311 
	`wcsˇt
(
lDülogSåög
, 
L
"tinyfiledialogsTopWindow");

1312 
	`wcsˇt
(
lDülogSåög
, 
L
"</title>\n\
<HTA:APPLICATION\n\
 = 'tinyfdHTA'\n\
 = 'tinyfd_inputBox'\n\
 = 'no'\n\
 = 'no'\n\
 = 'dialog'\n\
 = 'no'\n\
 = 'yes'\n\
 = 'hidden'>\n\
\n\
<scriptÜanguage = 'VBScript'>\n\
\n\
 = Screen.Width/4\n\
 = Screen.Height/6\n\
 intWidth, intHeight\n\
((Screen.Width/2)-(intWidth/2)),((Screen.Height/2)-(intHeight/2))\n\
 = 0\n\
\n\
 Window_onLoad\n\
_input.Focus\n\
 Sub\n\
\n");

1336 
	`wcsˇt
(
lDülogSåög
, 
L
"\
 Window_onUnload\n\
 objFSO = CreateObject(\"Scripting.FileSystemObject\")\n\
 oShell = CreateObject(\"WScript.Shell\")\n\
 = oShell.ExpandEnvironmentStrings(\"%USERPROFILE%\")\n\
 objFile = objFSO.CreateTextFile(strHomeFolder & \"\\AppData\\Local\\Temp\\tinyfd.txt\",True,True)\n\
Ñesult = 1 Then\n\
.Write 1 &Åxt_input.Value\n\
\n\
.Write 0\n\
 If\n\
.Close\n\
 Sub\n\
\n\
 Run_ProgramOK\n\
 = 1\n\
.Close\n\
 Sub\n\
\n\
 Run_ProgramCancel\n\
.Close\n\
 Sub\n\
\n");

1360 
	`wcsˇt
(
lDülogSåög
, 
L
"Sub Default_Buttons\n\
 Window.Event.KeyCode = 13 Then\n\
_OK.Click\n\
 Window.Event.KeyCode = 27 Then\n\
_Cancel.Click\n\
 If\n\
 Sub\n\
\n\
</script>\n\
</head>\n\
<body style = 'background-color:#EEEEEE' onkeypress = 'vbs:Default_Buttons'álign = 'top'>\n\
<table width = '100%' height = '80%'álign = 'center' border = '0'>\n\
<tr border = '0'>\n\
<tdálign = 'left' valign = 'middle' style='Font-Family:Arial'>\n");

1375 
	`wcsˇt
(
lDülogSåög
, 
aMesßge
 ?áMesßgê: 
L
"");

1377 
	`wcsˇt
(
lDülogSåög
, 
L
"\n\
</td>\n\
<tdálign = 'right' valign = 'middle' style = 'margin-top: 0em'>\n\
<tableálign = 'right' style = 'margin-right: 0em;'>\n\
<trálign = 'right' style = 'margin-top: 5em;'>\n\
<inputÅype = 'button' value = 'OK'Çame = 'btn_OK' onClick = 'vbs:Run_ProgramOK' style = 'width: 5em; margin-top: 2em;'><br>\n\
<inputÅype = 'button' value = 'Cancel'Çame = 'btn_Cancel' onClick = 'vbs:Run_ProgramCancel' style = 'width: 5em;'><br><br>\n\
</tr>\n\
</table>\n\
</td>\n\
</tr>\n\
</table>\n");

1390 
	`wcsˇt
(
lDülogSåög
, 
L
"<table width = '100%' height = '100%'álign = 'center' border = '0'>\n\
<tr>\n\
<tdálign = 'left' valign = 'top'>\n\
<inputÅype = 'password' id = 'txt_input'\n\
 = 'txt_input' value = '' style = 'float:left;width:100%' ><BR>\n\
</td>\n\
</tr>\n\
</table>\n\
</body>\n\
</html>\n\
" ) ;

1402 
	`Âutws
(
lDülogSåög
, 
lIn
);

1403 
	`f˛o£
(
lIn
);

1405 i‡(
aDeÁu…I≈ut
)

1407 
	`sw¥ötf
(
lDülogSåög
,

1408 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

1409 
lDülogSåögLí
,

1411 
L
"%ls\\AµD©a\\Loˇl\\Temp\\töyfd.txt",
	`_wgëív
(L"USERPROFILE"));

1413 #ifde‡
TINYFD_NOCCSUNICODE


1414 
lFûe
 = 
	`_wf›í
(
lDülogSåög
, 
L
"w");

1415 
	`Âutc
(0xFF, 
lFûe
);

1416 
	`Âutc
(0xFE, 
lFûe
);

1418 
lFûe
 = 
	`_wf›í
(
lDülogSåög
, 
L
"wt, ccs=UNICODE");

1420 
	`f˛o£
(
lFûe
);

1422 
	`wcs˝y
(
lDülogSåög
, 
L
"cmd.exe /c cscript.exe //U //Nologo ");

1423 
	`wcsˇt
(
lDülogSåög
, 
L
"\"%USERPROFILE%\\AppData\\Local\\Temp\\tinyfd.vbs\" ");

1424 
	`wcsˇt
(
lDülogSåög
, 
L
">> \"%USERPROFILE%\\AppData\\Local\\Temp\\tinyfd.txt\"");

1428 
	`wcs˝y
(
lDülogSåög
,

1429 
L
"cmd.exe /c mshta.exe \"%USERPROFILE%\\AppData\\Local\\Temp\\tinyfd.hta\"");

1434 
	`hiddíC⁄sﬁeW
(
lDülogSåög
, 
aTôÀ
, 1);

1436 
	`sw¥ötf
(
lDülogSåög
,

1437 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

1438 
lDülogSåögLí
,

1440 
L
"%ls\\AµD©a\\Loˇl\\Temp\\töyfd.txt", 
	`_wgëív
(L"USERPROFILE"));

1442 #ifde‡
TINYFD_NOCCSUNICODE


1443 i‡(!(
lIn
 = 
	`_wf›í
(
lDülogSåög
, 
L
"r")))

1445 i‡(!(
lIn
 = 
	`_wf›í
(
lDülogSåög
, 
L
"rt, ccs=UNICODE")))

1448 
	`_wªmove
(
lDülogSåög
);

1449 
	`‰ì
(
lDülogSåög
);

1450  
NULL
;

1453 
	`mem£t
(
lBuff
, 0, 
MAX_PATH_OR_CMD
 * (
wch¨_t
) );

1455 #ifde‡
TINYFD_NOCCSUNICODE


1456 
	`fgës
((*)
lBuff
, 2*
MAX_PATH_OR_CMD
, 
lIn
);

1458 
	`fgëws
(
lBuff
, 
MAX_PATH_OR_CMD
, 
lIn
);

1460 
	`f˛o£
(
lIn
);

1461 
	`wùefûeW
(
lDülogSåög
);

1462 
	`_wªmove
(
lDülogSåög
);

1464 i‡(
aDeÁu…I≈ut
)

1466 
	`sw¥ötf
(
lDülogSåög
,

1467 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

1468 
lDülogSåögLí
,

1470 
L
"%ls\\AppData\\Local\\Temp\\tinyfd.vbs",

1471 
	`_wgëív
(
L
"USERPROFILE"));

1475 
	`sw¥ötf
(
lDülogSåög
,

1476 #i‡!
	`deföed
(
__BORLANDC__
Ë&& !deföed(
__TINYC__
Ë&& ( !deföed(
__GNUC__
) || (__GNUC__) >= 5 )

1477 
lDülogSåögLí
,

1479 
L
"%ls\\AppData\\Local\\Temp\\tinyfd.hta",

1480 
	`_wgëív
(
L
"USERPROFILE"));

1482 
	`_wªmove
(
lDülogSåög
);

1483 
	`‰ì
(
lDülogSåög
);

1485 #ifde‡
TINYFD_NOCCSUNICODE


1486 
lResu…
 = !
	`wc¢cmp
(
lBuff
+1, 
L
"1", 1);

1488 
lResu…
 = !
	`wc¢cmp
(
lBuff
, 
L
"1", 1);

1492 i‡(!
lResu…
)

1494  
NULL
 ;

1499 #ifde‡
TINYFD_NOCCSUNICODE


1500 i‡(
aDeÁu…I≈ut
)

1502 
lDülogSåögLí
 = 
	`wc¶í
(
lBuff
) ;

1503 
lBuff
[
lDülogSåögLí
 - 1] = 
L
'\0';

1504 
lBuff
[
lDülogSåögLí
 - 2] = 
L
'\0';

1506  
lBuff
 + 2;

1508 i‡(
aDeÁu…I≈ut
Ë
lBuff
[
	`wc¶í
÷BuffË- 1] = 
L
'\0';

1509  
lBuff
 + 1;

1511 
	}
}

1514 
	$öputBoxWöGui
(

1515 * 
aoBuff
,

1516 c⁄° * 
aTôÀ
,

1517 c⁄° * 
aMesßge
,

1518 c⁄° * 
aDeÁu…I≈ut
)

1520 
wch¨_t
 
lTôÀ
 [128] = 
L
"";

1521 
wch¨_t
 * 
lMesßge
 = 
NULL
;

1522 
wch¨_t
 
lDeÁu…I≈ut
[
MAX_PATH_OR_CMD
] = 
L
"";

1523 
wch¨_t
 * 
lTmpWCh¨
;

1524 * 
lTmpCh¨
;

1526 i‡(
töyfd_wöUtf8
)

1528 i‡(
aTôÀ
)

1530 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

1531 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1533 i‡(
aMesßge
)

1535 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aMesßge
);

1536 
lMesßge
 = 
	`mÆloc
((
	`wc¶í
(
lTmpWCh¨
Ë+ 1)* (
wch¨_t
));

1537 
	`wcs˝y
(
lMesßge
, 
lTmpWCh¨
);

1539 i‡(
aDeÁu…I≈ut
)

1541 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDeÁu…I≈ut
);

1542 
	`wcs˝y
(
lDeÁu…I≈ut
, 
lTmpWCh¨
);

1547 i‡(
aTôÀ
)

1549 
lTmpWCh¨
 = 
	`mbcsTo16
(
aTôÀ
);

1550 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1552 i‡(
aMesßge
)

1554 
lTmpWCh¨
 = 
	`mbcsTo16
(
aMesßge
);

1555 
lMesßge
 = 
	`mÆloc
((
	`wc¶í
(
lTmpWCh¨
Ë+ 1)* (
wch¨_t
));

1556 
	`wcs˝y
(
lMesßge
, 
lTmpWCh¨
);

1558 i‡(
aDeÁu…I≈ut
)

1560 
lTmpWCh¨
 = 
	`mbcsTo16
(
aDeÁu…I≈ut
);

1561 
	`wcs˝y
(
lDeÁu…I≈ut
, 
lTmpWCh¨
);

1565 
lTmpWCh¨
 = 
	`töyfd_öputBoxW
–
lTôÀ
, 
lMesßge
, 
lDeÁu…I≈ut
);

1567 
	`‰ì
(
lMesßge
);

1569 i‡(!
lTmpWCh¨
)

1571 
aoBuff
[0] = '\0';

1575 i‡(
töyfd_wöUtf8
)

1577 
lTmpCh¨
 = 
	`töyfd_utf16to8
(
lTmpWCh¨
);

1581 
lTmpCh¨
 = 
	`utf16toMbcs
(
lTmpWCh¨
);

1583 
	`°r˝y
(
aoBuff
, 
lTmpCh¨
);

1586 
	}
}

1589 
wch¨_t
 * 
	$töyfd_ßveFûeDülogW
(

1590 
wch¨_t
 c⁄° * 
aTôÀ
,

1591 
wch¨_t
 c⁄° * 
aDeÁu…P©hAndFûe
,

1592 
aNumOfFûãrP©ã∫s
,

1593 
wch¨_t
 c⁄° * c⁄° * 
aFûãrP©ã∫s
,

1594 
wch¨_t
 c⁄° * 
aSögÀFûãrDes¸ùti⁄
)

1596 
wch¨_t
 
lBuff
[
MAX_PATH_OR_CMD
];

1597 
wch¨_t
 
lDú«me
[
MAX_PATH_OR_CMD
];

1598 
wch¨_t
 
lDülogSåög
[
MAX_PATH_OR_CMD
];

1599 
wch¨_t
 
lFûãrP©ã∫s
[
MAX_PATH_OR_CMD
] = 
L
"";

1600 
wch¨_t
 * 
p
;

1601 
wch¨_t
 * 
lRëvÆ
;

1602 
wch¨_t
 c⁄° * 
ldefExt
 = 
NULL
;

1603 
i
;

1604 
HRESULT
 
lHResu…
;

1605 
OPENFILENAMEW
 
o‚
 = {0};

1607 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "wödows_wch¨");  (
wch¨_t
 *)1; }

1609 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
, 0);

1611 
	`gëP©hWôhoutFöÆSœshW
(
lDú«me
, 
aDeÁu…P©hAndFûe
);

1612 
	`gëLa°NameW
(
lBuff
, 
aDeÁu…P©hAndFûe
);

1614 i‡(
aNumOfFûãrP©ã∫s
 > 0)

1616 
ldefExt
 = 
aFûãrP©ã∫s
[0];

1618 i‡(
aSögÀFûãrDes¸ùti⁄
 && 
	`wc¶í
(aSingleFilterDescription))

1620 
	`wcs˝y
(
lFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
);

1621 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
"\n");

1623 
	`wcsˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[0]);

1624 
i
 = 1; i < 
aNumOfFûãrP©ã∫s
; i++)

1626 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
";");

1627 
	`wcsˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[
i
]);

1629 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
"\n");

1630 i‡(!(
aSögÀFûãrDes¸ùti⁄
 && 
	`wc¶í
(aSingleFilterDescription)))

1632 
	`wcs˝y
(
lDülogSåög
, 
lFûãrP©ã∫s
);

1633 
	`wcsˇt
(
lFûãrP©ã∫s
, 
lDülogSåög
);

1635 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
"All Files\n*.*\n");

1636 
p
 = 
lFûãrP©ã∫s
;

1637 (
p
 = 
	`wcschr
’, 
L
'\n')Ë!
NULL
)

1639 *
p
 = 
L
'\0';

1640 
p
++;

1644 
o‚
.
lSåu˘Size
 = (
OPENFILENAMEW
);

1645 
o‚
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

1646 
o‚
.
hIn°™˚
 = 0;

1647 
o‚
.
Õ°rFûãr
 = 
	`wc¶í
(
lFûãrP©ã∫s
Ë?ÜFûãrP©ã∫†: 
NULL
;

1648 
o‚
.
Õ°rCu°omFûãr
 = 
NULL
;

1649 
o‚
.
nMaxCu°Fûãr
 = 0;

1650 
o‚
.
nFûãrIndex
 = 1;

1651 
o‚
.
Õ°rFûe
 = 
lBuff
;

1653 
o‚
.
nMaxFûe
 = 
MAX_PATH_OR_CMD
;

1654 
o‚
.
Õ°rFûeTôÀ
 = 
NULL
;

1655 
o‚
.
nMaxFûeTôÀ
 = 
MAX_PATH_OR_CMD
/2;

1656 
o‚
.
Õ°rInôülDú
 = 
	`wc¶í
(
lDú«me
Ë?ÜDú«mê: 
NULL
;

1657 
o‚
.
Õ°rTôÀ
 = 
aTôÀ
 && 
	`wc¶í
◊TôÀË?áTôÀ : 
NULL
;

1658 
o‚
.
Fœgs
 = 
OFN_OVERWRITEPROMPT
 | 
OFN_NOCHANGEDIR
 | 
OFN_PATHMUSTEXIST
 ;

1659 
o‚
.
nFûeOff£t
 = 0;

1660 
o‚
.
nFûeExãnsi⁄
 = 0;

1661 
o‚
.
Õ°rDefExt
 = 
ldefExt
;

1662 
o‚
.
lCu°D©a
 = 0L;

1663 
o‚
.
Õ‚Hook
 = 
NULL
;

1664 
o‚
.
ÕTem∂©eName
 = 
NULL
;

1666 i‡(
	`GëSaveFûeNameW
(&
o‚
) == 0)

1668 
lRëvÆ
 = 
NULL
;

1672 
lRëvÆ
 = 
lBuff
;

1675 i‡(
lHResu…
 =
S_OK
 ||ÜHResu… =
S_FALSE
)

1677 
	`CoUnöôülize
();

1679  
lRëvÆ
;

1680 
	}
}

1683 * 
	$ßveFûeDülogWöGui8
(

1684 * 
aoBuff
,

1685 c⁄° * 
aTôÀ
,

1686 c⁄° * 
aDeÁu…P©hAndFûe
,

1687 
aNumOfFûãrP©ã∫s
,

1688 c⁄° * c⁄° * 
aFûãrP©ã∫s
,

1689 c⁄° * 
aSögÀFûãrDes¸ùti⁄
)

1691 
wch¨_t
 
lTôÀ
 [128] = 
L
"";

1692 
wch¨_t
 
lDeÁu…P©hAndFûe
 [
MAX_PATH_OR_CMD
] = 
L
"";

1693 
wch¨_t
 
lSögÀFûãrDes¸ùti⁄
 [128] = 
L
"";

1694 
wch¨_t
 * * 
lFûãrP©ã∫s
;

1695 
wch¨_t
 * 
lTmpWCh¨
;

1696 * 
lTmpCh¨
;

1697 
i
 ;

1699 
lFûãrP©ã∫s
 = (
wch¨_t
 **Ë
	`mÆloc
(
aNumOfFûãrP©ã∫s
*(wchar_t *));

1700 
i
 = 0; i < 
aNumOfFûãrP©ã∫s
; i++)

1702 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aFûãrP©ã∫s
[
i
]);

1703 
lFûãrP©ã∫s
[
i
] = (
wch¨_t
 *)
	`mÆloc
–(
	`wc¶í
(
lTmpWCh¨
)+1) * (wchar_t *));

1704 
	`wcs˝y
(
lFûãrP©ã∫s
[
i
], 
lTmpWCh¨
);

1707 i‡(
aTôÀ
)

1709 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

1710 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1713 i‡(
aDeÁu…P©hAndFûe
)

1715 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDeÁu…P©hAndFûe
);

1716 
	`wcs˝y
(
lDeÁu…P©hAndFûe
, 
lTmpWCh¨
);

1719 i‡(
aSögÀFûãrDes¸ùti⁄
)

1721 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aSögÀFûãrDes¸ùti⁄
);

1722 
	`wcs˝y
(
lSögÀFûãrDes¸ùti⁄
, 
lTmpWCh¨
);

1725 
lTmpWCh¨
 = 
	`töyfd_ßveFûeDülogW
(

1726 
lTôÀ
,

1727 
lDeÁu…P©hAndFûe
,

1728 
aNumOfFûãrP©ã∫s
,

1729 (
wch¨_t
 const** )

1730 
lFûãrP©ã∫s
,

1731 
lSögÀFûãrDes¸ùti⁄
);

1733 
i
 = 0; i < 
aNumOfFûãrP©ã∫s
; i++)

1735 
	`‰ì
(
lFûãrP©ã∫s
[
i
]);

1737 
	`‰ì
(
lFûãrP©ã∫s
);

1739 i‡(!
lTmpWCh¨
)

1741  
NULL
;

1744 
lTmpCh¨
 = 
	`töyfd_utf16to8
(
lTmpWCh¨
);

1745 
	`°r˝y
(
aoBuff
, 
lTmpCh¨
);

1746 (Ë
	`töyfd_utf16to8
(
NULL
);

1748  
aoBuff
;

1749 
	}
}

1752 
wch¨_t
 * 
	$töyfd_›íFûeDülogW
(

1753 
wch¨_t
 c⁄° * 
aTôÀ
,

1754 
wch¨_t
 c⁄° * 
aDeÁu…P©hAndFûe
,

1755 
aNumOfFûãrP©ã∫s
,

1756 
wch¨_t
 c⁄° * c⁄° * 
aFûãrP©ã∫s
,

1757 
wch¨_t
 c⁄° * 
aSögÀFûãrDes¸ùti⁄
,

1758 
aAŒowMu…ùÀSñe˘s
)

1760 
size_t
 
lLígths
[
MAX_MULTIPLE_FILES
];

1761 
wch¨_t
 
lDú«me
[
MAX_PATH_OR_CMD
];

1762 
wch¨_t
 
lFûãrP©ã∫s
[
MAX_PATH_OR_CMD
] = 
L
"";

1763 
wch¨_t
 
lDülogSåög
[
MAX_PATH_OR_CMD
];

1764 
wch¨_t
 * 
lPoöãrs
[
MAX_MULTIPLE_FILES
+1];

1765 
wch¨_t
 * 
p
;

1766 
i
, 
j
;

1767 
size_t
 
lBuffLí
, 
lFuŒBuffLí
;

1768 
HRESULT
 
lHResu…
;

1769 
OPENFILENAMEW
 
o‚
 = { 0 };

1770 
wch¨_t
 * 
lBuff
 = 
NULL
;

1772 
	`‰ì
(
lBuff
);

1773 
lBuff
 = 
NULL
;

1774 i‡(
aAŒowMu…ùÀSñe˘s
 < 0Ë (
wch¨_t
 *)0;

1776 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "wödows_wch¨");  (
wch¨_t
 *)1; }

1778 i‡(
aAŒowMu…ùÀSñe˘s
)

1780 
lFuŒBuffLí
 = 
MAX_MULTIPLE_FILES
 * 
MAX_PATH_OR_CMD
 + 1;

1781 
lBuff
 = (
wch¨_t
*)(
	`mÆloc
(
lFuŒBuffLí
 * (wchar_t)));

1782 i‡(!
lBuff
)

1784 
lFuŒBuffLí
 = 
LOW_MULTIPLE_FILES
 * 
MAX_PATH_OR_CMD
 + 1;

1785 
lBuff
 = (
wch¨_t
*)–
	`mÆloc
–
lFuŒBuffLí
 * (wchar_t)));

1790 
lFuŒBuffLí
 = 
MAX_PATH_OR_CMD
 + 1;

1791 
lBuff
 = (
wch¨_t
*)(
	`mÆloc
(
lFuŒBuffLí
 * (wchar_t)));

1793 i‡(!
lBuff
Ë 
NULL
;

1795 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
, 0);

1797 
	`gëP©hWôhoutFöÆSœshW
(
lDú«me
, 
aDeÁu…P©hAndFûe
);

1798 
	`gëLa°NameW
(
lBuff
, 
aDeÁu…P©hAndFûe
);

1800 i‡(
aNumOfFûãrP©ã∫s
 > 0)

1802 i‡(
aSögÀFûãrDes¸ùti⁄
 && 
	`wc¶í
(aSingleFilterDescription))

1804 
	`wcs˝y
(
lFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
);

1805 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
"\n");

1807 
	`wcsˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[0]);

1808 
i
 = 1; i < 
aNumOfFûãrP©ã∫s
; i++)

1810 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
";");

1811 
	`wcsˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[
i
]);

1813 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
"\n");

1814 i‡(!(
aSögÀFûãrDes¸ùti⁄
 && 
	`wc¶í
(aSingleFilterDescription)))

1816 
	`wcs˝y
(
lDülogSåög
, 
lFûãrP©ã∫s
);

1817 
	`wcsˇt
(
lFûãrP©ã∫s
, 
lDülogSåög
);

1819 
	`wcsˇt
(
lFûãrP©ã∫s
, 
L
"All Files\n*.*\n");

1820 
p
 = 
lFûãrP©ã∫s
;

1821 (
p
 = 
	`wcschr
’, 
L
'\n')Ë!
NULL
)

1823 *
p
 = 
L
'\0';

1824 
p
++;

1828 
o‚
.
lSåu˘Size
 = (
OPENFILENAME
);

1829 
o‚
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

1830 
o‚
.
hIn°™˚
 = 0;

1831 
o‚
.
Õ°rFûãr
 = 
	`wc¶í
(
lFûãrP©ã∫s
Ë?ÜFûãrP©ã∫†: 
NULL
;

1832 
o‚
.
Õ°rCu°omFûãr
 = 
NULL
;

1833 
o‚
.
nMaxCu°Fûãr
 = 0;

1834 
o‚
.
nFûãrIndex
 = 1;

1835 
o‚
.
Õ°rFûe
 = 
lBuff
;

1836 
o‚
.
nMaxFûe
 = 
lFuŒBuffLí
;

1837 
o‚
.
Õ°rFûeTôÀ
 = 
NULL
;

1838 
o‚
.
nMaxFûeTôÀ
 = 
MAX_PATH_OR_CMD
 / 2;

1839 
o‚
.
Õ°rInôülDú
 = 
	`wc¶í
(
lDú«me
Ë?ÜDú«mê: 
NULL
;

1840 
o‚
.
Õ°rTôÀ
 = 
aTôÀ
 && 
	`wc¶í
◊TôÀË?áTôÀ : 
NULL
;

1841 
o‚
.
Fœgs
 = 
OFN_EXPLORER
 | 
OFN_NOCHANGEDIR
 | 
OFN_PATHMUSTEXIST
 | 
OFN_FILEMUSTEXIST
;

1842 
o‚
.
nFûeOff£t
 = 0;

1843 
o‚
.
nFûeExãnsi⁄
 = 0;

1844 
o‚
.
Õ°rDefExt
 = 
NULL
;

1845 
o‚
.
lCu°D©a
 = 0L;

1846 
o‚
.
Õ‚Hook
 = 
NULL
;

1847 
o‚
.
ÕTem∂©eName
 = 
NULL
;

1849 i‡(
aAŒowMu…ùÀSñe˘s
)

1851 
o‚
.
Fœgs
 |
OFN_ALLOWMULTISELECT
;

1854 i‡(
	`GëO≥nFûeNameW
(&
o‚
) == 0)

1856 
	`‰ì
(
lBuff
);

1857 
lBuff
 = 
NULL
;

1861 
lBuffLí
 = 
	`wc¶í
(
lBuff
);

1862 
lPoöãrs
[0] = 
lBuff
 + 
lBuffLí
 + 1;

1863 i‡(
aAŒowMu…ùÀSñe˘s
 && (
lPoöãrs
[0][0] !
L
'\0'))

1865 
i
 = 0;

1868 
lLígths
[
i
] = 
	`wc¶í
(
lPoöãrs
[i]);

1869 
lPoöãrs
[
i
 + 1] =ÜPoöãrs[i] + 
lLígths
[i] + 1;

1870 
i
++;

1871 } 
lPoöãrs
[
i
][0] !
L
'\0' && i < 
MAX_MULTIPLE_FILES
 );

1872 i‡(
i
 > 
MAX_MULTIPLE_FILES
)

1874 
	`‰ì
(
lBuff
);

1875 
lBuff
 = 
NULL
;

1879 
i
--;

1880 
p
 = 
lBuff
 + 
lFuŒBuffLí
 - 1;

1881 *
p
 = 
L
'\0';

1882 
j
 = 
i
; j >= 0; j--)

1884 
p
 -
lLígths
[
j
];

1885 
	`memmove
(
p
, 
lPoöãrs
[
j
], 
lLígths
[j] * (
wch¨_t
));

1886 
p
--;

1887 *
p
 = 
L
'\\';

1888 
p
 -
lBuffLí
;

1889 
	`memmove
(
p
, 
lBuff
, 
lBuffLí
*(
wch¨_t
));

1890 
p
--;

1891 *
p
 = 
L
'|';

1893 
p
++;

1894 
	`wcs˝y
(
lBuff
, 
p
);

1895 
lBuffLí
 = 
	`wc¶í
(
lBuff
);

1898 i‡(
lBuff
ËlBuf‡(
wch¨_t
*)(
	`ªÆloc
÷Buff, (
lBuffLí
 + 1) * (wchar_t)));

1901 i‡(
lHResu…
 =
S_OK
 ||ÜHResu… =
S_FALSE
)

1903 
	`CoUnöôülize
();

1905  
lBuff
;

1906 
	}
}

1909 * 
	$›íFûeDülogWöGui8
(

1910 c⁄° * 
aTôÀ
,

1911 c⁄° * 
aDeÁu…P©hAndFûe
,

1912 
aNumOfFûãrP©ã∫s
,

1913 c⁄° * c⁄° * 
aFûãrP©ã∫s
,

1914 c⁄° * 
aSögÀFûãrDes¸ùti⁄
,

1915 
aAŒowMu…ùÀSñe˘s
)

1917 
wch¨_t
 
lTôÀ
[128] = 
L
"";

1918 
wch¨_t
 
lDeÁu…P©hAndFûe
[
MAX_PATH_OR_CMD
] = 
L
"";

1919 
wch¨_t
 
lSögÀFûãrDes¸ùti⁄
[128] = 
L
"";

1920 
wch¨_t
 * * 
lFûãrP©ã∫s
;

1921 
wch¨_t
 * 
lTmpWCh¨
;

1922 * 
lTmpCh¨
;

1923 
i
;

1925 
lFûãrP©ã∫s
 = (
wch¨_t
 * *Ë
	`mÆloc
(
aNumOfFûãrP©ã∫s
*(wchar_t *));

1926 
i
 = 0; i < 
aNumOfFûãrP©ã∫s
; i++)

1928 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aFûãrP©ã∫s
[
i
]);

1929 
lFûãrP©ã∫s
[
i
] = (
wch¨_t
 *)
	`mÆloc
((
	`wc¶í
(
lTmpWCh¨
)+1)*(wchar_t *));

1930 
	`wcs˝y
(
lFûãrP©ã∫s
[
i
], 
lTmpWCh¨
);

1933 i‡(
aTôÀ
)

1935 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

1936 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

1938 i‡(
aDeÁu…P©hAndFûe
)

1940 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDeÁu…P©hAndFûe
);

1941 
	`wcs˝y
(
lDeÁu…P©hAndFûe
, 
lTmpWCh¨
);

1943 i‡(
aSögÀFûãrDes¸ùti⁄
)

1945 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aSögÀFûãrDes¸ùti⁄
);

1946 
	`wcs˝y
(
lSögÀFûãrDes¸ùti⁄
, 
lTmpWCh¨
);

1949 
lTmpWCh¨
 = 
	`töyfd_›íFûeDülogW
(

1950 
lTôÀ
,

1951 
lDeÁu…P©hAndFûe
,

1952 
aNumOfFûãrP©ã∫s
,

1953 (
wch¨_t
 const**)

1954 
lFûãrP©ã∫s
,

1955 
lSögÀFûãrDes¸ùti⁄
,

1956 
aAŒowMu…ùÀSñe˘s
);

1958 
i
 = 0; i < 
aNumOfFûãrP©ã∫s
; i++)

1960 
	`‰ì
(
lFûãrP©ã∫s
[
i
]);

1962 
	`‰ì
(
lFûãrP©ã∫s
);

1964 i‡(!
lTmpWCh¨
Ë 
NULL
;

1966 
lTmpCh¨
 = 
	`töyfd_utf16to8
(
lTmpWCh¨
);

1967 (Ë
	`töyfd_›íFûeDülogW
(
NULL
,NULL,0,NULL,NULL,-1);

1969  
lTmpCh¨
;

1970 
	}
}

1973 
BOOL
 
CALLBACK
 
	$Brow£CÆlbackProc_íum
(
HWND
 
hWndChûd
, 
LPARAM
 
lP¨am
)

1975 
buf
[255];

1976 
	`GëCœssNameA
(
hWndChûd
, 
buf
, (buf));

1977 i‡(
	`°rcmp
(
buf
, "SysTreeView32") == 0) {

1978 
HTREEITEM
 
hNode
 = 
	`TªeVõw_GëSñe˘i⁄
(
hWndChûd
);

1979 
	`TªeVõw_EnsuªVisibÀ
(
hWndChûd
, 
hNode
);

1980  
FALSE
;

1982  
TRUE
;

1983 
	}
}

1987 
BOOL
 
CALLBACK
 
	$Brow£CÆlbackProcW_íum
(
HWND
 
hWndChûd
, 
LPARAM
 
lP¨am
)

1989 
wch¨_t
 
buf
[255];

1990 
	`GëCœssNameW
(
hWndChûd
, 
buf
, (buf));

1991 i‡(
	`wcscmp
(
buf
, 
L
"SysTreeView32") == 0) {

1992 
HTREEITEM
 
hNode
 = 
	`TªeVõw_GëSñe˘i⁄
(
hWndChûd
);

1993 
	`TªeVõw_EnsuªVisibÀ
(
hWndChûd
, 
hNode
);

1994  
FALSE
;

1996  
TRUE
;

1997 
	}
}

1999 
__°dˇŒ
 
	$Brow£CÆlbackProc
(
HWND
 
hwnd
, 
UINT
 
uMsg
, 
LPARAM
 
Õ
, LPARAM 
pD©a
)

2001 
uMsg
) {

2002 
BFFM_INITIALIZED
:

2003 
	`SídMesßge
(
hwnd
, 
BFFM_SETSELECTION
, 
TRUE
, 
pD©a
);

2005 
BFFM_SELCHANGED
:

2006 
	`EnumChûdWödows
(
hwnd
, 
Brow£CÆlbackProc_íum
, 0);

2009 
	}
}

2012 
__°dˇŒ
 
	$Brow£CÆlbackProcW
(
HWND
 
hwnd
, 
UINT
 
uMsg
, 
LPARAM
 
Õ
, LPARAM 
pD©a
)

2014 
uMsg
) {

2015 
BFFM_INITIALIZED
:

2016 
	`SídMesßge
(
hwnd
, 
BFFM_SETSELECTIONW
, 
TRUE
, (
LPARAM
)
pD©a
);

2018 
BFFM_SELCHANGED
:

2019 
	`EnumChûdWödows
(
hwnd
, 
Brow£CÆlbackProcW_íum
, 0);

2022 
	}
}

2024 
wch¨_t
 * 
	$töyfd_£À˘FﬁdîDülogW
(

2025 
wch¨_t
 c⁄° * 
aTôÀ
,

2026 
wch¨_t
 c⁄° * 
aDeÁu…P©h
)

2028 
wch¨_t
 
lBuff
[
MAX_PATH_OR_CMD
];

2029 
wch¨_t
 * 
lRëvÆ
;

2031 
BROWSEINFOW
 
bInfo
;

2032 
LPITEMIDLIST
 
ÕIãm
;

2033 
HRESULT
 
lHResu…
;

2035 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "wödows_wch¨");  (
wch¨_t
 *)1; }

2037 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
, 
COINIT_APARTMENTTHREADED
);

2039 
bInfo
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

2040 
bInfo
.
pidlRoŸ
 = 
NULL
;

2041 
bInfo
.
pszDi•œyName
 = 
lBuff
;

2042 
bInfo
.
ÕszTôÀ
 = 
aTôÀ
 && 
	`wc¶í
◊TôÀË?áTôÀ : 
NULL
;

2043 i‡(
lHResu…
 =
S_OK
 ||ÜHResu… =
S_FALSE
)

2045 
bInfo
.
ulFœgs
 = 
BIF_USENEWUI
;

2047 
bInfo
.
Õ‚
 = 
Brow£CÆlbackProcW
;

2048 
bInfo
.
lP¨am
 = (
LPARAM
)
aDeÁu…P©h
;

2049 
bInfo
.
iImage
 = -1;

2051 
ÕIãm
 = 
	`SHBrow£F‹FﬁdîW
(&
bInfo
);

2052 i‡(!
ÕIãm
)

2054 
lRëvÆ
 = 
NULL
;

2058 
	`SHGëP©hFromIDLi°W
(
ÕIãm
, 
lBuff
);

2059 
lRëvÆ
 = 
lBuff
 ;

2062 i‡(
lHResu…
 =
S_OK
 ||ÜHResu… =
S_FALSE
)

2064 
	`CoUnöôülize
();

2066  
lRëvÆ
;

2067 
	}
}

2070 * 
	$£À˘FﬁdîDülogWöGui8
(

2071 * 
aoBuff
 ,

2072 c⁄° * 
aTôÀ
 ,

2073 c⁄° * 
aDeÁu…P©h
 )

2075 
wch¨_t
 
lTôÀ
 [128] = 
L
"";

2076 
wch¨_t
 
lDeÁu…P©h
[
MAX_PATH_OR_CMD
] = 
L
"";

2077 
wch¨_t
 * 
lTmpWCh¨
;

2078 * 
lTmpCh¨
;

2080 i‡(
aTôÀ
)

2082 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

2083 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

2085 i‡(
aDeÁu…P©h
)

2087 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDeÁu…P©h
);

2088 
	`wcs˝y
(
lDeÁu…P©h
, 
lTmpWCh¨
);

2091 
lTmpWCh¨
 = 
	`töyfd_£À˘FﬁdîDülogW
(

2092 
lTôÀ
,

2093 
lDeÁu…P©h
);

2095 i‡(!
lTmpWCh¨
)

2097  
NULL
;

2100 
lTmpCh¨
 = 
	`töyfd_utf16to8
(
lTmpWCh¨
);

2101 
	`°r˝y
(
aoBuff
, 
lTmpCh¨
);

2103  
aoBuff
;

2104 
	}
}

2107 
wch¨_t
 * 
	$töyfd_cﬁ‹Choo£rW
(

2108 
wch¨_t
 c⁄° * 
aTôÀ
,

2109 
wch¨_t
 c⁄° * 
aDeÁu…HexRGB
,

2110 c⁄° 
aDeÁu…RGB
[3],

2111 
aoResu…RGB
[3])

2113 
wch¨_t
 
lResu…HexRGB
[8];

2114 
CHOOSECOLORW
 
cc
;

2115 
COLORREF
 
¸Cu°Cﬁ‹s
[16];

2116 
lDeÁu…RGB
[3];

2117 
lRë
;

2119 
HRESULT
 
lHResu…
;

2121 i‡(
aTôÀ
&&!
	`wcscmp
◊TôÀ, 
L
"töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "wödows_wch¨");  (
wch¨_t
 *)1; }

2123 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
, 0);

2125 i‡–
aDeÁu…HexRGB
 )

2127 
	`Hex2RGBW
(
aDeÁu…HexRGB
, 
lDeÁu…RGB
);

2131 
lDeÁu…RGB
[0] = 
aDeÁu…RGB
[0];

2132 
lDeÁu…RGB
[1] = 
aDeÁu…RGB
[1];

2133 
lDeÁu…RGB
[2] = 
aDeÁu…RGB
[2];

2137 
cc
.
lSåu˘Size
 = (
CHOOSECOLOR
);

2138 
cc
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

2139 
cc
.
hIn°™˚
 = 
NULL
;

2140 
cc
.
rgbResu…
 = 
	`RGB
(
lDeÁu…RGB
[0],ÜDefaultRGB[1],ÜDefaultRGB[2]);

2141 
cc
.
ÕCu°Cﬁ‹s
 = 
¸Cu°Cﬁ‹s
;

2142 
cc
.
Fœgs
 = 
CC_RGBINIT
 | 
CC_FULLOPEN
 | 
CC_ANYCOLOR
 ;

2143 
cc
.
lCu°D©a
 = 0;

2144 
cc
.
Õ‚Hook
 = 
NULL
;

2145 
cc
.
ÕTem∂©eName
 = 
NULL
;

2147 
lRë
 = 
	`Choo£Cﬁ‹W
(&
cc
);

2149 i‡(!
lRë
)

2151  
NULL
;

2154 
aoResu…RGB
[0] = 
	`GëRVÆue
(
cc
.
rgbResu…
);

2155 
aoResu…RGB
[1] = 
	`GëGVÆue
(
cc
.
rgbResu…
);

2156 
aoResu…RGB
[2] = 
	`GëBVÆue
(
cc
.
rgbResu…
);

2158 
	`RGB2HexW
(
aoResu…RGB
, 
lResu…HexRGB
);

2160 i‡(
lHResu…
 =
S_OK
 ||ÜHResu… =
S_FALSE
)

2162 
	`CoUnöôülize
();

2165  
lResu…HexRGB
;

2166 
	}
}

2169 * 
	$cﬁ‹Choo£rWöGui8
(

2170 c⁄° * 
aTôÀ
,

2171 c⁄° * 
aDeÁu…HexRGB
,

2172 c⁄° 
aDeÁu…RGB
[3],

2173 
aoResu…RGB
[3])

2175 
lResu…HexRGB
[8];

2177 
wch¨_t
 
lTôÀ
[128];

2178 
wch¨_t
 
lDeÁu…HexRGB
[16];

2179 
wch¨_t
 * 
lTmpWCh¨
;

2180 * 
lTmpCh¨
;

2182 i‡(
aTôÀ
)

2184 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aTôÀ
);

2185 
	`wcs˝y
(
lTôÀ
, 
lTmpWCh¨
);

2187 i‡(
aDeÁu…HexRGB
)

2189 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aDeÁu…HexRGB
);

2190 
	`wcs˝y
(
lDeÁu…HexRGB
, 
lTmpWCh¨
);

2193 
lTmpWCh¨
 = 
	`töyfd_cﬁ‹Choo£rW
(

2194 
lTôÀ
,

2195 
lDeÁu…HexRGB
,

2196 
aDeÁu…RGB
,

2197 
aoResu…RGB
 );

2199 i‡(!
lTmpWCh¨
)

2201  
NULL
;

2204 
lTmpCh¨
 = 
	`töyfd_utf16to8
(
lTmpWCh¨
);

2205 
	`°r˝y
(
lResu…HexRGB
, 
lTmpCh¨
);

2207  
lResu…HexRGB
;

2208 
	}
}

2211 
	$mesßgeBoxWöGuiA
(

2212 c⁄° * 
aTôÀ
 ,

2213 c⁄° * 
aMesßge
 ,

2214 c⁄° * 
aDülogTy≥
 ,

2215 c⁄° * 
aIc⁄Ty≥
 ,

2216 
aDeÁu…Buâ⁄
 )

2218 
lBoxRëu∫VÆue
;

2219 
UINT
 
aCode
 ;

2221 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "warning" ,áIconType ) )

2223 
aCode
 = 
MB_ICONWARNING
 ;

2225 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
("error",áIconType))

2227 
aCode
 = 
MB_ICONERROR
 ;

2229 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
("question",áIconType))

2231 
aCode
 = 
MB_ICONQUESTION
 ;

2235 
aCode
 = 
MB_ICONINFORMATION
 ;

2238 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

2240 
aCode
 +
MB_OKCANCEL
 ;

2241 i‡–! 
aDeÁu…Buâ⁄
 )

2243 
aCode
 +
MB_DEFBUTTON2
 ;

2246 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

2248 
aCode
 +
MB_YESNO
 ;

2249 i‡–! 
aDeÁu…Buâ⁄
 )

2251 
aCode
 +
MB_DEFBUTTON2
 ;

2254 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

2256 
aCode
 +
MB_YESNOCANCEL
;

2257 i‡(!
aDeÁu…Buâ⁄
)

2259 
aCode
 +
MB_DEFBUTTON3
;

2261 i‡(
aDeÁu…Buâ⁄
 == 2)

2263 
aCode
 +
MB_DEFBUTTON2
;

2268 
aCode
 +
MB_OK
 ;

2271 
aCode
 +
MB_TOPMOST
;

2273 
lBoxRëu∫VÆue
 = 
	`MesßgeBoxA
(
	`GëF‹egroundWödow
(), 
aMesßge
, 
aTôÀ
, 
aCode
);

2275 i‡(((
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

2276 && (
lBoxRëu∫VÆue
 =
IDNO
)))

2281 i‡–––
aDülogTy≥


2282 && 
	`°rcmp
("ye¢oˇn˚l", 
aDülogTy≥
)

2283 && 
	`°rcmp
("okˇn˚l", 
aDülogTy≥
)

2284 && 
	`°rcmp
("ye¢o", 
aDülogTy≥
)))

2285 || (
lBoxRëu∫VÆue
 =
IDOK
)

2286 || (
lBoxRëu∫VÆue
 =
IDYES
) )

2294 
	}
}

2297 * 
	$ßveFûeDülogWöGuiA
(

2298 * 
aoBuff
 ,

2299 c⁄° * 
aTôÀ
 ,

2300 c⁄° * 
aDeÁu…P©hAndFûe
 ,

2301 
aNumOfFûãrP©ã∫s
 ,

2302 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

2303 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 )

2305 
lDú«me
 [
MAX_PATH_OR_CMD
] ;

2306 
lDülogSåög
[
MAX_PATH_OR_CMD
];

2307 
lFûãrP©ã∫s
[
MAX_PATH_OR_CMD
] = "";

2308 
i
 ;

2309 * 
p
;

2310 * 
lRëvÆ
;

2311 
HRESULT
 
lHResu…
;

2312 c⁄° * 
ldefExt
 = 
NULL
;

2313 
OPENFILENAMEA
 
o‚
 = { 0 };

2315 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
,0);

2317 
	`gëP©hWôhoutFöÆSœsh
(
lDú«me
, 
aDeÁu…P©hAndFûe
);

2318 
	`gëLa°Name
(
aoBuff
, 
aDeÁu…P©hAndFûe
);

2320 i‡(
aNumOfFûãrP©ã∫s
 > 0)

2322 
ldefExt
 = 
aFûãrP©ã∫s
[0];

2324 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

2326 
	`°r˝y
(
lFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
);

2327 
	`°rˇt
(
lFûãrP©ã∫s
, "\n");

2329 
	`°rˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[0]);

2330 
i
 = 1; i < 
aNumOfFûãrP©ã∫s
; i++)

2332 
	`°rˇt
(
lFûãrP©ã∫s
, ";");

2333 
	`°rˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[
i
]);

2335 
	`°rˇt
(
lFûãrP©ã∫s
, "\n");

2336 i‡–! (
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) ) )

2338 
	`°r˝y
(
lDülogSåög
, 
lFûãrP©ã∫s
);

2339 
	`°rˇt
(
lFûãrP©ã∫s
, 
lDülogSåög
);

2341 
	`°rˇt
(
lFûãrP©ã∫s
, "All Files\n*.*\n");

2342 
p
 = 
lFûãrP©ã∫s
;

2343 (
p
 = 
	`°rchr
’, '\n')Ë!
NULL
)

2345 *
p
 = '\0';

2346 
p
 ++ ;

2350 
o‚
.
lSåu˘Size
 = (
OPENFILENAME
) ;

2351 
o‚
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

2352 
o‚
.
hIn°™˚
 = 0 ;

2353 
o‚
.
Õ°rFûãr
 = 
	`°æí
(
lFûãrP©ã∫s
Ë?ÜFûãrP©ã∫†: 
NULL
;

2354 
o‚
.
Õ°rCu°omFûãr
 = 
NULL
 ;

2355 
o‚
.
nMaxCu°Fûãr
 = 0 ;

2356 
o‚
.
nFûãrIndex
 = 1 ;

2357 
o‚
.
Õ°rFûe
 = 
aoBuff
;

2359 
o‚
.
nMaxFûe
 = 
MAX_PATH_OR_CMD
 ;

2360 
o‚
.
Õ°rFûeTôÀ
 = 
NULL
 ;

2361 
o‚
.
nMaxFûeTôÀ
 = 
MAX_PATH_OR_CMD
 / 2;

2362 
o‚
.
Õ°rInôülDú
 = 
	`°æí
(
lDú«me
Ë?ÜDú«mê: 
NULL
;

2363 
o‚
.
Õ°rTôÀ
 = 
aTôÀ
 && 
	`°æí
◊TôÀË?áTôÀ : 
NULL
;

2364 
o‚
.
Fœgs
 = 
OFN_OVERWRITEPROMPT
 | 
OFN_NOCHANGEDIR
 ;

2365 
o‚
.
nFûeOff£t
 = 0 ;

2366 
o‚
.
nFûeExãnsi⁄
 = 0 ;

2367 
o‚
.
Õ°rDefExt
 = 
ldefExt
;

2368 
o‚
.
lCu°D©a
 = 0L ;

2369 
o‚
.
Õ‚Hook
 = 
NULL
 ;

2370 
o‚
.
ÕTem∂©eName
 = 
NULL
 ;

2372 i‡–
	`GëSaveFûeNameA
 ( & 
o‚
 ) == 0 )

2374 
lRëvÆ
 = 
NULL
 ;

2378 
lRëvÆ
 = 
aoBuff
 ;

2381 i‡(
lHResu…
==
S_OK
 ||ÜHResu…==
S_FALSE
)

2383 
	`CoUnöôülize
();

2385  
lRëvÆ
 ;

2386 
	}
}

2389 * 
	$›íFûeDülogWöGuiA
(

2390 c⁄° * 
aTôÀ
 ,

2391 c⁄° * 
aDeÁu…P©hAndFûe
 ,

2392 
aNumOfFûãrP©ã∫s
 ,

2393 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

2394 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 ,

2395 
aAŒowMu…ùÀSñe˘s
 )

2397 
lDú«me
 [
MAX_PATH_OR_CMD
] ;

2398 
lFûãrP©ã∫s
[
MAX_PATH_OR_CMD
] = "";

2399 
lDülogSåög
[
MAX_PATH_OR_CMD
] ;

2400 * 
lPoöãrs
[
MAX_MULTIPLE_FILES
+1];

2401 
size_t
 
lLígths
[
MAX_MULTIPLE_FILES
];

2402 
i
 , 
j
 ;

2403 * 
p
;

2404 
size_t
 
lBuffLí
, 
lFuŒBuffLí
;

2405 
HRESULT
 
lHResu…
;

2406 
OPENFILENAMEA
 
o‚
 = {0};

2407 * 
lBuff
 = 
NULL
;

2409 
	`‰ì
(
lBuff
);

2410 
lBuff
 = 
NULL
;

2411 i‡(
aAŒowMu…ùÀSñe˘s
)

2413 
lFuŒBuffLí
 = 
MAX_MULTIPLE_FILES
 * 
MAX_PATH_OR_CMD
 + 1;

2414 
lBuff
 = (*)(
	`mÆloc
(
lFuŒBuffLí
 * ()));

2415 i‡(!
lBuff
)

2417 
lFuŒBuffLí
 = 
LOW_MULTIPLE_FILES
 * 
MAX_PATH_OR_CMD
 + 1;

2418 
lBuff
 = (*)(
	`mÆloc
(
lFuŒBuffLí
 * ()));

2423 
lFuŒBuffLí
 = 
MAX_PATH_OR_CMD
 + 1;

2424 
lBuff
 = (*)(
	`mÆloc
(
lFuŒBuffLí
 * ()));

2426 i‡(!
lBuff
Ë 
NULL
;

2428 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
,0);

2430 
	`gëP©hWôhoutFöÆSœsh
(
lDú«me
, 
aDeÁu…P©hAndFûe
);

2431 
	`gëLa°Name
(
lBuff
, 
aDeÁu…P©hAndFûe
);

2433 i‡(
aNumOfFûãrP©ã∫s
 > 0)

2435 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

2437 
	`°r˝y
(
lFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
);

2438 
	`°rˇt
(
lFûãrP©ã∫s
, "\n");

2440 
	`°rˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[0]);

2441 
i
 = 1; i < 
aNumOfFûãrP©ã∫s
; i++)

2443 
	`°rˇt
(
lFûãrP©ã∫s
, ";");

2444 
	`°rˇt
(
lFûãrP©ã∫s
, 
aFûãrP©ã∫s
[
i
]);

2446 
	`°rˇt
(
lFûãrP©ã∫s
, "\n");

2447 i‡–! (
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) ) )

2449 
	`°r˝y
(
lDülogSåög
, 
lFûãrP©ã∫s
);

2450 
	`°rˇt
(
lFûãrP©ã∫s
, 
lDülogSåög
);

2452 
	`°rˇt
(
lFûãrP©ã∫s
, "All Files\n*.*\n");

2453 
p
 = 
lFûãrP©ã∫s
;

2454 (
p
 = 
	`°rchr
’, '\n')Ë!
NULL
)

2456 *
p
 = '\0';

2457 
p
 ++ ;

2461 
o‚
.
lSåu˘Size
 = –
OPENFILENAME
 ) ;

2462 
o‚
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

2463 
o‚
.
hIn°™˚
 = 0 ;

2464 
o‚
.
Õ°rFûãr
 = 
	`°æí
(
lFûãrP©ã∫s
Ë?ÜFûãrP©ã∫†: 
NULL
;

2465 
o‚
.
Õ°rCu°omFûãr
 = 
NULL
 ;

2466 
o‚
.
nMaxCu°Fûãr
 = 0 ;

2467 
o‚
.
nFûãrIndex
 = 1 ;

2468 
o‚
.
Õ°rFûe
 = 
lBuff
;

2469 
o‚
.
nMaxFûe
 = 
lFuŒBuffLí
;

2470 
o‚
.
Õ°rFûeTôÀ
 = 
NULL
 ;

2471 
o‚
.
nMaxFûeTôÀ
 = 
MAX_PATH_OR_CMD
 / 2;

2472 
o‚
.
Õ°rInôülDú
 = 
	`°æí
(
lDú«me
Ë?ÜDú«mê: 
NULL
;

2473 
o‚
.
Õ°rTôÀ
 = 
aTôÀ
 && 
	`°æí
◊TôÀË?áTôÀ : 
NULL
;

2474 
o‚
.
Fœgs
 = 
OFN_EXPLORER
 | 
OFN_NOCHANGEDIR
 ;

2475 
o‚
.
nFûeOff£t
 = 0 ;

2476 
o‚
.
nFûeExãnsi⁄
 = 0 ;

2477 
o‚
.
Õ°rDefExt
 = 
NULL
 ;

2478 
o‚
.
lCu°D©a
 = 0L ;

2479 
o‚
.
Õ‚Hook
 = 
NULL
 ;

2480 
o‚
.
ÕTem∂©eName
 = 
NULL
 ;

2482 i‡–
aAŒowMu…ùÀSñe˘s
 )

2484 
o‚
.
Fœgs
 |
OFN_ALLOWMULTISELECT
;

2487 i‡–
	`GëO≥nFûeNameA
–& 
o‚
 ) == 0 )

2489 
	`‰ì
(
lBuff
);

2490 
lBuff
 = 
NULL
 ;

2494 
lBuffLí
 = 
	`°æí
(
lBuff
);

2495 
lPoöãrs
[0] = 
lBuff
 + 
lBuffLí
 + 1;

2496 i‡–
aAŒowMu…ùÀSñe˘s
 && (
lPoöãrs
[0][0] != '\0') )

2498 
i
 = 0 ;

2501 
lLígths
[
i
] = 
	`°æí
(
lPoöãrs
[i]);

2502 
lPoöãrs
[
i
+1] =ÜPoöãrs[i] + 
lLígths
[i] + 1 ;

2503 
i
 ++ ;

2504 } 
lPoöãrs
[
i
][0] !
L
'\0' && i < 
MAX_MULTIPLE_FILES
);

2505 i‡(
i
 > 
MAX_MULTIPLE_FILES
)

2507 
	`‰ì
(
lBuff
);

2508 
lBuff
 = 
NULL
;

2512 
i
--;

2513 
p
 = 
lBuff
 + 
MAX_MULTIPLE_FILES
*
MAX_PATH_OR_CMD
 - 1;

2514 *
p
 = '\0';

2515 
j
 = 
i
; j >= 0; j--)

2517 
p
 -
lLígths
[
j
];

2518 
	`memmove
(
p
, 
lPoöãrs
[
j
], 
lLígths
[j]);

2519 
p
--;

2520 *
p
 = '\\';

2521 
p
 -
lBuffLí
;

2522 
	`memmove
(
p
, 
lBuff
, 
lBuffLí
);

2523 
p
--;

2524 *
p
 = '|';

2526 
p
++;

2527 
	`°r˝y
(
lBuff
, 
p
);

2528 
lBuffLí
 = 
	`°æí
(
lBuff
);

2531 i‡(
lBuff
ËlBuf‡(*)(
	`ªÆloc
÷Buff, (
lBuffLí
 + 1) * ()));

2534 i‡(
lHResu…
==
S_OK
 ||ÜHResu…==
S_FALSE
)

2536 
	`CoUnöôülize
();

2538  
lBuff
;

2539 
	}
}

2542 * 
	$£À˘FﬁdîDülogWöGuiA
(

2543 * 
aoBuff
 ,

2544 c⁄° * 
aTôÀ
 ,

2545 c⁄° * 
aDeÁu…P©h
 )

2547 
BROWSEINFOA
 
bInfo
 ;

2548 
LPITEMIDLIST
 
ÕIãm
 ;

2549 
HRESULT
 
lHResu…
 ;

2550 * 
lRëvÆ
 = 
NULL
 ;

2552 
lHResu…
 = 
	`CoInôülizeEx
(
NULL
, 
COINIT_APARTMENTTHREADED
);

2555 
bInfo
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

2556 
bInfo
.
pidlRoŸ
 = 
NULL
 ;

2557 
bInfo
.
pszDi•œyName
 = 
aoBuff
 ;

2558 
bInfo
.
ÕszTôÀ
 = 
aTôÀ
 && 
	`°æí
◊TôÀË?áTôÀ : 
NULL
;

2559 i‡(
lHResu…
 =
S_OK
 ||ÜHResu… =
S_FALSE
)

2561 
bInfo
.
ulFœgs
 = 
BIF_USENEWUI
;

2563 
bInfo
.
Õ‚
 = 
Brow£CÆlbackProc
;

2564 
bInfo
.
lP¨am
 = (
LPARAM
)
aDeÁu…P©h
;

2565 
bInfo
.
iImage
 = -1 ;

2567 
ÕIãm
 = 
	`SHBrow£F‹FﬁdîA
–& 
bInfo
 ) ;

2568 i‡–
ÕIãm
 )

2570 
	`SHGëP©hFromIDLi°A
–
ÕIãm
 , 
aoBuff
 ) ;

2571 
lRëvÆ
 = 
aoBuff
;

2574 i‡(
lHResu…
==
S_OK
 ||ÜHResu…==
S_FALSE
)

2576 
	`CoUnöôülize
();

2578  
lRëvÆ
;

2579 
	}
}

2582 * 
	$cﬁ‹Choo£rWöGuiA
(

2583 c⁄° * 
aTôÀ
,

2584 c⁄° * 
aDeÁu…HexRGB
,

2585 c⁄° 
aDeÁu…RGB
[3],

2586 
aoResu…RGB
[3])

2588 
lResu…HexRGB
[8];

2590 
CHOOSECOLORA
 
cc
;

2591 
COLORREF
 
¸Cu°Cﬁ‹s
[16];

2592 
lDeÁu…RGB
[3];

2593 
lRë
;

2595 i‡–
aDeÁu…HexRGB
 )

2597 
	`Hex2RGB
(
aDeÁu…HexRGB
, 
lDeÁu…RGB
);

2601 
lDeÁu…RGB
[0]=
aDeÁu…RGB
[0];

2602 
lDeÁu…RGB
[1]=
aDeÁu…RGB
[1];

2603 
lDeÁu…RGB
[2]=
aDeÁu…RGB
[2];

2607 
cc
.
lSåu˘Size
 = –
CHOOSECOLOR
 ) ;

2608 
cc
.
hwndOw√r
 = 
	`GëF‹egroundWödow
();

2609 
cc
.
hIn°™˚
 = 
NULL
 ;

2610 
cc
.
rgbResu…
 = 
	`RGB
(
lDeÁu…RGB
[0],ÜDefaultRGB[1],ÜDefaultRGB[2]);

2611 
cc
.
ÕCu°Cﬁ‹s
 = 
¸Cu°Cﬁ‹s
;

2612 
cc
.
Fœgs
 = 
CC_RGBINIT
 | 
CC_FULLOPEN
;

2613 
cc
.
lCu°D©a
 = 0;

2614 
cc
.
Õ‚Hook
 = 
NULL
;

2615 
cc
.
ÕTem∂©eName
 = 
NULL
;

2617 
lRë
 = 
	`Choo£Cﬁ‹A
(&
cc
);

2619 i‡–! 
lRë
 )

2621  
NULL
;

2624 
aoResu…RGB
[0] = 
	`GëRVÆue
(
cc
.
rgbResu…
);

2625 
aoResu…RGB
[1] = 
	`GëGVÆue
(
cc
.
rgbResu…
);

2626 
aoResu…RGB
[2] = 
	`GëBVÆue
(
cc
.
rgbResu…
);

2628 
	`RGB2Hex
(
aoResu…RGB
, 
lResu…HexRGB
);

2630  
lResu…HexRGB
;

2631 
	}
}

2635 
	$dülogPª£¡
()

2637 
lDülogPª£¡
 = -1 ;

2638 
lBuff
 [
MAX_PATH_OR_CMD
] ;

2639 
FILE
 * 
lIn
 ;

2640 c⁄° * 
lSåög
 = "dialog.exe";

2641 i‡(!
töyfd_ÆlowCur£sDülogs
)  0;

2642 i‡(
lDülogPª£¡
 < 0)

2644 i‡(!(
lIn
 = 
	`_p›í
("where dialog.exe","r")))

2646 
lDülogPª£¡
 = 0 ;

2649  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

2651 
	`_p˛o£
–
lIn
 ) ;

2652 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

2654 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

2656 i‡–
	`°rcmp
(
lBuff
+
	`°æí
÷Buff)-°æí(
lSåög
),lString) )

2658 
lDülogPª£¡
 = 0 ;

2662 
lDülogPª£¡
 = 1 ;

2665  
lDülogPª£¡
;

2666 
	}
}

2669 
	$mesßgeBoxWöC⁄sﬁe
(

2670 c⁄° * 
aTôÀ
 ,

2671 c⁄° * 
aMesßge
 ,

2672 c⁄° * 
aDülogTy≥
 ,

2673 c⁄° * 
aIc⁄Ty≥
 ,

2674 
aDeÁu…Buâ⁄
 )

2676 
lDülogSåög
[
MAX_PATH_OR_CMD
];

2677 
lDülogFûe
[
MAX_PATH_OR_CMD
];

2678 
FILE
 * 
lIn
;

2679 
lBuff
 [
MAX_PATH_OR_CMD
] = "";

2681 
	`°r˝y
(
lDülogSåög
, "dialog ");

2682 i‡(
aTôÀ
 && 
	`°æí
(aTitle))

2684 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

2685 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

2686 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2689 i‡–
aDülogTy≥
 && ( !
	`°rcmp
( "okcancel" ,áDialogType )

2690 || !
	`°rcmp
("ye¢o", 
aDülogTy≥
) || !strcmp("yesnocancel",áDialogType) ) )

2692 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

2693 
	`°rˇt
(
lDülogSåög
, "tab: move focus") ;

2694 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2697 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

2699 i‡–! 
aDeÁu…Buâ⁄
 )

2701 
	`°rˇt
–
lDülogSåög
 , "--defaultno " ) ;

2703 
	`°rˇt
–
lDülogSåög
 ,

2706 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

2708 i‡–! 
aDeÁu…Buâ⁄
 )

2710 
	`°rˇt
–
lDülogSåög
 , "--defaultno " ) ;

2712 
	`°rˇt
–
lDülogSåög
 , "--yesno " ) ;

2714 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

2716 i‡(!
aDeÁu…Buâ⁄
)

2718 
	`°rˇt
(
lDülogSåög
, "--defaultno ");

2720 
	`°rˇt
(
lDülogSåög
, "--menu ");

2724 
	`°rˇt
–
lDülogSåög
 , "--msgbox " ) ;

2727 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

2728 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

2730 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
lBuff
 ) ;

2731 
	`°rˇt
(
lDülogSåög
, 
lBuff
) ;

2732 
lBuff
[0]='\0';

2734 
	`°rˇt
(
lDülogSåög
, "\" ");

2736 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

2738 
	`°rˇt
(
lDülogSåög
, "0 60 0 Yes \"\" No \"\"");

2739 
	`°rˇt
(
lDülogSåög
, "2>>");

2743 
	`°rˇt
(
lDülogSåög
, "10 60");

2744 
	`°rˇt
(
lDülogSåög
, " &&Écho 1 > ");

2747 
	`°r˝y
(
lDülogFûe
, 
	`gëív
("USERPROFILE"));

2748 
	`°rˇt
(
lDülogFûe
, "\\AppData\\Local\\Temp\\tinyfd.txt");

2749 
	`°rˇt
(
lDülogSåög
, 
lDülogFûe
);

2752 
	`sy°em
–
lDülogSåög
 ) ;

2754 i‡(!(
lIn
 = 
	`f›í
(
lDülogFûe
, "r")))

2756 
	`ªmove
(
lDülogFûe
);

2759 
	`fgës
(
lBuff
, ÷Buff), 
lIn
Ë!
NULL
)

2761 
	`f˛o£
(
lIn
);

2762 
	`ªmove
(
lDülogFûe
);

2763 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

2765 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

2769 i‡–! 
	`°æí
(
lBuff
) )

2774 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

2776 i‡(
lBuff
[0] == 'Y')  1;

2781 
	}
}

2784 
	$öputBoxWöC⁄sﬁe
(

2785 * 
aoBuff
 ,

2786 c⁄° * 
aTôÀ
 ,

2787 c⁄° * 
aMesßge
 ,

2788 c⁄° * 
aDeÁu…I≈ut
 )

2790 
lDülogSåög
[
MAX_PATH_OR_CMD
];

2791 
lDülogFûe
[
MAX_PATH_OR_CMD
];

2792 
FILE
 * 
lIn
;

2793 
lResu…
;

2795 
	`°r˝y
(
lDülogFûe
, 
	`gëív
("USERPROFILE"));

2796 
	`°rˇt
(
lDülogFûe
, "\\AppData\\Local\\Temp\\tinyfd.txt");

2797 
	`°r˝y
(
lDülogSåög
 , "echo|set /p=1 >" ) ;

2798 
	`°rˇt
(
lDülogSåög
, 
lDülogFûe
);

2799 
	`°rˇt
–
lDülogSåög
 , " & " ) ;

2801 
	`°rˇt
–
lDülogSåög
 , "dialog " ) ;

2802 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

2804 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

2805 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

2806 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2809 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

2810 
	`°rˇt
(
lDülogSåög
, "tab: move focus") ;

2811 i‡–! 
aDeÁu…I≈ut
 )

2813 
	`°rˇt
(
lDülogSåög
, " (sometimesÇothing,Ço blinkÇor star, is shown inÅext field)") ;

2816 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2818 i‡–! 
aDeÁu…I≈ut
 )

2820 
	`°rˇt
–
lDülogSåög
 , "--insecure --passwordbox" ) ;

2824 
	`°rˇt
–
lDülogSåög
 , "--inputbox" ) ;

2826 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

2827 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

2829 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

2831 
	`°rˇt
(
lDülogSåög
,"\" 10 60 ") ;

2832 i‡–
aDeÁu…I≈ut
 && 
	`°æí
(aDefaultInput) )

2834 
	`°rˇt
(
lDülogSåög
, "\"") ;

2835 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
) ;

2836 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2839 
	`°rˇt
(
lDülogSåög
, "2>>");

2840 
	`°r˝y
(
lDülogFûe
, 
	`gëív
("USERPROFILE"));

2841 
	`°rˇt
(
lDülogFûe
, "\\AppData\\Local\\Temp\\tinyfd.txt");

2842 
	`°rˇt
(
lDülogSåög
, 
lDülogFûe
);

2843 
	`°rˇt
(
lDülogSåög
, " ||Écho 0 > ");

2844 
	`°rˇt
(
lDülogSåög
, 
lDülogFûe
);

2847 
	`sy°em
–
lDülogSåög
 ) ;

2849 i‡(!(
lIn
 = 
	`f›í
(
lDülogFûe
, "r")))

2851 
	`ªmove
(
lDülogFûe
);

2852 
aoBuff
[0] = '\0';

2855 
	`fgës
(
aoBuff
, 
MAX_PATH_OR_CMD
, 
lIn
Ë!
NULL
)

2857 
	`f˛o£
(
lIn
);

2859 
	`wùefûe
(
lDülogFûe
);

2860 
	`ªmove
(
lDülogFûe
);

2861 i‡–
aoBuff
[
	`°æí
(áoBuff ) -1] == '\n' )

2863 
aoBuff
[
	`°æí
(áoBuff ) -1] = '\0' ;

2868 
lResu…
 = 
	`°∫cmp
–
aoBuff
 , "1" , 1) ? 0 : 1 ;

2870 i‡–! 
lResu…
 )

2872 
aoBuff
[0] = '\0';

2876 
	`°r˝y
(
aoBuff
,áoBuff+3);

2878 
	}
}

2881 * 
	$ßveFûeDülogWöC⁄sﬁe
(

2882 * 
aoBuff
 ,

2883 c⁄° * 
aTôÀ
 ,

2884 c⁄° * 
aDeÁu…P©hAndFûe
 )

2886 
lDülogSåög
[
MAX_PATH_OR_CMD
];

2887 
lP©hAndFûe
[
MAX_PATH_OR_CMD
] = "";

2888 
FILE
 * 
lIn
;

2890 
	`°r˝y
–
lDülogSåög
 , "dialog " ) ;

2891 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

2893 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

2894 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

2895 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2898 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

2899 
	`°rˇt
(
lDülogSåög
,

2901 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2903 
	`°rˇt
–
lDülogSåög
 , "--fselect \"" ) ;

2904 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

2907 
	`°r˝y
(
lP©hAndFûe
, 
aDeÁu…P©hAndFûe
);

2908 
	`ª∂a˚Chr
–
lP©hAndFûe
 , '\\' , '/' ) ;

2912 i‡–! 
	`°rchr
(
lP©hAndFûe
, '/') )

2914 
	`°rˇt
(
lDülogSåög
, "./") ;

2916 
	`°rˇt
(
lDülogSåög
, 
lP©hAndFûe
) ;

2917 
	`°rˇt
(
lDülogSåög
, "\" 0 60 2>");

2918 
	`°r˝y
(
lP©hAndFûe
, 
	`gëív
("USERPROFILE"));

2919 
	`°rˇt
(
lP©hAndFûe
, "\\AppData\\Local\\Temp\\tinyfd.txt");

2920 
	`°rˇt
(
lDülogSåög
, 
lP©hAndFûe
);

2923 
	`sy°em
–
lDülogSåög
 ) ;

2925 i‡(!(
lIn
 = 
	`f›í
(
lP©hAndFûe
, "r")))

2927 
	`ªmove
(
lP©hAndFûe
);

2928  
NULL
;

2930 
	`fgës
(
aoBuff
, 
MAX_PATH_OR_CMD
, 
lIn
Ë!
NULL
)

2932 
	`f˛o£
(
lIn
);

2933 
	`ªmove
(
lP©hAndFûe
);

2934 
	`ª∂a˚Chr
–
aoBuff
 , '/' , '\\' ) ;

2936 
	`gëLa°Name
(
lDülogSåög
,
aoBuff
);

2937 i‡–! 
	`°æí
(
lDülogSåög
) )

2939  
NULL
;

2941  
aoBuff
;

2942 
	}
}

2945 * 
	$›íFûeDülogWöC⁄sﬁe
(

2946 c⁄° * 
aTôÀ
 ,

2947 c⁄° * 
aDeÁu…P©hAndFûe
 )

2949 
lFûãrP©ã∫s
[
MAX_PATH_OR_CMD
] = "";

2950 
lDülogSåög
[
MAX_PATH_OR_CMD
] ;

2951 
FILE
 * 
lIn
;

2953 
aoBuff
[
MAX_PATH_OR_CMD
];

2955 
	`°r˝y
–
lDülogSåög
 , "dialog " ) ;

2956 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

2958 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

2959 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

2960 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2963 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

2964 
	`°rˇt
(
lDülogSåög
,

2966 
	`°rˇt
(
lDülogSåög
, "\" ") ;

2968 
	`°rˇt
–
lDülogSåög
 , "--fselect \"" ) ;

2969 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

2972 
	`°r˝y
(
lFûãrP©ã∫s
, 
aDeÁu…P©hAndFûe
);

2973 
	`ª∂a˚Chr
–
lFûãrP©ã∫s
 , '\\' , '/' ) ;

2977 i‡–! 
	`°rchr
(
lFûãrP©ã∫s
, '/') )

2979 
	`°rˇt
(
lDülogSåög
, "./") ;

2981 
	`°rˇt
(
lDülogSåög
, 
lFûãrP©ã∫s
) ;

2982 
	`°rˇt
(
lDülogSåög
, "\" 0 60 2>");

2983 
	`°r˝y
(
lFûãrP©ã∫s
, 
	`gëív
("USERPROFILE"));

2984 
	`°rˇt
(
lFûãrP©ã∫s
, "\\AppData\\Local\\Temp\\tinyfd.txt");

2985 
	`°rˇt
(
lDülogSåög
, 
lFûãrP©ã∫s
);

2988 
	`sy°em
–
lDülogSåög
 ) ;

2990 i‡(!(
lIn
 = 
	`f›í
(
lFûãrP©ã∫s
, "r")))

2992 
	`ªmove
(
lFûãrP©ã∫s
);

2993  
NULL
;

2995 
	`fgës
(
aoBuff
, 
MAX_PATH_OR_CMD
, 
lIn
Ë!
NULL
)

2997 
	`f˛o£
(
lIn
);

2998 
	`ªmove
(
lFûãrP©ã∫s
);

2999 
	`ª∂a˚Chr
–
aoBuff
 , '/' , '\\' ) ;

3001  
aoBuff
;

3002 
	}
}

3005 * 
	$£À˘FﬁdîDülogWöC⁄sﬁe
(

3006 * 
aoBuff
 ,

3007 c⁄° * 
aTôÀ
 ,

3008 c⁄° * 
aDeÁu…P©h
 )

3010 
lDülogSåög
 [
MAX_PATH_OR_CMD
] ;

3011 
lSåög
 [
MAX_PATH_OR_CMD
] ;

3012 
FILE
 * 
lIn
 ;

3014 
	`°r˝y
–
lDülogSåög
 , "dialog " ) ;

3015 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

3017 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

3018 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

3019 
	`°rˇt
(
lDülogSåög
, "\" ") ;

3022 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

3023 
	`°rˇt
(
lDülogSåög
,

3025 
	`°rˇt
(
lDülogSåög
, "\" ") ;

3027 
	`°rˇt
–
lDülogSåög
 , "--dselect \"" ) ;

3028 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

3031 
	`°r˝y
(
lSåög
, 
aDeÁu…P©h
) ;

3032 
	`ísuªFöÆSœsh
(
lSåög
);

3033 
	`ª∂a˚Chr
–
lSåög
 , '\\' , '/' ) ;

3034 
	`°rˇt
(
lDülogSåög
, 
lSåög
) ;

3039 
	`°rˇt
(
lDülogSåög
, "./") ;

3041 
	`°rˇt
(
lDülogSåög
, "\" 0 60 2>");

3042 
	`°r˝y
(
lSåög
, 
	`gëív
("USERPROFILE"));

3043 
	`°rˇt
(
lSåög
, "\\AppData\\Local\\Temp\\tinyfd.txt");

3044 
	`°rˇt
(
lDülogSåög
, 
lSåög
);

3047 
	`sy°em
–
lDülogSåög
 ) ;

3049 i‡(!(
lIn
 = 
	`f›í
(
lSåög
, "r")))

3051 
	`ªmove
(
lSåög
);

3052  
NULL
;

3054 
	`fgës
(
aoBuff
, 
MAX_PATH_OR_CMD
, 
lIn
Ë!
NULL
)

3056 
	`f˛o£
(
lIn
);

3057 
	`ªmove
(
lSåög
);

3058 
	`ª∂a˚Chr
–
aoBuff
 , '/' , '\\' ) ;

3060  
aoBuff
;

3061 
	}
}

3063 
	$wrôeUtf8
–c⁄° * 
aUtf8Såög
 )

3065 
lNum
;

3066 * 
lC⁄sﬁeH™dÀ
;

3067 
wch¨_t
 * 
lTmpWCh¨
;

3069 
lC⁄sﬁeH™dÀ
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

3070 
lTmpWCh¨
 = 
	`töyfd_utf8to16
(
aUtf8Såög
);

3071 ()
	`WrôeC⁄sﬁeW
(
lC⁄sﬁeH™dÀ
, 
lTmpWCh¨
, 
	`wc¶í
÷TmpWCh¨), &
lNum
, 
NULL
);

3072 
	}
}

3075 
	$töyfd_mesßgeBox
(

3076 c⁄° * 
aTôÀ
 ,

3077 c⁄° * 
aMesßge
 ,

3078 c⁄° * 
aDülogTy≥
 ,

3079 c⁄° * 
aIc⁄Ty≥
 ,

3080 
aDeÁu…Buâ⁄
 )

3082 
lCh¨
 ;

3083 
UINT
 
lOrigöÆCP
;

3084 
UINT
 
lOrigöÆOuçutCP
;

3086 #i‚de‡
TINYFD_NOLIB


3087 i‡((!
töyfd_f‹˚C⁄sﬁe
 || !(
	`GëC⁄sﬁeWödow
(Ë|| 
	`dülogPª£¡
()))

3088 && (!
	`gëív
("SSH_CLIENT") || getenv("DISPLAY")))

3090 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "windows");  1; }

3091 i‡(
töyfd_wöUtf8
)

3093  
	`mesßgeBoxWöGui8
(

3094 
aTôÀ
, 
aMesßge
, 
aDülogTy≥
, 
aIc⁄Ty≥
, 
aDeÁu…Buâ⁄
);

3098  
	`mesßgeBoxWöGuiA
(

3099 
aTôÀ
, 
aMesßge
, 
aDülogTy≥
, 
aIc⁄Ty≥
, 
aDeÁu…Buâ⁄
);

3104 i‡–
	`dülogPª£¡
() )

3106 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); 0;}

3107  
	`mesßgeBoxWöC⁄sﬁe
(

3108 
aTôÀ
,
aMesßge
,
aDülogTy≥
,
aIc⁄Ty≥
,
aDeÁu…Buâ⁄
);

3112 i‡(!
töyfd_wöUtf8
)

3114 
lOrigöÆCP
 = 
	`GëC⁄sﬁeCP
();

3115 
lOrigöÆOuçutCP
 = 
	`GëC⁄sﬁeOuçutCP
();

3116 ()
	`SëC⁄sﬁeCP
(
	`GëACP
());

3117 ()
	`SëC⁄sﬁeOuçutCP
(
	`GëACP
());

3120 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"basicinput"); 0;}

3121 i‡(!
gW¨nögDi•œyed
 && !
töyfd_f‹˚C⁄sﬁe
 )

3123 
gW¨nögDi•œyed
 = 1;

3124 
	`¥ötf
("\n\n%s\n", 
gTôÀ
);

3125 
	`¥ötf
("%s\n\n", 
töyfd_√eds
);

3128 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

3130 
	`¥ötf
("\n");

3131 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aTôÀ
);

3132 
	`¥ötf
("%s", 
aTôÀ
);

3133 
	`¥ötf
("\n\n");

3135 i‡–
aDülogTy≥
 && !
	`°rcmp
("yesno",aDialogType) )

3139 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

3141 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aMesßge
);

3142 
	`¥ötf
("%s",
aMesßge
);

3143 
	`¥ötf
("\n");

3145 
	`¥ötf
("y/n: ");

3146 
lCh¨
 = (Ë
	`tﬁowî
–
	`_gëch
() ) ;

3147 
	`¥ötf
("\n\n");

3149  
lCh¨
 != 'y' &&ÜChar != 'n' ) ;

3150 i‡(!
töyfd_wöUtf8
Ë{ ()
	`SëC⁄sﬁeCP
(
lOrigöÆCP
); ()
	`SëC⁄sﬁeOuçutCP
(
lOrigöÆOuçutCP
); }

3151  
lCh¨
 == 'y' ? 1 : 0 ;

3153 i‡–
aDülogTy≥
 && !
	`°rcmp
("okcancel",aDialogType) )

3157 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

3159 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aMesßge
);

3160 
	`¥ötf
("%s", 
aMesßge
);

3161 
	`¥ötf
("\n");

3163 
	`¥ötf
("[O]kay/[C]ancel: ");

3164 
lCh¨
 = (Ë
	`tﬁowî
–
	`_gëch
() ) ;

3165 
	`¥ötf
("\n\n");

3167  
lCh¨
 != 'o' &&ÜChar != 'c' ) ;

3168 i‡(!
töyfd_wöUtf8
Ë{ ()
	`SëC⁄sﬁeCP
(
lOrigöÆCP
); ()
	`SëC⁄sﬁeOuçutCP
(
lOrigöÆOuçutCP
); }

3169  
lCh¨
 == 'o' ? 1 : 0 ;

3171 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

3175 i‡(
aMesßge
 && 
	`°æí
(aMessage))

3177 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aMesßge
);

3178 
	`¥ötf
("%s", 
aMesßge
);

3179 
	`¥ötf
("\n");

3181 
	`¥ötf
("[Y]es/[N]o/[C]ancel: ");

3182 
lCh¨
 = ()
	`tﬁowî
(
	`_gëch
());

3183 
	`¥ötf
("\n\n");

3184 } 
lCh¨
 != 'y' &&ÜChar != 'n' &&ÜChar != 'c');

3185 i‡(!
töyfd_wöUtf8
Ë{ ()
	`SëC⁄sﬁeCP
(
lOrigöÆCP
); ()
	`SëC⁄sﬁeOuçutCP
(
lOrigöÆOuçutCP
); }

3186  (
lCh¨
 == 'y') ? 1 : (lChar == 'n') ? 2 : 0 ;

3190 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

3192 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aMesßge
);

3193 
	`¥ötf
("%s", 
aMesßge
);

3194 
	`¥ötf
("\n\n");

3196 
	`¥ötf
("pressÉnterÅo continue ");

3197 
lCh¨
 = (Ë
	`_gëch
() ;

3198 
	`¥ötf
("\n\n");

3199 i‡(!
töyfd_wöUtf8
Ë{ ()
	`SëC⁄sﬁeCP
(
lOrigöÆCP
); ()
	`SëC⁄sﬁeOuçutCP
(
lOrigöÆOuçutCP
); }

3203 
	}
}

3207 
	$töyfd_nŸifyP›up
(

3208 c⁄° * 
aTôÀ
 ,

3209 c⁄° * 
aMesßge
 ,

3210 c⁄° * 
aIc⁄Ty≥
 )

3212 #i‚de‡
TINYFD_NOLIB


3213 i‡((!
töyfd_f‹˚C⁄sﬁe
 || !(

3214 
	`GëC⁄sﬁeWödow
() ||

3215 
	`dülogPª£¡
()))

3216 && ( !
	`gëív
("SSH_CLIENT") || getenv("DISPLAY") ) )

3218 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"windows"); 1;}

3219  
	`nŸifyWöGui
(
aTôÀ
, 
aMesßge
, 
aIc⁄Ty≥
);

3223  
	`töyfd_mesßgeBox
(
aTôÀ
, 
aMesßge
, "ok" , 
aIc⁄Ty≥
, 0);

3224 
	}
}

3228 * 
	$töyfd_öputBox
(

3229 c⁄° * 
aTôÀ
 ,

3230 c⁄° * 
aMesßge
 ,

3231 c⁄° * 
aDeÁu…I≈ut
 )

3233 
lBuff
[
MAX_PATH_OR_CMD
] = "";

3234 * 
lEOF
;

3236 
DWORD
 
mode
 = 0;

3237 
HANDLE
 
hStdö
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

3239 
lNum
;

3240 * 
lC⁄sﬁeH™dÀ
;

3241 * 
lTmpCh¨
;

3242 
wch¨_t
 
lBuffW
[1024];

3244 
UINT
 
lOrigöÆCP
;

3245 
UINT
 
lOrigöÆOuçutCP
;

3248 i‡(!
aTôÀ
 && !
aMesßge
 && !
aDeÁu…I≈ut
Ë 
lBuff
;

3250 #i‚de‡
TINYFD_NOLIB


3251 
mode
 = 0;

3252 
hStdö
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

3254 i‡((!
töyfd_f‹˚C⁄sﬁe
 || !(

3255 
	`GëC⁄sﬁeWödow
() ||

3256 
	`dülogPª£¡
()))

3257 && ( !
	`gëív
("SSH_CLIENT") || getenv("DISPLAY") ) )

3259 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"windows"); (*)1;}

3260 
lBuff
[0]='\0';

3261 i‡(
	`öputBoxWöGui
(
lBuff
, 
aTôÀ
, 
aMesßge
, 
aDeÁu…I≈ut
)) ÜBuff;

3262  
NULL
;

3266 i‡–
	`dülogPª£¡
() )

3268 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

3269 
lBuff
[0]='\0';

3270 i‡(
	`öputBoxWöC⁄sﬁe
(
lBuff
, 
aTôÀ
, 
aMesßge
, 
aDeÁu…I≈ut
) ) ÜBuff;

3271  
NULL
;

3275 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"basicinput"); (*)0;}

3276 
lBuff
[0]='\0';

3277 i‡(!
gW¨nögDi•œyed
 && !
töyfd_f‹˚C⁄sﬁe
)

3279 
gW¨nögDi•œyed
 = 1 ;

3280 
	`¥ötf
("\n\n%s\n", 
gTôÀ
);

3281 
	`¥ötf
("%s\n\n", 
töyfd_√eds
);

3284 i‡(!
töyfd_wöUtf8
)

3286 
lOrigöÆCP
 = 
	`GëC⁄sﬁeCP
();

3287 
lOrigöÆOuçutCP
 = 
	`GëC⁄sﬁeOuçutCP
();

3288 ()
	`SëC⁄sﬁeCP
(
	`GëACP
());

3289 ()
	`SëC⁄sﬁeOuçutCP
(
	`GëACP
());

3292 i‡(
aTôÀ
 && 
	`°æí
(aTitle))

3294 
	`¥ötf
("\n");

3295 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aTôÀ
);

3296 
	`¥ötf
("%s", 
aTôÀ
);

3297 
	`¥ötf
("\n\n");

3299 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

3301 i‡(
töyfd_wöUtf8
Ë
	`wrôeUtf8
(
aMesßge
);

3302 
	`¥ötf
("%s", 
aMesßge
);

3303 
	`¥ötf
("\n");

3305 
	`¥ötf
("(ctrl-Z +ÉnterÅo cancel): ");

3306 i‡–! 
aDeÁu…I≈ut
 )

3308 (Ë
	`GëC⁄sﬁeMode
(
hStdö
, &
mode
);

3309 (Ë
	`SëC⁄sﬁeMode
(
hStdö
, 
mode
 & (~
ENABLE_ECHO_INPUT
));

3311 i‡(
töyfd_wöUtf8
)

3313 
lC⁄sﬁeH™dÀ
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

3314 (Ë
	`RódC⁄sﬁeW
(
lC⁄sﬁeH™dÀ
, 
lBuffW
, 
MAX_PATH_OR_CMD
, &
lNum
, 
NULL
);

3315 i‡(!
aDeÁu…I≈ut
)

3317 ()
	`SëC⁄sﬁeMode
(
hStdö
, 
mode
);

3318 
	`¥ötf
("\n");

3320 
lBuffW
[
lNum
] = '\0';

3321 i‡(
lBuffW
[
	`wc¶í
(lBuffW) - 1] == '\n')ÜBuffW[wcslen(lBuffW) - 1] = '\0';

3322 i‡(
lBuffW
[
	`wc¶í
(lBuffW) - 1] == '\r')ÜBuffW[wcslen(lBuffW) - 1] = '\0';

3323 
lTmpCh¨
 = 
	`töyfd_utf16to8
(
lBuffW
);

3324 i‡(
lTmpCh¨
)

3326 
	`°r˝y
(
lBuff
, 
lTmpCh¨
);

3327  
lBuff
;

3330  
NULL
;

3334 
lEOF
 = 
	`fgës
(
lBuff
, 
MAX_PATH_OR_CMD
, 
°dö
);

3335 i‡(!
aDeÁu…I≈ut
)

3337 ()
	`SëC⁄sﬁeMode
(
hStdö
, 
mode
);

3338 
	`¥ötf
("\n");

3341 i‡(!
töyfd_wöUtf8
)

3343 ()
	`SëC⁄sﬁeCP
(
lOrigöÆCP
);

3344 ()
	`SëC⁄sﬁeOuçutCP
(
lOrigöÆOuçutCP
);

3347 i‡(!
lEOF
)

3349  
NULL
;

3351 
	`¥ötf
("\n");

3352 i‡(
	`°rchr
(
lBuff
, 27))

3354  
NULL
;

3356 i‡(
lBuff
[
	`°æí
(lBuff) - 1] == '\n')

3358 
lBuff
[
	`°æí
(lBuff) - 1] = '\0';

3360  
lBuff
;

3363 
	}
}

3366 * 
	$töyfd_ßveFûeDülog
(

3367 c⁄° * 
aTôÀ
 ,

3368 c⁄° * 
aDeÁu…P©hAndFûe
 ,

3369 
aNumOfFûãrP©ã∫s
 ,

3370 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

3371 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 )

3373 
lBuff
 [
MAX_PATH_OR_CMD
] ;

3374 
lSåög
[
MAX_PATH_OR_CMD
] ;

3375 * 
p
 ;

3376 * 
lPoöãrI≈utBox
;

3377 
lBuff
[0]='\0';

3378 #i‚de‡
TINYFD_NOLIB


3379 i‡––!
töyfd_f‹˚C⁄sﬁe
 || !–
	`GëC⁄sﬁeWödow
(Ë|| 
	`dülogPª£¡
() ) )

3380 && ( !
	`gëív
("SSH_CLIENT") || getenv("DISPLAY") ) )

3382 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"windows"); (*)1;}

3383 i‡(
töyfd_wöUtf8
)

3385 
p
 = 
	`ßveFûeDülogWöGui8
(
lBuff
,

3386 
aTôÀ
, 
aDeÁu…P©hAndFûe
, 
aNumOfFûãrP©ã∫s
, 
aFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
);

3390 
p
 = 
	`ßveFûeDülogWöGuiA
(
lBuff
,

3391 
aTôÀ
, 
aDeÁu…P©hAndFûe
, 
aNumOfFûãrP©ã∫s
, 
aFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
);

3396 i‡(
	`dülogPª£¡
())

3398 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "dialog");  (*)0; }

3399 
p
 = 
	`ßveFûeDülogWöC⁄sﬁe
(
lBuff
, 
aTôÀ
, 
aDeÁu…P©hAndFûe
);

3403 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "basicinput");  (*)0; }

3404 
	`°r˝y
(
lBuff
, "Save file in ");

3405 
	`°rˇt
(
lBuff
, 
	`gëCurDú
());

3407 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
,NULL,NULL);

3408 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lSåög
,ÜPointerInputBox);

3409 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, 
lBuff
, "");

3410 i‡(
p
Ë
	`°r˝y
(
lBuff
,Ö); lBuff[0] = '\0';

3411 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lSåög
);

3412 
p
 = 
lBuff
;

3416 i‡–! 
p
 || ! 
	`°æí
(Ö ) )

3418  
NULL
;

3420 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
p
 ) ;

3421 i‡–
	`°æí
–
lSåög
 ) && ! 
	`dúExi°s
(ÜString ) )

3423  
NULL
 ;

3425 
	`gëLa°Name
(
lSåög
,
p
);

3426 i‡–! 
	`fûíameVÆid
(
lSåög
) )

3428  
NULL
;

3430  
p
 ;

3431 
	}
}

3435 * 
	$töyfd_›íFûeDülog
(

3436 c⁄° * 
aTôÀ
 ,

3437 c⁄° * 
aDeÁu…P©hAndFûe
 ,

3438 
aNumOfFûãrP©ã∫s
 ,

3439 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

3440 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 ,

3441 
aAŒowMu…ùÀSñe˘s
 )

3443 
lSåög
[
MAX_PATH_OR_CMD
];

3444 
lBuff
[
MAX_PATH_OR_CMD
];

3445 * 
p
;

3446 * 
lPoöãrI≈utBox
;

3448 #i‚de‡
TINYFD_NOLIB


3449 i‡––!
töyfd_f‹˚C⁄sﬁe
 || !–
	`GëC⁄sﬁeWödow
(Ë|| 
	`dülogPª£¡
() ) )

3450 && ( !
	`gëív
("SSH_CLIENT") || getenv("DISPLAY") ) )

3452 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"windows"); (*)1;}

3453 i‡(
töyfd_wöUtf8
)

3455 
p
 = 
	`›íFûeDülogWöGui8
–
aTôÀ
, 
aDeÁu…P©hAndFûe
, 
aNumOfFûãrP©ã∫s
,

3456 
aFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
, 
aAŒowMu…ùÀSñe˘s
);

3460 
p
 = 
	`›íFûeDülogWöGuiA
–
aTôÀ
, 
aDeÁu…P©hAndFûe
, 
aNumOfFûãrP©ã∫s
,

3461 
aFûãrP©ã∫s
, 
aSögÀFûãrDes¸ùti⁄
, 
aAŒowMu…ùÀSñe˘s
);

3466 i‡(
	`dülogPª£¡
())

3468 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "dialog");  (*)0; }

3469 
p
 = 
	`›íFûeDülogWöC⁄sﬁe
(
aTôÀ
, 
aDeÁu…P©hAndFûe
);

3473 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "basicinput");  (*)0; }

3474 
	`°r˝y
(
lBuff
, "Open file from ");

3475 
	`°rˇt
(
lBuff
, 
	`gëCurDú
());

3476 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

3477 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lSåög
,ÜPointerInputBox);

3478 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, 
lBuff
, "");

3479 i‡(
p
Ë
	`°r˝y
(
lBuff
,Ö); lBuff[0] = '\0';

3480 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lSåög
);

3481 
p
 = 
lBuff
;

3484 i‡–! 
p
 || ! 
	`°æí
(Ö ) )

3486  
NULL
;

3488 i‡–
aAŒowMu…ùÀSñe˘s
 && 
	`°rchr
(
p
, '|') )

3490 
p
 = 
	`ísuªFûesExi°
( (*)Ö ,Ö ) ;

3492 i‡–! 
	`fûeExi°s
(
p
) )

3494  
NULL
 ;

3497  
p
 ;

3498 
	}
}

3501 * 
	$töyfd_£À˘FﬁdîDülog
(

3502 c⁄° * 
aTôÀ
 ,

3503 c⁄° * 
aDeÁu…P©h
 )

3505 
lBuff
[
MAX_PATH_OR_CMD
];

3506 * 
p
;

3507 * 
lPoöãrI≈utBox
;

3508 
lSåög
[
MAX_PATH_OR_CMD
];

3510 #i‚de‡
TINYFD_NOLIB


3511 i‡––!
töyfd_f‹˚C⁄sﬁe
 || !–
	`GëC⁄sﬁeWödow
(Ë|| 
	`dülogPª£¡
() ) )

3512 && ( !
	`gëív
("SSH_CLIENT") || getenv("DISPLAY") ) )

3514 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"windows"); (*)1;}

3515 i‡(
töyfd_wöUtf8
)

3517 
p
 = 
	`£À˘FﬁdîDülogWöGui8
(
lBuff
, 
aTôÀ
, 
aDeÁu…P©h
);

3521 
p
 = 
	`£À˘FﬁdîDülogWöGuiA
(
lBuff
, 
aTôÀ
, 
aDeÁu…P©h
);

3526 i‡(
	`dülogPª£¡
())

3528 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "dialog");  (*)0; }

3529 
p
 = 
	`£À˘FﬁdîDülogWöC⁄sﬁe
(
lBuff
, 
aTôÀ
, 
aDeÁu…P©h
);

3533 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "basicinput");  (*)0; }

3534 
	`°r˝y
(
lBuff
, "Select folder from ");

3535 
	`°rˇt
(
lBuff
, 
	`gëCurDú
());

3536 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

3537 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lSåög
,ÜPointerInputBox);

3538 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, 
lBuff
, "");

3539 i‡(
p
Ë
	`°r˝y
(
lBuff
,Ö); lBuff[0] = '\0';

3540 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lSåög
);

3541 
p
 = 
lBuff
;

3544 i‡–! 
p
 || ! 
	`°æí
–∞Ë|| ! 
	`dúExi°s
(Ö ) )

3546  
NULL
 ;

3548  
p
 ;

3549 
	}
}

3556 * 
	$töyfd_cﬁ‹Choo£r
(

3557 c⁄° * 
aTôÀ
,

3558 c⁄° * 
aDeÁu…HexRGB
,

3559 c⁄° 
aDeÁu…RGB
[3],

3560 
aoResu…RGB
[3])

3562 
lDeÁu…HexRGB
[16];

3563 
i
;

3564 * 
p
 ;

3565 * 
lPoöãrI≈utBox
;

3566 
lSåög
[
MAX_PATH_OR_CMD
];

3568 
lDeÁu…HexRGB
[0] = '\0';

3570 #i‚de‡
TINYFD_NOLIB


3571 i‡–(!
töyfd_f‹˚C⁄sﬁe
 || !–
	`GëC⁄sﬁeWödow
(Ë|| 
	`dülogPª£¡
()) )

3572 && (!
	`gëív
("SSH_CLIENT") || getenv("DISPLAY")) )

3574 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"windows"); (*)1;}

3575 i‡(
töyfd_wöUtf8
)

3577 
p
 = 
	`cﬁ‹Choo£rWöGui8
(

3578 
aTôÀ
, 
aDeÁu…HexRGB
, 
aDeÁu…RGB
, 
aoResu…RGB
);

3579 
	`°r˝y
(
lDeÁu…HexRGB
, 
p
);

3583 
p
 = 
	`cﬁ‹Choo£rWöGuiA
(

3584 
aTôÀ
, 
aDeÁu…HexRGB
, 
aDeÁu…RGB
, 
aoResu…RGB
);

3585 
	`°r˝y
(
lDeÁu…HexRGB
, 
p
);

3587  
lDeÁu…HexRGB
;

3592 i‡(
	`dülogPª£¡
())

3594 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "dialog");  (*)0; }

3598 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ, "töyfd_quîy")){ 
	`°r˝y
(
töyfd_ª•⁄£
, "basicinput");  (*)0; }

3601 i‡(
aDeÁu…HexRGB
)

3603 
	`°∫˝y
(
lDeÁu…HexRGB
, 
aDeÁu…HexRGB
,7);

3604 
lDeÁu…HexRGB
[7]='\0';

3608 
	`RGB2Hex
(
aDeÁu…RGB
, 
lDeÁu…HexRGB
);

3611 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

3612 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lSåög
,ÜPointerInputBox);

3613 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, "E¡î hexÑgb cﬁ‹ (i.e. #f5ˇ20)", 
lDeÁu…HexRGB
);

3615 i‡–!
p
 || (
	`°æí
(p) != 7) || (p[0] != '#') )

3617  
NULL
 ;

3619  
i
 = 1 ; i < 7 ; i ++ )

3621 i‡–! 
	`isxdigô
–(Ë
p
[
i
] ) )

3623  
NULL
 ;

3626 
	`Hex2RGB
(
p
,
aoResu…RGB
);

3628 
	`°r˝y
(
lDeÁu…HexRGB
, 
p
);

3630 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lSåög
);

3632  
lDeÁu…HexRGB
;

3633 
	}
}

3638 
	ggPyth⁄2Name
[16];

3639 
	ggPyth⁄3Name
[16];

3640 
	ggPyth⁄Name
[16];

3642 
	$isD¨wö
()

3644 
lsIsD¨wö
 = -1 ;

3645 
ut¢ame
 
lUt¢ame
 ;

3646 i‡–
lsIsD¨wö
 < 0 )

3648 
lsIsD¨wö
 = !
	`u«me
(&
lUt¢ame
Ë&& !
	`°rcmp
÷Ut¢ame.
sy¢ame
,"Darwin") ;

3650  
lsIsD¨wö
 ;

3651 
	}
}

3654 
	$dúExi°s
–c⁄° * 
aDúP©h
 )

3656 
DIR
 * 
lDú
 ;

3657 i‡–! 
aDúP©h
 || ! 
	`°æí
(áDirPath ) )

3659 
lDú
 = 
	`›ídú
–
aDúP©h
 ) ;

3660 i‡–! 
lDú
 )

3664 
	`˛o£dú
–
lDú
 ) ;

3666 
	}
}

3669 
	$dëe˘Pª£n˚
–c⁄° * 
aExecuèbÀ
 )

3671 
lBuff
 [
MAX_PATH_OR_CMD
] ;

3672 
lTe°edSåög
 [
MAX_PATH_OR_CMD
] = "which " ;

3673 
FILE
 * 
lIn
 ;

3675 
	`°rˇt
–
lTe°edSåög
 , 
aExecuèbÀ
 ) ;

3676 
	`°rˇt
–
lTe°edSåög
, " 2>/dev/null ");

3677 
lIn
 = 
	`p›í
–
lTe°edSåög
 , "r" ) ;

3678 i‡––
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

3679 && ( ! 
	`°rchr
–
lBuff
 , ':' ) )

3680 && ( 
	`°∫cmp
(
lBuff
, "no ", 3) ) )

3682 
	`p˛o£
–
lIn
 ) ;

3683 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("dëe˘Pª£n˚ %†%d\n", 
aExecuèbÀ
, 1);

3688 
	`p˛o£
–
lIn
 ) ;

3689 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("dëe˘Pª£n˚ %†%d\n", 
aExecuèbÀ
, 0);

3692 
	}
}

3695 * 
	$gëVîsi⁄
–c⁄° * 
aExecuèbÀ
 )

3697 
lBuff
 [
MAX_PATH_OR_CMD
] ;

3698 
lTe°edSåög
 [
MAX_PATH_OR_CMD
] ;

3699 
FILE
 * 
lIn
 ;

3700 * 
lTmp
 ;

3702 
	`°r˝y
–
lTe°edSåög
 , 
aExecuèbÀ
 ) ;

3703 
	`°rˇt
–
lTe°edSåög
 , " --version" ) ;

3705 
lIn
 = 
	`p›í
–
lTe°edSåög
 , "r" ) ;

3706 
lTmp
 = 
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) ;

3707 
	`p˛o£
–
lIn
 ) ;

3709 
lTmp
 +
	`°rc•n
(lTmp,"0123456789");

3711  
lTmp
 ;

3712 
	}
}

3715 * 
	$gëMaj‹Mö‹P©ch
–c⁄° * 
aExecuèbÀ
 )

3717 
lAºay
 [3] ;

3718 * 
lTmp
 ;

3720 
lTmp
 = (*Ë
	`gëVîsi⁄
(
aExecuèbÀ
);

3721 
lAºay
[0] = 
	`©oi
–
	`°πok
(
lTmp
," ,.-") ) ;

3723 
lAºay
[1] = 
	`©oi
–
	`°πok
(0," ,.-") ) ;

3725 
lAºay
[2] = 
	`©oi
–
	`°πok
(0," ,.-") ) ;

3728 i‡–!
lAºay
[0] && !lAºay[1] && !lAºay[2] )  
NULL
;

3729  
lAºay
 ;

3730 
	}
}

3733 
	$åyComm™d
–c⁄° * 
aComm™d
 )

3735 
lBuff
 [
MAX_PATH_OR_CMD
] ;

3736 
FILE
 * 
lIn
 ;

3738 
lIn
 = 
	`p›í
–
aComm™d
 , "r" ) ;

3739 i‡–
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) =
NULL
 )

3741 
	`p˛o£
–
lIn
 ) ;

3746 
	`p˛o£
–
lIn
 ) ;

3750 
	}
}

3753 
	$isTîmöÆRu¬ög
()

3755 
lIsTîmöÆRu¬ög
 = -1 ;

3756 i‡–
lIsTîmöÆRu¬ög
 < 0 )

3758 
lIsTîmöÆRu¬ög
 = 
	`ißây
(1);

3759 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("isTîmöÆRu¬ög %d\n", 
lIsTîmöÆRu¬ög
 );

3761  
lIsTîmöÆRu¬ög
;

3762 
	}
}

3765 * 
	$dülogNameO∆y
()

3767 
lDülogName
[128] = "*" ;

3768 i‡–
lDülogName
[0] == '*' )

3770 i‡(!
töyfd_ÆlowCur£sDülogs
)

3772 
	`°r˝y
(
lDülogName
 , "" );

3774 i‡–
	`isD¨wö
(Ë&& * 
	`°r˝y
(
lDülogName
 , "/opt/local/bin/dialog" )

3775 && 
	`dëe˘Pª£n˚
–
lDülogName
 ) )

3777 i‡–* 
	`°r˝y
(
lDülogName
 , "dialog" )

3778 && 
	`dëe˘Pª£n˚
–
lDülogName
 ) )

3782 
	`°r˝y
(
lDülogName
 , "" );

3785  
lDülogName
 ;

3786 
	}
}

3789 
	$isDülogVîsi⁄Bëãr09b
()

3791 c⁄° * 
lDülogName
 ;

3792 * 
lVîsi⁄
 ;

3793 
lMaj‹
 ;

3794 
lMö‹
 ;

3795 
lD©e
 ;

3796 
lResu…
 ;

3797 * 
lMö‹P
 ;

3798 * 
lLëãr
 ;

3799 
lBuff
[128] ;

3803 
lDülogName
 = 
	`dülogNameO∆y
() ;

3804 i‡–! 
	`°æí
(
lDülogName
Ë|| !(
lVîsi⁄
 = (*Ë
	`gëVîsi⁄
(lDialogName)) )  0 ;

3807 
	`°r˝y
(
lBuff
,
lVîsi⁄
);

3808 
lMaj‹
 = 
	`©oi
–
	`°πok
(
lVîsi⁄
," ,.-") ) ;

3810 
lMö‹P
 = 
	`°πok
(0," ,.-abcdefghijklmnopqrstuvxyz");

3811 
lMö‹
 = 
	`©oi
–
lMö‹P
 ) ;

3813 
lD©e
 = 
	`©oi
–
	`°πok
(0," ,.-") ) ;

3814 i‡(
lD©e
<0)ÜDate = -ÜDate;

3816 
lLëãr
 = 
lMö‹P
 + 
	`°æí
(lMinorP) ;

3817 
	`°r˝y
(
lVîsi⁄
,
lBuff
);

3818 
	`°πok
(
lLëãr
," ,.-");

3820 
lResu…
 = (
lMaj‹
 > 0Ë|| ( ( 
lMö‹
 =9 ) && (*
lLëãr
 ='b'Ë&& (
lD©e
 >= 20031126) );

3822  
lResu…
;

3823 
	}
}

3826 
	$whùèûPª£¡O∆y
()

3828 
lWhùèûPª£¡
 = -1 ;

3829 i‡(!
töyfd_ÆlowCur£sDülogs
)  0;

3830 i‡–
lWhùèûPª£¡
 < 0 )

3832 
lWhùèûPª£¡
 = 
	`dëe˘Pª£n˚
( "whiptail" ) ;

3834  
lWhùèûPª£¡
 ;

3835 
	}
}

3838 * 
	$ãrmöÆName
()

3840 
lTîmöÆName
[128] = "*" ;

3841 
lShñlName
[64] = "*" ;

3842 * 
lAºay
;

3844 i‡–
lTîmöÆName
[0] == '*' )

3846 i‡–
	`dëe˘Pª£n˚
( "bash" ) )

3848 
	`°r˝y
(
lShñlName
 , "bash -c " ) ;

3850 i‡–
	`°æí
(
	`dülogNameO∆y
()Ë|| 
	`whùèûPª£¡O∆y
() )

3852 
	`°r˝y
(
lShñlName
 , "sh -c " ) ;

3856 
	`°r˝y
(
lTîmöÆName
 , "" ) ;

3857  
NULL
 ;

3860 i‡–
	`isD¨wö
() )

3862 i‡–* 
	`°r˝y
(
lTîmöÆName
 , "/opt/X11/bin/xterm" )

3863 && 
	`dëe˘Pª£n˚
–
lTîmöÆName
 ) )

3865 
	`°rˇt
(
lTîmöÆName
 , " -fa 'DejaVu Sans Mono' -fs 10 -titleÅinyfiledialogs -e " ) ;

3866 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3870 
	`°r˝y
(
lTîmöÆName
 , "" ) ;

3873 i‡–* 
	`°r˝y
(
lTîmöÆName
,"xterm")

3874 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3876 
	`°rˇt
(
lTîmöÆName
 , " -fa 'DejaVu Sans Mono' -fs 10 -titleÅinyfiledialogs -e " ) ;

3877 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3879 i‡–* 
	`°r˝y
(
lTîmöÆName
,"terminator")

3880 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3882 
	`°rˇt
(
lTîmöÆName
 , " -x " ) ;

3883 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3885 i‡–* 
	`°r˝y
(
lTîmöÆName
,"lxterminal")

3886 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3888 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3889 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3891 i‡–* 
	`°r˝y
(
lTîmöÆName
,"konsole")

3892 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3894 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3895 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3897 i‡–* 
	`°r˝y
(
lTîmöÆName
,"kterm")

3898 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3900 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3901 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3903 i‡–* 
	`°r˝y
(
lTîmöÆName
,"tilix")

3904 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3906 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3907 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3909 i‡–* 
	`°r˝y
(
lTîmöÆName
,"xfce4-terminal")

3910 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3912 
	`°rˇt
(
lTîmöÆName
 , " -x " ) ;

3913 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3915 i‡–* 
	`°r˝y
(
lTîmöÆName
,"mate-terminal")

3916 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3918 
	`°rˇt
(
lTîmöÆName
 , " -x " ) ;

3919 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3921 i‡–* 
	`°r˝y
(
lTîmöÆName
,"Eterm")

3922 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3924 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3925 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3927 i‡–* 
	`°r˝y
(
lTîmöÆName
,"evilvte")

3928 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3930 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3931 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3933 i‡–* 
	`°r˝y
(
lTîmöÆName
,"pterm")

3934 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
) )

3936 
	`°rˇt
(
lTîmöÆName
 , " -e " ) ;

3937 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3939 i‡–* 
	`°r˝y
(
lTîmöÆName
,"gnome-terminal")

3940 && 
	`dëe˘Pª£n˚
(
lTîmöÆName
Ë&& (
lAºay
 = 
	`gëMaj‹Mö‹P©ch
(lTerminalName))

3941 && ((
lAºay
[0]<3) || (lArray[0]==3 &&ÜArray[1]<=6)) )

3943 
	`°rˇt
(
lTîmöÆName
 , " --disable-factory -x " ) ;

3944 
	`°rˇt
(
lTîmöÆName
 , 
lShñlName
 ) ;

3948 
	`°r˝y
(
lTîmöÆName
 , "" ) ;

3954 i‡–
	`°æí
(
lTîmöÆName
) )

3956  
lTîmöÆName
 ;

3960  
NULL
 ;

3962 
	}
}

3965 * 
	$dülogName
()

3967 * 
lDülogName
 ;

3968 
lDülogName
 = 
	`dülogNameO∆y
( ) ;

3969 i‡–
	`°æí
(
lDülogName
Ë&& ( 
	`isTîmöÆRu¬ög
(Ë|| 
	`ãrmöÆName
() ) )

3971  
lDülogName
 ;

3975  
NULL
 ;

3977 
	}
}

3980 
	$whùèûPª£¡
()

3982 
lWhùèûPª£¡
 ;

3983 
lWhùèûPª£¡
 = 
	`whùèûPª£¡O∆y
( ) ;

3984 i‡–
lWhùèûPª£¡
 && ( 
	`isTîmöÆRu¬ög
(Ë|| 
	`ãrmöÆName
() ) )

3986  
lWhùèûPª£¡
 ;

3992 
	}
}

3996 
	$gøphicMode
()

3998  !–
töyfd_f‹˚C⁄sﬁe
 && (
	`isTîmöÆRu¬ög
(Ë|| 
	`ãrmöÆName
()) )

3999 && ( 
	`gëív
("DISPLAY")

4000 || (
	`isD¨wö
(Ë&& (!
	`gëív
("SSH_TTY") || getenv("DISPLAY") ) ) ) ;

4001 
	}
}

4004 
	$∑˘lPª£¡
()

4006 
lPa˘lPª£¡
 = -1 ;

4007 i‡–
lPa˘lPª£¡
 < 0 )

4009 
lPa˘lPª£¡
 = 
	`dëe˘Pª£n˚
("pactl") ;

4011  
lPa˘lPª£¡
 ;

4012 
	}
}

4015 
	$•ókîã°Pª£¡
()

4017 
lS≥akîã°Pª£¡
 = -1 ;

4018 i‡–
lS≥akîã°Pª£¡
 < 0 )

4020 
lS≥akîã°Pª£¡
 = 
	`dëe˘Pª£n˚
("speaker-test") ;

4022  
lS≥akîã°Pª£¡
 ;

4023 
	}
}

4026 
	$bì≥xePª£¡
()

4028 
lBì≥xePª£¡
 = -1 ;

4029 i‡–
lBì≥xePª£¡
 < 0 )

4031 
lBì≥xePª£¡
 = 
	`dëe˘Pª£n˚
("beep.exe") ;

4033  
lBì≥xePª£¡
 ;

4034 
	}
}

4037 
	$xmesßgePª£¡
()

4039 
lXmesßgePª£¡
 = -1 ;

4040 i‡–
lXmesßgePª£¡
 < 0 )

4042 
lXmesßgePª£¡
 = 
	`dëe˘Pª£n˚
("xmessage");

4044  
lXmesßgePª£¡
 && 
	`gøphicMode
( ) ;

4045 
	}
}

4048 
	$gxmesßgePª£¡
()

4050 
lGxmesßgePª£¡
 = -1 ;

4051 i‡–
lGxmesßgePª£¡
 < 0 )

4053 
lGxmesßgePª£¡
 = 
	`dëe˘Pª£n˚
("gxmessage") ;

4055  
lGxmesßgePª£¡
 && 
	`gøphicMode
( ) ;

4056 
	}
}

4059 
	$gmesßgePª£¡
()

4061 
lGmesßgePª£¡
 = -1 ;

4062 i‡–
lGmesßgePª£¡
 < 0 )

4064 
lGmesßgePª£¡
 = 
	`dëe˘Pª£n˚
("gmessage") ;

4066  
lGmesßgePª£¡
 && 
	`gøphicMode
( ) ;

4067 
	}
}

4070 
	$nŸify£ndPª£¡
()

4072 
lNŸify£ndPª£¡
 = -1 ;

4073 i‡–
lNŸify£ndPª£¡
 < 0 )

4075 
lNŸify£ndPª£¡
 = 
	`dëe˘Pª£n˚
("notify-send") ;

4077  
lNŸify£ndPª£¡
 && 
	`gøphicMode
( ) ;

4078 
	}
}

4081 
	$≥æPª£¡
()

4083 
lPîlPª£¡
 = -1 ;

4084 
lBuff
 [
MAX_PATH_OR_CMD
] ;

4085 
FILE
 * 
lIn
 ;

4087 i‡–
lPîlPª£¡
 < 0 )

4089 
lPîlPª£¡
 = 
	`dëe˘Pª£n˚
("perl") ;

4090 i‡–
lPîlPª£¡
 )

4092 
lIn
 = 
	`p›í
( "perl -MNet::DBus -e \"Net::DBus->session->get_service('org.freedesktop.Notifications')\" 2>&1" , "r" ) ;

4093 i‡–
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) =
NULL
 )

4095 
lPîlPª£¡
 = 2 ;

4097 
	`p˛o£
–
lIn
 ) ;

4098 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("≥æ-dbu†%d\n", 
lPîlPª£¡
);

4101  
	`gøphicMode
(Ë? 
lPîlPª£¡
 : 0 ;

4102 
	}
}

4105 
	$aÂœyPª£¡
()

4107 
lAÂœyPª£¡
 = -1 ;

4108 
lBuff
 [
MAX_PATH_OR_CMD
] ;

4109 
FILE
 * 
lIn
 ;

4111 i‡–
lAÂœyPª£¡
 < 0 )

4113 
lAÂœyPª£¡
 = 
	`dëe˘Pª£n˚
("afplay") ;

4114 i‡–
lAÂœyPª£¡
 )

4116 
lIn
 = 
	`p›í
( "test -e /System/Library/Sounds/Ping.aiff ||Écho Ping" , "r" ) ;

4117 i‡–
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) =
NULL
 )

4119 
lAÂœyPª£¡
 = 2 ;

4121 
	`p˛o£
–
lIn
 ) ;

4122 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("aÂœy %d\n", 
lAÂœyPª£¡
);

4125  
	`gøphicMode
(Ë? 
lAÂœyPª£¡
 : 0 ;

4126 
	}
}

4129 
	$xdülogPª£¡
()

4131 
lXdülogPª£¡
 = -1 ;

4132 i‡–
lXdülogPª£¡
 < 0 )

4134 
lXdülogPª£¡
 = 
	`dëe˘Pª£n˚
("Xdialog") ;

4136  
lXdülogPª£¡
 && 
	`gøphicMode
( ) ;

4137 
	}
}

4140 
	$gdülogPª£¡
()

4142 
lGdüloglPª£¡
 = -1 ;

4143 i‡–
lGdüloglPª£¡
 < 0 )

4145 
lGdüloglPª£¡
 = 
	`dëe˘Pª£n˚
( "gdialog" ) ;

4147  
lGdüloglPª£¡
 && 
	`gøphicMode
( ) ;

4148 
	}
}

4151 
	$oßs¸ùtPª£¡
()

4153 
lOßs¸ùtPª£¡
 = -1 ;

4154 i‡–
lOßs¸ùtPª£¡
 < 0 )

4156 
gW¨nögDi•œyed
 |!!
	`gëív
("SSH_TTY");

4157 
lOßs¸ùtPª£¡
 = 
	`dëe˘Pª£n˚
( "osascript" ) ;

4159  
lOßs¸ùtPª£¡
 && 
	`gøphicMode
(Ë&& !
	`gëív
("SSH_TTY") ;

4160 
	}
}

4163 
	$q¨maPª£¡
()

4165 
lQ¨maPª£¡
 = -1 ;

4166 i‡–
lQ¨maPª£¡
 < 0 )

4168 
lQ¨maPª£¡
 = 
	`dëe˘Pª£n˚
("qarma") ;

4170  
lQ¨maPª£¡
 && 
	`gøphicMode
( ) ;

4171 
	}
}

4174 
	$m©edülogPª£¡
()

4176 
lM©edülogPª£¡
 = -1 ;

4177 i‡–
lM©edülogPª£¡
 < 0 )

4179 
lM©edülogPª£¡
 = 
	`dëe˘Pª£n˚
("matedialog") ;

4181  
lM©edülogPª£¡
 && 
	`gøphicMode
( ) ;

4182 
	}
}

4185 
	$shñÀmíèryPª£¡
()

4187 
lShñÀmíèryPª£¡
 = -1 ;

4188 i‡–
lShñÀmíèryPª£¡
 < 0 )

4190 
lShñÀmíèryPª£¡
 = 0 ;

4192  
lShñÀmíèryPª£¡
 && 
	`gøphicMode
( ) ;

4193 
	}
}

4196 
	$zíôyPª£¡
()

4198 
lZíôyPª£¡
 = -1 ;

4199 i‡–
lZíôyPª£¡
 < 0 )

4201 
lZíôyPª£¡
 = 
	`dëe˘Pª£n˚
("zenity") ;

4203  
lZíôyPª£¡
 && 
	`gøphicMode
( ) ;

4204 
	}
}

4207 
	$zíôy3Pª£¡
()

4209 
lZíôy3Pª£¡
 = -1 ;

4210 
lBuff
 [
MAX_PATH_OR_CMD
] ;

4211 
FILE
 * 
lIn
 ;

4212 
lI¡Tmp
 ;

4214 i‡–
lZíôy3Pª£¡
 < 0 )

4216 
lZíôy3Pª£¡
 = 0 ;

4217 i‡–
	`zíôyPª£¡
() )

4219 
lIn
 = 
	`p›í
( "zenity --version" , "r" ) ;

4220 i‡–
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

4222 i‡–
	`©oi
(
lBuff
) >= 3 )

4224 
lZíôy3Pª£¡
 = 3 ;

4225 
lI¡Tmp
 = 
	`©oi
(
	`°πok
(
lBuff
,".")+2 ) ;

4226 i‡–
lI¡Tmp
 >= 18 )

4228 
lZíôy3Pª£¡
 = 5 ;

4230 i‡–
lI¡Tmp
 >= 10 )

4232 
lZíôy3Pª£¡
 = 4 ;

4235 i‡––
	`©oi
(
lBuff
Ë=2 ) && (átoi(
	`°πok
(lBuff,".")+2 ) >= 32 ) )

4237 
lZíôy3Pª£¡
 = 2 ;

4239 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("zíôy %d\n", 
lZíôy3Pª£¡
);

4241 
	`p˛o£
–
lIn
 ) ;

4244  
	`gøphicMode
(Ë? 
lZíôy3Pª£¡
 : 0 ;

4245 
	}
}

4248 
	$kdülogPª£¡
()

4250 
lKdülogPª£¡
 = -1 ;

4251 
lBuff
 [
MAX_PATH_OR_CMD
] ;

4252 
FILE
 * 
lIn
 ;

4253 * 
lDeskt›
;

4255 i‡–
lKdülogPª£¡
 < 0 )

4257 i‡–
	`zíôyPª£¡
() )

4259 
lDeskt›
 = 
	`gëív
("XDG_SESSION_DESKTOP");

4260 i‡–!
lDeskt›
 || ( 
	`°rcmp
(lDesktop, "KDE") && strcmp(lDesktop, "lxqt") ) )

4262 
lKdülogPª£¡
 = 0 ;

4263  
lKdülogPª£¡
 ;

4267 
lKdülogPª£¡
 = 
	`dëe˘Pª£n˚
("kdialog") ;

4268 i‡–
lKdülogPª£¡
 && !
	`gëív
("SSH_TTY") )

4270 
lIn
 = 
	`p›í
( "kdialog --attach 2>&1" , "r" ) ;

4271 i‡–
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

4273 i‡–! 
	`°r°r
–"Unknown" , 
lBuff
 ) )

4275 
lKdülogPª£¡
 = 2 ;

4276 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("kdülog-©èch %d\n", 
lKdülogPª£¡
);

4279 
	`p˛o£
–
lIn
 ) ;

4281 i‡(
lKdülogPª£¡
 == 2)

4283 
lKdülogPª£¡
 = 1 ;

4284 
lIn
 = 
	`p›í
( "kdialog --passivepopup 2>&1" , "r" ) ;

4285 i‡–
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

4287 i‡–! 
	`°r°r
–"Unknown" , 
lBuff
 ) )

4289 
lKdülogPª£¡
 = 2 ;

4290 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("kdülog-p›u∞%d\n", 
lKdülogPª£¡
);

4293 
	`p˛o£
–
lIn
 ) ;

4297  
	`gøphicMode
(Ë? 
lKdülogPª£¡
 : 0 ;

4298 
	}
}

4301 
	$osx9‹Bëãr
()

4303 
lOsx9‹Bëãr
 = -1 ;

4304 
lBuff
 [
MAX_PATH_OR_CMD
] ;

4305 
FILE
 * 
lIn
 ;

4306 
V
,
v
;

4308 i‡–
lOsx9‹Bëãr
 < 0 )

4310 
lOsx9‹Bëãr
 = 0 ;

4311 
lIn
 = 
	`p›í
( "osascript -e 'set osverÅo system version of (system info)'" , "r" ) ;

4312 i‡––
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

4313 && ( 2 =
	`ssˇnf
(
lBuff
, "%d.%d", &
V
, &
v
) ) )

4315 
V
 = V * 100 + 
v
;

4316 i‡–
V
 >= 1009 )

4318 
lOsx9‹Bëãr
 = 1 ;

4321 
	`p˛o£
–
lIn
 ) ;

4322 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("Osx10 = %d, %d = %s\n", 
lOsx9‹Bëãr
, 
V
, 
lBuff
) ;

4324  
lOsx9‹Bëãr
 ;

4325 
	}
}

4328 
	$pyth⁄3Pª£¡
()

4330 
lPyth⁄3Pª£¡
 = -1 ;

4331 
i
;

4333 i‡–
lPyth⁄3Pª£¡
 < 0 )

4335 
lPyth⁄3Pª£¡
 = 0 ;

4336 
	`°r˝y
(
gPyth⁄3Name
 , "python3" ) ;

4337 i‡–
	`dëe˘Pª£n˚
(
gPyth⁄3Name
ËË
lPyth⁄3Pª£¡
 = 1;

4340  
i
 = 9 ; i >= 0 ; i -- )

4342 
	`•rötf
–
gPyth⁄3Name
 , "pyth⁄3.%d" , 
i
 ) ;

4343 i‡–
	`dëe˘Pª£n˚
(
gPyth⁄3Name
) )

4345 
lPyth⁄3Pª£¡
 = 1;

4350 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("lPyth⁄3Pª£¡ %d\n", 
lPyth⁄3Pª£¡
) ;

4351 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("gPyth⁄3Namê%s\n", 
gPyth⁄3Name
) ;

4353  
lPyth⁄3Pª£¡
 ;

4354 
	}
}

4357 
	$pyth⁄2Pª£¡
()

4359 
lPyth⁄2Pª£¡
 = -1 ;

4360 
i
;

4362 i‡–
lPyth⁄2Pª£¡
 < 0 )

4364 
lPyth⁄2Pª£¡
 = 0 ;

4365 
	`°r˝y
(
gPyth⁄2Name
 , "python2" ) ;

4366 i‡–
	`dëe˘Pª£n˚
(
gPyth⁄2Name
ËË
lPyth⁄2Pª£¡
 = 1;

4369  
i
 = 9 ; i >= 0 ; i -- )

4371 
	`•rötf
–
gPyth⁄2Name
 , "pyth⁄2.%d" , 
i
 ) ;

4372 i‡–
	`dëe˘Pª£n˚
(
gPyth⁄2Name
) )

4374 
lPyth⁄2Pª£¡
 = 1;

4379 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("lPyth⁄2Pª£¡ %d\n", 
lPyth⁄2Pª£¡
) ;

4380 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("gPyth⁄2Namê%s\n", 
gPyth⁄2Name
) ;

4382  
lPyth⁄2Pª£¡
 ;

4383 
	}
}

4386 
	$tköãr3Pª£¡
()

4388 
lTköãr3Pª£¡
 = -1 ;

4389 
lPyth⁄Comm™d
[256];

4390 
lPyth⁄P¨ams
[128] =

4393 i‡–
lTköãr3Pª£¡
 < 0 )

4395 
lTköãr3Pª£¡
 = 0 ;

4396 i‡–
	`pyth⁄3Pª£¡
() )

4398 
	`•rötf
–
lPyth⁄Comm™d
 , "%†%s" , 
gPyth⁄3Name
 , 
lPyth⁄P¨ams
 ) ;

4399 
lTköãr3Pª£¡
 = 
	`åyComm™d
(
lPyth⁄Comm™d
) ;

4401 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("lTköãr3Pª£¡ %d\n", 
lTköãr3Pª£¡
) ;

4403  
lTköãr3Pª£¡
 && 
	`gøphicMode
(Ë&& !(
	`isD¨wö
(Ë&& 
	`gëív
("SSH_TTY") );

4404 
	}
}

4407 
	$tköãr2Pª£¡
()

4409 
lTköãr2Pª£¡
 = -1 ;

4410 
lPyth⁄Comm™d
[256];

4411 
lPyth⁄P¨ams
[128] =

4414 i‡–
lTköãr2Pª£¡
 < 0 )

4416 
lTköãr2Pª£¡
 = 0 ;

4417 i‡–
	`pyth⁄2Pª£¡
() )

4419 
	`•rötf
–
lPyth⁄Comm™d
 , "%†%s" , 
gPyth⁄2Name
 , 
lPyth⁄P¨ams
 ) ;

4420 
lTköãr2Pª£¡
 = 
	`åyComm™d
(
lPyth⁄Comm™d
) ;

4422 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("lTköãr2Pª£¡ %d\n", 
lTköãr2Pª£¡
) ;

4424  
lTköãr2Pª£¡
 && 
	`gøphicMode
(Ë&& !(
	`isD¨wö
(Ë&& 
	`gëív
("SSH_TTY") );

4425 
	}
}

4428 
	$pyth⁄DbusPª£¡
()

4430 
lDbusPª£¡
 = -1 ;

4431 
lPyth⁄Comm™d
[384];

4432 
lPyth⁄P¨ams
[256] =

4437 i‡–
lDbusPª£¡
 < 0 )

4439 
lDbusPª£¡
 = 0 ;

4440 i‡–
	`pyth⁄2Pª£¡
() )

4442 
	`°r˝y
(
gPyth⁄Name
 , 
gPyth⁄2Name
 ) ;

4443 
	`•rötf
–
lPyth⁄Comm™d
 , "%†%s" , 
gPyth⁄Name
 , 
lPyth⁄P¨ams
 ) ;

4444 
lDbusPª£¡
 = 
	`åyComm™d
(
lPyth⁄Comm™d
) ;

4447 i‡–! 
lDbusPª£¡
 && 
	`pyth⁄3Pª£¡
() )

4449 
	`°r˝y
(
gPyth⁄Name
 , 
gPyth⁄3Name
 ) ;

4450 
	`•rötf
–
lPyth⁄Comm™d
 , "%†%s" , 
gPyth⁄Name
 , 
lPyth⁄P¨ams
 ) ;

4451 
lDbusPª£¡
 = 
	`åyComm™d
(
lPyth⁄Comm™d
) ;

4454 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("lDbusPª£¡ %d\n", 
lDbusPª£¡
) ;

4455 i‡(
töyfd_vîbo£
Ë
	`¥ötf
("gPyth⁄Namê%s\n", 
gPyth⁄Name
) ;

4457  
lDbusPª£¡
 && 
	`gøphicMode
(Ë&& !(
	`isD¨wö
(Ë&& 
	`gëív
("SSH_TTY") );

4458 
	}
}

4461 
	$sigH™dÀr
(
sig
)

4463 
FILE
 * 
lIn
 ;

4464 i‡––
lIn
 = 
	`p›í
( "pactl unload-module module-sine" , "r" ) ) )

4466 
	`p˛o£
–
lIn
 ) ;

4468 
	}
}

4470 
	$töyfd_bìp
()

4472 
lDülogSåög
 [256] ;

4473 
FILE
 * 
lIn
 ;

4475 i‡–
	`oßs¸ùtPª£¡
() )

4477 i‡–
	`aÂœyPª£¡
() >= 2 )

4479 
	`°r˝y
–
lDülogSåög
 , "afplay /System/Library/Sounds/Ping.aiff") ;

4483 
	`°r˝y
–
lDülogSåög
 , "osascript -e 'tellápplication \"System Events\"Åo beep'") ;

4486 i‡–
	`∑˘lPª£¡
() )

4488 
	`sig«l
(
SIGINT
, 
sigH™dÀr
);

4490 
	`°r˝y
–
lDülogSåög
 , "thnum=$(pactlÜoad-module module-sine frequency=440);sleep .3;pactl unload-module $thnum" ) ;

4492 i‡–
	`•ókîã°Pª£¡
() )

4495 
	`°r˝y
–
lDülogSåög
 , "( speaker-test -t sine -f 440 > /dev/tty )&Öid=$!;sleep .3; kill -9 $pid" ) ;

4497 i‡–
	`bì≥xePª£¡
() )

4499 
	`°r˝y
–
lDülogSåög
 , "beep.exe 440 300" ) ;

4503 
	`°r˝y
–
lDülogSåög
 , "printf '\a' > /dev/tty" ) ;

4506 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

4508 i‡––
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

4510 
	`p˛o£
–
lIn
 ) ;

4513 i‡–
	`∑˘lPª£¡
() )

4515 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

4517 
	}
}

4520 
	$töyfd_mesßgeBox
(

4521 c⁄° * 
aTôÀ
 ,

4522 c⁄° * 
aMesßge
 ,

4523 c⁄° * 
aDülogTy≥
 ,

4524 c⁄° * 
aIc⁄Ty≥
 ,

4525 
aDeÁu…Buâ⁄
 )

4527 
lBuff
 [
MAX_PATH_OR_CMD
] ;

4528 * 
lDülogSåög
 = 
NULL
 ;

4529 * 
ÕDülogSåög
;

4530 
FILE
 * 
lIn
 ;

4531 
lWasGøphicDülog
 = 0 ;

4532 
lWasXãrm
 = 0 ;

4533 
lResu…
 ;

4534 
lCh¨
 ;

4535 
ãrmios
 
öfoOri
;

4536 
ãrmios
 
öfo
;

4537 
size_t
 
lTôÀLí
 ;

4538 
size_t
 
lMesßgeLí
 ;

4540 
lBuff
[0]='\0';

4542 
lTôÀLí
 = 
aTôÀ
 ? 
	`°æí
(aTitle) : 0 ;

4543 
lMesßgeLí
 = 
aMesßge
 ? 
	`°æí
(aMessage) : 0 ;

4544 i‡–!
aTôÀ
 || 
	`°rcmp
(aTitle,"tinyfd_query") )

4546 
lDülogSåög
 = (*Ë
	`mÆloc
–
MAX_PATH_OR_CMD
 + 
lTôÀLí
 + 
lMesßgeLí
 );

4549 i‡–
	`oßs¸ùtPª£¡
( ) )

4551 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); 1;}

4553 
	`°r˝y
–
lDülogSåög
 , "osascript ");

4554 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"System Events\"' -e 'Activate'");

4555 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e 'set {vButton}Åo {buttonÑeturned} of ( display dialog \"") ;

4556 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

4558 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

4560 
	`°rˇt
(
lDülogSåög
, "\" ") ;

4561 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

4563 
	`°rˇt
(
lDülogSåög
, "withÅitle \"") ;

4564 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

4565 
	`°rˇt
(
lDülogSåög
, "\" ") ;

4567 
	`°rˇt
(
lDülogSåög
, "with icon ") ;

4568 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "error" ,áIconType ) )

4570 
	`°rˇt
(
lDülogSåög
, "stop " ) ;

4572 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "warning" ,áIconType ) )

4574 
	`°rˇt
(
lDülogSåög
, "caution " ) ;

4578 
	`°rˇt
(
lDülogSåög
, "note " ) ;

4580 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

4582 i‡–! 
aDeÁu…Buâ⁄
 )

4584 
	`°rˇt
–
lDülogSåög
 ,"default button \"Cancel\" " ) ;

4587 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

4589 
	`°rˇt
–
lDülogSåög
 ,"buttons {\"No\", \"Yes\"} " ) ;

4590 i‡(
aDeÁu…Buâ⁄
)

4592 
	`°rˇt
–
lDülogSåög
 ,"default button \"Yes\" " ) ;

4596 
	`°rˇt
–
lDülogSåög
 ,"default button \"No\" " ) ;

4598 
	`°rˇt
–
lDülogSåög
 ,"cancel button \"No\"" ) ;

4600 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesnocancel" ,áDialogType ) )

4602 
	`°rˇt
–
lDülogSåög
 ,"buttons {\"No\", \"Yes\", \"Cancel\"} " ) ;

4603 
aDeÁu…Buâ⁄
)

4605 1: 
	`°rˇt
–
lDülogSåög
 ,"default button \"Yes\" " ) ; ;

4606 2: 
	`°rˇt
–
lDülogSåög
 ,"default button \"No\" " ) ; ;

4607 0: 
	`°rˇt
–
lDülogSåög
 ,"default button \"Cancel\" " ) ; ;

4609 
	`°rˇt
–
lDülogSåög
 ,"cancel button \"Cancel\"" ) ;

4613 
	`°rˇt
–
lDülogSåög
 ,"buttons {\"OK\"} " ) ;

4614 
	`°rˇt
–
lDülogSåög
 ,"default button \"OK\" " ) ;

4616 
	`°rˇt
–
lDülogSåög
, ")' ") ;

4618 
	`°rˇt
–
lDülogSåög
,

4624 
	`°rˇt
–
lDülogSåög
, "-e 'onÉrrorÇumber -128' " ) ;

4625 
	`°rˇt
–
lDülogSåög
, "-e '0' " );

4627 
	`°rˇt
–
lDülogSåög
, "-e 'endÅry'") ;

4628 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
, " -e 'endÅell'") ;

4630 i‡–
	`kdülogPª£¡
() )

4632 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); 1;}

4634 
	`°r˝y
–
lDülogSåög
 , "kdialog" ) ;

4635 i‡–
	`kdülogPª£¡
() == 2 )

4637 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

4640 
	`°rˇt
–
lDülogSåög
 , " --" ) ;

4641 i‡–
aDülogTy≥
 && ( ! 
	`°rcmp
( "okcancel" ,áDialogType )

4642 || ! 
	`°rcmp
–"ye¢o" , 
aDülogTy≥
 ) || ! strcmp( "yesnocancel" ,áDialogType ) ) )

4644 i‡–
aIc⁄Ty≥
 && ( ! 
	`°rcmp
( "warning" ,áIconType )

4645 || ! 
	`°rcmp
–"îr‹" , 
aIc⁄Ty≥
 ) ) )

4647 
	`°rˇt
–
lDülogSåög
 , "warning" ) ;

4649 i‡–! 
	`°rcmp
–"ye¢oˇn˚l" , 
aDülogTy≥
 ) )

4651 
	`°rˇt
–
lDülogSåög
 , "yesnocancel" ) ;

4655 
	`°rˇt
–
lDülogSåög
 , "yesno" ) ;

4658 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "error" ,áIconType ) )

4660 
	`°rˇt
–
lDülogSåög
 , "error" ) ;

4662 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "warning" ,áIconType ) )

4664 
	`°rˇt
–
lDülogSåög
 , "sorry" ) ;

4668 
	`°rˇt
–
lDülogSåög
 , "msgbox" ) ;

4670 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

4671 i‡–
aMesßge
 )

4673 
	`°rˇt
–
lDülogSåög
 , 
aMesßge
 ) ;

4675 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

4676 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

4678 
	`°rˇt
–
lDülogSåög
 ,

4681 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

4683 
	`°rˇt
(
lDülogSåög
, " --title \"") ;

4684 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

4685 
	`°rˇt
(
lDülogSåög
, "\"") ;

4688 i‡–! 
	`°rcmp
–"ye¢oˇn˚l" , 
aDülogTy≥
 ) )

4690 
	`°rˇt
–
lDülogSåög
 , "; x=$? ;if [ $x = 0 ] ;thenÉcho 1;elif [ $x = 1 ] ;thenÉcho 2;elseÉcho 0;fi");

4694 
	`°rˇt
–
lDülogSåög
 , ";if [ $? = 0 ];thenÉcho 1;elseÉcho 0;fi");

4697 i‡–
	`zíôyPª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

4699 i‡–
	`zíôyPª£¡
() )

4701 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); 1;}

4702 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(zenity" ) ;

4703 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

4705 
	`°rˇt
(
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

4708 i‡–
	`m©edülogPª£¡
() )

4710 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); 1;}

4711 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(matedialog" ) ;

4713 i‡–
	`shñÀmíèryPª£¡
() )

4715 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); 1;}

4716 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(shellementary" ) ;

4720 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); 1;}

4721 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(qarma" ) ;

4722 i‡–!
	`gëív
("SSH_TTY") )

4724 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

4727 
	`°rˇt
(
lDülogSåög
, " --");

4729 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

4731 
	`°rˇt
–
lDülogSåög
 ,

4734 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

4736 
	`°rˇt
–
lDülogSåög
 , "question" ) ;

4738 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesnocancel" ,áDialogType ) )

4740 
	`°rˇt
–
lDülogSåög
 , "list --column \"\" --hide-header \"Yes\" \"No\"" ) ;

4742 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "error" ,áIconType ) )

4744 
	`°rˇt
–
lDülogSåög
 , "error" ) ;

4746 i‡–
aIc⁄Ty≥
 && ! 
	`°rcmp
( "warning" ,áIconType ) )

4748 
	`°rˇt
–
lDülogSåög
 , "warning" ) ;

4752 
	`°rˇt
–
lDülogSåög
 , "info" ) ;

4754 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

4756 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

4757 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

4758 
	`°rˇt
(
lDülogSåög
, "\"") ;

4760 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

4762 
	`°rˇt
(
lDülogSåög
, " --no-wrap --text=\"") ;

4763 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

4764 
	`°rˇt
(
lDülogSåög
, "\"") ;

4766 i‡–(
	`zíôy3Pª£¡
(Ë>3Ë|| (!
	`zíôyPª£¡
(Ë&& (
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
()) ) )

4768 
	`°rˇt
–
lDülogSåög
 , " --icon-name=dialog-" ) ;

4769 i‡–
aIc⁄Ty≥
 && (! 
	`°rcmp
( "question" ,áIconType )

4770 || ! 
	`°rcmp
–"îr‹" , 
aIc⁄Ty≥
 )

4771 || ! 
	`°rcmp
–"w¨nög" , 
aIc⁄Ty≥
 ) ) )

4773 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

4777 
	`°rˇt
–
lDülogSåög
 , "information" ) ;

4781 i‡(
töyfd_sûít
Ë
	`°rˇt
–
lDülogSåög
 , " 2>/dev/null ");

4783 i‡–! 
	`°rcmp
–"ye¢oˇn˚l" , 
aDülogTy≥
 ) )

4785 
	`°rˇt
–
lDülogSåög
 ,

4790 
	`°rˇt
–
lDülogSåög
 , ");if [ $? = 0 ];thenÉcho 1;elseÉcho 0;fi");

4793 i‡–!
	`gxmesßgePª£¡
(Ë&& !
	`gmesßgePª£¡
(Ë&& !
	`gdülogPª£¡
(Ë&& !
	`xdülogPª£¡
(Ë&& 
	`tköãr3Pª£¡
() )

4795 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python3-tkinter"); 1;}

4797 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄3Name
 ) ;

4798 
	`°rˇt
–
lDülogSåög
 ,

4801 
	`°rˇt
–
lDülogSåög
 ,"res=messagebox." ) ;

4802 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

4804 
	`°rˇt
–
lDülogSåög
 , "askokcancel(" ) ;

4805 i‡–
aDeÁu…Buâ⁄
 )

4807 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.OK," ) ;

4811 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.CANCEL," ) ;

4814 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

4816 
	`°rˇt
–
lDülogSåög
 , "askyesno(" ) ;

4817 i‡–
aDeÁu…Buâ⁄
 )

4819 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.YES," ) ;

4823 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.NO," ) ;

4826 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesnocancel" ,áDialogType ) )

4828 
	`°rˇt
–
lDülogSåög
 , "askyesnocancel(" ) ;

4829  
aDeÁu…Buâ⁄
 )

4831 1: 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.YES," ); ;

4832 2: 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.NO," ); ;

4833 0: 
	`°rˇt
–
lDülogSåög
 , "default=messagebox.CANCEL," ); ;

4838 
	`°rˇt
–
lDülogSåög
 , "showinfo(" ) ;

4841 
	`°rˇt
–
lDülogSåög
 , "icon='" ) ;

4842 i‡–
aIc⁄Ty≥
 && (! 
	`°rcmp
( "question" ,áIconType )

4843 || ! 
	`°rcmp
–"îr‹" , 
aIc⁄Ty≥
 )

4844 || ! 
	`°rcmp
–"w¨nög" , 
aIc⁄Ty≥
 ) ) )

4846 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

4850 
	`°rˇt
–
lDülogSåög
 , "info" ) ;

4853 
	`°rˇt
(
lDülogSåög
, "',") ;

4854 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

4856 
	`°rˇt
(
lDülogSåög
, "title='") ;

4857 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

4858 
	`°rˇt
(
lDülogSåög
, "',") ;

4860 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

4862 
	`°rˇt
(
lDülogSåög
, "message='") ;

4863 
ÕDülogSåög
 = 
lDülogSåög
 + 
	`°æí
(lDialogString);

4864 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
ÕDülogSåög
 ) ;

4865 
	`°rˇt
(
lDülogSåög
, "'") ;

4868 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesnocancel" ,áDialogType ) )

4870 
	`°rˇt
(
lDülogSåög
, ");\n\
Ñes is None :\n\tprint(0)\n\
Ñes is False :\n\tprint(2)\n\
 :\n\tprint 1\n\"" ) ;

4877 
	`°rˇt
(
lDülogSåög
, ");\n\
Ñes is False :\n\tprint(0)\n\
 :\n\tprint(1)\n\"" ) ;

4882 i‡–!
	`gxmesßgePª£¡
(Ë&& !
	`gmesßgePª£¡
(Ë&& !
	`gdülogPª£¡
(Ë&& !
	`xdülogPª£¡
(Ë&& 
	`tköãr2Pª£¡
() )

4884 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python2-tkinter"); 1;}

4885 
	`°r˝y
–
lDülogSåög
 , "export PYTHONIOENCODING=utf-8;" ) ;

4886 
	`°rˇt
–
lDülogSåög
 , 
gPyth⁄2Name
 ) ;

4887 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`isD¨wö
( ) )

4889 
	`°rˇt
–
lDülogSåög
 , " -i" ) ;

4892 
	`°rˇt
–
lDülogSåög
 ,

4895 i‡–
	`isD¨wö
( ) )

4897 
	`°rˇt
–
lDülogSåög
 ,

4902 
	`°rˇt
–
lDülogSåög
 ,"res=tkMessageBox." ) ;

4903 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

4905 
	`°rˇt
–
lDülogSåög
 , "askokcancel(" ) ;

4906 i‡–
aDeÁu…Buâ⁄
 )

4908 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.OK," ) ;

4912 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.CANCEL," ) ;

4915 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

4917 
	`°rˇt
–
lDülogSåög
 , "askyesno(" ) ;

4918 i‡–
aDeÁu…Buâ⁄
 )

4920 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.YES," ) ;

4924 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.NO," ) ;

4927 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesnocancel" ,áDialogType ) )

4929 
	`°rˇt
–
lDülogSåög
 , "askyesnocancel(" ) ;

4930  
aDeÁu…Buâ⁄
 )

4932 1: 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.YES," ); ;

4933 2: 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.NO," ); ;

4934 0: 
	`°rˇt
–
lDülogSåög
 , "default=tkMessageBox.CANCEL," ); ;

4939 
	`°rˇt
–
lDülogSåög
 , "showinfo(" ) ;

4942 
	`°rˇt
–
lDülogSåög
 , "icon='" ) ;

4943 i‡–
aIc⁄Ty≥
 && (! 
	`°rcmp
( "question" ,áIconType )

4944 || ! 
	`°rcmp
–"îr‹" , 
aIc⁄Ty≥
 )

4945 || ! 
	`°rcmp
–"w¨nög" , 
aIc⁄Ty≥
 ) ) )

4947 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

4951 
	`°rˇt
–
lDülogSåög
 , "info" ) ;

4954 
	`°rˇt
(
lDülogSåög
, "',") ;

4955 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

4957 
	`°rˇt
(
lDülogSåög
, "title='") ;

4958 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

4959 
	`°rˇt
(
lDülogSåög
, "',") ;

4961 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

4963 
	`°rˇt
(
lDülogSåög
, "message='") ;

4964 
ÕDülogSåög
 = 
lDülogSåög
 + 
	`°æí
(lDialogString);

4965 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
ÕDülogSåög
 ) ;

4966 
	`°rˇt
(
lDülogSåög
, "'") ;

4969 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesnocancel" ,áDialogType ) )

4971 
	`°rˇt
(
lDülogSåög
, ");\n\
Ñes is None :\n\tprint 0\n\
Ñes is False :\n\tprint 2\n\
 :\n\tprint 1\n\"" ) ;

4978 
	`°rˇt
(
lDülogSåög
, ");\n\
Ñes is False :\n\tprint 0\n\
 :\n\tprint 1\n\"" ) ;

4983 i‡–
	`gxmesßgePª£¡
(Ë|| 
	`gmesßgePª£¡
(Ë|| (!
	`gdülogPª£¡
(Ë&& !
	`xdülogPª£¡
(Ë&& 
	`xmesßgePª£¡
()) )

4985 i‡–
	`gxmesßgePª£¡
() )

4987 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"gxmessage"); 1;}

4988 
	`°r˝y
–
lDülogSåög
 , "gxmessage");

4990 i‡–
	`gmesßgePª£¡
() )

4992 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"gmessage"); 1;}

4993 
	`°r˝y
–
lDülogSåög
 , "gmessage");

4997 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xmessage"); 1;}

4998 
	`°r˝y
–
lDülogSåög
 , "xmessage");

5001 i‡–
aDülogTy≥
 && ! 
	`°rcmp
("okcancel" ,áDialogType) )

5003 
	`°rˇt
–
lDülogSåög
 , " -buttons Ok:1,Cancel:0");

5004  
aDeÁu…Buâ⁄
 )

5006 1: 
	`°rˇt
–
lDülogSåög
 , " -default Ok"); ;

5007 0: 
	`°rˇt
–
lDülogSåög
 , " -default Cancel"); ;

5010 i‡–
aDülogTy≥
 && ! 
	`°rcmp
("yesno" ,áDialogType) )

5012 
	`°rˇt
–
lDülogSåög
 , " -buttons Yes:1,No:0");

5013  
aDeÁu…Buâ⁄
 )

5015 1: 
	`°rˇt
–
lDülogSåög
 , " -default Yes"); ;

5016 0: 
	`°rˇt
–
lDülogSåög
 , " -default No"); ;

5019 i‡–
aDülogTy≥
 && ! 
	`°rcmp
("yesnocancel" ,áDialogType) )

5021 
	`°rˇt
–
lDülogSåög
 , " -buttons Yes:1,No:2,Cancel:0");

5022  
aDeÁu…Buâ⁄
 )

5024 1: 
	`°rˇt
–
lDülogSåög
 , " -default Yes"); ;

5025 2: 
	`°rˇt
–
lDülogSåög
 , " -default No"); ;

5026 0: 
	`°rˇt
–
lDülogSåög
 , " -default Cancel"); ;

5031 
	`°rˇt
–
lDülogSåög
 , " -buttons Ok:1");

5032 
	`°rˇt
–
lDülogSåög
 , " -default Ok");

5035 
	`°rˇt
–
lDülogSåög
 , " -center \"");

5036 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5038 
	`°rˇt
–
lDülogSåög
 , 
aMesßge
 ) ;

5040 
	`°rˇt
(
lDülogSåög
, "\"" ) ;

5041 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5043 
	`°rˇt
–
lDülogSåög
 , " -title \"");

5044 
	`°rˇt
–
lDülogSåög
 , 
aTôÀ
 ) ;

5045 
	`°rˇt
–
lDülogSåög
, "\"" ) ;

5047 
	`°rˇt
–
lDülogSåög
 , " ;Écho $? ");

5049 i‡–
	`xdülogPª£¡
(Ë|| 
	`gdülogPª£¡
(Ë|| 
	`dülogName
(Ë|| 
	`whùèûPª£¡
() )

5051 i‡–
	`gdülogPª£¡
( ) )

5053 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"gdialog"); 1;}

5054 
lWasGøphicDülog
 = 1 ;

5055 
	`°r˝y
–
lDülogSåög
 , "(gdialog " ) ;

5057 i‡–
	`xdülogPª£¡
( ) )

5059 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xdialog"); 1;}

5060 
lWasGøphicDülog
 = 1 ;

5061 
	`°r˝y
–
lDülogSåög
 , "(Xdialog " ) ;

5063 i‡–
	`dülogName
( ) )

5065 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); 0;}

5066 i‡–
	`isTîmöÆRu¬ög
( ) )

5068 
	`°r˝y
–
lDülogSåög
 , "(dialog " ) ;

5072 
lWasXãrm
 = 1 ;

5073 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

5074 
	`°rˇt
–
lDülogSåög
 , "'(" ) ;

5075 
	`°rˇt
–
lDülogSåög
 , 
	`dülogName
() ) ;

5076 
	`°rˇt
–
lDülogSåög
 , " " ) ;

5079 i‡–
	`isTîmöÆRu¬ög
( ) )

5081 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"whiptail"); 0;}

5082 
	`°r˝y
–
lDülogSåög
 , "(whiptail " ) ;

5086 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"whiptail"); 0;}

5087 
lWasXãrm
 = 1 ;

5088 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

5089 
	`°rˇt
–
lDülogSåög
 , "'(whiptail " ) ;

5092 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5094 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

5095 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5096 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5099 i‡–!
	`xdülogPª£¡
(Ë&& !
	`gdülogPª£¡
() )

5101 i‡–
aDülogTy≥
 && ( !
	`°rcmp
( "okcancel" ,áDialogType ) || !strcmp( "yesno" ,áDialogType )

5102 || !
	`°rcmp
–"ye¢oˇn˚l" , 
aDülogTy≥
 ) ) )

5104 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

5105 
	`°rˇt
(
lDülogSåög
, "tab: move focus") ;

5106 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5110 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "okcancel" ,áDialogType ) )

5112 i‡–! 
aDeÁu…Buâ⁄
 )

5114 
	`°rˇt
–
lDülogSåög
 , "--defaultno " ) ;

5116 
	`°rˇt
–
lDülogSåög
 ,

5119 i‡–
aDülogTy≥
 && ! 
	`°rcmp
( "yesno" ,áDialogType ) )

5121 i‡–! 
aDeÁu…Buâ⁄
 )

5123 
	`°rˇt
–
lDülogSåög
 , "--defaultno " ) ;

5125 
	`°rˇt
–
lDülogSåög
 , "--yesno " ) ;

5127 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

5129 i‡(!
aDeÁu…Buâ⁄
)

5131 
	`°rˇt
(
lDülogSåög
, "--defaultno ");

5133 
	`°rˇt
(
lDülogSåög
, "--menu ");

5137 
	`°rˇt
–
lDülogSåög
 , "--msgbox " ) ;

5140 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

5141 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5143 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

5145 
	`°rˇt
(
lDülogSåög
, "\" ");

5147 i‡–
lWasGøphicDülog
 )

5149 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

5151 
	`°rˇt
(
lDülogSåög
,"0 60 0 Yes \"\" No \"\") 2>/tmp/tinyfd.txt;\
 [ $? = 0 ];thenÅinyfdBool=1;elseÅinyfdBool=0;fi;\
=$(cat /tmp/tinyfd.txt);echo $tinyfdBool$tinyfdRes") ;

5157 
	`°rˇt
(
lDülogSåög
,

5163 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

5165 
	`°rˇt
(
lDülogSåög
,"0 60 0 Yes \"\" No \"\" >/dev/tty ) 2>/tmp/tinyfd.txt;\
 [ $? = 0 ];thenÅinyfdBool=1;elseÅinyfdBool=0;fi;\
=$(cat /tmp/tinyfd.txt);echo $tinyfdBool$tinyfdRes") ;

5169 i‡–
lWasXãrm
 )

5171 
	`°rˇt
(
lDülogSåög
," >/tmp/tinyfd0.txt';cat /tmp/tinyfd0.txt");

5175 
	`°rˇt
(
lDülogSåög
, "; clear >/dev/tty") ;

5180 
	`°rˇt
(
lDülogSåög
, "10 60 >/dev/tty) 2>&1;if [ $? = 0 ];");

5181 i‡–
lWasXãrm
 )

5183 
	`°rˇt
–
lDülogSåög
 ,

5188 
	`°rˇt
(
lDülogSåög
,

5194 i‡–!
	`isTîmöÆRu¬ög
(Ë&& 
	`ãrmöÆName
() )

5196 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"basicinput"); 0;}

5197 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

5198 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

5199 i‡–!
gW¨nögDi•œyed
 && !
töyfd_f‹˚C⁄sﬁe
)

5201 
gW¨nögDi•œyed
 = 1 ;

5202 
	`°rˇt
–
lDülogSåög
 , "echo \"" ) ;

5203 
	`°rˇt
–
lDülogSåög
, 
gTôÀ
) ;

5204 
	`°rˇt
–
lDülogSåög
 , "\";" ) ;

5205 
	`°rˇt
–
lDülogSåög
 , "echo \"" ) ;

5206 
	`°rˇt
–
lDülogSåög
, 
töyfd_√eds
) ;

5207 
	`°rˇt
–
lDülogSåög
 , "\";echo;echo;" ) ;

5209 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5211 
	`°rˇt
–
lDülogSåög
 , "echo \"" ) ;

5212 
	`°rˇt
–
lDülogSåög
, 
aTôÀ
) ;

5213 
	`°rˇt
–
lDülogSåög
 , "\";echo;" ) ;

5215 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5217 
	`°rˇt
–
lDülogSåög
 , "echo \"" ) ;

5218 
	`°rˇt
–
lDülogSåög
, 
aMesßge
) ;

5219 
	`°rˇt
–
lDülogSåög
 , "\"; " ) ;

5221 i‡–
aDülogTy≥
 && !
	`°rcmp
("yesno",aDialogType) )

5223 
	`°rˇt
–
lDülogSåög
 , "echo -n \"y/n: \"; " ) ;

5224 
	`°rˇt
–
lDülogSåög
 , "stty sane -echo;" ) ;

5225 
	`°rˇt
–
lDülogSåög
 ,

5227 
	`°rˇt
–
lDülogSåög
 ,

5229 
	`°rˇt
–
lDülogSåög
 , "\techo 1\nelse\n\techo 0\nfi" ) ;

5231 i‡–
aDülogTy≥
 && !
	`°rcmp
("okcancel",aDialogType) )

5233 
	`°rˇt
–
lDülogSåög
 , "echo -n \"[O]kay/[C]ancel: \"; " ) ;

5234 
	`°rˇt
–
lDülogSåög
 , "stty sane -echo;" ) ;

5235 
	`°rˇt
–
lDülogSåög
 ,

5237 
	`°rˇt
–
lDülogSåög
 ,

5239 
	`°rˇt
–
lDülogSåög
 , "\techo 1\nelse\n\techo 0\nfi" ) ;

5241 i‡–
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",aDialogType) )

5243 
	`°rˇt
–
lDülogSåög
 , "echo -n \"[Y]es/[N]o/[C]ancel: \"; " ) ;

5244 
	`°rˇt
–
lDülogSåög
 , "stty sane -echo;" ) ;

5245 
	`°rˇt
–
lDülogSåög
 ,

5247 
	`°rˇt
–
lDülogSåög
 ,

5249 
	`°rˇt
–
lDülogSåög
 , "elifÉcho \"$answer\" | grep -iq \"^n\";then\n\techo 2\n" ) ;

5250 
	`°rˇt
–
lDülogSåög
 , "else\n\techo 0\nfi" ) ;

5254 
	`°rˇt
(
lDülogSåög
 , "echo -n \"pressÉnterÅo continue \"; ");

5255 
	`°rˇt
–
lDülogSåög
 , "stty sane -echo;" ) ;

5256 
	`°rˇt
–
lDülogSåög
 ,

5259 
	`°rˇt
–
lDülogSåög
 ,

5262 i‡–!
	`isTîmöÆRu¬ög
(Ë&& 
	`pyth⁄DbusPª£¡
(Ë&& !
	`°rcmp
("ok" , 
aDülogTy≥
) )

5264 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python-dbus"); 1;}

5265 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄Name
 ) ;

5266 
	`°rˇt
–
lDülogSåög
 ," -c \"import dbus;bus=dbus.SessionBus();");

5267 
	`°rˇt
–
lDülogSåög
 ,"notif=bus.get_object('org.freedesktop.Notifications','/org/freedesktop/Notifications');" ) ;

5268 
	`°rˇt
–
lDülogSåög
 ,"notify=dbus.Interface(notif,'org.freedesktop.Notifications');" ) ;

5269 
	`°rˇt
–
lDülogSåög
 ,"notify.Notify('',0,'" ) ;

5270 i‡–
aIc⁄Ty≥
 && 
	`°æí
(aIconType) )

5272 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

5274 
	`°rˇt
(
lDülogSåög
, "','") ;

5275 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5277 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5279 
	`°rˇt
(
lDülogSåög
, "','") ;

5280 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5282 
ÕDülogSåög
 = 
lDülogSåög
 + 
	`°æí
(lDialogString);

5283 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
ÕDülogSåög
 ) ;

5285 
	`°rˇt
(
lDülogSåög
, "','','',5000)\"") ;

5287 i‡–!
	`isTîmöÆRu¬ög
(Ë&& (
	`≥æPª£¡
(Ë>2Ë&& !
	`°rcmp
("ok" , 
aDülogTy≥
) )

5289 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"perl-dbus"); 1;}

5291 
	`°r˝y
–
lDülogSåög
 , "perl -e \"use Net::DBus;\
 \\$sessionBus = Net::DBus->session;\
 \\$notificationsService = \\$sessionBus->get_service('org.freedesktop.Notifications');\
 \\$notificationsObject = \\$notificationsService->get_object('/org/freedesktop/Notifications',\
'org.freedesktop.Notifications');");

5297 
	`•rötf
–
lDülogSåög
 + 
	`°æí
(lDialogString),

5299 
aIc⁄Ty≥
?aIc⁄Ty≥:"", 
aTôÀ
?aTôÀ:"", 
aMesßge
?aMessage:"" ) ;

5301 i‡–!
	`isTîmöÆRu¬ög
(Ë&& 
	`nŸify£ndPª£¡
(Ë&& !
	`°rcmp
("ok" , 
aDülogTy≥
) )

5304 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"notifysend"); 1;}

5305 
	`°r˝y
–
lDülogSåög
 , "notify-send" ) ;

5306 i‡–
aIc⁄Ty≥
 && 
	`°æí
(aIconType) )

5308 
	`°rˇt
–
lDülogSåög
 , " -i '" ) ;

5309 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

5310 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

5312 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

5313 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5315 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5316 
	`°rˇt
–
lDülogSåög
 , " | " ) ;

5318 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5320 
	`ª∂a˚SubSå
–
aMesßge
 , "\n\t" , " | " , 
lBuff
 ) ;

5321 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , " | " , 
lBuff
 ) ;

5322 
	`ª∂a˚SubSå
–
aMesßge
 , "\t" , " " , 
lBuff
 ) ;

5323 
	`°rˇt
(
lDülogSåög
, 
lBuff
) ;

5325 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

5329 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"basicinput"); 0;}

5330 i‡–!
gW¨nögDi•œyed
 && !
töyfd_f‹˚C⁄sﬁe
)

5332 
gW¨nögDi•œyed
 = 1 ;

5333 
	`¥ötf
("\n\n%s\n", 
gTôÀ
);

5334 
	`¥ötf
("%s\n\n", 
töyfd_√eds
);

5336 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5338 
	`¥ötf
("\n%s\n", 
aTôÀ
);

5341 
	`tcgë©å
(0, &
öfoOri
);

5342 
	`tcgë©å
(0, &
öfo
);

5343 
öfo
.
c_lÊag
 &~
ICANON
;

5344 
öfo
.
c_cc
[
VMIN
] = 1;

5345 
öfo
.
c_cc
[
VTIME
] = 0;

5346 
	`tc£èâr
(0, 
TCSANOW
, &
öfo
);

5347 i‡–
aDülogTy≥
 && !
	`°rcmp
("yesno",aDialogType) )

5351 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5353 
	`¥ötf
("\n%s\n",
aMesßge
);

5355 
	`¥ötf
("y/n: "); 
	`fÊush
(
°dout
);

5356 
lCh¨
 = 
	`tﬁowî
–
	`gëch¨
() ) ;

5357 
	`¥ötf
("\n\n");

5359  
lCh¨
 != 'y' &&ÜChar != 'n' );

5360 
lResu…
 = 
lCh¨
 == 'y' ? 1 : 0 ;

5362 i‡–
aDülogTy≥
 && !
	`°rcmp
("okcancel",aDialogType) )

5366 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5368 
	`¥ötf
("\n%s\n",
aMesßge
);

5370 
	`¥ötf
("[O]kay/[C]™˚l: "); 
	`fÊush
(
°dout
);

5371 
lCh¨
 = 
	`tﬁowî
–
	`gëch¨
() ) ;

5372 
	`¥ötf
("\n\n");

5374  
lCh¨
 != 'o' &&ÜChar != 'c' );

5375 
lResu…
 = 
lCh¨
 == 'o' ? 1 : 0 ;

5377 i‡–
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",aDialogType) )

5381 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5383 
	`¥ötf
("\n%s\n",
aMesßge
);

5385 
	`¥ötf
("[Y]es/[N]o/[C]™˚l: "); 
	`fÊush
(
°dout
);

5386 
lCh¨
 = 
	`tﬁowî
–
	`gëch¨
() ) ;

5387 
	`¥ötf
("\n\n");

5389  
lCh¨
 != 'y' &&ÜChar != 'n' &&ÜChar != 'c' );

5390 
lResu…
 = (
lCh¨
 == 'y') ? 1 : (lChar == 'n') ? 2 : 0 ;

5394 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5396 
	`¥ötf
("\n%s\n\n",
aMesßge
);

5398 
	`¥ötf
("¥es†íã∏tÿc⁄töuê"); 
	`fÊush
(
°dout
);

5399 
	`gëch¨
() ;

5400 
	`¥ötf
("\n\n");

5401 
lResu…
 = 1 ;

5403 
	`tc£èâr
(0, 
TCSANOW
, &
öfoOri
);

5404 
	`‰ì
(
lDülogSåög
);

5405  
lResu…
 ;

5408 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

5410 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

5412 
	`‰ì
(
lDülogSåög
);

5415  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

5418 
	`p˛o£
–
lIn
 ) ;

5421 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

5423 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

5427 i‡(
aDülogTy≥
 && !
	`°rcmp
("yesnocancel",áDialogType))

5429 i‡–
lBuff
[0]=='1' )

5431 i‡–!
	`°rcmp
–
lBuff
+1 , "Yes" )Ë
	`°r˝y
(lBuff,"1");

5432 i‡–!
	`°rcmp
–
lBuff
+1 , "No" )Ë
	`°r˝y
(lBuff,"2");

5437 
lResu…
 = !
	`°rcmp
–
lBuff
 , "2" ) ? 2 : !strcmp(ÜBuff , "1" ) ? 1 : 0;

5440 
	`‰ì
(
lDülogSåög
);

5441  
lResu…
 ;

5442 
	}
}

5446 
	$töyfd_nŸifyP›up
(

5447 c⁄° * 
aTôÀ
 ,

5448 c⁄° * 
aMesßge
 ,

5449 c⁄° * 
aIc⁄Ty≥
 )

5451 
lBuff
[
MAX_PATH_OR_CMD
];

5452 * 
lDülogSåög
 = 
NULL
 ;

5453 * 
ÕDülogSåög
 ;

5454 
FILE
 * 
lIn
 ;

5455 
size_t
 
lTôÀLí
 ;

5456 
size_t
 
lMesßgeLí
 ;

5458 i‡–
	`gëív
("SSH_TTY") )

5460  
	`töyfd_mesßgeBox
(
aTôÀ
, 
aMesßge
, "ok", 
aIc⁄Ty≥
, 0);

5463 
lTôÀLí
 = 
aTôÀ
 ? 
	`°æí
(aTitle) : 0 ;

5464 
lMesßgeLí
 = 
aMesßge
 ? 
	`°æí
(aMessage) : 0 ;

5465 i‡–!
aTôÀ
 || 
	`°rcmp
(aTitle,"tinyfd_query") )

5467 
lDülogSåög
 = (*Ë
	`mÆloc
–
MAX_PATH_OR_CMD
 + 
lTôÀLí
 + 
lMesßgeLí
 );

5470 i‡–
	`oßs¸ùtPª£¡
( ) )

5472 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); 1;}

5474 
	`°r˝y
–
lDülogSåög
 , "osascript ");

5475 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"System Events\"' -e 'Activate'");

5476 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e 'displayÇotification \"") ;

5477 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5479 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

5481 
	`°rˇt
(
lDülogSåög
, " \" ") ;

5482 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5484 
	`°rˇt
(
lDülogSåög
, "withÅitle \"") ;

5485 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5486 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5489 
	`°rˇt
–
lDülogSåög
, "' -e 'endÅry'") ;

5490 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
, " -e 'endÅell'") ;

5492 i‡–
	`kdülogPª£¡
() )

5494 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); 1;}

5495 
	`°r˝y
–
lDülogSåög
 , "kdialog" ) ;

5497 i‡–
aIc⁄Ty≥
 && 
	`°æí
(aIconType) )

5499 
	`°rˇt
–
lDülogSåög
 , " --icon '" ) ;

5500 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

5501 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

5503 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5505 
	`°rˇt
–
lDülogSåög
 , " --title \"" ) ;

5506 
	`°rˇt
–
lDülogSåög
 , 
aTôÀ
 ) ;

5507 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

5510 
	`°rˇt
–
lDülogSåög
 , " --passivepopup" ) ;

5511 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

5512 i‡–
aMesßge
 )

5514 
	`°rˇt
–
lDülogSåög
 , 
aMesßge
 ) ;

5516 
	`°rˇt
–
lDülogSåög
 , " \" 5" ) ;

5518 i‡–(
	`zíôy3Pª£¡
()>=5Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

5522 i‡–
	`zíôy3Pª£¡
()>=5 )

5524 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); 1;}

5525 
	`°r˝y
–
lDülogSåög
 , "zenity" ) ;

5527 i‡–
	`m©edülogPª£¡
() )

5529 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); 1;}

5530 
	`°r˝y
–
lDülogSåög
 , "matedialog" ) ;

5532 i‡–
	`shñÀmíèryPª£¡
() )

5534 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); 1;}

5535 
	`°r˝y
–
lDülogSåög
 , "shellementary" ) ;

5539 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); 1;}

5540 
	`°r˝y
–
lDülogSåög
 , "qarma" ) ;

5543 
	`°rˇt
–
lDülogSåög
 , " --notification");

5545 i‡–
aIc⁄Ty≥
 && 
	`°æí
(áIconType ) )

5547 
	`°rˇt
–
lDülogSåög
 , " --window-icon '");

5548 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

5549 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

5552 
	`°rˇt
–
lDülogSåög
 , " --text \"" ) ;

5553 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5555 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5556 
	`°rˇt
(
lDülogSåög
, "\n") ;

5558 i‡–
aMesßge
 && 
	`°æí
(áMessage ) )

5560 
	`°rˇt
–
lDülogSåög
 , 
aMesßge
 ) ;

5562 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

5564 i‡–
	`≥æPª£¡
() >= 2 )

5566 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"perl-dbus"); 1;}

5568 
	`°r˝y
–
lDülogSåög
 , "perl -e \"use Net::DBus;\
 \\$sessionBus = Net::DBus->session;\
 \\$notificationsService = \\$sessionBus->get_service('org.freedesktop.Notifications');\
 \\$notificationsObject = \\$notificationsService->get_object('/org/freedesktop/Notifications',\
'org.freedesktop.Notifications');");

5574 
	`•rötf
–
lDülogSåög
 + 
	`°æí
(lDialogString) ,

5576 
aIc⁄Ty≥
?aIc⁄Ty≥:"", 
aTôÀ
?aTôÀ:"", 
aMesßge
?aMessage:"" ) ;

5578 i‡–
	`pyth⁄DbusPª£¡
( ) )

5580 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python-dbus"); 1;}

5581 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄Name
 ) ;

5582 
	`°rˇt
–
lDülogSåög
 ," -c \"import dbus;bus=dbus.SessionBus();");

5583 
	`°rˇt
–
lDülogSåög
 ,"notif=bus.get_object('org.freedesktop.Notifications','/org/freedesktop/Notifications');" ) ;

5584 
	`°rˇt
–
lDülogSåög
 ,"notify=dbus.Interface(notif,'org.freedesktop.Notifications');" ) ;

5585 
	`°rˇt
–
lDülogSåög
 ,"notify.Notify('',0,'" ) ;

5586 i‡–
aIc⁄Ty≥
 && 
	`°æí
(aIconType) )

5588 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

5590 
	`°rˇt
(
lDülogSåög
, "','") ;

5591 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5593 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5595 
	`°rˇt
(
lDülogSåög
, "','") ;

5596 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5598 
ÕDülogSåög
 = 
lDülogSåög
 + 
	`°æí
(lDialogString);

5599 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
ÕDülogSåög
 ) ;

5601 
	`°rˇt
(
lDülogSåög
, "','','',5000)\"") ;

5603 i‡–
	`nŸify£ndPª£¡
() )

5605 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"notifysend"); 1;}

5606 
	`°r˝y
–
lDülogSåög
 , "notify-send" ) ;

5607 i‡–
aIc⁄Ty≥
 && 
	`°æí
(aIconType) )

5609 
	`°rˇt
–
lDülogSåög
 , " -i '" ) ;

5610 
	`°rˇt
–
lDülogSåög
 , 
aIc⁄Ty≥
 ) ;

5611 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

5613 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

5614 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5616 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5617 
	`°rˇt
–
lDülogSåög
 , " | " ) ;

5619 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5621 
	`ª∂a˚SubSå
–
aMesßge
 , "\n\t" , " | " , 
lBuff
 ) ;

5622 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , " | " , 
lBuff
 ) ;

5623 
	`ª∂a˚SubSå
–
aMesßge
 , "\t" , " " , 
lBuff
 ) ;

5624 
	`°rˇt
(
lDülogSåög
, 
lBuff
) ;

5626 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

5630  
	`töyfd_mesßgeBox
(
aTôÀ
, 
aMesßge
, "ok", 
aIc⁄Ty≥
, 0);

5633 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

5635 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

5637 
	`‰ì
(
lDülogSåög
);

5641 
	`p˛o£
–
lIn
 ) ;

5642 
	`‰ì
(
lDülogSåög
);

5644 
	}
}

5648 * 
	$töyfd_öputBox
(

5649 c⁄° * 
aTôÀ
 ,

5650 c⁄° * 
aMesßge
 ,

5651 c⁄° * 
aDeÁu…I≈ut
 )

5653 
lBuff
[
MAX_PATH_OR_CMD
];

5654 * 
lDülogSåög
 = 
NULL
;

5655 * 
ÕDülogSåög
;

5656 
FILE
 * 
lIn
 ;

5657 
lResu…
 ;

5658 
lWasGdülog
 = 0 ;

5659 
lWasGøphicDülog
 = 0 ;

5660 
lWasXãrm
 = 0 ;

5661 
lWasBasicXãrm
 = 0 ;

5662 
ãrmios
 
ﬁdt
 ;

5663 
ãrmios
 
√wt
 ;

5664 * 
lEOF
;

5665 
size_t
 
lTôÀLí
 ;

5666 
size_t
 
lMesßgeLí
 ;

5668 i‡(!
aTôÀ
 && !
aMesßge
 && !
aDeÁu…I≈ut
Ë 
lBuff
;

5670 
lBuff
[0]='\0';

5672 
lTôÀLí
 = 
aTôÀ
 ? 
	`°æí
(aTitle) : 0 ;

5673 
lMesßgeLí
 = 
aMesßge
 ? 
	`°æí
(aMessage) : 0 ;

5674 i‡–!
aTôÀ
 || 
	`°rcmp
(aTitle,"tinyfd_query") )

5676 
lDülogSåög
 = (*Ë
	`mÆloc
–
MAX_PATH_OR_CMD
 + 
lTôÀLí
 + 
lMesßgeLí
 );

5679 i‡–
	`oßs¸ùtPª£¡
( ) )

5681 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); (*)1;}

5682 
	`°r˝y
–
lDülogSåög
 , "osascript ");

5683 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"System Events\"' -e 'Activate'");

5684 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e 'display dialog \"") ;

5685 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5687 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

5689 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5690 
	`°rˇt
(
lDülogSåög
, "defaultánswer \"") ;

5691 i‡–
aDeÁu…I≈ut
 && 
	`°æí
(aDefaultInput) )

5693 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
) ;

5695 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5696 i‡–! 
aDeÁu…I≈ut
 )

5698 
	`°rˇt
(
lDülogSåög
, "hiddenánswerÅrue ") ;

5700 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5702 
	`°rˇt
(
lDülogSåög
, "withÅitle \"") ;

5703 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5704 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5706 
	`°rˇt
(
lDülogSåög
, "with iconÇote' ") ;

5707 
	`°rˇt
(
lDülogSåög
, "-e '\"1\" &ÅextÑeturned ofÑesult' " );

5708 
	`°rˇt
(
lDülogSåög
, "-e 'onÉrrorÇumber -128' " ) ;

5709 
	`°rˇt
(
lDülogSåög
, "-e '0' " );

5710 
	`°rˇt
(
lDülogSåög
, "-e 'endÅry'") ;

5711 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
(
lDülogSåög
, " -e 'endÅell'") ;

5713 i‡–
	`kdülogPª£¡
() )

5715 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); (*)1;}

5716 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(kdialog" ) ;

5718 i‡–
	`kdülogPª£¡
() == 2 )

5720 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

5723 i‡–! 
aDeÁu…I≈ut
 )

5725 
	`°rˇt
(
lDülogSåög
, " --password ") ;

5729 
	`°rˇt
(
lDülogSåög
, " --inputbox ") ;

5732 
	`°rˇt
(
lDülogSåög
, "\"") ;

5733 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5735 
	`°rˇt
(
lDülogSåög
, 
aMesßge
 ) ;

5737 
	`°rˇt
(
lDülogSåög
 , "\" \"" ) ;

5738 i‡–
aDeÁu…I≈ut
 && 
	`°æí
(aDefaultInput) )

5740 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
 ) ;

5742 
	`°rˇt
(
lDülogSåög
 , "\"" ) ;

5743 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5745 
	`°rˇt
(
lDülogSåög
, " --title \"") ;

5746 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5747 
	`°rˇt
(
lDülogSåög
, "\"") ;

5749 
	`°rˇt
–
lDülogSåög
 ,

5752 i‡–
	`zíôyPª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

5754 i‡–
	`zíôyPª£¡
() )

5756 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); (*)1;}

5757 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(zenity" ) ;

5758 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

5760 
	`°rˇt
–
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

5763 i‡–
	`m©edülogPª£¡
() )

5765 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); (*)1;}

5766 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(matedialog" ) ;

5768 i‡–
	`shñÀmíèryPª£¡
() )

5770 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); (*)1;}

5771 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(shellementary" ) ;

5775 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); (*)1;}

5776 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(qarma" ) ;

5777 i‡–!
	`gëív
("SSH_TTY") )

5779 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

5782 
	`°rˇt
–
lDülogSåög
 ," --entry" ) ;

5784 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5786 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

5787 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5788 
	`°rˇt
(
lDülogSåög
, "\"") ;

5790 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5792 
	`°rˇt
(
lDülogSåög
, " --text=\"") ;

5793 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

5794 
	`°rˇt
(
lDülogSåög
, "\"") ;

5796 i‡–
aDeÁu…I≈ut
 && 
	`°æí
(aDefaultInput) )

5798 
	`°rˇt
(
lDülogSåög
, " --entry-text=\"") ;

5799 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
) ;

5800 
	`°rˇt
(
lDülogSåög
, "\"") ;

5804 
	`°rˇt
(
lDülogSåög
, " --hide-text") ;

5806 i‡(
töyfd_sûít
Ë
	`°rˇt
–
lDülogSåög
 , " 2>/dev/null ");

5807 
	`°rˇt
–
lDülogSåög
 ,

5810 i‡–
	`gxmesßgePª£¡
(Ë|| 
	`gmesßgePª£¡
() )

5812 i‡–
	`gxmesßgePª£¡
() ) {

5813 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"gxmessage"); (*)1;}

5814 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(gxmessage -buttons Ok:1,Cancel:0 -center \"");

5818 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"gmessage"); (*)1;}

5819 
	`°r˝y
–
lDülogSåög
 , "szAnswer=$(gmessage -buttons Ok:1,Cancel:0 -center \"");

5822 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5824 
	`°rˇt
–
lDülogSåög
 , 
aMesßge
 ) ;

5826 
	`°rˇt
(
lDülogSåög
, "\"" ) ;

5827 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5829 
	`°rˇt
–
lDülogSåög
 , " -title \"");

5830 
	`°rˇt
–
lDülogSåög
 , 
aTôÀ
 ) ;

5831 
	`°rˇt
(
lDülogSåög
, "\" " ) ;

5833 
	`°rˇt
(
lDülogSåög
, " -entrytext \"" ) ;

5834 i‡–
aDeÁu…I≈ut
 && 
	`°æí
(aDefaultInput) )

5836 
	`°rˇt
–
lDülogSåög
 , 
aDeÁu…I≈ut
 ) ;

5838 
	`°rˇt
(
lDülogSåög
, "\"" ) ;

5839 
	`°rˇt
–
lDülogSåög
 , ");echo $?$szAnswer");

5841 i‡–!
	`gdülogPª£¡
(Ë&& !
	`xdülogPª£¡
(Ë&& 
	`tköãr3Pª£¡
( ) )

5843 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python3-tkinter"); (*)1;}

5844 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄3Name
 ) ;

5845 
	`°rˇt
–
lDülogSåög
 ,

5847 
	`°rˇt
–
lDülogSåög
 ,"res=simpledialog.askstring(" ) ;

5848 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5850 
	`°rˇt
(
lDülogSåög
, "title='") ;

5851 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5852 
	`°rˇt
(
lDülogSåög
, "',") ;

5854 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5857 
	`°rˇt
(
lDülogSåög
, "prompt='") ;

5858 
ÕDülogSåög
 = 
lDülogSåög
 + 
	`°æí
(lDialogString);

5859 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
ÕDülogSåög
 ) ;

5860 
	`°rˇt
(
lDülogSåög
, "',") ;

5862 i‡–
aDeÁu…I≈ut
 )

5864 i‡–
	`°æí
(
aDeÁu…I≈ut
) )

5866 
	`°rˇt
(
lDülogSåög
, "initialvalue='") ;

5867 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
) ;

5868 
	`°rˇt
(
lDülogSåög
, "',") ;

5873 
	`°rˇt
(
lDülogSåög
, "show='*'") ;

5875 
	`°rˇt
(
lDülogSåög
, ");\nifÑes is None :\n\tprint(0)");

5876 
	`°rˇt
(
lDülogSåög
, "\nelse :\n\tprint('1'+res)\n\"" ) ;

5878 i‡–!
	`gdülogPª£¡
(Ë&& !
	`xdülogPª£¡
(Ë&& 
	`tköãr2Pª£¡
( ) )

5880 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python2-tkinter"); (*)1;}

5881 
	`°r˝y
–
lDülogSåög
 , "export PYTHONIOENCODING=utf-8;" ) ;

5882 
	`°rˇt
–
lDülogSåög
 , 
gPyth⁄2Name
 ) ;

5883 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`isD¨wö
( ) )

5885 
	`°rˇt
–
lDülogSåög
 , " -i" ) ;

5888 
	`°rˇt
–
lDülogSåög
 ,

5891 i‡–
	`isD¨wö
( ) )

5893 
	`°rˇt
–
lDülogSåög
 ,

5898 
	`°rˇt
–
lDülogSåög
 ,"res=tkSimpleDialog.askstring(" ) ;

5899 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5901 
	`°rˇt
(
lDülogSåög
, "title='") ;

5902 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5903 
	`°rˇt
(
lDülogSåög
, "',") ;

5905 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

5908 
	`°rˇt
(
lDülogSåög
, "prompt='") ;

5909 
ÕDülogSåög
 = 
lDülogSåög
 + 
	`°æí
(lDialogString);

5910 
	`ª∂a˚SubSå
–
aMesßge
 , "\n" , "\\n" , 
ÕDülogSåög
 ) ;

5911 
	`°rˇt
(
lDülogSåög
, "',") ;

5913 i‡–
aDeÁu…I≈ut
 )

5915 i‡–
	`°æí
(
aDeÁu…I≈ut
) )

5917 
	`°rˇt
(
lDülogSåög
, "initialvalue='") ;

5918 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
) ;

5919 
	`°rˇt
(
lDülogSåög
, "',") ;

5924 
	`°rˇt
(
lDülogSåög
, "show='*'") ;

5926 
	`°rˇt
(
lDülogSåög
, ");\nifÑes is None :\n\tprint 0");

5927 
	`°rˇt
(
lDülogSåög
, "\nelse :\n\tprint '1'+res\n\"" ) ;

5929 i‡–
	`gdülogPª£¡
(Ë|| 
	`xdülogPª£¡
(Ë|| 
	`dülogName
(Ë|| 
	`whùèûPª£¡
() )

5931 i‡–
	`gdülogPª£¡
( ) )

5933 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"gdialog"); (*)1;}

5934 
lWasGøphicDülog
 = 1 ;

5935 
lWasGdülog
 = 1 ;

5936 
	`°r˝y
–
lDülogSåög
 , "(gdialog " ) ;

5938 i‡–
	`xdülogPª£¡
( ) )

5940 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xdialog"); (*)1;}

5941 
lWasGøphicDülog
 = 1 ;

5942 
	`°r˝y
–
lDülogSåög
 , "(Xdialog " ) ;

5944 i‡–
	`dülogName
( ) )

5946 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

5947 i‡–
	`isTîmöÆRu¬ög
( ) )

5949 
	`°r˝y
–
lDülogSåög
 , "(dialog " ) ;

5953 
lWasXãrm
 = 1 ;

5954 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

5955 
	`°rˇt
–
lDülogSåög
 , "'(" ) ;

5956 
	`°rˇt
–
lDülogSåög
 , 
	`dülogName
() ) ;

5957 
	`°rˇt
–
lDülogSåög
 , " " ) ;

5960 i‡–
	`isTîmöÆRu¬ög
( ) )

5962 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"whiptail"); (*)0;}

5963 
	`°r˝y
–
lDülogSåög
 , "(whiptail " ) ;

5967 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"whiptail"); (*)0;}

5968 
lWasXãrm
 = 1 ;

5969 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

5970 
	`°rˇt
–
lDülogSåög
 , "'(whiptail " ) ;

5973 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

5975 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

5976 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

5977 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5980 i‡–!
	`xdülogPª£¡
(Ë&& !
	`gdülogPª£¡
() )

5982 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

5983 
	`°rˇt
(
lDülogSåög
, "tab: move focus") ;

5984 i‡–! 
aDeÁu…I≈ut
 && !
lWasGdülog
 )

5986 
	`°rˇt
(
lDülogSåög
, " (sometimesÇothing,Ço blinkÇor star, is shown inÅext field)") ;

5988 
	`°rˇt
(
lDülogSåög
, "\" ") ;

5991 i‡–
aDeÁu…I≈ut
 || 
lWasGdülog
 )

5993 
	`°rˇt
–
lDülogSåög
 , "--inputbox" ) ;

5997 i‡–!
lWasGøphicDülog
 && 
	`dülogName
(Ë&& 
	`isDülogVîsi⁄Bëãr09b
() )

5999 
	`°rˇt
–
lDülogSåög
 , "--insecure " ) ;

6001 
	`°rˇt
–
lDülogSåög
 , "--passwordbox" ) ;

6003 
	`°rˇt
–
lDülogSåög
 , " \"" ) ;

6004 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

6006 
	`°rˇt
(
lDülogSåög
, 
aMesßge
) ;

6008 
	`°rˇt
(
lDülogSåög
,"\" 10 60 ") ;

6009 i‡–
aDeÁu…I≈ut
 && 
	`°æí
(aDefaultInput) )

6011 
	`°rˇt
(
lDülogSåög
, "\"") ;

6012 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…I≈ut
) ;

6013 
	`°rˇt
(
lDülogSåög
, "\" ") ;

6015 i‡–
lWasGøphicDülog
 )

6017 
	`°rˇt
(
lDülogSåög
,") 2>/tmp/tinyfd.txt;\
 [ $? = 0 ];thenÅinyfdBool=1;elseÅinyfdBool=0;fi;\
=$(cat /tmp/tinyfd.txt);echo $tinyfdBool$tinyfdRes") ;

6023 
	`°rˇt
(
lDülogSåög
,">/dev/tty ) 2>/tmp/tinyfd.txt;\
 [ $? = 0 ];thenÅinyfdBool=1;elseÅinyfdBool=0;fi;\
=$(cat /tmp/tinyfd.txt);echo $tinyfdBool$tinyfdRes") ;

6027 i‡–
lWasXãrm
 )

6029 
	`°rˇt
(
lDülogSåög
," >/tmp/tinyfd0.txt';cat /tmp/tinyfd0.txt");

6033 
	`°rˇt
(
lDülogSåög
, "; clear >/dev/tty") ;

6037 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`ãrmöÆName
() )

6039 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"basicinput"); (*)0;}

6040 
lWasBasicXãrm
 = 1 ;

6041 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

6042 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

6043 i‡–!
gW¨nögDi•œyed
 && !
töyfd_f‹˚C⁄sﬁe
)

6045 
gW¨nögDi•œyed
 = 1 ;

6046 
	`töyfd_mesßgeBox
(
gTôÀ
,
töyfd_√eds
,"ok","warning",0);

6048 i‡–
aTôÀ
 && 
	`°æí
◊TôÀË&& !
töyfd_f‹˚C⁄sﬁe
)

6050 
	`°rˇt
–
lDülogSåög
 , "echo \"" ) ;

6051 
	`°rˇt
–
lDülogSåög
, 
aTôÀ
) ;

6052 
	`°rˇt
–
lDülogSåög
 , "\";echo;" ) ;

6055 
	`°rˇt
–
lDülogSåög
 , "echo \"" ) ;

6056 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

6058 
	`°rˇt
–
lDülogSåög
, 
aMesßge
) ;

6060 
	`°rˇt
–
lDülogSåög
 , "\";read " ) ;

6061 i‡–! 
aDeÁu…I≈ut
 )

6063 
	`°rˇt
–
lDülogSåög
 , "-s " ) ;

6065 
	`°rˇt
–
lDülogSåög
 , "-p \"" ) ;

6066 
	`°rˇt
–
lDülogSåög
 , "(esc+enterÅo cancel): \" ANSWER " ) ;

6067 
	`°rˇt
–
lDülogSåög
 , ";echo 1$ANSWER >/tmp/tinyfd.txt';" ) ;

6068 
	`°rˇt
–
lDülogSåög
 , "cat -v /tmp/tinyfd.txt");

6070 i‡–!
gW¨nögDi•œyed
 && ! 
	`isTîmöÆRu¬ög
–Ë&& ! 
	`ãrmöÆName
() ) {

6071 
gW¨nögDi•œyed
 = 1 ;

6072 
	`töyfd_mesßgeBox
(
gTôÀ
,
töyfd_√eds
,"ok","warning",0);

6073 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"no_solution"); (*)0;}

6074 
	`‰ì
(
lDülogSåög
);

6075  
NULL
;

6079 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"basicinput"); (*)0;}

6080 i‡–!
gW¨nögDi•œyed
 && !
töyfd_f‹˚C⁄sﬁe
)

6082 
gW¨nögDi•œyed
 = 1 ;

6083 
	`töyfd_mesßgeBox
(
gTôÀ
,
töyfd_√eds
,"ok","warning",0);

6085 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6087 
	`¥ötf
("\n%s\n", 
aTôÀ
);

6089 i‡–
aMesßge
 && 
	`°æí
(aMessage) )

6091 
	`¥ötf
("\n%s\n",
aMesßge
);

6093 
	`¥ötf
("”sc+íã∏tÿˇn˚l): "); 
	`fÊush
(
°dout
);

6094 i‡–! 
aDeÁu…I≈ut
 )

6096 
	`tcgë©å
(
STDIN_FILENO
, & 
ﬁdt
) ;

6097 
√wt
 = 
ﬁdt
 ;

6098 
√wt
.
c_lÊag
 &~
ECHO
 ;

6099 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, & 
√wt
);

6102 
lEOF
 = 
	`fgës
(
lBuff
, 
MAX_PATH_OR_CMD
, 
°dö
);

6104 i‡–! 
lEOF
 || (
lBuff
[0] == '\0') )

6106 
	`‰ì
(
lDülogSåög
);

6107  
NULL
;

6110 i‡–
lBuff
[0] == '\n' )

6112 
lEOF
 = 
	`fgës
(
lBuff
, 
MAX_PATH_OR_CMD
, 
°dö
);

6114 i‡–! 
lEOF
 || (
lBuff
[0] == '\0') )

6116 
	`‰ì
(
lDülogSåög
);

6117  
NULL
;

6121 i‡–! 
aDeÁu…I≈ut
 )

6123 
	`tc£èâr
(
STDIN_FILENO
, 
TCSANOW
, & 
ﬁdt
);

6124 
	`¥ötf
("\n");

6126 
	`¥ötf
("\n");

6127 i‡–
	`°rchr
(
lBuff
,27) )

6129 
	`‰ì
(
lDülogSåög
);

6130  
NULL
 ;

6132 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

6134 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

6136 
	`‰ì
(
lDülogSåög
);

6137  
lBuff
 ;

6140 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

6141 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" );

6142 i‡–! 
lIn
 )

6144 i‡–
	`fûeExi°s
("/tmp/tinyfd.txt") )

6146 
	`wùefûe
("/tmp/tinyfd.txt");

6147 
	`ªmove
("/tmp/tinyfd.txt");

6149 i‡–
	`fûeExi°s
("/tmp/tinyfd0.txt") )

6151 
	`wùefûe
("/tmp/tinyfd0.txt");

6152 
	`ªmove
("/tmp/tinyfd0.txt");

6154 
	`‰ì
(
lDülogSåög
);

6155  
NULL
 ;

6157  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

6160 
	`p˛o£
–
lIn
 ) ;

6162 i‡–
	`fûeExi°s
("/tmp/tinyfd.txt") )

6164 
	`wùefûe
("/tmp/tinyfd.txt");

6165 
	`ªmove
("/tmp/tinyfd.txt");

6167 i‡–
	`fûeExi°s
("/tmp/tinyfd0.txt") )

6169 
	`wùefûe
("/tmp/tinyfd0.txt");

6170 
	`ªmove
("/tmp/tinyfd0.txt");

6175 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

6177 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

6180 i‡–
lWasBasicXãrm
 )

6182 i‡–
	`°r°r
(
lBuff
,"^[") )

6184 
	`‰ì
(
lDülogSåög
);

6185  
NULL
 ;

6189 
lResu…
 = 
	`°∫cmp
–
lBuff
 , "1" , 1) ? 0 : 1 ;

6191 i‡–! 
lResu…
 )

6193 
	`‰ì
(
lDülogSåög
);

6194  
NULL
 ;

6198 
	`‰ì
(
lDülogSåög
);

6199  
lBuff
+1 ;

6200 
	}
}

6203 * 
	$töyfd_ßveFûeDülog
(

6204 c⁄° * 
aTôÀ
 ,

6205 c⁄° * 
aDeÁu…P©hAndFûe
 ,

6206 
aNumOfFûãrP©ã∫s
 ,

6207 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

6208 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 )

6210 
lBuff
 [
MAX_PATH_OR_CMD
] ;

6211 
lDülogSåög
 [
MAX_PATH_OR_CMD
] ;

6212 
lSåög
 [
MAX_PATH_OR_CMD
] ;

6213 
i
 ;

6214 
lWasGøphicDülog
 = 0 ;

6215 
lWasXãrm
 = 0 ;

6216 * 
p
 ;

6217 * 
lPoöãrI≈utBox
 ;

6218 
FILE
 * 
lIn
 ;

6219 
lBuff
[0]='\0';

6221 i‡–
	`oßs¸ùtPª£¡
( ) )

6223 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); (*)1;}

6224 
	`°r˝y
–
lDülogSåög
 , "osascript ");

6225 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"Finder\"' -e 'Activate'");

6226 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e 'POSIXÖath of ( choose fileÇame " );

6227 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6229 
	`°rˇt
(
lDülogSåög
, "withÖrompt \"") ;

6230 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6231 
	`°rˇt
(
lDülogSåög
, "\" ") ;

6233 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6234 i‡–
	`°æí
(
lSåög
) )

6236 
	`°rˇt
(
lDülogSåög
, "defaultÜocation \"") ;

6237 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6238 
	`°rˇt
(
lDülogSåög
 , "\" " ) ;

6240 
	`gëLa°Name
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6241 i‡–
	`°æí
(
lSåög
) )

6243 
	`°rˇt
(
lDülogSåög
, "defaultÇame \"") ;

6244 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6245 
	`°rˇt
(
lDülogSåög
 , "\" " ) ;

6247 
	`°rˇt
–
lDülogSåög
 , ")' " ) ;

6248 
	`°rˇt
(
lDülogSåög
, "-e 'onÉrrorÇumber -128' " ) ;

6249 
	`°rˇt
(
lDülogSåög
, "-e 'endÅry'") ;

6250 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
, " -e 'endÅell'") ;

6252 i‡–
	`kdülogPª£¡
() )

6254 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); (*)1;}

6256 
	`°r˝y
–
lDülogSåög
 , "kdialog" ) ;

6257 i‡–
	`kdülogPª£¡
() == 2 )

6259 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

6261 
	`°rˇt
–
lDülogSåög
 , " --getsavefilename " ) ;

6263 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6265 i‡–
aDeÁu…P©hAndFûe
[0] != '/' )

6267 
	`°rˇt
(
lDülogSåög
, "$PWD/") ;

6269 
	`°rˇt
(
lDülogSåög
, "\"") ;

6270 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©hAndFûe
 ) ;

6271 
	`°rˇt
(
lDülogSåög
 , "\"" ) ;

6275 
	`°rˇt
(
lDülogSåög
, "$PWD/") ;

6278 i‡–
aNumOfFûãrP©ã∫s
 > 0 )

6280 
	`°rˇt
(
lDülogSåög
 , " \"" ) ;

6281  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6283 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6284 
	`°rˇt
–
lDülogSåög
 , " " ) ;

6286 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6288 
	`°rˇt
–
lDülogSåög
 , " | " ) ;

6289 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6291 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

6293 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6295 
	`°rˇt
(
lDülogSåög
, " --title \"") ;

6296 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6297 
	`°rˇt
(
lDülogSåög
, "\"") ;

6300 i‡–
	`zíôyPª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

6302 i‡–
	`zíôyPª£¡
() )

6304 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); (*)1;}

6305 
	`°r˝y
–
lDülogSåög
 , "zenity" ) ;

6306 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

6308 
	`°rˇt
–
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

6311 i‡–
	`m©edülogPª£¡
() )

6313 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); (*)1;}

6314 
	`°r˝y
–
lDülogSåög
 , "matedialog" ) ;

6316 i‡–
	`shñÀmíèryPª£¡
() )

6318 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); (*)1;}

6319 
	`°r˝y
–
lDülogSåög
 , "shellementary" ) ;

6323 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); (*)1;}

6324 
	`°r˝y
–
lDülogSåög
 , "qarma" ) ;

6325 i‡–!
	`gëív
("SSH_TTY") )

6327 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

6330 
	`°rˇt
(
lDülogSåög
, " --file-selection --save --confirm-overwrite" ) ;

6332 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6334 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

6335 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6336 
	`°rˇt
(
lDülogSåög
, "\"") ;

6338 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6340 
	`°rˇt
(
lDülogSåög
, " --filename=\"") ;

6341 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©hAndFûe
) ;

6342 
	`°rˇt
(
lDülogSåög
, "\"") ;

6344 i‡–
aNumOfFûãrP©ã∫s
 > 0 )

6346 
	`°rˇt
–
lDülogSåög
 , " --file-filter='" ) ;

6347 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6349 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6350 
	`°rˇt
–
lDülogSåög
 , " | " ) ;

6352  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6354 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6355 
	`°rˇt
–
lDülogSåög
 , " " ) ;

6357 
	`°rˇt
–
lDülogSåög
 , "' --file-filter='All files | *'" ) ;

6359 i‡(
töyfd_sûít
Ë
	`°rˇt
–
lDülogSåög
 , " 2>/dev/null ");

6361 i‡–!
	`xdülogPª£¡
(Ë&& 
	`tköãr3Pª£¡
( ) )

6363 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python3-tkinter"); (*)1;}

6364 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄3Name
 ) ;

6365 
	`°rˇt
–
lDülogSåög
 ,

6367 
	`°rˇt
–
lDülogSåög
 , "res=filedialog.asksaveasfilename(");

6368 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6370 
	`°rˇt
(
lDülogSåög
, "title='") ;

6371 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6372 
	`°rˇt
(
lDülogSåög
, "',") ;

6374 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6376 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6377 i‡–
	`°æí
(
lSåög
) )

6379 
	`°rˇt
(
lDülogSåög
, "initialdir='") ;

6380 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6381 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6383 
	`gëLa°Name
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6384 i‡–
	`°æí
(
lSåög
) )

6386 
	`°rˇt
(
lDülogSåög
, "initialfile='") ;

6387 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6388 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6391 i‡––
aNumOfFûãrP©ã∫s
 > 1 )

6392 || ( (
aNumOfFûãrP©ã∫s
 == 1)

6393 && ( 
aFûãrP©ã∫s
[0][
	`°æí
(aFilterPatterns[0])-1] != '*' ) ) )

6395 
	`°rˇt
(
lDülogSåög
 , "filetypes=(" ) ;

6396 
	`°rˇt
–
lDülogSåög
 , "('" ) ;

6397 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6399 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6401 
	`°rˇt
–
lDülogSåög
 , "',(" ) ;

6402  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6404 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

6405 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6406 
	`°rˇt
–
lDülogSåög
 , "'," ) ;

6408 
	`°rˇt
–
lDülogSåög
 , "))," ) ;

6409 
	`°rˇt
–
lDülogSåög
 , "('All files','*'))" ) ;

6411 
	`°rˇt
–
lDülogSåög
, ");\nifÇot isinstance(res,Åuple):\n\tprint(res)\n\"" ) ;

6413 i‡–!
	`xdülogPª£¡
(Ë&& 
	`tköãr2Pª£¡
( ) )

6415 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python2-tkinter"); (*)1;}

6416 
	`°r˝y
–
lDülogSåög
 , "export PYTHONIOENCODING=utf-8;" ) ;

6417 
	`°rˇt
–
lDülogSåög
 , 
gPyth⁄2Name
 ) ;

6418 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`isD¨wö
( ))

6420 
	`°rˇt
–
lDülogSåög
 , " -i" ) ;

6422 
	`°rˇt
–
lDülogSåög
 ,

6425 i‡–
	`isD¨wö
( ) )

6427 
	`°rˇt
–
lDülogSåög
 ,

6432 
	`°rˇt
–
lDülogSåög
 , "res=tkFileDialog.asksaveasfilename(");

6433 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6435 
	`°rˇt
(
lDülogSåög
, "title='") ;

6436 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6437 
	`°rˇt
(
lDülogSåög
, "',") ;

6439 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6441 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6442 i‡–
	`°æí
(
lSåög
) )

6444 
	`°rˇt
(
lDülogSåög
, "initialdir='") ;

6445 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6446 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6448 
	`gëLa°Name
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6449 i‡–
	`°æí
(
lSåög
) )

6451 
	`°rˇt
(
lDülogSåög
, "initialfile='") ;

6452 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6453 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6456 i‡––
aNumOfFûãrP©ã∫s
 > 1 )

6457 || ( (
aNumOfFûãrP©ã∫s
 == 1)

6458 && ( 
aFûãrP©ã∫s
[0][
	`°æí
(aFilterPatterns[0])-1] != '*' ) ) )

6460 
	`°rˇt
(
lDülogSåög
 , "filetypes=(" ) ;

6461 
	`°rˇt
–
lDülogSåög
 , "('" ) ;

6462 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6464 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6466 
	`°rˇt
–
lDülogSåög
 , "',(" ) ;

6467  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6469 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

6470 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6471 
	`°rˇt
–
lDülogSåög
 , "'," ) ;

6473 
	`°rˇt
–
lDülogSåög
 , "))," ) ;

6474 
	`°rˇt
–
lDülogSåög
 , "('All files','*'))" ) ;

6476 
	`°rˇt
–
lDülogSåög
, ");\nifÇot isinstance(res,Åuple):\n\tprintÑes \n\"" ) ;

6478 i‡–
	`xdülogPª£¡
(Ë|| 
	`dülogName
() )

6480 i‡–
	`xdülogPª£¡
( ) )

6482 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xdialog"); (*)1;}

6483 
lWasGøphicDülog
 = 1 ;

6484 
	`°r˝y
–
lDülogSåög
 , "(Xdialog " ) ;

6486 i‡–
	`isTîmöÆRu¬ög
( ) )

6488 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

6489 
	`°r˝y
–
lDülogSåög
 , "(dialog " ) ;

6493 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

6494 
lWasXãrm
 = 1 ;

6495 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

6496 
	`°rˇt
–
lDülogSåög
 , "'(" ) ;

6497 
	`°rˇt
–
lDülogSåög
 , 
	`dülogName
() ) ;

6498 
	`°rˇt
–
lDülogSåög
 , " " ) ;

6501 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6503 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

6504 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6505 
	`°rˇt
(
lDülogSåög
, "\" ") ;

6508 i‡–!
	`xdülogPª£¡
(Ë&& !
	`gdülogPª£¡
() )

6510 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

6511 
	`°rˇt
(
lDülogSåög
,

6513 
	`°rˇt
(
lDülogSåög
, "\" ") ;

6516 
	`°rˇt
–
lDülogSåög
 , "--fselect \"" ) ;

6517 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6519 i‡–! 
	`°rchr
(
aDeÁu…P©hAndFûe
, '/') )

6521 
	`°rˇt
(
lDülogSåög
, "./") ;

6523 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©hAndFûe
) ;

6525 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& !
lWasGøphicDülog
 )

6527 
	`°rˇt
(
lDülogSåög
, 
	`gëív
("HOME")) ;

6528 
	`°rˇt
(
lDülogSåög
, "/") ;

6532 
	`°rˇt
(
lDülogSåög
, "./") ;

6535 i‡–
lWasGøphicDülog
 )

6537 
	`°rˇt
(
lDülogSåög
, "\" 0 60 ) 2>&1 ") ;

6541 
	`°rˇt
(
lDülogSåög
, "\" 0 60 >/dev/tty) ") ;

6542 i‡–
lWasXãrm
 )

6544 
	`°rˇt
–
lDülogSåög
 ,

6549 
	`°rˇt
(
lDülogSåög
, "2>&1 ; clear >/dev/tty") ;

6555 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){ 
	`töyfd_öputBox
◊TôÀ,
NULL
,NULL);}

6556 
	`°r˝y
(
lBuff
, "Save file in ");

6557 
	`°rˇt
(
lBuff
, 
	`gëCurDú
());

6558 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

6559 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lSåög
,ÜPointerInputBox);

6560 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, 
lBuff
, "");

6561 i‡(
p
Ë
	`°r˝y
(
lBuff
,Ö); lBuff[0] = '\0';

6562 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lSåög
);

6563 
p
 = 
lBuff
;

6565 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
p
 ) ;

6566 i‡–
	`°æí
–
lSåög
 ) && ! 
	`dúExi°s
(ÜString ) )

6568  
NULL
 ;

6570 
	`gëLa°Name
(
lSåög
,
p
);

6571 i‡–! 
	`°æí
(
lSåög
) )

6573  
NULL
;

6575  
p
 ;

6578 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

6579 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

6581  
NULL
 ;

6583  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

6585 
	`p˛o£
–
lIn
 ) ;

6586 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

6588 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

6591 i‡–! 
	`°æí
(
lBuff
) )

6593  
NULL
;

6595 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
lBuff
 ) ;

6596 i‡–
	`°æí
–
lSåög
 ) && ! 
	`dúExi°s
(ÜString ) )

6598  
NULL
 ;

6600 
	`gëLa°Name
(
lSåög
,
lBuff
);

6601 i‡–! 
	`fûíameVÆid
(
lSåög
) )

6603  
NULL
;

6605  
lBuff
 ;

6606 
	}
}

6610 * 
	$töyfd_›íFûeDülog
(

6611 c⁄° * 
aTôÀ
 ,

6612 c⁄° * 
aDeÁu…P©hAndFûe
 ,

6613 
aNumOfFûãrP©ã∫s
 ,

6614 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

6615 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 ,

6616 
aAŒowMu…ùÀSñe˘s
 )

6618 
lDülogSåög
 [
MAX_PATH_OR_CMD
] ;

6619 
lSåög
 [
MAX_PATH_OR_CMD
] ;

6620 
i
 ;

6621 
FILE
 * 
lIn
 ;

6622 * 
p
 ;

6623 * 
p2
 ;

6624 * 
lPoöãrI≈utBox
 ;

6625 
lWasKdülog
 = 0 ;

6626 
lWasGøphicDülog
 = 0 ;

6627 
lWasXãrm
 = 0 ;

6628 
size_t
 
lFuŒBuffLí
 ;

6629 * 
lBuff
 = 
NULL
;

6631 
	`‰ì
(
lBuff
);

6632 i‡(
aTôÀ
&&!
	`°rcmp
(aTitle,"tinyfd_query"))

6634 
lBuff
 = 
NULL
;

6638 i‡(
aAŒowMu…ùÀSñe˘s
)

6640 
lFuŒBuffLí
 = 
MAX_MULTIPLE_FILES
 * 
MAX_PATH_OR_CMD
 + 1;

6641 
lBuff
 = (*)(
	`mÆloc
(
lFuŒBuffLí
 * ()));

6642 i‡(!
lBuff
)

6644 
lFuŒBuffLí
 = 
LOW_MULTIPLE_FILES
 * 
MAX_PATH_OR_CMD
 + 1;

6645 
lBuff
 = (*)–
	`mÆloc
–
lFuŒBuffLí
 * ()));

6650 
lFuŒBuffLí
 = 
MAX_PATH_OR_CMD
 + 1;

6651 
lBuff
 = (*)(
	`mÆloc
(
lFuŒBuffLí
 * ()));

6653 i‡(!
lBuff
Ë 
NULL
;

6654 
lBuff
[0]='\0';

6657 i‡–
	`oßs¸ùtPª£¡
( ) )

6659 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); (*)1;}

6660 
	`°r˝y
–
lDülogSåög
 , "osascript ");

6661 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"System Events\"' -e 'Activate'");

6662 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e '" );

6663 i‡–! 
aAŒowMu…ùÀSñe˘s
 )

6667 
	`°rˇt
–
lDülogSåög
 , "POSIXÖath of ( " );

6671 
	`°rˇt
–
lDülogSåög
 , "set mylistÅo " );

6673 
	`°rˇt
–
lDülogSåög
 , "choose file " );

6674 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6676 
	`°rˇt
(
lDülogSåög
, "withÖrompt \"") ;

6677 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6678 
	`°rˇt
(
lDülogSåög
, "\" ") ;

6680 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6681 i‡–
	`°æí
(
lSåög
) )

6683 
	`°rˇt
(
lDülogSåög
, "defaultÜocation \"") ;

6684 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6685 
	`°rˇt
(
lDülogSåög
 , "\" " ) ;

6687 i‡–
aNumOfFûãrP©ã∫s
 > 0 )

6689 
	`°rˇt
(
lDülogSåög
 , "ofÅype {\"" );

6690 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [0] + 2 ) ;

6691 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

6692  
i
 = 1 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6694 
	`°rˇt
–
lDülogSåög
 , ",\"" ) ;

6695 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] + 2) ;

6696 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

6698 
	`°rˇt
–
lDülogSåög
 , "} " ) ;

6700 i‡–
aAŒowMu…ùÀSñe˘s
 )

6702 
	`°rˇt
–
lDülogSåög
 , "multiple selectionsállowedÅrue ' " ) ;

6703 
	`°rˇt
–
lDülogSåög
 ,

6705 
	`°rˇt
–
lDülogSåög
 ,

6707 
	`°rˇt
–
lDülogSåög
 , "-e 'set mystringÅo mystring & \"|\"' " );

6708 
	`°rˇt
–
lDülogSåög
 ,

6710 
	`°rˇt
–
lDülogSåög
 , "-e 'endÑepeat' " );

6711 
	`°rˇt
–
lDülogSåög
 , "-e 'mystring' " );

6715 
	`°rˇt
–
lDülogSåög
 , ")' " ) ;

6717 
	`°rˇt
(
lDülogSåög
, "-e 'onÉrrorÇumber -128' " ) ;

6718 
	`°rˇt
(
lDülogSåög
, "-e 'endÅry'") ;

6719 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
, " -e 'endÅell'") ;

6721 i‡–
	`kdülogPª£¡
() )

6723 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); (*)1;}

6724 
lWasKdülog
 = 1 ;

6726 
	`°r˝y
–
lDülogSåög
 , "kdialog" ) ;

6727 i‡–
	`kdülogPª£¡
() == 2 )

6729 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

6731 
	`°rˇt
–
lDülogSåög
 , " --getopenfilename " ) ;

6733 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6735 i‡–
aDeÁu…P©hAndFûe
[0] != '/' )

6737 
	`°rˇt
(
lDülogSåög
, "$PWD/") ;

6739 
	`°rˇt
(
lDülogSåög
, "\"") ;

6740 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©hAndFûe
 ) ;

6741 
	`°rˇt
(
lDülogSåög
 , "\"" ) ;

6745 
	`°rˇt
(
lDülogSåög
, "$PWD/") ;

6748 i‡–
aNumOfFûãrP©ã∫s
 > 0 )

6750 
	`°rˇt
(
lDülogSåög
 , " \"" ) ;

6751  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6753 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6754 
	`°rˇt
–
lDülogSåög
 , " " ) ;

6756 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6758 
	`°rˇt
–
lDülogSåög
 , " | " ) ;

6759 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6761 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

6763 i‡–
aAŒowMu…ùÀSñe˘s
 )

6765 
	`°rˇt
–
lDülogSåög
 , " --multiple --separate-output" ) ;

6767 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6769 
	`°rˇt
(
lDülogSåög
, " --title \"") ;

6770 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6771 
	`°rˇt
(
lDülogSåög
, "\"") ;

6774 i‡–
	`zíôyPª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

6776 i‡–
	`zíôyPª£¡
() )

6778 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); (*)1;}

6779 
	`°r˝y
–
lDülogSåög
 , "zenity" ) ;

6780 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

6782 
	`°rˇt
–
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

6785 i‡–
	`m©edülogPª£¡
() )

6787 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); (*)1;}

6788 
	`°r˝y
–
lDülogSåög
 , "matedialog" ) ;

6790 i‡–
	`shñÀmíèryPª£¡
() )

6792 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); (*)1;}

6793 
	`°r˝y
–
lDülogSåög
 , "shellementary" ) ;

6797 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); (*)1;}

6798 
	`°r˝y
–
lDülogSåög
 , "qarma" ) ;

6799 i‡–!
	`gëív
("SSH_TTY") )

6801 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

6804 
	`°rˇt
–
lDülogSåög
 , " --file-selection" ) ;

6806 i‡–
aAŒowMu…ùÀSñe˘s
 )

6808 
	`°rˇt
–
lDülogSåög
 , " --multiple" ) ;

6810 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6812 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

6813 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6814 
	`°rˇt
(
lDülogSåög
, "\"") ;

6816 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6818 
	`°rˇt
(
lDülogSåög
, " --filename=\"") ;

6819 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©hAndFûe
) ;

6820 
	`°rˇt
(
lDülogSåög
, "\"") ;

6822 i‡–
aNumOfFûãrP©ã∫s
 > 0 )

6824 
	`°rˇt
–
lDülogSåög
 , " --file-filter='" ) ;

6825 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6827 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6828 
	`°rˇt
–
lDülogSåög
 , " | " ) ;

6830  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6832 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6833 
	`°rˇt
–
lDülogSåög
 , " " ) ;

6835 
	`°rˇt
–
lDülogSåög
 , "' --file-filter='All files | *'" ) ;

6837 i‡(
töyfd_sûít
Ë
	`°rˇt
–
lDülogSåög
 , " 2>/dev/null ");

6839 i‡–
	`tköãr3Pª£¡
( ) )

6841 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python3-tkinter"); (*)1;}

6842 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄3Name
 ) ;

6843 
	`°rˇt
–
lDülogSåög
 ,

6845 
	`°rˇt
–
lDülogSåög
 , "lFiles=filedialog.askopenfilename(");

6846 i‡–
aAŒowMu…ùÀSñe˘s
 )

6848 
	`°rˇt
–
lDülogSåög
 , "multiple=1," ) ;

6850 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6852 
	`°rˇt
(
lDülogSåög
, "title='") ;

6853 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6854 
	`°rˇt
(
lDülogSåög
, "',") ;

6856 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6858 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6859 i‡–
	`°æí
(
lSåög
) )

6861 
	`°rˇt
(
lDülogSåög
, "initialdir='") ;

6862 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6863 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6865 
	`gëLa°Name
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6866 i‡–
	`°æí
(
lSåög
) )

6868 
	`°rˇt
(
lDülogSåög
, "initialfile='") ;

6869 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6870 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6873 i‡––
aNumOfFûãrP©ã∫s
 > 1 )

6874 || ( ( 
aNumOfFûãrP©ã∫s
 == 1 )

6875 && ( 
aFûãrP©ã∫s
[0][
	`°æí
(aFilterPatterns[0])-1] != '*' ) ) )

6877 
	`°rˇt
(
lDülogSåög
 , "filetypes=(" ) ;

6878 
	`°rˇt
–
lDülogSåög
 , "('" ) ;

6879 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6881 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6883 
	`°rˇt
–
lDülogSåög
 , "',(" ) ;

6884  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6886 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

6887 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6888 
	`°rˇt
–
lDülogSåög
 , "'," ) ;

6890 
	`°rˇt
–
lDülogSåög
 , "))," ) ;

6891 
	`°rˇt
–
lDülogSåög
 , "('All files','*'))" ) ;

6893 
	`°rˇt
–
lDülogSåög
 , ");\
\nifÇot isinstance(lFiles,Åuple):\n\tprint(lFiles)\nelse:\
\n\tlFilesString=''\n\tforÜFile inÜFiles:\n\t\tlFilesString+=str(lFile)+'|'\
\n\tprint(lFilesString[:-1])\n\"" ) ;

6898 i‡–
	`tköãr2Pª£¡
( ) )

6900 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python2-tkinter"); (*)1;}

6901 
	`°r˝y
–
lDülogSåög
 , "export PYTHONIOENCODING=utf-8;" ) ;

6902 
	`°rˇt
–
lDülogSåög
 , 
gPyth⁄2Name
 ) ;

6903 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`isD¨wö
( ) )

6905 
	`°rˇt
–
lDülogSåög
 , " -i" ) ;

6907 
	`°rˇt
–
lDülogSåög
 ,

6910 i‡–
	`isD¨wö
( ) )

6912 
	`°rˇt
–
lDülogSåög
 ,

6916 
	`°rˇt
–
lDülogSåög
 , "lFiles=tkFileDialog.askopenfilename(");

6917 i‡–
aAŒowMu…ùÀSñe˘s
 )

6919 
	`°rˇt
–
lDülogSåög
 , "multiple=1," ) ;

6921 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6923 
	`°rˇt
(
lDülogSåög
, "title='") ;

6924 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6925 
	`°rˇt
(
lDülogSåög
, "',") ;

6927 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

6929 
	`gëP©hWôhoutFöÆSœsh
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6930 i‡–
	`°æí
(
lSåög
) )

6932 
	`°rˇt
(
lDülogSåög
, "initialdir='") ;

6933 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6934 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6936 
	`gëLa°Name
–
lSåög
 , 
aDeÁu…P©hAndFûe
 ) ;

6937 i‡–
	`°æí
(
lSåög
) )

6939 
	`°rˇt
(
lDülogSåög
, "initialfile='") ;

6940 
	`°rˇt
(
lDülogSåög
, 
lSåög
 ) ;

6941 
	`°rˇt
(
lDülogSåög
 , "'," ) ;

6944 i‡––
aNumOfFûãrP©ã∫s
 > 1 )

6945 || ( ( 
aNumOfFûãrP©ã∫s
 == 1 )

6946 && ( 
aFûãrP©ã∫s
[0][
	`°æí
(aFilterPatterns[0])-1] != '*' ) ) )

6948 
	`°rˇt
(
lDülogSåög
 , "filetypes=(" ) ;

6949 
	`°rˇt
–
lDülogSåög
 , "('" ) ;

6950 i‡–
aSögÀFûãrDes¸ùti⁄
 && 
	`°æí
(aSingleFilterDescription) )

6952 
	`°rˇt
–
lDülogSåög
 , 
aSögÀFûãrDes¸ùti⁄
 ) ;

6954 
	`°rˇt
–
lDülogSåög
 , "',(" ) ;

6955  
i
 = 0 ; i < 
aNumOfFûãrP©ã∫s
 ; i ++ )

6957 
	`°rˇt
–
lDülogSåög
 , "'" ) ;

6958 
	`°rˇt
–
lDülogSåög
 , 
aFûãrP©ã∫s
 [
i
] ) ;

6959 
	`°rˇt
–
lDülogSåög
 , "'," ) ;

6961 
	`°rˇt
–
lDülogSåög
 , "))," ) ;

6962 
	`°rˇt
–
lDülogSåög
 , "('All files','*'))" ) ;

6964 
	`°rˇt
–
lDülogSåög
 , ");\
\nifÇot isinstance(lFiles,Åuple):\n\tprintÜFiles\nelse:\
\n\tlFilesString=''\n\tforÜFile inÜFiles:\n\t\tlFilesString+=str(lFile)+'|'\
\n\tprintÜFilesString[:-1]\n\"" ) ;

6969 i‡–
	`xdülogPª£¡
(Ë|| 
	`dülogName
() )

6971 i‡–
	`xdülogPª£¡
( ) )

6973 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xdialog"); (*)1;}

6974 
lWasGøphicDülog
 = 1 ;

6975 
	`°r˝y
–
lDülogSåög
 , "(Xdialog " ) ;

6977 i‡–
	`isTîmöÆRu¬ög
( ) )

6979 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

6980 
	`°r˝y
–
lDülogSåög
 , "(dialog " ) ;

6984 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

6985 
lWasXãrm
 = 1 ;

6986 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

6987 
	`°rˇt
–
lDülogSåög
 , "'(" ) ;

6988 
	`°rˇt
–
lDülogSåög
 , 
	`dülogName
() ) ;

6989 
	`°rˇt
–
lDülogSåög
 , " " ) ;

6992 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

6994 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

6995 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

6996 
	`°rˇt
(
lDülogSåög
, "\" ") ;

6999 i‡–!
	`xdülogPª£¡
(Ë&& !
	`gdülogPª£¡
() )

7001 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

7002 
	`°rˇt
(
lDülogSåög
,

7004 
	`°rˇt
(
lDülogSåög
, "\" ") ;

7007 
	`°rˇt
–
lDülogSåög
 , "--fselect \"" ) ;

7008 i‡–
aDeÁu…P©hAndFûe
 && 
	`°æí
(aDefaultPathAndFile) )

7010 i‡–! 
	`°rchr
(
aDeÁu…P©hAndFûe
, '/') )

7012 
	`°rˇt
(
lDülogSåög
, "./") ;

7014 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©hAndFûe
) ;

7016 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& !
lWasGøphicDülog
 )

7018 
	`°rˇt
(
lDülogSåög
, 
	`gëív
("HOME")) ;

7019 
	`°rˇt
(
lDülogSåög
, "/");

7023 
	`°rˇt
(
lDülogSåög
, "./") ;

7026 i‡–
lWasGøphicDülog
 )

7028 
	`°rˇt
(
lDülogSåög
, "\" 0 60 ) 2>&1 ") ;

7032 
	`°rˇt
(
lDülogSåög
, "\" 0 60 >/dev/tty) ") ;

7033 i‡–
lWasXãrm
 )

7035 
	`°rˇt
–
lDülogSåög
 ,

7040 
	`°rˇt
(
lDülogSåög
, "2>&1 ; clear >/dev/tty") ;

7046 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){ 
	`töyfd_öputBox
◊TôÀ,
NULL
,NULL);}

7047 
	`°r˝y
(
lBuff
, "Open file from ");

7048 
	`°rˇt
(
lBuff
, 
	`gëCurDú
());

7049 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

7050 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lDülogSåög
,ÜPointerInputBox);

7051 
p2
 = 
	`töyfd_öputBox
(
aTôÀ
, 
lBuff
, "");

7052 i‡(
p2
Ë
	`°r˝y
(
lBuff
,Ö2); lBuff[0] = '\0';

7053 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lDülogSåög
);

7054 
p2
 = 
lBuff
;

7056 i‡–! 
	`fûeExi°s
(
p2
) )

7058 
	`‰ì
(
lBuff
);

7059 
lBuff
 = 
NULL
;

7063 
	`°r˝y
(
lBuff
, 
p2
);

7064 
lBuff
 = (*)–
	`ªÆloc
–lBuff, (
	`°æí
(lBuff)+1) * ()));

7066  
lBuff
 ;

7069 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

7070 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

7072 
	`‰ì
(
lBuff
);

7073 
lBuff
 = 
NULL
;

7074  
NULL
 ;

7076 
lBuff
[0]='\0';

7077 
p
=
lBuff
;

7078  
	`fgës
–
p
 , –
lBuff
 ) , 
lIn
 ) !
NULL
 )

7080 
p
 +
	`°æí
(Ö );

7082 
	`p˛o£
–
lIn
 ) ;

7083 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

7085 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

7088 i‡–
lWasKdülog
 && 
aAŒowMu…ùÀSñe˘s
 )

7090 
p
 = 
lBuff
 ;

7091  ( 
p
 = 
	`°rchr
(Ö , '\n' ) ) )

7092 * 
p
 = '|' ;

7095 i‡–! 
	`°æí
–
lBuff
 ) )

7097 
	`‰ì
(
lBuff
);

7098 
lBuff
 = 
NULL
;

7099  
NULL
;

7101 i‡–
aAŒowMu…ùÀSñe˘s
 && 
	`°rchr
(
lBuff
, '|') )

7103 if–! 
	`ísuªFûesExi°
–
lBuff
 ,ÜBuff ) )

7105 
	`‰ì
(
lBuff
);

7106 
lBuff
 = 
NULL
;

7107  
NULL
;

7110 i‡–!
	`fûeExi°s
(
lBuff
) )

7112 
	`‰ì
(
lBuff
);

7113 
lBuff
 = 
NULL
;

7114  
NULL
;

7117 
lBuff
 = (*)–
	`ªÆloc
–lBuff, (
	`°æí
(lBuff)+1) * ()));

7120  
lBuff
 ;

7121 
	}
}

7124 * 
	$töyfd_£À˘FﬁdîDülog
(

7125 c⁄° * 
aTôÀ
 ,

7126 c⁄° * 
aDeÁu…P©h
 )

7128 
lBuff
 [
MAX_PATH_OR_CMD
] ;

7129 
lDülogSåög
 [
MAX_PATH_OR_CMD
] ;

7130 
FILE
 * 
lIn
 ;

7131 * 
p
 ;

7132 * 
lPoöãrI≈utBox
 ;

7133 
lWasGøphicDülog
 = 0 ;

7134 
lWasXãrm
 = 0 ;

7135 
lBuff
[0]='\0';

7137 i‡–
	`oßs¸ùtPª£¡
( ))

7139 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); (*)1;}

7140 
	`°r˝y
–
lDülogSåög
 , "osascript ");

7141 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"System Events\"' -e 'Activate'");

7142 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e 'POSIXÖath of ( choose folder ");

7143 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7145 
	`°rˇt
(
lDülogSåög
, "withÖrompt \"") ;

7146 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7147 
	`°rˇt
(
lDülogSåög
, "\" ") ;

7149 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

7151 
	`°rˇt
(
lDülogSåög
, "defaultÜocation \"") ;

7152 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©h
 ) ;

7153 
	`°rˇt
(
lDülogSåög
 , "\" " ) ;

7155 
	`°rˇt
–
lDülogSåög
 , ")' " ) ;

7156 
	`°rˇt
(
lDülogSåög
, "-e 'onÉrrorÇumber -128' " ) ;

7157 
	`°rˇt
(
lDülogSåög
, "-e 'endÅry'") ;

7158 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
, " -e 'endÅell'") ;

7160 i‡–
	`kdülogPª£¡
() )

7162 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); (*)1;}

7163 
	`°r˝y
–
lDülogSåög
 , "kdialog" ) ;

7164 i‡–
	`kdülogPª£¡
() == 2 )

7166 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7168 
	`°rˇt
–
lDülogSåög
 , " --getexistingdirectory " ) ;

7170 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

7172 i‡–
aDeÁu…P©h
[0] != '/' )

7174 
	`°rˇt
(
lDülogSåög
, "$PWD/") ;

7176 
	`°rˇt
(
lDülogSåög
, "\"") ;

7177 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©h
 ) ;

7178 
	`°rˇt
(
lDülogSåög
 , "\"" ) ;

7182 
	`°rˇt
(
lDülogSåög
, "$PWD/") ;

7185 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7187 
	`°rˇt
(
lDülogSåög
, " --title \"") ;

7188 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7189 
	`°rˇt
(
lDülogSåög
, "\"") ;

7192 i‡–
	`zíôyPª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

7194 i‡–
	`zíôyPª£¡
() )

7196 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); (*)1;}

7197 
	`°r˝y
–
lDülogSåög
 , "zenity" ) ;

7198 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

7200 
	`°rˇt
–
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7203 i‡–
	`m©edülogPª£¡
() )

7205 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); (*)1;}

7206 
	`°r˝y
–
lDülogSåög
 , "matedialog" ) ;

7208 i‡–
	`shñÀmíèryPª£¡
() )

7210 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); (*)1;}

7211 
	`°r˝y
–
lDülogSåög
 , "shellementary" ) ;

7215 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); (*)1;}

7216 
	`°r˝y
–
lDülogSåög
 , "qarma" ) ;

7217 i‡–!
	`gëív
("SSH_TTY") )

7219 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7222 
	`°rˇt
–
lDülogSåög
 , " --file-selection --directory" ) ;

7224 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7226 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

7227 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7228 
	`°rˇt
(
lDülogSåög
, "\"") ;

7230 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

7232 
	`°rˇt
(
lDülogSåög
, " --filename=\"") ;

7233 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©h
) ;

7234 
	`°rˇt
(
lDülogSåög
, "\"") ;

7236 i‡(
töyfd_sûít
Ë
	`°rˇt
–
lDülogSåög
 , " 2>/dev/null ");

7238 i‡–!
	`xdülogPª£¡
(Ë&& 
	`tköãr3Pª£¡
( ) )

7240 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python3-tkinter"); (*)1;}

7241 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄3Name
 ) ;

7242 
	`°rˇt
–
lDülogSåög
 ,

7244 
	`°rˇt
–
lDülogSåög
 , "res=filedialog.askdirectory(");

7245 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7247 
	`°rˇt
(
lDülogSåög
, "title='") ;

7248 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7249 
	`°rˇt
(
lDülogSåög
, "',") ;

7251 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

7253 
	`°rˇt
(
lDülogSåög
, "initialdir='") ;

7254 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©h
 ) ;

7255 
	`°rˇt
(
lDülogSåög
 , "'" ) ;

7257 
	`°rˇt
–
lDülogSåög
, ");\nifÇot isinstance(res,Åuple):\n\tprint(res)\n\"" ) ;

7259 i‡–!
	`xdülogPª£¡
(Ë&& 
	`tköãr2Pª£¡
( ) )

7261 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python2-tkinter"); (*)1;}

7262 
	`°r˝y
–
lDülogSåög
 , "export PYTHONIOENCODING=utf-8;" ) ;

7263 
	`°rˇt
–
lDülogSåög
 , 
gPyth⁄2Name
 ) ;

7264 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`isD¨wö
( ) )

7266 
	`°rˇt
–
lDülogSåög
 , " -i" ) ;

7268 
	`°rˇt
–
lDülogSåög
 ,

7271 i‡–
	`isD¨wö
( ) )

7273 
	`°rˇt
–
lDülogSåög
 ,

7278 
	`°rˇt
–
lDülogSåög
 , "printÅkFileDialog.askdirectory(");

7279 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7281 
	`°rˇt
(
lDülogSåög
, "title='") ;

7282 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7283 
	`°rˇt
(
lDülogSåög
, "',") ;

7285 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

7287 
	`°rˇt
(
lDülogSåög
, "initialdir='") ;

7288 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©h
 ) ;

7289 
	`°rˇt
(
lDülogSåög
 , "'" ) ;

7291 
	`°rˇt
–
lDülogSåög
 , ")\"" ) ;

7293 i‡–
	`xdülogPª£¡
(Ë|| 
	`dülogName
() )

7295 i‡–
	`xdülogPª£¡
( ) )

7297 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xdialog"); (*)1;}

7298 
lWasGøphicDülog
 = 1 ;

7299 
	`°r˝y
–
lDülogSåög
 , "(Xdialog " ) ;

7301 i‡–
	`isTîmöÆRu¬ög
( ) )

7303 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

7304 
	`°r˝y
–
lDülogSåög
 , "(dialog " ) ;

7308 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"dialog"); (*)0;}

7309 
lWasXãrm
 = 1 ;

7310 
	`°r˝y
–
lDülogSåög
 , 
	`ãrmöÆName
() ) ;

7311 
	`°rˇt
–
lDülogSåög
 , "'(" ) ;

7312 
	`°rˇt
–
lDülogSåög
 , 
	`dülogName
() ) ;

7313 
	`°rˇt
–
lDülogSåög
 , " " ) ;

7316 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7318 
	`°rˇt
(
lDülogSåög
, "--title \"") ;

7319 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7320 
	`°rˇt
(
lDülogSåög
, "\" ") ;

7323 i‡–!
	`xdülogPª£¡
(Ë&& !
	`gdülogPª£¡
() )

7325 
	`°rˇt
(
lDülogSåög
, "--backtitle \"") ;

7326 
	`°rˇt
(
lDülogSåög
,

7328 
	`°rˇt
(
lDülogSåög
, "\" ") ;

7331 
	`°rˇt
–
lDülogSåög
 , "--dselect \"" ) ;

7332 i‡–
aDeÁu…P©h
 && 
	`°æí
(aDefaultPath) )

7334 
	`°rˇt
(
lDülogSåög
, 
aDeÁu…P©h
) ;

7335 
	`ísuªFöÆSœsh
(
lDülogSåög
);

7337 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& !
lWasGøphicDülog
 )

7339 
	`°rˇt
(
lDülogSåög
, 
	`gëív
("HOME")) ;

7340 
	`°rˇt
(
lDülogSåög
, "/");

7344 
	`°rˇt
(
lDülogSåög
, "./") ;

7347 i‡–
lWasGøphicDülog
 )

7349 
	`°rˇt
(
lDülogSåög
, "\" 0 60 ) 2>&1 ") ;

7353 
	`°rˇt
(
lDülogSåög
, "\" 0 60 >/dev/tty) ") ;

7354 i‡–
lWasXãrm
 )

7356 
	`°rˇt
–
lDülogSåög
 ,

7361 
	`°rˇt
(
lDülogSåög
, "2>&1 ; clear >/dev/tty") ;

7367 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){ 
	`töyfd_öputBox
◊TôÀ,
NULL
,NULL);}

7368 
	`°r˝y
(
lBuff
, "Select folder from ");

7369 
	`°rˇt
(
lBuff
, 
	`gëCurDú
());

7370 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

7371 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lDülogSåög
,ÜPointerInputBox);

7372 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, 
lBuff
, "");

7373 i‡(
p
Ë
	`°r˝y
(
lBuff
,Ö); lBuff[0] = '\0';

7374 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lDülogSåög
);

7375 
p
 = 
lBuff
;

7377 i‡–!
p
 || ! 
	`°æí
–∞Ë|| ! 
	`dúExi°s
(Ö ) )

7379  
NULL
 ;

7381  
p
 ;

7383 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

7384 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

7386  
NULL
 ;

7388  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

7390 
	`p˛o£
–
lIn
 ) ;

7391 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

7393 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

7396 i‡–! 
	`°æí
–
lBuff
 ) || ! 
	`dúExi°s
(ÜBuff ) )

7398  
NULL
 ;

7400  
lBuff
 ;

7401 
	}
}

7408 * 
	$töyfd_cﬁ‹Choo£r
(

7409 c⁄° * 
aTôÀ
 ,

7410 c⁄° * 
aDeÁu…HexRGB
 ,

7411 c⁄° 
aDeÁu…RGB
[3] ,

7412 
aoResu…RGB
[3] )

7414 
lDeÁu…HexRGB
[16];

7415 
lBuff
 [128] ;

7417 
lTmp
 [128] ;

7418 #i‡!((
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
))

7419 * 
lTmp2
 ;

7421 
lDülogSåög
 [
MAX_PATH_OR_CMD
] ;

7422 
lDeÁu…RGB
[3];

7423 * 
p
;

7424 * 
lPoöãrI≈utBox
;

7425 
FILE
 * 
lIn
 ;

7426 
i
 ;

7427 
lWasZíôy3
 = 0 ;

7428 
lWasOßs¸ùt
 = 0 ;

7429 
lWasXdülog
 = 0 ;

7430 
lBuff
[0]='\0';

7432 i‡(
aDeÁu…HexRGB
)

7434 
	`Hex2RGB
(
aDeÁu…HexRGB
, 
lDeÁu…RGB
);

7438 
lDeÁu…RGB
[0] = 
aDeÁu…RGB
[0];

7439 
lDeÁu…RGB
[1] = 
aDeÁu…RGB
[1];

7440 
lDeÁu…RGB
[2] = 
aDeÁu…RGB
[2];

7443 i‡–
	`oßs¸ùtPª£¡
( ) )

7445 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"applescript"); (*)1;}

7446 
lWasOßs¸ùt
 = 1 ;

7447 
	`°r˝y
–
lDülogSåög
 , "osascript");

7449 i‡–! 
	`osx9‹Bëãr
() )

7451 
	`°rˇt
–
lDülogSåög
 , " -e 'tellápplication \"System Events\"' -e 'Activate'");

7452 
	`°rˇt
–
lDülogSåög
 , " -e 'try' -e 'set mycolorÅo choose color default color {");

7456 
	`°rˇt
–
lDülogSåög
 ,

7461 
	`•rötf
(
lTmp
, "%d", 256 * 
lDeÁu…RGB
[0] ) ;

7462 
	`°rˇt
(
lDülogSåög
, 
lTmp
 ) ;

7463 
	`°rˇt
(
lDülogSåög
, "," ) ;

7464 
	`•rötf
(
lTmp
, "%d", 256 * 
lDeÁu…RGB
[1] ) ;

7465 
	`°rˇt
(
lDülogSåög
, 
lTmp
 ) ;

7466 
	`°rˇt
(
lDülogSåög
, "," ) ;

7467 
	`•rötf
(
lTmp
, "%d", 256 * 
lDeÁu…RGB
[2] ) ;

7468 
	`°rˇt
(
lDülogSåög
, 
lTmp
 ) ;

7469 
	`°rˇt
(
lDülogSåög
, "}' " ) ;

7470 
	`°rˇt
–
lDülogSåög
 ,

7472 
	`°rˇt
–
lDülogSåög
 ,

7474 
	`°rˇt
–
lDülogSåög
 ,

7476 
	`°rˇt
–
lDülogSåög
 , "-e 'endÑepeat' " );

7477 
	`°rˇt
–
lDülogSåög
 , "-e 'mystring' ");

7478 
	`°rˇt
(
lDülogSåög
, "-e 'onÉrrorÇumber -128' " ) ;

7479 
	`°rˇt
(
lDülogSåög
, "-e 'endÅry'") ;

7480 i‡–! 
	`osx9‹Bëãr
(ËË
	`°rˇt
–
lDülogSåög
, " -e 'endÅell'") ;

7482 i‡–
	`kdülogPª£¡
() )

7484 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"kdialog"); (*)1;}

7485 
	`°r˝y
–
lDülogSåög
 , "kdialog" ) ;

7486 i‡–
	`kdülogPª£¡
() == 2 )

7488 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7490 
	`•rötf
–
lDülogSåög
 + 
	`°æí
÷DülogSåögË, " --gëcﬁ‹ --deÁu… '%s'" , 
lDeÁu…HexRGB
 ) ;

7492 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7494 
	`°rˇt
(
lDülogSåög
, " --title \"") ;

7495 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7496 
	`°rˇt
(
lDülogSåög
, "\"") ;

7499 i‡–
	`zíôy3Pª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

7501 
lWasZíôy3
 = 1 ;

7502 i‡–
	`zíôy3Pª£¡
() )

7504 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity3"); (*)1;}

7505 
	`°r˝y
–
lDülogSåög
 , "zenity" );

7506 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

7508 
	`°rˇt
–
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7511 i‡–
	`m©edülogPª£¡
() )

7513 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); (*)1;}

7514 
	`°r˝y
–
lDülogSåög
 , "matedialog" ) ;

7516 i‡–
	`shñÀmíèryPª£¡
() )

7518 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); (*)1;}

7519 
	`°r˝y
–
lDülogSåög
 , "shellementary" ) ;

7523 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); (*)1;}

7524 
	`°r˝y
–
lDülogSåög
 , "qarma" ) ;

7525 i‡–!
	`gëív
("SSH_TTY") )

7527 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7530 
	`°rˇt
–
lDülogSåög
 , " --color-selection --show-palette" ) ;

7531 
	`•rötf
–
lDülogSåög
 + 
	`°æí
÷DülogSåög), " --cﬁ‹=%s" , 
lDeÁu…HexRGB
 ) ;

7533 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7535 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

7536 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7537 
	`°rˇt
(
lDülogSåög
, "\"") ;

7539 i‡(
töyfd_sûít
Ë
	`°rˇt
–
lDülogSåög
 , " 2>/dev/null ");

7541 i‡–
	`xdülogPª£¡
() )

7543 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"xdialog"); (*)1;}

7544 
lWasXdülog
 = 1 ;

7545 
	`°r˝y
–
lDülogSåög
 , "Xdialog --colorsel \"" ) ;

7546 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7548 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7550 
	`°rˇt
(
lDülogSåög
, "\" 0 60 ") ;

7551 #i‡(
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
)

7552 
	`•rötf
(
lTmp
,"%hhu %hhu %hhu",
lDeÁu…RGB
[0],lDefaultRGB[1],lDefaultRGB[2]);

7554 
	`•rötf
(
lTmp
,"%hu %hu %hu",
lDeÁu…RGB
[0],lDefaultRGB[1],lDefaultRGB[2]);

7556 
	`°rˇt
(
lDülogSåög
, 
lTmp
) ;

7557 
	`°rˇt
(
lDülogSåög
, " 2>&1");

7559 i‡–
	`tköãr3Pª£¡
( ) )

7561 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python3-tkinter"); (*)1;}

7562 
	`°r˝y
–
lDülogSåög
 , 
gPyth⁄3Name
 ) ;

7563 
	`°rˇt
–
lDülogSåög
 ,

7565 
	`°rˇt
–
lDülogSåög
 , "res=colorchooser.askcolor(color='" ) ;

7566 
	`°rˇt
(
lDülogSåög
, 
lDeÁu…HexRGB
 ) ;

7567 
	`°rˇt
(
lDülogSåög
, "'") ;

7569 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7571 
	`°rˇt
(
lDülogSåög
, ",title='") ;

7572 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7573 
	`°rˇt
(
lDülogSåög
, "'") ;

7575 
	`°rˇt
–
lDülogSåög
 , ");\
\nifÑes[1] isÇot None:\n\tprint(res[1])\"" ) ;

7578 i‡–
	`tköãr2Pª£¡
( ) )

7580 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"python2-tkinter"); (*)1;}

7581 
	`°r˝y
–
lDülogSåög
 , "export PYTHONIOENCODING=utf-8;" ) ;

7582 
	`°rˇt
–
lDülogSåög
 , 
gPyth⁄2Name
 ) ;

7583 i‡–! 
	`isTîmöÆRu¬ög
–Ë&& 
	`isD¨wö
( ) )

7585 
	`°rˇt
–
lDülogSåög
 , " -i" ) ;

7588 
	`°rˇt
–
lDülogSåög
 ,

7591 i‡–
	`isD¨wö
( ) )

7593 
	`°rˇt
–
lDülogSåög
 ,

7598 
	`°rˇt
–
lDülogSåög
 , "res=tkColorChooser.askcolor(color='" ) ;

7599 
	`°rˇt
(
lDülogSåög
, 
lDeÁu…HexRGB
 ) ;

7600 
	`°rˇt
(
lDülogSåög
, "'") ;

7603 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7605 
	`°rˇt
(
lDülogSåög
, ",title='") ;

7606 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7607 
	`°rˇt
(
lDülogSåög
, "'") ;

7609 
	`°rˇt
–
lDülogSåög
 , ");\
\nifÑes[1] isÇot None:\n\tprintÑes[1]\"" ) ;

7614 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){ 
	`töyfd_öputBox
◊TôÀ,
NULL
,NULL);}

7615 
lPoöãrI≈utBox
 = 
	`töyfd_öputBox
(
NULL
, NULL, NULL);

7616 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
(
lDülogSåög
,ÜPointerInputBox);

7617 
p
 = 
	`töyfd_öputBox
(
aTôÀ
, "E¡î hexÑgb cﬁ‹ (i.e. #f5ˇ20)", 
lDeÁu…HexRGB
);

7619 i‡–!
p
 || (
	`°æí
(p) != 7) || (p[0] != '#') )

7621  
NULL
 ;

7623  
i
 = 1 ; i < 7 ; i ++ )

7625 i‡–! 
	`isxdigô
–(Ë
p
[
i
] ) )

7627  
NULL
 ;

7630 
	`Hex2RGB
(
p
,
aoResu…RGB
);

7631 
	`°r˝y
(
lDeÁu…HexRGB
, 
p
);

7632 i‡(
lPoöãrI≈utBox
Ë
	`°r˝y
÷PoöãrI≈utBox, 
lDülogSåög
);

7633  
lDeÁu…HexRGB
;

7636 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

7637 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

7639  
NULL
 ;

7641  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

7644 
	`p˛o£
–
lIn
 ) ;

7645 i‡–! 
	`°æí
–
lBuff
 ) )

7647  
NULL
 ;

7651 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

7653 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

7656 i‡–
lWasZíôy3
 )

7658 i‡–
lBuff
[0] == '#' )

7660 i‡–
	`°æí
(
lBuff
)>7 )

7662 
lBuff
[3]=lBuff[5];

7663 
lBuff
[4]=lBuff[6];

7664 
lBuff
[5]=lBuff[9];

7665 
lBuff
[6]=lBuff[10];

7666 
lBuff
[7]='\0';

7668 
	`Hex2RGB
(
lBuff
,
aoResu…RGB
);

7670 i‡–
lBuff
[3] == '(' ) {

7671 #i‡(
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
)

7672 
	`ssˇnf
(
lBuff
,"rgb(%hhu,%hhu,%hhu", & 
aoResu…RGB
[0], &áoResultRGB[1],&áoResultRGB[2]);

7674 
aoResu…RGB
[0] = 
	`°πﬁ
(
lBuff
+4, & 
lTmp2
, 10 );

7675 
aoResu…RGB
[1] = 
	`°πﬁ
(
lTmp2
+1, &ÜTmp2, 10 );

7676 
aoResu…RGB
[2] = 
	`°πﬁ
(
lTmp2
+1, 
NULL
, 10 );

7678 
	`RGB2Hex
(
aoResu…RGB
,
lBuff
);

7680 i‡–
lBuff
[4] == '(' ) {

7681 #i‡(
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
)

7682 
	`ssˇnf
(
lBuff
,"rgba(%hhu,%hhu,%hhu", & 
aoResu…RGB
[0], &áoResultRGB[1],&áoResultRGB[2]);

7684 
aoResu…RGB
[0] = 
	`°πﬁ
(
lBuff
+5, & 
lTmp2
, 10 );

7685 
aoResu…RGB
[1] = 
	`°πﬁ
(
lTmp2
+1, &ÜTmp2, 10 );

7686 
aoResu…RGB
[2] = 
	`°πﬁ
(
lTmp2
+1, 
NULL
, 10 );

7688 
	`RGB2Hex
(
aoResu…RGB
,
lBuff
);

7691 i‡–
lWasOßs¸ùt
 || 
lWasXdülog
 )

7694 #i‡(
	`deföed
(
__˝lu•lus
 ) && __˝lu•lu†>201103LË|| (deföed(
__STDC_VERSION__
Ë&& __STDC_VERSION__ >199901LË|| deföed(
__˛™g__
)

7695 
	`ssˇnf
(
lBuff
,"%hhu %hhu %hhu", & 
aoResu…RGB
[0], &áoResultRGB[1],&áoResultRGB[2]);

7697 
aoResu…RGB
[0] = 
	`°πﬁ
(
lBuff
, & 
lTmp2
, 10 );

7698 
aoResu…RGB
[1] = 
	`°πﬁ
(
lTmp2
+1, &ÜTmp2, 10 );

7699 
aoResu…RGB
[2] = 
	`°πﬁ
(
lTmp2
+1, 
NULL
, 10 );

7701 
	`RGB2Hex
(
aoResu…RGB
,
lBuff
);

7705 
	`Hex2RGB
(
lBuff
,
aoResu…RGB
);

7710 
	`°r˝y
(
lDeÁu…HexRGB
,
lBuff
);

7711  
lDeÁu…HexRGB
 ;

7712 
	}
}

7717 * 
	$töyfd_¨øyDülog
(

7718 c⁄° * 
aTôÀ
 ,

7719 
aNumOfCﬁumns
 ,

7720 c⁄° * c⁄° * 
aCﬁumns
 ,

7721 
aNumOfRows
 ,

7722 c⁄° * c⁄° * 
aCñls
 )

7725 
lBuff
 [
MAX_PATH_OR_CMD
] ;

7726 
lDülogSåög
 [
MAX_PATH_OR_CMD
] ;

7727 
FILE
 * 
lIn
 ;

7728 
i
 ;

7730 
lBuff
[0]='\0';

7732 i‡–
	`zíôyPª£¡
(Ë|| 
	`m©edülogPª£¡
(Ë|| 
	`shñÀmíèryPª£¡
(Ë|| 
	`q¨maPª£¡
() )

7734 i‡–
	`zíôyPª£¡
() )

7736 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"zenity"); (*)1;}

7737 
	`°r˝y
–
lDülogSåög
 , "zenity" ) ;

7738 i‡–(
	`zíôy3Pª£¡
(Ë>4Ë&& !
	`gëív
("SSH_TTY") )

7740 
	`°rˇt
–
lDülogSåög
, " --attach=$(sleep .01;xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7743 i‡–
	`m©edülogPª£¡
() )

7745 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"matedialog"); (*)1;}

7746 
	`°r˝y
–
lDülogSåög
 , "matedialog" ) ;

7748 i‡–
	`shñÀmíèryPª£¡
() )

7750 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"shellementary"); (*)1;}

7751 
	`°r˝y
–
lDülogSåög
 , "shellementary" ) ;

7755 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,"qarma"); (*)1;}

7756 
	`°r˝y
–
lDülogSåög
 , "qarma" ) ;

7757 i‡–!
	`gëív
("SSH_TTY") )

7759 
	`°rˇt
(
lDülogSåög
, " --attach=$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)");

7762 
	`°rˇt
–
lDülogSåög
 , " --list --print-column=ALL" ) ;

7764 i‡–
aTôÀ
 && 
	`°æí
(aTitle) )

7766 
	`°rˇt
(
lDülogSåög
, " --title=\"") ;

7767 
	`°rˇt
(
lDülogSåög
, 
aTôÀ
) ;

7768 
	`°rˇt
(
lDülogSåög
, "\"") ;

7771 i‡–
aCﬁumns
 && (
aNumOfCﬁumns
 > 0) )

7773  
i
 = 0 ; i < 
aNumOfCﬁumns
 ; i ++ )

7775 
	`°rˇt
–
lDülogSåög
 , " --column=\"" ) ;

7776 
	`°rˇt
–
lDülogSåög
 , 
aCﬁumns
 [
i
] ) ;

7777 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

7781 i‡–
aCñls
 && (
aNumOfRows
 > 0) )

7783 
	`°rˇt
–
lDülogSåög
 , " " ) ;

7784  
i
 = 0 ; i < 
aNumOfRows
*
aNumOfCﬁumns
 ; i ++ )

7786 
	`°rˇt
–
lDülogSåög
 , "\"" ) ;

7787 
	`°rˇt
–
lDülogSåög
 , 
aCñls
 [
i
] ) ;

7788 
	`°rˇt
–
lDülogSåög
 , "\" " ) ;

7794 i‡(
aTôÀ
&&!
	`°rcmp
◊TôÀ,"töyfd_quîy")){
	`°r˝y
(
töyfd_ª•⁄£
,""); (*)0;}

7795  
NULL
 ;

7798 i‡(
töyfd_vîbo£
Ë
	`¥ötf
–"lDülogSåög: %s\n" , 
lDülogSåög
 ) ;

7799 i‡–! ( 
lIn
 = 
	`p›í
–
lDülogSåög
 , "r" ) ) )

7801  
NULL
 ;

7803  
	`fgës
–
lBuff
 , –lBuf‡Ë, 
lIn
 ) !
NULL
 )

7805 
	`p˛o£
–
lIn
 ) ;

7806 i‡–
lBuff
[
	`°æí
(ÜBuff ) -1] == '\n' )

7808 
lBuff
[
	`°æí
(ÜBuff ) -1] = '\0' ;

7811 i‡–! 
	`°æí
–
lBuff
 ) )

7813  
NULL
 ;

7815  
lBuff
 ;

7816 
	}
}

7985 #ifde‡
_MSC_VER


7986 #¥agm®
w¨nög
(:4996)

7987 #¥agm®
w¨nög
(:4100)

7988 #¥agm®
w¨nög
(:4706)

	@tinyfiledialogs.h

94 #i‚de‡
TINYFILEDIALOGS_H


95 
	#TINYFILEDIALOGS_H


	)

97 #ifdef 
__˝lu•lus


105 #ifde‡
_WIN32


108 
töyfd_wöUtf8
;

112 * 
töyfd_utf8toMbcs
(c⁄° * 
aUtf8°rög
);

113 
wch¨_t
 * 
töyfd_utf8to16
(c⁄° * 
aUtf8°rög
);

114 * 
töyfd_utf16to8
(
wch¨_t
 c⁄° * 
aUtf16°rög
);

115 
töyfd_£tWöUtf8
(
aIsUtf8
);

121 c⁄° 
töyfd_vîsi⁄
[8];

122 c⁄° 
töyfd_√eds
[];

123 
töyfd_vîbo£
;

124 
töyfd_sûít
;

129 
töyfd_f‹˚C⁄sﬁe
;

136 
töyfd_ª•⁄£
[1024];

150 
töyfd_bìp
();

152 
töyfd_nŸifyP›up
(

153 c⁄° * 
aTôÀ
,

154 c⁄° * 
aMesßge
,

155 c⁄° * 
aIc⁄Ty≥
);

158 
töyfd_mesßgeBox
(

159 c⁄° * 
aTôÀ
 ,

160 c⁄° * 
aMesßge
 ,

161 c⁄° * 
aDülogTy≥
 ,

162 c⁄° * 
aIc⁄Ty≥
 ,

163 
aDeÁu…Buâ⁄
 ) ;

166 * 
töyfd_öputBox
(

167 c⁄° * 
aTôÀ
 ,

168 c⁄° * 
aMesßge
 ,

169 c⁄° * 
aDeÁu…I≈ut
 ) ;

172 * 
töyfd_ßveFûeDülog
(

173 c⁄° * 
aTôÀ
 ,

174 c⁄° * 
aDeÁu…P©hAndFûe
 ,

175 
aNumOfFûãrP©ã∫s
 ,

176 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

177 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 ) ;

180 * 
töyfd_›íFûeDülog
(

181 c⁄° * 
aTôÀ
 ,

182 c⁄° * 
aDeÁu…P©hAndFûe
 ,

183 
aNumOfFûãrP©ã∫s
 ,

184 c⁄° * c⁄° * 
aFûãrP©ã∫s
 ,

185 c⁄° * 
aSögÀFûãrDes¸ùti⁄
 ,

186 
aAŒowMu…ùÀSñe˘s
 ) ;

190 * 
töyfd_£À˘FﬁdîDülog
(

191 c⁄° * 
aTôÀ
 ,

192 c⁄° * 
aDeÁu…P©h
 ) ;

195 * 
töyfd_cﬁ‹Choo£r
(

196 c⁄° * 
aTôÀ
 ,

197 c⁄° * 
aDeÁu…HexRGB
 ,

198 c⁄° 
aDeÁu…RGB
[3] ,

199 
aoResu…RGB
[3] ) ;

208 #ifde‡
_WIN32


211 
töyfd_nŸifyP›upW
(

212 
wch¨_t
 c⁄° * 
aTôÀ
,

213 
wch¨_t
 c⁄° * 
aMesßge
,

214 
wch¨_t
 c⁄° * 
aIc⁄Ty≥
);

217 
töyfd_mesßgeBoxW
(

218 
wch¨_t
 c⁄° * 
aTôÀ
 ,

219 
wch¨_t
 c⁄° * 
aMesßge
,

220 
wch¨_t
 c⁄° * 
aDülogTy≥
,

221 
wch¨_t
 c⁄° * 
aIc⁄Ty≥
,

222 
aDeÁu…Buâ⁄
 );

226 
wch¨_t
 * 
töyfd_öputBoxW
(

227 
wch¨_t
 c⁄° * 
aTôÀ
,

228 
wch¨_t
 c⁄° * 
aMesßge
,

229 
wch¨_t
 c⁄° * 
aDeÁu…I≈ut
 );

232 
wch¨_t
 * 
töyfd_ßveFûeDülogW
(

233 
wch¨_t
 c⁄° * 
aTôÀ
,

234 
wch¨_t
 c⁄° * 
aDeÁu…P©hAndFûe
,

235 
aNumOfFûãrP©ã∫s
,

236 
wch¨_t
 c⁄° * c⁄° * 
aFûãrP©ã∫s
,

237 
wch¨_t
 c⁄° * 
aSögÀFûãrDes¸ùti⁄
);

241 
wch¨_t
 * 
töyfd_›íFûeDülogW
(

242 
wch¨_t
 c⁄° * 
aTôÀ
,

243 
wch¨_t
 c⁄° * 
aDeÁu…P©hAndFûe
,

244 
aNumOfFûãrP©ã∫s
 ,

245 
wch¨_t
 c⁄° * c⁄° * 
aFûãrP©ã∫s
,

246 
wch¨_t
 c⁄° * 
aSögÀFûãrDes¸ùti⁄
,

247 
aAŒowMu…ùÀSñe˘s
 ) ;

252 
wch¨_t
 * 
töyfd_£À˘FﬁdîDülogW
(

253 
wch¨_t
 c⁄° * 
aTôÀ
,

254 
wch¨_t
 c⁄° * 
aDeÁu…P©h
);

258 
wch¨_t
 * 
töyfd_cﬁ‹Choo£rW
(

259 
wch¨_t
 c⁄° * 
aTôÀ
,

260 
wch¨_t
 c⁄° * 
aDeÁu…HexRGB
,

261 c⁄° 
aDeÁu…RGB
[3] ,

262 
aoResu…RGB
[3] ) ;

272 * 
töyfd_¨øyDülog
(

273 c⁄° * 
aTôÀ
 ,

274 
aNumOfCﬁumns
 ,

275 c⁄° * c⁄° * 
aCﬁumns
,

276 
aNumOfRows
,

277 c⁄° * c⁄° * 
aCñls
);

282 #ifdef 
__˝lu•lus


	@win32_platform.cpp

1 
	~"MaöHñ≥rs.h
"

2 
	~<io°ªam
>

3 
	~<s°ªam
>

4 
	~"°rög.h
"

5 
	~"SaveLﬂd.h
"

6 
	~"TextS˚√.h
"

7 
	~"MíuS˚√.h
"

8 
	~"Edô‹S˚√.h
"

9 
	~"•rôe.h
"

11 
	$H™dÀSh¨edEvíts
(
Edô‹UISèã
* 
ui_°©e
, 
GameS∑˚Camîa
* 
ˇmîa_game
, 
glm
::
m©4
* 
ˇmîa
, 
boﬁ
 
mou£_moved_this_‰ame
, 
SCENE_TYPE
 
s˚√
)

13 
boﬁ
 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
Ál£
;

14 i‡(
ui_°©e
->
whìl_move
 !0 && (
s˚√
 =
SCENE_TYPE
::
ST_EDITOR
 || s˚√ =SCENE_TYPE::
ST_EDIT_LEVEL
))

17 
°d
::
cout
 << "begöÖrötög zoom info" << std::
ídl
;

18 
game_height_ﬁd
 = 
ui_°©e
->
game_height_cuºít
;

19 
ui_°©e
->
game_height_cuºít
 -ui_°©e->
whìl_move
;

20 
ui_°©e
->
game_height_cuºít
 = 
	`maxf
(
MAX_ZOOM
, ui_state->game_height_current);

21 
øtio
 = 
ui_°©e
->
game_height_cuºít
 / 
game_height_ﬁd
;

22 
ˇmîa_˚¡î_x
 = (
ˇmîa_game
->
À·
 + camîa_game->
right
) / 2.0f;

23 
ˇmîa_˚¡î_y
 = (
ˇmîa_game
->
up
 + camîa_game->
down
) / 2.0f;

24 
ˇmîa_width
 = (
ˇmîa_game
->
right
 - camîa_game->
À·
);

25 
ˇmîa_height
 = (
ˇmîa_game
->
up
 - camîa_game->
down
);

26 
√w_ˇmîa_hÆf_width
 = (
ˇmîa_width
 / 2.0fË* 
øtio
;

27 
√w_ˇmîa_hÆf_height
 = (
ˇmîa_height
 / 2.0fË* 
øtio
;

29 
ˇmîa_game
->
À·
 = 
ˇmîa_˚¡î_x
 - 
√w_ˇmîa_hÆf_width
;

30 
ˇmîa_game
->
right
 = 
ˇmîa_˚¡î_x
 + 
√w_ˇmîa_hÆf_width
;

31 
ˇmîa_game
->
down
 = 
ˇmîa_˚¡î_y
 - 
√w_ˇmîa_hÆf_height
;

32 
ˇmîa_game
->
up
 = 
ˇmîa_˚¡î_y
 + 
√w_ˇmîa_hÆf_height
;

35 i‡(
mou£_moved_this_‰ame
 && 
ui_°©e
->
mou£_right_˛ick_down
 && (
s˚√
 =
SCENE_TYPE
::
ST_EDITOR
 || s˚√ =SCENE_TYPE::
ST_EDIT_LEVEL
))

37 
ui_°©e
->
tŸÆMove
 = 
	`m©h_öçaú_sub
(ui_°©e->
mou£_œ°_pos
, ui_°©e->
mou£Pos
);

38 
ˇmîa_game
->
À·
 +
ui_°©e
->
tŸÆMove
.
x
 * 
CAMERA_MOVE_MULT
;

39 
ˇmîa_game
->
right
 +
ui_°©e
->
tŸÆMove
.
x
 * 
CAMERA_MOVE_MULT
;

40 
ˇmîa_game
->
down
 +
ui_°©e
->
tŸÆMove
.
y
 * 
CAMERA_MOVE_MULT
;

41 
ˇmîa_game
->
up
 +
ui_°©e
->
tŸÆMove
.
y
 * 
CAMERA_MOVE_MULT
;

43 
	}
}

45 #¥agm®
ªgi⁄
 
EMBARASSINGLY
 
GLOBAL
 
VARIABLES


49 
AŒWrôe
* 
	gÆl_wrôe
;

50 
S¥ôeWrôe
* 
	gÊo‹_wrôe
;

51 
S¥ôeWrôe
* 
	gpõ˚_wrôe
;

52 
S¥ôeWrôe
* 
	gsymbﬁ_wrôe
;

53 
S¥ôeWrôe
* 
	gui_wrôe
;

55 
boﬁ
 
	gkìp_ru¬ög_öföôe_lo›
 = 
Ál£
;

57 
Mem‹y
* 
	g‰ame_mem‹y
;

58 
Mem‹y
* 
	g≥rm™ít_mem‹y
;

59 
Mem‹y
* 
	gmíu_mem‹y
;

60 
Mem‹y
* 
	gedô‹_mem‹y
;

61 
Mem‹y
* 
	g∂ay_mem‹y
;

62 
Mem‹y
* 
	gw‹ld_mem‹y
;

63 
Mem‹y
* 
	gÀvñ_mem‹y
;

64 
Mem‹y
* 
	g™im©i⁄_mem‹y
;

65 
Mem‹y
* 
	gãxt_mem‹y
;

67 
SCENE_TYPE
 
	gs˚√
;

68 
Edô‹S˚√
* 
	gedô‹_s˚√_°©e
;

69 
PœyS˚√
 
	g∂ay_s˚√_°©e
;

70 
W‹ldS˚√
* 
	gw‹ld_s˚√_°©e
;

71 
W‹ldPœyS˚√
* 
	gw‹ld_∂ay_s˚√_°©e
;

72 
TextS˚√
* 
	gãxt_s˚√_°©e
;

73 
MíuS˚√
* 
	gmíu_s˚√_°©e
;

74 
Dúe˘i⁄
 
	gœ°_move_èkí
 = 
NO_DIRECTION
;

75 
	gs¸ìn_width
 = 800;

76 
	gs¸ìn_height
 = 600;

77 
	gw‹ld_ˇmîa_ÀΩ
;

78 
SDL_Evít
 
	gevít
;

79 
boﬁ
 
	gru¬ög
 = 
åue
;

80 
Edô‹UISèã
 
	gui_°©e
;

82 
GameS∑˚Camîa
 
	gw‹ld_ˇmîa
;

83 
GameS∑˚Camîa
 
	gw‹ld_ˇmîa_°¨t
;

84 
GameS∑˚Camîa
 
	gw‹ld_ˇmîa_gﬂl
;

87 
GameS∑˚Camîa
 
	gˇmîa_game
;

88 
VõwP‹tCamîa
 
	gˇmîa_võwp‹t
;

89 
	gglm
::
m©4
 
ˇmîa
;

93 
	gglm
::
vec2
 
døggög_°¨t_posôi⁄_ö_game•a˚
 = 
glm
::vec2(0, 0);

96 
Uöt32
 
	g°¨t_time_ms
;

97 
Uöt32
 
	gœ°_‰ame_time_ms
;

102 
Shadî
 
	g•rôeShadî
;

103 
Shadî
 
	gfuŒS¥ôeShadî
;

104 
Shadî
 
	gdŸãdShadî
;

105 
Shadî
 
	gãxtShadî
;

106 
Shadî
 
	g°rögShadî
;

107 
	gglm
::
vec4
* 
ui_©œs_m≠≥r
;

109 
GLuöt
 
	gdŸãd_VAO
;

110 
GLuöt
 
	gdŸãd_posôi⁄s_buf„r
;

111 
GLuöt
 
	gdŸãd_sˇÀ_buf„r
;

112 
	gdŸãd_tŸÆ_døwn
;

113 
	gglm
::
vec3
* 
dŸãd_posôi⁄s_˝u
;

114 
	gglm
::
vec2
* 
dŸãd_sˇÀ_˝u
;

116 
GLuöt
 
	g°rög_VAO
;

117 
GLuöt
 
	g°rög_©œs_buf„r
;

118 
GLuöt
 
	g°rög_m©rix_buf„r
;

119 
GLuöt
 
	g°rög_cﬁ‹_buf„r
;

120 
TextWrôe
 
	gãxt_døw_öfo
;

123 
	g°rög_ãxtuª
;

125 
SDL_Wödow
* 
	gwödow
;

127 #¥agm®
ídªgi⁄


130 
	$lﬂd_edô‹_Àvñ_°©eful
(
°d
::
°rög
 
to_lﬂd
)

132 
b¨
 = 3;

134 
b¨
 = 4;

135 
b¨
++;

137 
	`mem‹y_˛ór
(
edô‹_mem‹y
);

138 
W‹ldSèã
* 
ªs
 = 
	`∑r£_de£rülize_timemachöe
(
to_lﬂd
, 
edô‹_mem‹y
, 
‰ame_mem‹y
);

139 
edô‹_s˚√_°©e
 = 
	`edô‹s˚√_£tup_wôh_°¨t_°©e
(
edô‹_mem‹y
, 
ˇmîa_võwp‹t
, 
ªs
);

140 
edô‹_s˚√_°©e
->
timeMachöe
->
cuºít_numbî_of_a˘i⁄s
 = 0;

141 
°d
::
cout
 << "ALL DONE!" << std::
ídl
;

142 
	}
}

143 
	$ªsize_s¸ìn_°©eful
(
√xt_width
, 
√xt_height
)

145 
ﬁd_s¸ìn_width
 = (Ë
s¸ìn_width
;

146 
ﬁd_s¸ìn_height
 = (Ë
s¸ìn_height
;

147 
ﬁd_øtio
 = 
ﬁd_s¸ìn_width
 / 
ﬁd_s¸ìn_height
;

148 
s¸ìn_width
 = 
√xt_width
;

149 
s¸ìn_height
 = 
√xt_height
;

150 
	`glVõwp‹t
(0, 0, 
√xt_width
, 
√xt_height
);

156 
ˇmîa_võwp‹t
.
right
 = 
√xt_width
;

157 
ˇmîa_võwp‹t
.
up
 = 
√xt_height
;

161 
√xt_øtio
 = (Ë
s¸ìn_width
 / 
s¸ìn_height
;

162 
ex∑nd_øtio
 = 
√xt_øtio
 / 
ﬁd_øtio
;

163 
˚¡î
 = (
ˇmîa_game
.
À·
 + camîa_game.
right
) / 2.0f;

164 
ﬁd_di°™˚
 = 
ˇmîa_game
.
right
 - camîa_game.
À·
;

165 
√xt_di°™˚
 = 
ﬁd_di°™˚
 * 
ex∑nd_øtio
;

166 
ˇmîa_game
.
À·
 = 
˚¡î
 - 
√xt_di°™˚
 / 2.0f;

167 
ˇmîa_game
.
right
 = 
˚¡î
 + 
√xt_di°™˚
 / 2.0f;

173 
	}
}

174 
	$£tup_w‹ld_s¸ìn_°©eful
(
SCENE_TYPE
 
go_to_⁄_back•a˚
)

176 
	`mem‹y_˛ór
(
w‹ld_mem‹y
);

177 
w‹ld_s˚√_°©e
 = 
	`£tup_w‹ld_s˚√
(
edô‹_s˚√_°©e
->
timeMachöe
, 
w‹ld_mem‹y
, 
go_to_⁄_back•a˚
);

178 
s˚√
 = 
ST_PLAY_WORLD
;

179 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

182 
cuºít_num
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

183 
GameSèã
* 
cuºít_game°©e
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_num
];

184 
I¡Paú
 
game°©e_pos
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
cuºít_num
];

185 
w‹ld_ˇmîa
 = 
	`m©h_ˇmîa_buûd_f‹_game°©e
(
cuºít_game°©e
, 
game°©e_pos
, 
ˇmîa_võwp‹t
);

187 
w‹ld_ˇmîa_°¨t
 = 
w‹ld_ˇmîa
;

188 
w‹ld_ˇmîa_gﬂl
 = 
w‹ld_ˇmîa
;

189 
w‹ld_ˇmîa_ÀΩ
 = 
CAMERA_LERP_TIME
;

190 
	}
}

191 
	$£tup_w‹ld_s¸ìn_c⁄töue_°©eful
(
°d
::
°rög
 
to_lﬂd
)

193 
	`mem‹y_˛ór
(
w‹ld_mem‹y
);

194 
w‹ld_s˚√_°©e
 = 
	`w‹ld_de£rülize
(
to_lﬂd
, 
w‹ld_mem‹y
, 
‰ame_mem‹y
);

195 
w‹ld_s˚√_°©e
->
go_to_⁄_back•a˚
 = 
ST_MENU
;

197 
s˚√
 = 
ST_PLAY_WORLD
;

198 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

201 
cuºít_num
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

202 
GameSèã
* 
cuºít_game°©e
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_num
];

203 
I¡Paú
 
game°©e_pos
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
cuºít_num
];

204 
w‹ld_ˇmîa
 = 
	`m©h_ˇmîa_buûd_f‹_game°©e
(
cuºít_game°©e
, 
game°©e_pos
, 
ˇmîa_võwp‹t
);

205 
w‹ld_ˇmîa_°¨t
 = 
w‹ld_ˇmîa
;

206 
w‹ld_ˇmîa_gﬂl
 = 
w‹ld_ˇmîa
;

207 
w‹ld_ˇmîa_ÀΩ
 = 
CAMERA_LERP_TIME
;

209 
	}
}

211 
	$ãxt_s˚√_ª£t
()

213 
s˚√
 = 
ãxt_s˚√_°©e
->
s˚√_to_ªvît_to
;

214 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

215 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

217 i‡(
s˚√
 =
SCENE_TYPE
::
ST_PLAY_LEVEL
)

219 
cuºít_Àvñ
 = 
w‹ld_s˚√_°©e
->current_level;

220 
GameSèã
* 
cuºít_game°©e
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_Àvñ
];

221 
I¡Paú
 
game°©e_pos
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
cuºít_Àvñ
];

222 
w‹ld_ˇmîa_gﬂl
 = 
	`m©h_ˇmîa_buûd_f‹_game°©e
(
cuºít_game°©e
, 
game°©e_pos
, 
ˇmîa_võwp‹t
);

223 
w‹ld_ˇmîa_°¨t
 = 
w‹ld_ˇmîa
;

225 
	}
}

226 
	$míu_a˘i⁄_√w_game
()

231 
°d
::
°rög
 
to_lﬂd
 = 
	`ªsour˚_lﬂd_puzzÀ_fûe
("world3");

232 
	`lﬂd_edô‹_Àvñ_°©eful
(
to_lﬂd
);

233 
	`£tup_w‹ld_s¸ìn_°©eful
(
SCENE_TYPE
::
ST_MENU
);

234 
°d
::
cout
 << "TRIGGERING NEW GAME" << std::
ídl
;

235 
	}
}

236 
	$míu_a˘i⁄_c⁄töue_game
()

240 
°d
::
°rög
 
to_lﬂd
 = 
	`gë_c⁄töue_fûe
(
‰ame_mem‹y
);

241 
	`£tup_w‹ld_s¸ìn_c⁄töue_°©eful
(
to_lﬂd
);

242 
°d
::
cout
 << "TRIGGERING COUNTINUE GAME" << std::
ídl
;

243 
	}
}

244 
	$míu_a˘i⁄_Àvñ_edô‹
()

247 
°d
::
cout
 << "TRIGGERING LEVEL EDITOR" << std::
ídl
;

248 
s˚√
 = 
SCENE_TYPE
::
ST_EDITOR
;

249 
edô‹_s˚√_°©e
 = 
	`edô‹s˚√_£tup
(
edô‹_mem‹y
, 
ˇmîa_võwp‹t
);

250 
	}
}

254 
A˘i⁄
 
	$ˇlcuœã_wh©_a˘i⁄_to_èke_√xt_°©eful
()

257 
Àâî_¥i‹ôy
 = 
ui_°©e
.
mo°_ª˚¡ly_¥es£d_dúe˘i⁄
;

261 
buâ⁄_«mes
[4] = { 'w', 'a', 's', 'd' };

262 
Dúe˘i⁄
 
buâ⁄_a˘i⁄s
[4] = { 
U
, 
L
, 
D
, 
R
 };

263 
boﬁ
 
buâ⁄_¥es£d
 = 
Ál£
;

264 
buâ⁄_¥ess_ödex
 = -1;

265 
time_buâ⁄_¥es£d
 = -1;

266 
i
 = 0; i < 4; i++)

268 i‡(
ui_°©e
.
Àâîs
[
buâ⁄_«mes
[
i
] - 'a'].
¥es£d
)

269 i‡(
ui_°©e
.
Àâîs
[
buâ⁄_«mes
[
i
] - 'a'].
time_¥es£d
 > 
time_buâ⁄_¥es£d
 || !
buâ⁄_¥es£d
)

271 
buâ⁄_¥es£d
 = 
åue
;

272 
buâ⁄_¥ess_ödex
 = 
i
;

273 
time_buâ⁄_¥es£d
 = 
ui_°©e
.
Àâîs
[
buâ⁄_«mes
[
i
] - 'a'].
time_¥es£d
;

276 i‡(
buâ⁄_¥es£d
)

278 i‡(
ui_°©e
.
time_tûl_∂ayî_ˇn_move
 <0 || 
buâ⁄_a˘i⁄s
[
buâ⁄_¥ess_ödex
] !
œ°_move_èkí
)

280 
œ°_move_èkí
 = (
Dúe˘i⁄
)
buâ⁄_a˘i⁄s
[
buâ⁄_¥ess_ödex
];

281  (
A˘i⁄
Ë
buâ⁄_a˘i⁄s
[
buâ⁄_¥ess_ödex
];

285 i‡(
ui_°©e
.
Àâîs
['z' - 'a'].
¥es£d_this_‰ame
 ||

286 (
ui_°©e
.
Àâîs
['z' - 'a'].
¥es£d
 && ui_°©e.
time_tûl_∂ayî_ˇn_move
 <= 0))

288 
œ°_move_èkí
 = 
Dúe˘i⁄
::
NO_DIRECTION
;

289  (
A˘i⁄
Ë
A_UNDO
;

292 i‡(
ui_°©e
.
Àâîs
['r' - 'a'].
¥es£d_this_‰ame
)

294 
œ°_move_èkí
 = 
Dúe˘i⁄
::
NO_DIRECTION
;

295  (
A˘i⁄
)
A_RESET
;

297  (
A˘i⁄
Ë
A_NONE
;

298 
	}
}

299 
	$h™dÀ_√xt_a˘i⁄_°©eful
(
Game°©eTimeMachöe
* 
maybe_time_machöe
, 
I¡Paú
 
døw_posôi⁄
)

301 
A˘i⁄
 
√xt_a˘i⁄
 = 
	`ˇlcuœã_wh©_a˘i⁄_to_èke_√xt_°©eful
();

303 
Dúe˘i⁄
 
to_èke
 = 
	`a˘i⁄_to_dúe˘i⁄
(
√xt_a˘i⁄
);

305 i‡(
to_èke
 !
NO_DIRECTION
)

306 
	`èke_∂ayî_a˘i⁄
(

307 
maybe_time_machöe
,

308 
døw_posôi⁄
,

309 &
ui_°©e
,

310 
to_èke
,

311 
Àvñ_mem‹y
,

312 
‰ame_mem‹y
,

313 
™im©i⁄_mem‹y
);

316 i‡(
√xt_a˘i⁄
 =
A_UNDO
)

319 * 
mem‹y_˛óªd
 = 
	`game°©e_timemachöe_undo
(
maybe_time_machöe
);

320 
	`mem‹y_p›_°ack
(
Àvñ_mem‹y
, 
mem‹y_˛óªd
);

321 
ui_°©e
.
time_tûl_∂ayî_ˇn_move
 = 
WAIT_BETWEEN_PLAYER_MOVE_REPEAT
;

323 i‡(
√xt_a˘i⁄
 =
A_RESET
)

325 
	`game°©e_timemachöe_ª£t
(
maybe_time_machöe
, 
Àvñ_mem‹y
);

327 
	}
}

329 
	$h™dÀ_edô‹_öput
()

332 
	}
}

333 
	$maölo›fun˘i⁄
()

335 #¥agm®
ªgi⁄
 
Lo›
 
Sèπup


338 
i
 = 0; i < 
NUM_LETTERS_ON_KEYBOARD
; i++)

340 
ui_°©e
.
Àâîs
[
i
].
¥es£d_this_‰ame
 = 
Ál£
;

341 
ui_°©e
.
Àâîs
[
i
].
ªÀa£d_this_‰ame
 = 
Ál£
;

343 
ui_°©e
.
upd©e_a˘uÆ_s¸ìn_size
 = 
Ál£
;

344 
ui_°©e
.
mou£_œ°_pos
 = ui_°©e.
mou£Pos
;

345 
ui_°©e
.
shi·_key_down_this_‰ame
 = 
Ál£
;

346 
ui_°©e
.
˛ick_À·_down_this_‰ame
 = 
Ál£
;

347 
ui_°©e
.
˛ick_À·_up_this_‰ame
 = 
Ál£
;

348 
ui_°©e
.
whìl_move
 = 0;

349 
ui_°©e
.
tŸÆMove
 = 
	`m©h_öçaú_¸óã
(0, 0);

350 
ui_°©e
.
z_key_down_this_‰ame
 = 
Ál£
;

351 
ui_°©e
.
back•a˚_key_down_this_‰ame
 = 
Ál£
;

352 
ui_°©e
.
right
.
¥es£d_this_‰ame
 = 
Ál£
;

353 
ui_°©e
.
up
.
¥es£d_this_‰ame
 = 
Ál£
;

354 
ui_°©e
.
down
.
¥es£d_this_‰ame
 = 
Ál£
;

355 
ui_°©e
.
À·
.
¥es£d_this_‰ame
 = 
Ál£
;

356 
ui_°©e
.
•a˚b¨
.
¥es£d_this_‰ame
 = 
Ál£
;

357 
ui_°©e
.
íãr
.
¥es£d_this_‰ame
 = 
Ál£
;

361 
	`SDL_PﬁlEvít
(&
evít
))

363 i‡(
evít
.
ty≥
 =
SDL_WINDOWEVENT
)

365 i‡(
evít
.
wödow
.evíà=
SDL_WINDOWEVENT_RESIZED
)

367 
ui_°©e
.
upd©e_a˘uÆ_s¸ìn_size
 = 
åue
;

368 
ui_°©e
.
√xt_ˇmîa_size
 = 
glm
::
	`ivec2
(
evít
.
wödow
.
d©a1
,Évít.wödow.
d©a2
);

371 i‡(
evít
.
ty≥
 =
SDL_KEYDOWN
)

373 
i
 = 0; i < 
NUM_LETTERS_ON_KEYBOARD
; i++)

375 i‡(
evít
.
key
.
keysym
.
sym
 =(
SDLK_a
 + 
i
))

377 
ui_°©e
.
Àâîs
[
i
].
¥es£d
 = 
åue
;

378 i‡(
ui_°©e
.
Àâîs
[
i
].
ªÀa£d_sö˚_¥es£d_œ°
)

380 
ui_°©e
.
Àâîs
[
i
].
¥es£d_this_‰ame
 = 
åue
;

381 
ui_°©e
.
Àâîs
[
i
].
time_¥es£d
 = ui_°©e.
tŸÆ_time_∑s£d
;

383 
ui_°©e
.
Àâîs
[
i
].
ªÀa£d_sö˚_¥es£d_œ°
 = 
Ál£
;

386 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_LSHIFT
)

388 
ui_°©e
.
shi·_key_down_this_‰ame
 = 
åue
;

389 
ui_°©e
.
shi·_key_down
 = 
åue
;

391 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_LALT
)

393 
ui_°©e
.
Æt_key_down
 = 
åue
;

395 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_LCTRL
)

397 
ui_°©e
.
c⁄åﬁ_key_down
 = 
åue
;

399 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_z
)

401 
ui_°©e
.
z_key_down_this_‰ame
 = 
åue
;

403 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_BACKSPACE
)

405 
ui_°©e
.
back•a˚_key_down_this_‰ame
 = 
åue
;

407 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_d
)

409 
ui_°©e
.
right
.
¥es£d
 = 
åue
;

410 
ui_°©e
.
right
.
¥es£d_this_‰ame
 = 
åue
;

412 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_w
)

414 
ui_°©e
.
up
.
¥es£d
 = 
åue
;

415 
ui_°©e
.
up
.
¥es£d_this_‰ame
 = 
åue
;

417 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_a
)

419 
ui_°©e
.
À·
.
¥es£d
 = 
åue
;

420 
ui_°©e
.
À·
.
¥es£d_this_‰ame
 = 
åue
;

422 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_s
)

424 
ui_°©e
.
down
.
¥es£d
 = 
åue
;

425 
ui_°©e
.
down
.
¥es£d_this_‰ame
 = 
åue
;

427 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_SPACE
)

429 
ui_°©e
.
•a˚b¨
.
¥es£d
 = 
åue
;

430 
ui_°©e
.
•a˚b¨
.
¥es£d_this_‰ame
 = 
åue
;

432 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_RETURN
)

434 
ui_°©e
.
íãr
.
¥es£d
 = 
åue
;

435 
ui_°©e
.
íãr
.
¥es£d_this_‰ame
 = 
åue
;

438 i‡(
evít
.
ty≥
 =
SDL_KEYUP
)

440 
i
 = 0; i < 
NUM_LETTERS_ON_KEYBOARD
; i++)

442 i‡(
evít
.
key
.
keysym
.
sym
 =(
SDLK_a
 + 
i
))

444 
ui_°©e
.
Àâîs
[
i
].
¥es£d
 = 
Ál£
;

445 
ui_°©e
.
Àâîs
[
i
].
ªÀa£d_this_‰ame
 = 
åue
;

446 
ui_°©e
.
Àâîs
[
i
].
ªÀa£d_sö˚_¥es£d_œ°
 = 
åue
;

449 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_LSHIFT
)

451 
ui_°©e
.
shi·_key_down
 = 
Ál£
;

453 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_LALT
)

455 
ui_°©e
.
Æt_key_down
 = 
Ál£
;

457 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_LCTRL
)

459 
ui_°©e
.
c⁄åﬁ_key_down
 = 
Ál£
;

461 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_d
)

463 
ui_°©e
.
right
.
¥es£d
 = 
Ál£
;

465 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_w
)

467 
ui_°©e
.
up
.
¥es£d
 = 
Ál£
;

469 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_a
)

471 
ui_°©e
.
À·
.
¥es£d
 = 
Ál£
;

473 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_s
)

475 
ui_°©e
.
down
.
¥es£d
 = 
Ál£
;

477 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_SPACE
)

479 
ui_°©e
.
•a˚b¨
.
¥es£d
 = 
Ál£
;

481 i‡(
evít
.
key
.
keysym
.
sym
 =
SDLK_RETURN
)

483 
ui_°©e
.
íãr
.
¥es£d
 = 
Ál£
;

484 
ui_°©e
.
íãr
.
ªÀa£d_this_‰ame
 = 
åue
;

485 
ui_°©e
.
íãr
.
ªÀa£d_sö˚_¥es£d_œ°
 = 
åue
;

488 i‡(
evít
.
ty≥
 =
SDL_MOUSEMOTION
 ||Évít.ty≥ =
SDL_MOUSEBUTTONDOWN
 ||Évít.ty≥ =
SDL_MOUSEBUTTONUP
)

492 
mou£X
;

493 
mou£Y
;

494 
	`SDL_GëMou£Sèã
(&
mou£X
, &
mou£Y
);

495 
mou£Y
 = 
ˇmîa_võwp‹t
.
up
 - mouseY;

496 
ui_°©e
.
mou£Pos
 = 
	`m©h_öçaú_¸óã
(
mou£X
, 
mou£Y
);

497 
ui_°©e
.
mou£GamePos
 = 
	`m©h_s¸ìn•a˚_to_game•a˚
(ui_°©e.
mou£Pos
, 
ˇmîa_game
, 
ˇmîa_võwp‹t
, ui_°©e.
game_height_cuºít
);

501 i‡(
evít
.
ty≥
 =
SDL_MOUSEBUTTONDOWN
)

503 i‡(
evít
.
buâ⁄
.buâ⁄ =
SDL_BUTTON_RIGHT
)

504 
ui_°©e
.
mou£_right_˛ick_down
 = 
åue
;

505 i‡(
evít
.
buâ⁄
.buâ⁄ =
SDL_BUTTON_LEFT
)

507 
ui_°©e
.
˛ick_À·_down_this_‰ame
 = 
åue
;

508 
ui_°©e
.
mou£_À·_˛ick_down
 = 
åue
;

512 i‡(
evít
.
ty≥
 =
SDL_MOUSEBUTTONUP
)

514 i‡(
evít
.
buâ⁄
.buâ⁄ =
SDL_BUTTON_RIGHT
)

515 
ui_°©e
.
mou£_right_˛ick_down
 = 
Ál£
;

516 i‡(
evít
.
buâ⁄
.buâ⁄ =
SDL_BUTTON_LEFT
)

518 
ui_°©e
.
˛ick_À·_up_this_‰ame
 = 
åue
;

519 
ui_°©e
.
mou£_À·_˛ick_down
 = 
Ál£
;

523 i‡(
evít
.
ty≥
 =
SDL_QUIT
)

525 
ru¬ög
 = 
Ál£
;

527 i‡(
evít
.
ty≥
 =
SDL_MOUSEWHEEL
)

529 i‡(
evít
.
whìl
.
y
 != 0)

531 
ui_°©e
.
whìl_move
 = (Ë
evít
.
whìl
.
y
;

532 #ifde‡
EMSCRIPTEN


534 
ui_°©e
.
whìl_move
 /= 100.0f;

540 
boﬁ
 
mou£_moved_this_‰ame
 = 
ui_°©e
.
mou£Pos
.
x
 !ui_°©e.
mou£_œ°_pos
.x || ui_°©e.mou£Pos.
y
 != ui_state.mouse_last_pos.y;

541 
boﬁ
 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
Ál£
;

543 
	`H™dÀSh¨edEvíts
(&
ui_°©e
, &
ˇmîa_game
, &
ˇmîa
, 
mou£_moved_this_‰ame
, 
s˚√
);

545 i‡(
ui_°©e
.
˛ick_À·_down_this_‰ame
 && !ui_°©e.
shi·_key_down
 && !
À·_˛ick_a˘i⁄_ªsﬁved
 && 
s˚√
 =
SCENE_TYPE
::
ST_EDITOR
)

547 
glm
::
vec2
 
∑Àã_game•a˚_°¨t
 = 
	`m©h_s¸ìn•a˚_to_game•a˚
(
edô‹_s˚√_°©e
->
∑Àã_s¸ìn_°¨t
, 
ˇmîa_game
, 
ˇmîa_võwp‹t
, 
ui_°©e
.
game_height_cuºít
);

548 
boﬁ
 
˛ickedPÆëe
 = 
	`m©h_˛ick_is_öside_AABB
(

549 
∑Àã_game•a˚_°¨t
.
x
,

550 
∑Àã_game•a˚_°¨t
.
y
,

551 
∑Àã_game•a˚_°¨t
.
x
 + 
∑Àã_Àngth
,

552 
∑Àã_game•a˚_°¨t
.
y
 + 1,

553 
ui_°©e
.
mou£GamePos
.
x
,

554 
ui_°©e
.
mou£GamePos
.
y
);

555 i‡(
˛ickedPÆëe
)

558 
≥r˚¡ageX
 = 
	`≥r˚¡_bëwìn_two_poöts
(
ui_°©e
.
mou£GamePos
.
x
, 
∑Àã_game•a˚_°¨t
.x,ÖÆëe_game•a˚_°¨t.x + 
∑Àã_Àngth
);

559 
∑Àã_˚Œ_˛icked
 = ()(
≥r˚¡ageX
 * 
∑Àã_Àngth
);

560 
edô‹_s˚√_°©e
->
cuºítBrush
 = 
∑Àã_˚Œ_˛icked
;

562 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
åue
;

568 #¥agm®
ídªgi⁄


569 #¥agm®
ªgi⁄
 
GLCÀ¨
 
And
 
Upd©e
 
Dñè
 
Time


570 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
 | 
GL_DEPTH_BUFFER_BIT
);

571 
	`glCÀ¨Cﬁ‹
(0.1f, 0.1f, 0.1f, 1.0f);

573 
dñè
 = 0;

574 
tŸÆ_time
;

576 
cuºít_time_ms
 = 
	`SDL_GëTicks
();

577 
dñè_ms
 = (Ë(
cuºít_time_ms
 - 
œ°_‰ame_time_ms
);

578 
œ°_‰ame_time_ms
 = 
cuºít_time_ms
;

579 
dñè
 = 
dñè_ms
 / 1000.0f;

580 
tŸÆ_time
 = (
cuºít_time_ms
 - 
°¨t_time_ms
) / 1000.0f;

582 
ui_°©e
.
time_tûl_∂ayî_ˇn_move
 = 
	`maxf
(0, ui_°©e.time_tûl_∂ayî_ˇn_movê- 
dñè
);

583 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 +
dñè
;

584 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 +
dñè
;

585 
ui_°©e
.
tŸÆ_time_∑s£d
 = 
tŸÆ_time
;

587 #¥agm®
ídªgi⁄


589 i‡(
s˚√
 =
ST_EDITOR
)

591 #¥agm®
ªgi⁄
 
h™dÀ_evíts


593 
boﬁ
 
mou£_moved_this_‰ame
 = 
ui_°©e
.
mou£Pos
.
x
 !ui_°©e.
mou£_œ°_pos
.x || ui_°©e.mou£Pos.
y
 != ui_state.mouse_last_pos.y;

594 i‡(
ui_°©e
.
back•a˚_key_down_this_‰ame
)

596 
s˚√
 = 
SCENE_TYPE
::
ST_MENU
;

597 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

598 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

600 i‡(
ui_°©e
.
upd©e_a˘uÆ_s¸ìn_size
)

603 
	`ªsize_s¸ìn_°©eful
(
ui_°©e
.
√xt_ˇmîa_size
.
x
, ui_°©e.√xt_ˇmîa_size.
y
);

605 i‡(
ui_°©e
.
Àâîs
['k' - 'a'].
¥es£d_this_‰ame
)

607 
	`SDL_SëWödowSize
(
wödow
,1200, 900);

608 
	`ªsize_s¸ìn_°©eful
(1200, 900);

611 i‡(
ui_°©e
.
ty≥
 =
ECS_BRUSH
)

613 i‡(
ui_°©e
.
mou£_À·_˛ick_down
)

614 
	`MaybeAµlyBrush
(
edô‹_s˚√_°©e
->
∑Àã
,edô‹_s˚√_°©e->
cuºítBrush
, &
ui_°©e
,edô‹_s˚√_°©e->
timeMachöe
, ui_°©e.
mou£GamePos
);

616 
ui_°©e
.
ty≥
 = 
ECS_NEUTRAL
;

618 i‡(
ui_°©e
.
ty≥
 =
ECS_NEUTRAL
)

621 i‡(
ui_°©e
.
Àâîs
['y' - 'a'].
¥es£d_this_‰ame
)

623 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

624 i‡(
ödex_˛icked
 >= 0)

627 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_ch™ge_Àvñ_mode
(
ödex_˛icked
,
LevñMode
::
CrumbÀ
);

628 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

631 i‡(
ui_°©e
.
Àâîs
['u' - 'a'].
¥es£d_this_‰ame
)

633 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

634 i‡(
ödex_˛icked
 >= 0)

637 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_ch™ge_Àvñ_mode
(
ödex_˛icked
,
LevñMode
::
Rïót
);

638 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

641 i‡(
ui_°©e
.
Àâîs
['i' - 'a'].
¥es£d_this_‰ame
)

643 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

644 i‡(
ödex_˛icked
 >= 0)

647 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_ch™ge_Àvñ_mode
(
ödex_˛icked
,
LevñMode
::
Ovîw‹ld
);

648 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

652 i‡(
ui_°©e
.
Àâîs
['m' - 'a'].
¥es£d_this_‰ame
)

654 
	`£tup_w‹ld_s¸ìn_°©eful
(
SCENE_TYPE
::
ST_EDITOR
);

657 i‡(
ui_°©e
.
Àâîs
['o' - 'a'].
¥es£d_this_‰ame
)

659 
°d
::
°rög
 
to_lﬂd
 = 
	`lﬂd_puzzÀ_fûe
();

660 i‡(
to_lﬂd
 == "")

662 
°d
::
cout
 << "uh oh, ourÜoad ofá game didn't work,Çothings happened!";

666 
	`lﬂd_edô‹_Àvñ_°©eful
(
to_lﬂd
);

670 i‡(
ui_°©e
.
Àâîs
['p' - 'a'].
¥es£d_this_‰ame
)

673 
°d
::
°rög
 
to_¥öt
 = 
	`∑r£_£rülize_timemachöe
(&(
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
), 
‰ame_mem‹y
, frame_memory);

674 
	`ßve_puzzÀ_fûe
(
to_¥öt
);

675 
°d
::
cout
 << 
to_¥öt
 << std::
ídl
;

683 i‡(
ui_°©e
.
Àâîs
['w' - 'a'].
¥es£d_this_‰ame
)

685 
W‹ldPosôi⁄
 
posôi⁄_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_fuŒ
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

686 i‡(
posôi⁄_˛icked
.
Àvñ_ödex
 >0 &&Öosôi⁄_˛icked.
Àvñ_posôi⁄_1d
 >= 0)

688 
GameSèã
* 
°©e
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
posôi⁄_˛icked
.
Àvñ_ödex
];

690 
GameSèã
* 
√xt
 = 
	`game°©e_add_row
(
°©e
, 
edô‹_s˚√_°©e
->
timeMachöe
->
game°©e_mem‹y
, 
posôi⁄_˛icked
.
Àvñ_posôi⁄
.
x
,Öosôi⁄_˛icked.Àvñ_posôi⁄.
y
);

691 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_upd©e_game°©e
(
√xt
, 
posôi⁄_˛icked
.
Àvñ_ödex
, 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_«mes
[position_clicked.level_index]);

692 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

697 i‡(
ui_°©e
.
Àâîs
['h' - 'a'].
¥es£d_this_‰ame
)

700 
W‹ldPosôi⁄
 
posôi⁄_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_fuŒ
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

701 
ödex_˛icked
 = 
posôi⁄_˛icked
.
Àvñ_ödex
;

702 
I¡Paú
 
grid_˛icked
 = 
posôi⁄_˛icked
.
Àvñ_posôi⁄
;

703 i‡(
ödex_˛icked
 >= 0)

705 
GameSèã
* 
°©e
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_˛icked
];

707 
GameSèã
* 
√xt
 = 
	`game°©e_add_cﬁumn
(
°©e
, 
≥rm™ít_mem‹y
, 
grid_˛icked
.
x
, grid_˛icked.
y
);

708 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_upd©e_game°©e
(
√xt
, 
ödex_˛icked
, 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_«mes
[index_clicked]);

709 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

713 i‡(
ui_°©e
.
Àâîs
['c' - 'a'].
¥es£d_this_‰ame
)

715 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

716 i‡(
ödex_˛icked
 >= 0)

718 
GameSèã
* 
°©e
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_˛icked
];

719 
GameSèã
* 
√xt
 = 
	`game°©e_suºound_wôh_wÆls
(
°©e
, 
≥rm™ít_mem‹y
);

720 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_upd©e_game°©e
(
√xt
, 
ödex_˛icked
, 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_«mes
[index_clicked ]);

721 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

725 i‡(
ui_°©e
.
˛ick_À·_down_this_‰ame
 && ui_°©e.
c⁄åﬁ_key_down
)

727 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

728 i‡(
ödex_˛icked
 >= 0)

730 
GameSèã
* 
cuºítSèã
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_˛icked
];

731 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_dñëe_game°©e
(
ödex_˛icked
);

732 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

733 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
åue
;

737 i‡(
ui_°©e
.
˛ick_À·_down_this_‰ame
 && ui_°©e.
Æt_key_down
 && !
À·_˛ick_a˘i⁄_ªsﬁved
)

739 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

740 i‡(
ödex_˛icked
 >= 0)

743 
GameSèã
* 
°¨t_°©e
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ödex_˛icked
];

746 
∂ay_s˚√_°©e
.
timeMachöe
 = 
	`game°©e_timemachöe_¸óã
(
°¨t_°©e
, 
∂ay_mem‹y
, 
max_a˘i⁄s_ö_puzzÀ
);

747 
∂ay_s˚√_°©e
.
timeMachöe_edô
 = 
	`game°©e_timemachöe_¸óã
(
°¨t_°©e
, 
∂ay_mem‹y
, 
max_a˘i⁄s_ö_puzzÀ
);

748 
∂ay_s˚√_°©e
.
loc
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
ödex_˛icked
];

749 
∂ay_s˚√_°©e
.
loc_edô
 =Öœy_s˚√_°©e.
loc
;

750 
∂ay_s˚√_°©e
.
loc_edô
.
x
 +(
°¨t_°©e
->
w
 + 2);

751 
∂ay_s˚√_°©e
.
edô‹_posôi⁄_ö_time_machöe
 = 
ödex_˛icked
;

752 
i
 = 0; i < 
GAME_LEVEL_NAME_MAX_SIZE
; i++)

754 
∂ay_s˚√_°©e
.
game_«me
[
i
] = 0;

756 
∂ay_s˚√_°©e
.
game_«me_Àngth
 = 0;

758 
i
 = 0; i < 
GAME_LEVEL_NAME_MAX_SIZE
; i++)

759 
∂ay_s˚√_°©e
.
game_«me
[
i
] = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_«mes
[
ödex_˛icked
].
«me
[i];

760 
∂ay_s˚√_°©e
.
game_«me_Àngth
 = (Ë
	`°æí
(
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_«mes
[
ödex_˛icked
].
«me
);

762 
s˚√
 = 
ST_EDIT_LEVEL
;

763 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

768 i‡(
ui_°©e
.
˛ick_À·_down_this_‰ame
 && !ui_°©e.
shi·_key_down
 && !
À·_˛ick_a˘i⁄_ªsﬁved
)

770 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
	`MaybeAµlyBrush
(
edô‹_s˚√_°©e
->
∑Àã
,Édô‹_s˚√_°©e->
cuºítBrush
, &
ui_°©e
,Édô‹_s˚√_°©e->
timeMachöe
, ui_°©e.
mou£GamePos
);

773 i‡(
ui_°©e
.
mou£_À·_˛ick_down
 && !ui_°©e.
shi·_key_down
 && !
À·_˛ick_a˘i⁄_ªsﬁved
)

776 
i
 = 0; i < 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
; i++)

778 
box_À·
 = ()
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
;

779 
box_width
 = ()
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
w
;

780 
box_right
 = 
box_À·
 + 
box_width
;

781 
box_down
 = ()
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
;

782 
box_height
 = ()
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
h
;

783 
box_up
 = 
box_down
 + 
box_height
;

784 
AABB
 
À·
 = 
	`m©h_AABB_¸óã
(
box_À·
 - 
OUTLINE_DRAW_SIZE
,

785 
box_down
 - 
OUTLINE_DRAW_SIZE
,

786 
OUTLINE_DRAW_SIZE
,

787 
box_height
 + 
OUTLINE_DRAW_SIZE
 * 2);

788 
AABB
 
right
 = 
	`m©h_AABB_¸óã
(
box_right
,

789 
box_down
 - 
OUTLINE_DRAW_SIZE
,

790 
OUTLINE_DRAW_SIZE
,

791 
box_height
 + 
OUTLINE_DRAW_SIZE
 * 2);

792 
AABB
 
up
 = 
	`m©h_AABB_¸óã
(
box_À·
 - 
OUTLINE_DRAW_SIZE
,

793 
box_up
,

794 
box_width
 + 
OUTLINE_DRAW_SIZE
 * 2,

795 
OUTLINE_DRAW_SIZE
);

796 
AABB
 
down
 = 
	`m©h_AABB_¸óã
(
box_À·
 - 
OUTLINE_DRAW_SIZE
,

797 
box_down
 - 
OUTLINE_DRAW_SIZE
,

798 
box_width
 + 
OUTLINE_DRAW_SIZE
 * 2,

799 
OUTLINE_DRAW_SIZE
);

801 
boﬁ
 
˛ick_À·
 = 
	`m©h_˛ick_is_öside_AABB
(
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
, 
À·
);

802 
boﬁ
 
˛ick_right
 = 
	`m©h_˛ick_is_öside_AABB
(
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
, 
right
);

803 
boﬁ
 
˛ick_up
 = 
	`m©h_˛ick_is_öside_AABB
(
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
, 
up
);

804 
boﬁ
 
˛ick_down
 = 
	`m©h_˛ick_is_öside_AABB
(
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
, 
down
);

805 i‡(
˛ick_À·
 || 
˛ick_right
 || 
˛ick_up
 || 
˛ick_down
)

807 
ui_°©e
.
ty≥
 = 
ECS_RESIZE_GAMESTATE
;

808 
ui_°©e
.
un
.
ªsize
.
døggög_À·
 = 
Ál£
;

809 
ui_°©e
.
un
.
ªsize
.
døggög_right
 = 
Ál£
;

810 
ui_°©e
.
un
.
ªsize
.
døggög_up
 = 
Ál£
;

811 
ui_°©e
.
un
.
ªsize
.
døggög_down
 = 
Ál£
;

812 i‡(
˛ick_À·
)

813 
ui_°©e
.
un
.
ªsize
.
døggög_À·
 = 
åue
;

814 i‡(
˛ick_right
)

815 
ui_°©e
.
un
.
ªsize
.
døggög_right
 = 
åue
;

816 i‡(
˛ick_up
)

817 
ui_°©e
.
un
.
ªsize
.
døggög_up
 = 
åue
;

818 i‡(
˛ick_down
)

819 
ui_°©e
.
un
.
ªsize
.
døggög_down
 = 
åue
;

821 
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
 = 
i
;

822 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
åue
;

823 
døggög_°¨t_posôi⁄_ö_game•a˚
 = 
ui_°©e
.
mou£GamePos
;

828 i‡(
ui_°©e
.
mou£_À·_˛ick_down
 && ui_°©e.
shi·_key_down
)

830 
ödex_˛icked
 = 
	`game°©e_timemachöe_gë_˛ick_cﬁlisi⁄_game°©e
(
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
.
mou£GamePos
.
x
, ui_°©e.mou£GamePos.
y
);

831 i‡(
ödex_˛icked
 >= 0)

833 
ui_°©e
.
ty≥
 = 
ECS_MOVE_GAMESTATE
;

834 
ui_°©e
.
un
.
move
.
movög_game°©e_ödex
 = 
ödex_˛icked
;

835 
ui_°©e
.
un
.
move
.
move_°¨t_posôi⁄
 = ui_°©e.
mou£GamePos
;

836 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
åue
;

840 i‡(
ui_°©e
.
˛ick_À·_down_this_‰ame
 && !ui_°©e.
shi·_key_down
 && !
À·_˛ick_a˘i⁄_ªsﬁved
)

843 
I¡Paú
 
game_w‹ld_˛ick
 = 
	`m©h_öçaú_¸óã
((Ë
	`Êo‹
(
ui_°©e
.
mou£GamePos
.
x
),(ËÊo‹(ui_°©e.mou£GamePos.
y
));

844 
ui_°©e
.
ty≥
 = 
ECS_CREATE_GAMESTATE
;

845 
ui_°©e
.
un
.
¸óã
.
gamew‹ld_°¨t_pos
 = 
game_w‹ld_˛ick
;

847 i‡(
ui_°©e
.
z_key_down_this_‰ame
 && !
À·_˛ick_a˘i⁄_ªsﬁved
)

849 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
;

850 
a˘i⁄
.a˘i⁄ = 
TM_UNDO
;

851 
a˘i⁄
.
u
.
ªmove
.
game°©e_ödex
 = -1;

852 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
,Édô‹_s˚√_°©e->
time_machöe_°¨t_°©e
, 
a˘i⁄
);

853 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
åue
;

857 i‡(
ui_°©e
.
ty≥
 =
ECS_RESIZE_GAMESTATE
)

860 i‡(
ui_°©e
.
˛ick_À·_up_this_‰ame
)

863 
glm
::
vec2
 
off£t
 = 
ui_°©e
.
mou£GamePos
 - 
døggög_°¨t_posôi⁄_ö_game•a˚
;

865 
I¡Paú
 
èrgëãd_game°©e_posôi⁄
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
];

866 
GameSèã
* 
èrgëãd_game°©e
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
];

867 
èrgëãd_game°©e_width
 = 
èrgëãd_game°©e
->
w
;

868 
èrgëãd_game°©e_height
 = 
èrgëãd_game°©e
->
h
;

870 
AABB
 
ﬁd
 = 
	`m©h_AABB_¸óã
((Ë
èrgëãd_game°©e_posôi⁄
.
x
,

871 (Ë
èrgëãd_game°©e_posôi⁄
.
y
,

872 (Ë
èrgëãd_game°©e_width
,

873 (Ë
èrgëãd_game°©e_height
);

874 
AABB
 
√xt
 = 
ﬁd
;

880 
off£t_x
 = 
	`sign
(
off£t
.
x
) * 0.5f;

881 
off£t_y
 = 
	`sign
(
off£t
.
y
) * 0.5f;

882 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_À·
)

884 
À·_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
x
 - (()
√xt
.xË+ 
off£t_x
);

885 i‡(
À·_movemít
 != 0)

887 
√xt
.
x
 +
À·_movemít
;

888 
√xt
.
w
 -
À·_movemít
;

891 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_right
)

893 
right_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
x
 - (()
√xt
.x +Çext.
w
Ë+ 
off£t_x
);

894 i‡(
right_movemít
 != 0)

895 
√xt
.
w
 +
right_movemít
;

897 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_down
)

899 
down_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
y
 - (()
√xt
.yË+ 
off£t_y
);

900 i‡(
down_movemít
 != 0)

902 
√xt
.
y
 +
down_movemít
;

903 
√xt
.
h
 -
down_movemít
;

906 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_up
)

908 
up_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
y
 - (()
√xt
.y +Çext.
h
Ë+ 
off£t_y
);

909 i‡(
up_movemít
 != 0)

910 
√xt
.
h
 +
up_movemít
;

913 
boﬁ
 
ch™geOccuªd
 = 
√xt
.
x
 !
èrgëãd_game°©e_posôi⁄
.x

914 || 
√xt
.
y
 !
èrgëãd_game°©e_posôi⁄
.y

915 || 
√xt
.
w
 !
èrgëãd_game°©e
->w

916 || 
√xt
.
h
 !
èrgëãd_game°©e
->h;

919 i‡(
√xt
.
w
 <= 0)

921 
go_back
 = (Ë
√xt
.
w
 - 1;

922 
√xt
.
w
 = 1;

923 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_À·
)

925 
√xt
.
x
 +
go_back
;

929 i‡(
√xt
.
h
 <= 0)

931 
go_back
 = (Ë
√xt
.
h
 - 1;

932 
√xt
.
h
 = 1;

933 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_down
)

935 
√xt
.
y
 +
go_back
;

940 i‡(
ch™geOccuªd
)

942 
AABB
* 
boxes
 = 
	`game°©e_¸óã_cﬁlidîs
(
‰ame_mem‹y
,

943 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
,

944 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
,

945 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
,

946 
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
);

947 
boﬁ
 
ch™geVÆid
 = !
	`m©h_AABB_is_cﬁlidög
(
√xt
, 
boxes
, 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
 - 1);

948 i‡(
ch™geVÆid
)

950 
I¡Paú
 
√xt_size
;

951 
√xt_size
.
x
 = (Ë
√xt
.
w
;

952 
√xt_size
.
y
 = (Ë
√xt
.
h
;

953 
I¡Paú
 
di•œ˚mít
;

954 
di•œ˚mít
.
x
 = (Ë(-
√xt
.x + 
èrgëãd_game°©e_posôi⁄
.x);

955 
di•œ˚mít
.
y
 = (Ë(-
√xt
.y + 
èrgëãd_game°©e_posôi⁄
.y);

956 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 =

957 
	`game°©e_timemachöó˘i⁄_¸óã_ªsize_gam£°©e
(
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
, 
√xt
, 
di•œ˚mít
);

958 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

963 
ui_°©e
.
ty≥
 = 
ECS_NEUTRAL
;

966 i‡(
ui_°©e
.
ty≥
 =
ECS_MOVE_GAMESTATE
 && ui_°©e.
˛ick_À·_up_this_‰ame
)

969 
AABB
 
√xt
 = 
	`ˇlcuœã_ouéöe_‰om_move_öfo
(
‰ame_mem‹y
, 
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
);

970 
AABB
* 
boxes
 = 
	`game°©e_¸óã_cﬁlidîs
(
‰ame_mem‹y
,

971 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
,

972 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
,

973 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
,

974 
ui_°©e
.
un
.
move
.
movög_game°©e_ödex
);

975 
boﬁ
 
ch™geVÆid
 = !
	`m©h_AABB_is_cﬁlidög
(
√xt
, 
boxes
, 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
 - 1);

976 i‡(
ch™geVÆid
)

979 
glm
::
vec2
 
di°™˚
 = 
ui_°©e
.
mou£GamePos
 - ui_°©e.
un
.
move
.
move_°¨t_posôi⁄
;

981 
I¡Paú
 
off£t
 = 
	`m©h_öçaú_¸óã
(()
di°™˚
.
x
, ()di°™˚.
y
);

983 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_move_game°©e
(
ui_°©e
.
un
.
move
.
movög_game°©e_ödex
, 
off£t
);

984 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

988 
ui_°©e
.
ty≥
 = 
ECS_NEUTRAL
;

990 i‡(
ui_°©e
.
ty≥
 =
ECS_CREATE_GAMESTATE
 && !ui_°©e.
˛ick_À·_down_this_‰ame
)

993 i‡(
ui_°©e
.
˛ick_À·_up_this_‰ame
)

996 
AABB
 
√xt
 = 
	`ˇlcuœã_ouéöe_‰om_¸óã_öfo
(
‰ame_mem‹y
, 
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
);

997 
AABB
* 
boxes
 = 
	`game°©e_¸óã_cﬁlidîs
(
‰ame_mem‹y
,

998 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
,

999 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
,

1000 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
);

1001 
boﬁ
 
suc˚ssful_∂™t
 = !
	`m©h_AABB_is_cﬁlidög
(
√xt
, 
boxes
, 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
);

1002 i‡(
suc˚ssful_∂™t
)

1004 
AABB
 
cuºít_ouéöe
 = 
	`ˇlcuœã_ouéöe_‰om_¸óã_öfo
(
‰ame_mem‹y
, 
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
);

1005 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_¸óã_a˘i⁄
((Ë
cuºít_ouéöe
.
x
, (Ëcuºít_ouéöe.
y
, (Ëcuºít_ouéöe.
w
, (Ëcuºít_ouéöe.
h
);

1006 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

1008 
ui_°©e
.
ty≥
 = 
ECS_NEUTRAL
;

1013 #¥agm®
ídªgi⁄


1015 i‡(
s˚√
 =
ST_EDIT_LEVEL
)

1017 #¥agm®
ªgi⁄
 
h™dÀ_evíts


1018 i‡(
ui_°©e
.
ty≥
 =
ECS_BRUSH
)

1020 i‡(
ui_°©e
.
mou£_À·_˛ick_down
)

1021 
boﬁ
 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
	`MaybeAµlyBrushInPœyMode
(
∂ay_mem‹y
, 
edô‹_s˚√_°©e
->
∑Àã
,Édô‹_s˚√_°©e->
cuºítBrush
, &
ui_°©e
, 
∂ay_s˚√_°©e
.
timeMachöe_edô
,Öœy_s˚√_°©e.
loc_edô
, ui_°©e.
mou£GamePos
);

1023 
ui_°©e
.
ty≥
 = 
ECS_NEUTRAL
;

1025 i‡(
ui_°©e
.
ty≥
 =
ECS_NEUTRAL
)

1027 
	`h™dÀ_√xt_a˘i⁄_°©eful
(
∂ay_s˚√_°©e
.
timeMachöe
,Öœy_s˚√_°©e.
loc
);

1028 i‡(
ui_°©e
.
•a˚b¨
.
¥es£d_this_‰ame
)

1030 
GameSèã
* 
cuºít_edô_°©e
 = &
∂ay_s˚√_°©e
.
timeMachöe_edô
->
°©e_¨øy
[∂ay_s˚√_°©e.timeMachöe_edô->
num_game°©es_°‹ed
 - 1];

1031 
∂ay_s˚√_°©e
.
timeMachöe
 = 
	`game°©e_timemachöe_¸óã
(
cuºít_edô_°©e
, 
∂ay_mem‹y
, 
MAX_NUMBER_GAMESTATES
);

1034 i‡(
ui_°©e
.
mou£_À·_˛ick_down
)

1036 
boﬁ
 
À·_˛ick_a˘i⁄_ªsﬁved
 = 
	`MaybeAµlyBrushInPœyMode
(
∂ay_mem‹y
, 
edô‹_s˚√_°©e
->
∑Àã
,Édô‹_s˚√_°©e->
cuºítBrush
, &
ui_°©e
, 
∂ay_s˚√_°©e
.
timeMachöe_edô
,Öœy_s˚√_°©e.
loc_edô
, ui_°©e.
mou£GamePos
);

1037 i‡(
À·_˛ick_a˘i⁄_ªsﬁved
)

1038 
ui_°©e
.
ty≥
 = 
ECS_BRUSH
;

1040 i‡(
ui_°©e
.
back•a˚_key_down_this_‰ame
)

1042 
s˚√
 = 
ST_EDITOR
;

1043 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

1044 
num_°©es
 = 
∂ay_s˚√_°©e
.
timeMachöe_edô
->
num_game°©es_°‹ed
;

1045 
GameSèã
* 
°©e_to_ö£π
 = 
	`game°©e_˛⁄e
(&
∂ay_s˚√_°©e
.
timeMachöe_edô
->
°©e_¨øy
[
num_°©es
 - 1], 
≥rm™ít_mem‹y
);

1046 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_ª∂a˚_game°©e
(
°©e_to_ö£π
, 
∂ay_s˚√_°©e
.
edô‹_posôi⁄_ö_time_machöe
,Öœy_s˚√_°©e.
game_«me
);

1047 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
edô‹_s˚√_°©e
->
timeMachöe
, 
NULL
, 
a˘i⁄
);

1049 i‡(
ui_°©e
.
shi·_key_down_this_‰ame
)

1051 
ui_°©e
.
ty≥
 = 
ECS_EDIT_NAME
;

1053 i‡(
ui_°©e
.
z_key_down_this_‰ame
)

1055 
	`game°©e_timemachöe_undo
(
∂ay_s˚√_°©e
.
timeMachöe
);

1058 i‡(
ui_°©e
.
ty≥
 =
ECS_EDIT_NAME
)

1060 i‡(
∂ay_s˚√_°©e
.
game_«me_Àngth
 < 
GAME_LEVEL_NAME_MAX_SIZE
)

1062 
i
 = 0; i < 
NUM_LETTERS_ON_KEYBOARD
 - 1; i++)

1064 i‡(
ui_°©e
.
Àâîs
[
i
].
¥es£d_this_‰ame
)

1067 
Àngth
 = 
∂ay_s˚√_°©e
.
game_«me_Àngth
;

1068 
∂ay_s˚√_°©e
.
game_«me
[
Àngth
] = ('a' + (Ë
i
);

1069 
∂ay_s˚√_°©e
.
game_«me
[
Àngth
 + 1] = 0;

1070 
∂ay_s˚√_°©e
.
game_«me_Àngth
++;

1073 i‡(
ui_°©e
.
•a˚b¨
.
¥es£d_this_‰ame
)

1075 
Àngth
 = 
∂ay_s˚√_°©e
.
game_«me_Àngth
;

1076 
∂ay_s˚√_°©e
.
game_«me
[
Àngth
] = ' ';

1077 
∂ay_s˚√_°©e
.
game_«me
[
Àngth
 + 1] = 0;

1078 
∂ay_s˚√_°©e
.
game_«me_Àngth
++;

1081 i‡(
∂ay_s˚√_°©e
.
game_«me_Àngth
 > 0)

1083 i‡(
ui_°©e
.
back•a˚_key_down_this_‰ame
)

1085 
Àngth
 = 
∂ay_s˚√_°©e
.
game_«me_Àngth
;

1086 
∂ay_s˚√_°©e
.
game_«me
[
Àngth
 - 1] = 0;

1087 
∂ay_s˚√_°©e
.
game_«me_Àngth
--;

1090 i‡(
ui_°©e
.
íãr
.
¥es£d_this_‰ame
)

1092 
ui_°©e
.
ty≥
 = 
ECS_NEUTRAL
;

1096 #¥agm®
ídªgi⁄


1099 i‡(
s˚√
 =
ST_PLAY_WORLD
)

1101 #¥agm®
ªgi⁄
 
ßve
 
°©e
 
öfo
 
bef‹e
 
evíts


1102 
ﬁd_game°©e_num_∂ayî_°™dög_⁄
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

1103 #¥agm®
ídªgi⁄


1104 #¥agm®
ªgi⁄
 
h™dÀ_evíts


1105 
boﬁ
 
w‹ld_a˘i⁄_èkí
 = 
Ál£
;

1106 
A˘i⁄
 
a˘i⁄
 = 
	`ˇlcuœã_wh©_a˘i⁄_to_èke_√xt_°©eful
();

1107 
Dúe˘i⁄
 
to_èke
 = 
	`a˘i⁄_to_dúe˘i⁄
(
a˘i⁄
);

1108 i‡(
to_èke
 !
Dúe˘i⁄
::
NO_DIRECTION
)

1110 
w‹ld_∂ay_s˚√_°©e
 = 
	`w‹ld_∂ayî_a˘i⁄
(
w‹ld_s˚√_°©e
, 
to_èke
, 
Àvñ_mem‹y
);

1111 
ui_°©e
.
time_tûl_∂ayî_ˇn_move
 = 
WAIT_BETWEEN_PLAYER_MOVE_REPEAT
;

1112 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

1114 i‡(
ui_°©e
.
back•a˚_key_down_this_‰ame
)

1116 
s˚√
 = 
w‹ld_s˚√_°©e
->
go_to_⁄_back•a˚
;

1117 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

1118 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

1120 i‡(
ui_°©e
.
Àâîs
['p' - 'a'].
¥es£d_this_‰ame
)

1123 
°d
::
°rög
 
∑r£d
 = 
	`∑r£_£rülize_timemachöe
(&
w‹ld_s˚√_°©e
->
w‹ld_°©e
, 
≥rm™ít_mem‹y
, 
‰ame_mem‹y
);

1124 
	`ßve_c⁄töue_fûe
(
∑r£d
);

1129 i‡(!
	`™y_Àvñs_À·_a˘ive
(
w‹ld_s˚√_°©e
))

1131 
s˚√
 = 
SCENE_TYPE
::
ST_SHOW_TEXT
;

1132 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

1133 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

1134 
ãxt_s˚√_°©e
 = 
	`buûd_ãxt_s˚√
("Wö√r! Th™k†f‹Öœyög.", 
SCENE_TYPE
::
ST_MENU
, 
ãxt_mem‹y
, 
ui_°©e
.
tŸÆ_time_∑s£d
, 5.0f);

1137 i‡(
w‹ld_∂ay_s˚√_°©e
 !
NULL
)

1139 
s˚√
 = 
SCENE_TYPE
::
ST_PLAY_LEVEL
;

1140 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

1141 
ui_°©e
.
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

1146 #¥agm®
ídªgi⁄


1147 #¥agm®
ªgi⁄
 
h™dÀ_°©e_upd©e


1150 
cuºít_num_∂ayî_°™dög_⁄
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

1151 i‡(
ﬁd_game°©e_num_∂ayî_°™dög_⁄
 !
cuºít_num_∂ayî_°™dög_⁄
)

1153 
w‹ld_ˇmîa_ÀΩ
 = 0;

1154 
GameSèã
* 
cuºít_game°©e
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_num_∂ayî_°™dög_⁄
];

1155 
I¡Paú
 
game°©e_pos
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
cuºít_num_∂ayî_°™dög_⁄
];

1156 
w‹ld_ˇmîa_gﬂl
 = 
	`m©h_ˇmîa_buûd_f‹_game°©e
(
cuºít_game°©e
, 
game°©e_pos
, 
ˇmîa_võwp‹t
);

1158 i‡(
w‹ld_s˚√_°©e
->
œ°_a˘i⁄_was_ãÀp‹t
)

1159 
w‹ld_ˇmîa_°¨t
 = 
w‹ld_ˇmîa_gﬂl
;

1161 
w‹ld_ˇmîa_°¨t
 = 
w‹ld_ˇmîa
;

1165 
w‹ld_ˇmîa_ÀΩ
 +
dñè
;

1167 
w‹ld_ˇmîa
 = 
	`m©h_ˇmîa_move_tow¨ds_ÀΩ
(
w‹ld_ˇmîa_°¨t
, 
w‹ld_ˇmîa_gﬂl
, 
w‹ld_ˇmîa_ÀΩ
, 
CAMERA_LERP_TIME
);

1169 #¥agm®
ídªgi⁄


1172 i‡(
s˚√
 =
ST_PLAY_LEVEL
)

1174 #¥agm®
ªgi⁄
 
ßve
 
°©e
 
öfo
 
bef‹e
 
evíts


1175 
ﬁd_game°©e_num_∂ayî_°™dög_⁄
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

1176 #¥agm®
ídªgi⁄


1177 #¥agm®
ªgi⁄
 
h™dÀ
 
evíts


1179 
	`h™dÀ_√xt_a˘i⁄_°©eful
(
w‹ld_∂ay_s˚√_°©e
->
time_machöe
,w‹ld_∂ay_s˚√_°©e->
døw_posôi⁄
);

1182 #¥agm®
ídªgi⁄


1183 #¥agm®
ªgi⁄
 
h™dÀ_°©e_upd©e


1185 i‡(
	`game°©e_is_ö_wö_c⁄dôi⁄
(&
w‹ld_∂ay_s˚√_°©e
->
time_machöe
->
°©e_¨øy
[w‹ld_∂ay_s˚√_°©e->time_machöe->
num_game°©es_°‹ed
 - 1]))

1187 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_sﬁved
[w‹ld_s˚√_°©e->
cuºít_Àvñ
] = 
åue
;

1188 i‡(
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_modes
[w‹ld_s˚√_°©e->
cuºít_Àvñ
] =
LevñMode
::
CrumbÀ
)

1190 
num_°©es
 = 
w‹ld_∂ay_s˚√_°©e
->
time_machöe
->
num_game°©es_°‹ed
;

1191 
GameSèã
* 
cuºít_°©e
 = &
w‹ld_∂ay_s˚√_°©e
->
time_machöe
->
°©e_¨øy
[
num_°©es
 - 1];

1192 
GameSèã
* 
˛⁄ed_°©e
 = 
	`game°©e_˛⁄e
(
cuºít_°©e
, 
w‹ld_mem‹y
);

1193 
	`game°©e_¸umbÀ
(
˛⁄ed_°©e
);

1194 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
[w‹ld_s˚√_°©e->
cuºít_Àvñ
] = 
˛⁄ed_°©e
;

1197 i‡(
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_modes
[w‹ld_s˚√_°©e->
cuºít_Àvñ
] =
LevñMode
::
Rïót
)

1199 
	`w‹ld_åy_ªvîsög_°aúˇ£
(
w‹ld_s˚√_°©e
);

1201 i‡(
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_modes
[w‹ld_s˚√_°©e->
cuºít_Àvñ
] =
LevñMode
::
Ovîw‹ld
)

1205 
w‹ld_s˚√_°©e
->
°aúˇ£_we_íãªd_Àvñ_‰om
.
Àvñ_ödex
 = -1;

1206 
w‹ld_∂ay_s˚√_°©e
->
time_machöe
 = 
NULL
;

1210 
cuºít_num_∂ayî_°™dög_⁄
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

1211 i‡(
ﬁd_game°©e_num_∂ayî_°™dög_⁄
 !
cuºít_num_∂ayî_°™dög_⁄
)

1213 
w‹ld_ˇmîa_ÀΩ
 = 0;

1214 
GameSèã
* 
cuºít_game°©e
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
[
cuºít_num_∂ayî_°™dög_⁄
];

1215 
I¡Paú
 
game°©e_pos
 = 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
cuºít_num_∂ayî_°™dög_⁄
];

1216 
w‹ld_ˇmîa_gﬂl
 = 
	`m©h_ˇmîa_buûd_f‹_game°©e
(
cuºít_game°©e
, 
game°©e_pos
, 
ˇmîa_võwp‹t
);

1217 
w‹ld_ˇmîa_°¨t
 = 
w‹ld_ˇmîa_gﬂl
;

1222 
w‹ld_ˇmîa_ÀΩ
 +
dñè
;

1226 
w‹ld_ˇmîa
 = 
	`m©h_ˇmîa_move_tow¨ds_ÀΩ
(
w‹ld_ˇmîa_°¨t
, 
w‹ld_ˇmîa_gﬂl
, 
w‹ld_ˇmîa_ÀΩ
, 
CAMERA_LERP_TIME
);

1230 i‡(
ui_°©e
.
back•a˚_key_down_this_‰ame
)

1232 
	`w‹ld_åy_ªvîsög_°aúˇ£
(
w‹ld_s˚√_°©e
);

1233 
w‹ld_∂ay_s˚√_°©e
->
time_machöe
 = 
NULL
;

1236 i‡(!
w‹ld_∂ay_s˚√_°©e
->
time_machöe
)

1238 
s˚√
 = 
SCENE_TYPE
::
ST_PLAY_WORLD
;

1239 
w‹ld_∂ay_s˚√_°©e
 = 
NULL
;

1240 
ui_°©e
.
time_sö˚_s˚√_°¨ãd
 = 0;

1242 #¥agm®
ídªgi⁄


1244 i‡(
s˚√
 =
ST_SHOW_TEXT
)

1246 #¥agm®
ªgi⁄
 
upd©e


1247 i‡(
ãxt_s˚√_°©e
->
íd_time
 <
ui_°©e
.
tŸÆ_time_∑s£d
)

1249 
	`ãxt_s˚√_ª£t
();

1252 #¥agm®
ídªgi⁄


1253 #¥agm®
ªgi⁄
 
h™dÀ_evíts


1254 i‡(
ui_°©e
.
Àâîs
['x' - 'a'].
¥es£d_this_‰ame
)

1256 
	`ãxt_s˚√_ª£t
();

1258 #¥agm®
ídªgi⁄


1260 i‡(
s˚√
 =
ST_MENU
)

1262 #¥agm®
ªgi⁄
 
h™dÀ_evíts


1264 i‡(
ui_°©e
.
Àâîs
['w' - 'a'].
¥es£d_this_‰ame
)

1266 
míu_s˚√_°©e
->
cuºít_highlighãd_buâ⁄
 += 1;

1267 
míu_s˚√_°©e
->
cuºít_highlighãd_buâ⁄
 = 
	`möi
(míu_s˚√_°©e->cuºít_highlighãd_buâ⁄, míu_s˚√_°©e->
num_buâ⁄s
 - 1);

1271 i‡(
ui_°©e
.
Àâîs
['s' - 'a'].
¥es£d_this_‰ame
)

1273 
míu_s˚√_°©e
->
cuºít_highlighãd_buâ⁄
 -= 1;

1274 
míu_s˚√_°©e
->
cuºít_highlighãd_buâ⁄
 = 
	`maxi
(menu_scene_state->current_highlighted_button, 0);

1276 i‡(
ui_°©e
.
Àâîs
['x' - 'a'].
¥es£d_this_‰ame
)

1278 
cuºít_buâ⁄
 = 
míu_s˚√_°©e
->
cuºít_highlighãd_buâ⁄
;

1279 
míu_s˚√_°©e
->
buâ⁄s
[
cuºít_buâ⁄
].
	`ˇŒback
();

1281 #¥agm®
ídªgi⁄


1284 i‡(
s˚√
 =
ST_EDITOR
)

1286 #¥agm®
ªgi⁄
 
£nd
 
døw
 
d©a
 
to
 
gpu


1288 
skù_ödex
 = -1;

1289 
AABB
 
ouéöe
 = 
	`m©h_AABB_¸óã
(0, 0, 0, 0);

1291 i‡(
ui_°©e
.
ty≥
 =
ECS_RESIZE_GAMESTATE
)

1293 
skù_ödex
 = 
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
;

1294 
ouéöe
 = 
	`ˇlcuœã_ouéöe_posôi⁄_‰om_døg_öfo
(
‰ame_mem‹y
, 
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
, 
døggög_°¨t_posôi⁄_ö_game•a˚
);

1296 i‡(
ui_°©e
.
ty≥
 =
ECS_MOVE_GAMESTATE
)

1298 
ouéöe
 = 
	`ˇlcuœã_ouéöe_‰om_move_öfo
(
‰ame_mem‹y
, 
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
);

1299 
skù_ödex
 = 
ui_°©e
.
un
.
move
.
movög_game°©e_ödex
;

1301 i‡(
ui_°©e
.
ty≥
 =
ECS_CREATE_GAMESTATE
)

1303 
ouéöe
 = 
	`ˇlcuœã_ouéöe_‰om_¸óã_öfo
(
‰ame_mem‹y
, 
edô‹_s˚√_°©e
->
timeMachöe
, 
ui_°©e
);

1305 i‡(
skù_ödex
 >0 || 
ui_°©e
.
ty≥
 =
ECS_CREATE_GAMESTATE
)

1307 
ouéöe
.
x
 -= 0.1f;

1308 
ouéöe
.
y
 -= 0.1f;

1309 
ouéöe
.
w
 += 0.2f;

1310 
ouéöe
.
h
 += 0.2f;

1311 
AABB
* 
ouéöes_brokí
 = (AABB*)
	`mem‹y_Æloc
(
‰ame_mem‹y
, (AABB) * 4);

1312 
	`m©h_AABB_bªak_öto_b‹dîs
(
ouéöe
, 
ouéöes_brokí
, 0.2f);

1313 
	`døw_ouéöe_to_game•a˚
(
ouéöes_brokí
[0], 
Êo‹_wrôe
);

1314 
	`døw_ouéöe_to_game•a˚
(
ouéöes_brokí
[1], 
Êo‹_wrôe
);

1315 
	`døw_ouéöe_to_game•a˚
(
ouéöes_brokí
[2], 
Êo‹_wrôe
);

1316 
	`døw_ouéöe_to_game•a˚
(
ouéöes_brokí
[3], 
Êo‹_wrôe
);

1321 
	`døw_game°©es_ouéöes_to_game•a˚
(

1322 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
,

1323 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
,

1324 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
,

1325 
Êo‹_wrôe
,

1326 
skù_ödex
);

1331 
	`game°©e_¥öt_°aúˇ£_ãÀ_vÆue
(
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
,edô‹_s˚√_°©e->timeMachöe->w‹ld_°©e.
num_Àvñ
);

1332 
	`døw_game•a˚
(

1333 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
,

1334 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
,

1335 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
,

1336 
Æl_wrôe
);

1339 
	`døw_∑Àâe
(
edô‹_s˚√_°©e
->
∑Àã_s¸ìn_°¨t
, 
ˇmîa_game
, 
ˇmîa_võwp‹t
, &
ui_°©e
, 
∑Àã_Àngth
,Édô‹_s˚√_°©e->
∑Àã
, 
Æl_wrôe
);

1342 
z
 = 0; z < 
skù_ödex
; z++)

1344 
w
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
z
]->w;

1345 
h
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
z
]->h;

1346 
I¡Paú
 
°¨tPos
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
z
];

1347 
dŸãd_posôi⁄s_˝u
[
dŸãd_tŸÆ_døwn
] = 
glm
::
	`vec3
(
°¨tPos
.
x
 - 0.15f, sèπPos.
y
 - 0.15f, 8);

1348 
dŸãd_sˇÀ_˝u
[
dŸãd_tŸÆ_døwn
] = 
glm
::
	`vec2
(
w
 + 0.30f, 
h
 + 0.30f);

1349 
dŸãd_tŸÆ_døwn
++;

1351 
z
 = 
skù_ödex
 + 1; z < 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
; z++)

1353 
w
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
z
]->w;

1354 
h
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
z
]->h;

1355 
I¡Paú
 
°¨tPos
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
z
];

1356 
dŸãd_posôi⁄s_˝u
[
dŸãd_tŸÆ_døwn
] = 
glm
::
	`vec3
(
°¨tPos
.
x
 - 0.15f, sèπPos.
y
 - 0.15f, 8);

1357 
dŸãd_sˇÀ_˝u
[
dŸãd_tŸÆ_døwn
] = 
glm
::
	`vec2
(
w
 + 0.30f, 
h
 + 0.30f);

1358 
dŸãd_tŸÆ_døwn
++;

1364 
Àn
 = 
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
;

1365 
i
 = 0; i < 
Àn
; i++)

1367 * 
«me
 = &
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_«mes
[
i
].name[0];

1368 
x_pos
 = ()
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
;

1369 
y_pos
 = ()(
edô‹_s˚√_°©e
->
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
 +Édô‹_s˚√_°©e->timeMachöe->w‹ld_°©e.
Àvñ_°©e
[i]->
h
) + 0.2f;

1370 
glm
::
vec3
 
døw_pos
 = glm::
	`vec3
(
x_pos
, 
y_pos
, 0);

1372 
	`døw_ãxt_to_s¸ìn
(
døw_pos
, 
glm
::
	`vec2
(1, 1), 
«me
, &
ãxt_døw_öfo
);

1375 #¥agm®
ídªgi⁄


1377 i‡(
s˚√
 =
ST_EDIT_LEVEL
)

1379 #¥agm®
ªgi⁄
 
£nd
 
døw
 
d©a
 
to
 
gpu


1381 
	`døw_∑Àâe
(
edô‹_s˚√_°©e
->
∑Àã_s¸ìn_°¨t
, 
ˇmîa_game
, 
ˇmîa_võwp‹t
, &
ui_°©e
, 
∑Àã_Àngth
,Édô‹_s˚√_°©e->
∑Àã
, 
Æl_wrôe
);

1383 
GameSèã
* 
∂ay_døw
 = &
∂ay_s˚√_°©e
.
timeMachöe
->
°©e_¨øy
[∂ay_s˚√_°©e.timeMachöe->
num_game°©es_°‹ed
 - 1];

1384 
GameSèã
* 
edô_døw
 = &
∂ay_s˚√_°©e
.
timeMachöe_edô
->
°©e_¨øy
[∂ay_s˚√_°©e.timeMachöe_edô->
num_game°©es_°‹ed
 - 1];

1385 
I¡Paú
 
°¨t_posôi⁄
 = 
∂ay_s˚√_°©e
.
loc
;

1386 
I¡Paú
 
√xt_posôi⁄
 = 
∂ay_s˚√_°©e
.
loc_edô
;

1387 
	`døw_game•a˚
(

1388 &(
∂ay_døw
),

1389 &(
∂ay_s˚√_°©e
.
loc
),

1391 
Æl_wrôe
);

1392 
	`døw_game•a˚
(

1393 &(
edô_døw
),

1394 &(
√xt_posôi⁄
),

1396 
Æl_wrôe
);

1397 
glm
::
vec3
 
ãxt_°¨t_pos
 = glm::
	`vec3
(
√xt_posôi⁄
.
x
,Çext_posôi⁄.
y
 + 
edô_døw
->
h
, 0);

1398 
	`døw_ãxt_to_s¸ìn
(
ãxt_°¨t_pos
, 
glm
::
	`vec2
(1, 1), 
∂ay_s˚√_°©e
.
game_«me
, &
ãxt_døw_öfo
);

1401 #¥agm®
ídªgi⁄


1403 i‡(
s˚√
 =
ST_PLAY_WORLD
)

1405 #¥agm®
ªgi⁄
 
£nd
 
døw
 
d©a
 
to
 
gpu


1406 
	`døw_game•a˚
(

1407 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_°©e
,

1408 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
Àvñ_posôi⁄
,

1409 
w‹ld_s˚√_°©e
->
w‹ld_°©e
.
num_Àvñ
,

1410 
Æl_wrôe
);

1411 #¥agm®
ídªgi⁄


1413 i‡(
s˚√
 =
ST_PLAY_LEVEL
)

1415 #¥agm®
ªgi⁄
 
£nd
 
døw
 
d©a
 
to
 
gpu


1416 
w‹ld_ödex_to_døw
 = 
w‹ld_s˚√_°©e
->
cuºít_Àvñ
;

1419 
game°©e_ödex_to_døw
 = 
w‹ld_∂ay_s˚√_°©e
->
time_machöe
->
num_game°©es_°‹ed
;

1420 
GameSèã
* 
to_døw
 = &
w‹ld_∂ay_s˚√_°©e
->
time_machöe
->
°©e_¨øy
[
game°©e_ödex_to_døw
 - 1];

1421 
cuºít_Àvñ
 = 
w‹ld_s˚√_°©e
->current_level;

1422 
I¡Paú
* 
to_døw_posôi⁄
 = &
w‹ld_∂ay_s˚√_°©e
->
døw_posôi⁄
;

1424 
	`døw_game•a˚
(

1425 &
to_døw
,

1426 
to_døw_posôi⁄
,

1428 
Æl_wrôe
);

1430 #¥agm®
ídªgi⁄


1432 i‡(
s˚√
 =
ST_SHOW_TEXT
)

1434 #¥agm®
ªgi⁄
 
£nd
 
døw
 
d©a
 
to
 
gpu


1435 
	`døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
w‹ld_ˇmîa
, 
ãxt_s˚√_°©e
->
to_di•œy
, &
ãxt_døw_öfo
);

1436 
	`døw_bœck_box_ovî_s¸ìn
(
w‹ld_ˇmîa
, 
Êo‹_wrôe
);

1437 #¥agm®
ídªgi⁄


1439 i‡(
s˚√
 =
ST_MENU
)

1441 #¥agm®
ªgi⁄
 
£nd
 
døw
 
d©a
 
to
 
gpu


1443 
GameS∑˚Camîa
 
ˇmîa_fi·h
;

1444 
fi·h_w
 = (
ˇmîa_game
.
À·
 + camîa_game.
right
) / 5.0f;

1445 
ˇmîa_fi·h
.
À·
 = 
ˇmîa_game
.À· + 
fi·h_w
;

1446 
ˇmîa_fi·h
.
right
 = 
ˇmîa_game
.righà- 
fi·h_w
;

1447 
fi·h_h
 = (
ˇmîa_game
.
up
 - camîa_game.
down
) / 5.0f;

1448 
ˇmîa_fi·h
.
down
 = 
ˇmîa_game
.dow¿+ 
fi·h_h
;

1449 
ˇmîa_fi·h
.
up
 = camîa_fi·h.
down
 + 
fi·h_h
;

1453 
GameS∑˚Camîa
 
bŸtom_fi·h
 = 
ˇmîa_game
;

1454 
ˇmîa_width
 = 
ˇmîa_game
.
right
 - camîa_game.
À·
;

1455 
ˇmîa_height
 = 
ˇmîa_game
.
up
 - camîa_game.
down
;

1456 
bŸtom_fi·h
.
right
 = bŸtom_fi·h.
À·
 + 
ˇmîa_width
 / 5.0f;

1457 
bŸtom_fi·h
.
up
 = bŸtom_fi·h.
down
 + 
ˇmîa_height
 / 5.0f;

1459 
w
 = 
bŸtom_fi·h
.
right
 - bŸtom_fi·h.
À·
;

1460 
h
 = 
bŸtom_fi·h
.
up
 - bŸtom_fi·h.
down
;

1462 
gﬂl_w
 = (
h
 * 5.0f) / 4.0f;

1464 i‡(
gﬂl_w
 > 
w
)

1466 
	`¸ash_îr
("foolish mortal, you have madeánássumption in your code base (namely,Åhat you will onlyÇeedÅoÑeduceÅhe width, butÇeverÑeduceÅhe height),ándÅhatássumption has failed. Now weáre crashingÅo save youáÑeally mean debug session.");

1468 
width_adju°mít
 = (
w
 - 
gﬂl_w
);

1469 
bŸtom_fi·h
.
right
 -
width_adju°mít
;

1473 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(1, 1, 5, 4, 
bŸtom_fi·h
);

1474 
	`døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
ãmp_pos
, "A", &
ãxt_døw_öfo
);

1477 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(0, 1, 5, 4, 
bŸtom_fi·h
);

1478 
	`døw_ui_to_game•a˚
(
ãmp_pos
, 
ãxtuªAs£ts
::
UI
::
Le·Aºow
, 
ui_wrôe
);

1482 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(2, 2, 5, 4, 
bŸtom_fi·h
);

1483 
	`døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
ãmp_pos
, "W", &
ãxt_døw_öfo
);

1486 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(2, 3, 5, 4, 
bŸtom_fi·h
);

1487 
	`døw_ui_to_game•a˚
(
ãmp_pos
, 
ãxtuªAs£ts
::
UI
::
UpAºow
, 
ui_wrôe
);

1491 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(2, 1, 5, 4, 
bŸtom_fi·h
);

1492 
	`døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
ãmp_pos
, "S", &
ãxt_døw_öfo
);

1495 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(2, 0, 5, 4, 
bŸtom_fi·h
);

1496 
	`døw_ui_to_game•a˚
(
ãmp_pos
, 
ãxtuªAs£ts
::
UI
::
DownAºow
, 
ui_wrôe
);

1500 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(3, 1, 5, 4, 
bŸtom_fi·h
);

1501 
	`døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
ãmp_pos
, "D", &
ãxt_døw_öfo
);

1504 
GameS∑˚Camîa
 
ãmp_pos
 = 
	`¨ó_gë_grid_ñemít
(4, 1, 5, 4, 
bŸtom_fi·h
);

1505 
	`døw_ui_to_game•a˚
(
ãmp_pos
, 
ãxtuªAs£ts
::
UI
::
RightAºow
, 
ui_wrôe
);

1509 
i
 = 0; i < 
míu_s˚√_°©e
->
num_buâ⁄s
; i++)

1511 
GameS∑˚Camîa
 
ˇmîa_fi·h_smÆÀr
 = 
ˇmîa_fi·h
;

1512 
width
 = 
ˇmîa_fi·h_smÆÀr
.
right
 - camîa_fi·h_smÆÀr.
À·
;

1513 
height
 = 
ˇmîa_fi·h_smÆÀr
.
up
 - camîa_fi·h_smÆÀr.
down
;

1514 
ˇmîa_fi·h_smÆÀr
.
À·
 +(
width
 / 5.0f);

1515 
ˇmîa_fi·h_smÆÀr
.
right
 -(
width
 / 5.0f);

1516 
ˇmîa_fi·h_smÆÀr
.
up
 -(
height
 / 10.0f);

1517 
ˇmîa_fi·h_smÆÀr
.
down
 +(
height
 / 10.0f);

1518 i‡(
i
 =
míu_s˚√_°©e
->
cuºít_highlighãd_buâ⁄
)

1519 
	`døw_buâ⁄_to_game•a˚
(
ˇmîa_fi·h
, 
ui_wrôe
, 
glm
::
	`vec4
(0.7, 0.7, 1, 1));

1521 
	`døw_buâ⁄_to_game•a˚
(
ˇmîa_fi·h
, 
ui_wrôe
);

1522 
	`døw_ãxt_maximized_˚¡îed_to_s¸ìn
(
ˇmîa_fi·h_smÆÀr
, 
míu_s˚√_°©e
->
buâ⁄s
[
i
].
buâ⁄_ãxt
, &
ãxt_døw_öfo
);

1523 
ˇmîa_fi·h
.
down
 +
fi·h_h
;

1524 
ˇmîa_fi·h
.
up
 +
fi·h_h
;

1526 #¥agm®
ídªgi⁄


1528 #¥agm®
ªgi⁄
 
døw
 
gpu
 
d©a


1532 i‡(
s˚√
 =
ST_PLAY_WORLD
 || s˚√ =
ST_PLAY_LEVEL
 || s˚√ =
ST_SHOW_TEXT
)

1533 
ˇmîa
 = 
	`ˇmîa_make_m©rix
(
w‹ld_ˇmîa
);

1534 i‡(
s˚√
 =
ST_EDITOR
 || s˚√ =
ST_EDIT_LEVEL
 || s˚√ =
ST_MENU
)

1535 
ˇmîa
 = 
	`ˇmîa_make_m©rix
(
ˇmîa_game
);

1536 
	`glU£Progøm
(
•rôeShadî
);

1537 
	`shadî_£t_unif‹m_m©4
(
•rôeShadî
, "võwProje˘i⁄M©rix", 
ˇmîa
);

1538 
	`glU£Progøm
(
fuŒS¥ôeShadî
);

1539 
	`shadî_£t_unif‹m_m©4
(
fuŒS¥ôeShadî
, "võwProje˘i⁄M©rix", 
ˇmîa
);

1540 
	`glU£Progøm
(
dŸãdShadî
);

1541 
	`shadî_£t_unif‹m_m©4
(
dŸãdShadî
, "võwProje˘i⁄M©rix", 
ˇmîa
);

1542 
	`shadî_£t_unif‹m_Êﬂt
(
dŸãdShadî
, "time", 
tŸÆ_time
);

1543 
	`glU£Progøm
(
°rögShadî
);

1544 
	`shadî_£t_unif‹m_m©4
(
°rögShadî
, "võwProje˘i⁄M©rix", 
ˇmîa
);

1548 
	`•rôe_wrôe_out
(
Êo‹_wrôe
, 
ˇmîa
);

1549 
	`•rôe_wrôe_out
(
põ˚_wrôe
, 
ˇmîa
);

1550 
	`•rôe_wrôe_out
(
symbﬁ_wrôe
, 
ˇmîa
);

1551 
	`•rôe_wrôe_out
(
ui_wrôe
, 
ˇmîa
);

1556 
	`glU£Progøm
(
dŸãdShadî
);

1557 
	`glBödVîãxAºay
(
dŸãd_VAO
);

1558 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
dŸãd_posôi⁄s_buf„r
);

1559 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
vec3
Ë* 
dŸãd_tŸÆ_døwn
, 
dŸãd_posôi⁄s_˝u
);

1560 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
dŸãd_sˇÀ_buf„r
);

1561 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
vec2
Ë* 
dŸãd_tŸÆ_døwn
, 
dŸãd_sˇÀ_˝u
);

1563 
	`glDøwEÀmítsIn°™˚d
(
GL_TRIANGLES
, 6, 
GL_UNSIGNED_INT
, 0, 
dŸãd_tŸÆ_døwn
);

1568 
	`glU£Progøm
(
°rögShadî
);

1570 
	`glBödVîãxAºay
(
°rög_VAO
);

1572 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
°rög_©œs_buf„r
);

1573 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
vec4
Ë* *
ãxt_døw_öfo
.
cuºít_numbî_døwn
,Åext_døw_öfo.
°rög_©œs_˝u
);

1574 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
°rög_m©rix_buf„r
);

1575 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
m©4
Ë* *
ãxt_døw_öfo
.
cuºít_numbî_døwn
,Åext_døw_öfo.
°rög_m©rix_˝u
);

1576 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
°rög_cﬁ‹_buf„r
);

1577 
	`glBuf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
glm
::
vec4
)** 
ãxt_døw_öfo
.
cuºít_numbî_døwn
,Åext_døw_öfo.
°rög_cﬁ‹_˝u
);

1578 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
°rög_ãxtuª
);

1579 
	`glDøwEÀmítsIn°™˚d
(
GL_TRIANGLES
, 6, 
GL_UNSIGNED_INT
, 0, *
ãxt_døw_öfo
.
cuºít_numbî_døwn
);

1583 #¥agm®
ídªgi⁄


1584 #¥agm®
ªgi⁄
 
Föish
 
™d
 
ª£t
 
√xt
 
‰ame
.

1585 
	`SDL_GL_Sw≠Wödow
(
wödow
);

1587 
dŸãd_tŸÆ_døwn
 = 0;

1588 *
ãxt_døw_öfo
.
cuºít_numbî_døwn
 = 0;

1590 
Êo‹_wrôe
->
num_døw
 = 0;

1591 
põ˚_wrôe
->
num_døw
 = 0;

1592 
symbﬁ_wrôe
->
num_døw
 = 0;

1593 
ui_wrôe
->
num_døw
 = 0;

1594 
	`mem‹y_˛ór
(
‰ame_mem‹y
);

1595 #¥agm®
ídªgi⁄


1597 
kìp_ru¬ög_öföôe_lo›
 = 
ru¬ög
;

1598 
	}
}

1600 
	$maö
(
¨gc
, *
¨gv
[])

1602 #¥agm®
ªgi⁄
 
SDL_Sëup


1604 
	`SDL_Inô
(
SDL_INIT_AUDIO
 | 
SDL_INIT_VIDEO
 | 
SDL_INIT_TIMER
 | 
SDL_WINDOW_RESIZABLE
);

1606 
	`SDL_GL_SëAâribuã
(
SDL_GL_CONTEXT_MAJOR_VERSION
, 3);

1607 
	`SDL_GL_SëAâribuã
(
SDL_GL_CONTEXT_MINOR_VERSION
, 0);

1610 
	`SDL_GL_SëAâribuã
(
SDL_GL_DOUBLEBUFFER
, 1);

1611 
	`SDL_GL_SëAâribuã
(
SDL_GL_DEPTH_SIZE
, 24);

1621 
SDL_GLC⁄ãxt
 
maöC⁄ãxt
;

1622 
wödow
 = 
	`SDL_Cª©eWödow
("Ca°À El£whîe", 
SDL_WINDOWPOS_CENTERED
,SDL_WINDOWPOS_CENTERED, 
SCREEN_STARTING_WIDTH
, 
SCREEN_STARTING_HEIGHT
, 
SDL_WINDOW_OPENGL
 | 
SDL_WINDOW_SHOWN
);

1623 
maöC⁄ãxt
 = 
	`SDL_GL_Cª©eC⁄ãxt
(
wödow
);

1624 i‡(
maöC⁄ãxt
 =
NULL
)

1626 
	`¥ötf
("we have failedÅo initialiseÅhe gl context");

1628 autÿ
rdr
 = 
	`SDL_Cª©eRídîî
(

1629 
wödow
, -1, 
SDL_RENDERER_ACCELERATED
 | 
SDL_RENDERER_TARGETTEXTURE
);

1630 #i‚de‡
EMSCRIPTEN


1631 i‡(!
	`gœdLﬂdGLLﬂdî
((
GLADlﬂd¥oc
)
SDL_GL_GëProcAddªss
))

1637 #¥agm®
ídªgi⁄


1639 #¥agm®
ªgi⁄
 
Mem‹y_AND_TimeMachöe_AND_Clock_Sëup


1640 
	`¥ötf
("Hello worldábc\n");

1641 
‰ame_mem‹y
 = 
	`mem‹y_¸óã
(3000000);

1642 
≥rm™ít_mem‹y
 = 
	`mem‹y_¸óã
(30000000);

1643 
míu_mem‹y
 = 
	`mem‹y_¸óã
(3000000);

1644 
edô‹_mem‹y
 = 
	`mem‹y_¸óã
(30000000);

1645 
∂ay_mem‹y
 = 
	`mem‹y_¸óã
(3000000);

1646 
w‹ld_mem‹y
 = 
	`mem‹y_¸óã
(30000000);

1647 
Àvñ_mem‹y
 = 
	`mem‹y_¸óã
(30000000);

1648 
™im©i⁄_mem‹y
 = 
	`mem‹y_¸óã
(3000000);

1649 
ãxt_mem‹y
 = 
	`mem‹y_¸óã
(300000);

1652 #¥agm®
ídªgi⁄


1653 #¥agm®
ªgi⁄
 
Ne°ed
 
GPU
 
Sëup


1655 #¥agm®
ªgi⁄
 
Basic
 
Sëup


1656 
vîti˚s
[] = {

1662 
posôi⁄s
[] = {

1670 
©œs
[] = {

1678 
ödi˚s
[] = {

1683 
	`¥ötf
("HellloooÇo?\n/n)");

1684 
	`glE«bÀ
(
GL_DEPTH_TEST
);

1685 
	`¥ötf
("HELL YEAH!\n/n");

1686 
	`glDïthFunc
(
GL_LESS
);

1687 
	`glE«bÀ
(
GL_BLEND
);

1688 
	`glBÀndFunc
(
GL_SRC_ALPHA
, 
GL_ONE_MINUS_SRC_ALPHA
);

1690 
•rôeShadî
 = 
	`shadî_compûe_¥ogøm
("movesprite.vs", "movesprite.f");

1691 
fuŒS¥ôeShadî
 = 
	`shadî_compûe_¥ogøm
("fullsprite.vs", "color_sprite.f");

1692 
dŸãdShadî
 = 
	`shadî_compûe_¥ogøm
("dottedlines.vs", "dottedlines.f");

1693 
ãxtShadî
 = 
	`shadî_compûe_¥ogøm
("text.vs", "sprite.f");

1694 
°rögShadî
 = 
	`shadî_compûe_¥ogøm
("string.vs", "string.f");

1696 
Êo‹_©œs_2
 = 
	`ªsour˚_lﬂd_image_‰om_fûe_⁄to_gpu
("floor.png");

1697 
põ˚_©œs_2
 = 
	`ªsour˚_lﬂd_image_‰om_fûe_⁄to_gpu
("piece.png");

1698 
symbﬁ_©œs_2
 = 
	`ªsour˚_lﬂd_image_‰om_fûe_⁄to_gpu
("symbols.png");

1699 
ui_©œs_2
 = 
	`ªsour˚_lﬂd_image_‰om_fûe_⁄to_gpu
("ui.png");

1704 
	`glU£Progøm
(
•rôeShadî
);

1706 
vîti˚s_VBO
;

1707 
vîti˚s_EBO
;

1710 
	`glGíBuf„rs
(1, &
vîti˚s_VBO
);

1711 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
vîti˚s_VBO
);

1712 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
vîti˚s
), vîti˚s, 
GL_STATIC_DRAW
);

1714 
	`glGíBuf„rs
(1, &
vîti˚s_EBO
);

1715 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vîti˚s_EBO
);

1716 
	`glBuf„rD©a
(
GL_ELEMENT_ARRAY_BUFFER
, (
ödi˚s
), indi˚s, 
GL_STATIC_DRAW
);

1721 
Êo‹_wrôe
 = 
•rôe_wrôe_make


1723 
Êo‹_©œs_2
,

1724 
fuŒS¥ôeShadî
,

1725 
≥rm™ít_mem‹y
,

1727 
vîti˚s_VBO
,

1728 
vîti˚s_EBO
,

1729 
ãxtuªAs£ts
::
	`FLOOR_posôi⁄s
(
≥rm™ít_mem‹y
)

1731 
põ˚_wrôe
 = 
•rôe_wrôe_make


1733 
põ˚_©œs_2
,

1734 
fuŒS¥ôeShadî
,

1735 
≥rm™ít_mem‹y
,

1737 
vîti˚s_VBO
,

1738 
vîti˚s_EBO
,

1739 
ãxtuªAs£ts
::
	`PIECE_posôi⁄s
(
≥rm™ít_mem‹y
)

1741 
symbﬁ_wrôe
 = 
•rôe_wrôe_make


1743 
symbﬁ_©œs_2
,

1744 
fuŒS¥ôeShadî
,

1745 
≥rm™ít_mem‹y
,

1747 
vîti˚s_VBO
,

1748 
vîti˚s_EBO
,

1749 
ãxtuªAs£ts
::
	`SYMBOLS_posôi⁄s
(
≥rm™ít_mem‹y
)

1751 
ui_wrôe
 = 
•rôe_wrôe_make


1753 
ui_©œs_2
,

1754 
fuŒS¥ôeShadî
,

1755 
≥rm™ít_mem‹y
,

1757 
vîti˚s_VBO
,

1758 
vîti˚s_EBO
,

1759 
ãxtuªAs£ts
::
	`UI_posôi⁄s
(
≥rm™ít_mem‹y
)

1761 
Æl_wrôe
 = (
AŒWrôe
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (AllWrite));

1762 
Æl_wrôe
->
Êo‹
 = 
Êo‹_wrôe
;

1763 
Æl_wrôe
->
põ˚
 = 
põ˚_wrôe
;

1764 
Æl_wrôe
->
symbﬁ
 = 
symbﬁ_wrôe
;

1765 
Æl_wrôe
->
ui
 = 
ui_wrôe
;

1766 
Æl_wrôe
->
ãxt
 = &
ãxt_døw_öfo
;

1770 #¥agm®
ídªgi⁄


1771 #¥agm®
ªgi⁄
 
dŸãd
 
GPU
 
£tup


1772 
dŸãd_VAO
;

1773 
dŸãd_posôi⁄s_buf„r
;

1774 
dŸãd_sˇÀ_buf„r
;

1775 
dŸãd_tŸÆ_døwn
 = 0;

1776 
dŸãd_posôi⁄s_˝u
 = (
glm
::
vec3
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
MAX_NUM_DOTTED_SPRITES
 * (glm::vec3));

1777 
dŸãd_sˇÀ_˝u
 = (
glm
::
vec2
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
MAX_NUM_DOTTED_SPRITES
 * (glm::vec2));

1779 
	`glGíVîãxAºays
(1, &
dŸãd_VAO
);

1780 
	`glBödVîãxAºay
(
dŸãd_VAO
);

1782 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
vîti˚s_VBO
);

1783 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vîti˚s_EBO
);

1785 
posôi⁄
 = 
	`glGëAâribLoˇti⁄
(
dŸãdShadî
, "pos");

1786 
	`glVîãxAâribPoöãr
(
posôi⁄
, 3, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)0);

1787 
	`glE«bÀVîãxAâribAºay
(
posôi⁄
);

1789 
	`glGíBuf„rs
(1, &
dŸãd_posôi⁄s_buf„r
);

1790 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
dŸãd_posôi⁄s_buf„r
);

1791 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
vec3
)* 
MAX_NUM_DOTTED_SPRITES
, 
NULL
, 
GL_DYNAMIC_DRAW
);

1793 
posôi⁄_off£t
 = 
	`glGëAâribLoˇti⁄
(
dŸãdShadî
, "positionOffset");

1794 
	`glVîãxAâribPoöãr
(
posôi⁄_off£t
, 3, 
GL_FLOAT
, 
GL_FALSE
, 3 * (), (*)0);

1795 
	`glE«bÀVîãxAâribAºay
(
posôi⁄_off£t
);

1796 
	`glVîãxAâribDivis‹
(
posôi⁄_off£t
, 1);

1797 
°d
::
cout
 << "po†√w stuff" << std::
ídl
;

1798 
	`glGíBuf„rs
(1, &
dŸãd_sˇÀ_buf„r
);

1799 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1800 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
dŸãd_sˇÀ_buf„r
);

1801 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1802 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
vec2
)* 
MAX_NUM_DOTTED_SPRITES
, 
NULL
, 
GL_DYNAMIC_DRAW
);

1803 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1805 
sˇÀ
 = 
	`glGëAâribLoˇti⁄
(
dŸãdShadî
, "scale");

1806 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1807 
	`glVîãxAâribPoöãr
(
sˇÀ
, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (), (*)0);

1808 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1809 
	`glE«bÀVîãxAâribAºay
(
sˇÀ
);

1810 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1811 
	`glVîãxAâribDivis‹
(
sˇÀ
, 1);

1812 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

1815 #¥agm®
ídªgi⁄


1816 #¥agm®
ªgi⁄
 
°rög
 
GPU
 
£tup


1817 
	`shadî_u£
(
°rögShadî
);

1819 
ãxt_døw_öfo
.
cuºít_numbî_døwn
 = (*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
,());

1820 *
ãxt_døw_öfo
.
cuºít_numbî_døwn
 = 0;

1821 
ãxt_døw_öfo
.
°rög_©œs_˝u
 = (
glm
::
vec4
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
MAX_NUM_CHARACTERS
 * (glm::vec4));

1822 
ãxt_døw_öfo
.
°rög_m©rix_˝u
 = (
glm
::
m©4
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
MAX_NUM_CHARACTERS
 * (glm::mat4));

1823 
ãxt_døw_öfo
.
°rög_cﬁ‹_˝u
 = (
glm
::
vec4
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, 
MAX_NUM_CHARACTERS
 * (glm::vec4));

1825 
	`glGíVîãxAºays
(1, &
°rög_VAO
);

1826 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< ":261" << std::
ídl
;

1827 
	`glBödVîãxAºay
(
°rög_VAO
);

1829 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
vîti˚s_VBO
);

1830 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vîti˚s_EBO
);

1832 
posôi⁄
 = 0;

1833 
	`glVîãxAâribPoöãr
(
posôi⁄
, 3, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)0);

1834 
	`glE«bÀVîãxAâribAºay
(
posôi⁄
);

1836 
ãxCo‹d
 = 1;

1837 
	`glVîãxAâribPoöãr
(
ãxCo‹d
, 2, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)(3 * ()));

1838 
	`glE«bÀVîãxAâribAºay
(
ãxCo‹d
);

1840 
	`glGíBuf„rs
(1, &
°rög_m©rix_buf„r
);

1841 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
°rög_m©rix_buf„r
);

1842 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
m©4
)* 
MAX_NUM_CHARACTERS
, 
NULL
, 
GL_DYNAMIC_DRAW
);

1844 
m©rixOff£t
 = 4;

1845 
	`glVîãxAâribPoöãr
(
m©rixOff£t
, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)0);

1846 
	`glVîãxAâribPoöãr
(
m©rixOff£t
 + 1, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)(4 * ()));

1848 
	`glVîãxAâribPoöãr
(
m©rixOff£t
 + 2, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)(8 * ()));

1849 
	`glVîãxAâribPoöãr
(
m©rixOff£t
 + 3, 4, 
GL_FLOAT
, 
Ál£
, 16 * (), (*)(12 * ()));

1850 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
);

1851 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
 + 1);

1852 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
 + 2);

1853 
	`glE«bÀVîãxAâribAºay
(
m©rixOff£t
 + 3);

1854 
	`glVîãxAâribDivis‹
(
m©rixOff£t
, 1);

1855 
	`glVîãxAâribDivis‹
(
m©rixOff£t
 + 1, 1);

1856 
	`glVîãxAâribDivis‹
(
m©rixOff£t
 + 2, 1);

1857 
	`glVîãxAâribDivis‹
(
m©rixOff£t
 + 3, 1);

1859 
©œsOff£t
 = 2;

1861 
	`glGíBuf„rs
(1, &
°rög_©œs_buf„r
);

1862 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
°rög_©œs_buf„r
);

1863 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
vec4
)* 
MAX_NUM_CHARACTERS
, 
NULL
, 
GL_DYNAMIC_DRAW
);

1865 
	`glVîãxAâribPoöãr
(
©œsOff£t
, 4, 
GL_FLOAT
, 
Ál£
, 4 * (), (*)(0));

1866 
	`glE«bÀVîãxAâribAºay
(
©œsOff£t
);

1867 
	`glVîãxAâribDivis‹
(
©œsOff£t
, 1);

1869 
ãxtCﬁ‹
 = 3;

1871 
	`glGíBuf„rs
(1, &
°rög_cﬁ‹_buf„r
);

1872 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
°rög_cﬁ‹_buf„r
);

1873 
	`glBuf„rD©a
(
GL_ARRAY_BUFFER
, (
glm
::
vec4
)* 
MAX_NUM_CHARACTERS
, 
NULL
, 
GL_DYNAMIC_DRAW
);

1875 
	`glVîãxAâribPoöãr
(
ãxtCﬁ‹
, 4, 
GL_FLOAT
, 
Ál£
, 4 * (), (*)(0));

1876 
	`glE«bÀVîãxAâribAºay
(
ãxtCﬁ‹
);

1878 #¥agm®
ídªgi⁄


1879 #¥agm®
ªgi⁄
 
Camîa
 
Sëup
 
And
 
UtûSåu˘s


1885 
ˇmîa_À·_x
 = 0;

1886 
ˇmîa_bŸtom_y
 = 0;

1887 
ˇmîa_right_x
;

1888 
ˇmîa_t›_y
;

1891 
ˇmîa_width
 = 
s¸ìn_width
;

1892 
ˇmîa_height
 = 
s¸ìn_height
;

1893 
øtio
 = ()
ˇmîa_width
 / ()
ˇmîa_height
;

1894 
ˇmîa_right_x
 = 
GAME_HEIGHT_START
 * 
øtio
;

1895 
ˇmîa_t›_y
 = 
GAME_HEIGHT_START
;

1898 
ˇmîa_game
.
À·
 = 
ˇmîa_À·_x
;

1899 
ˇmîa_game
.
right
 = 
ˇmîa_right_x
;

1900 
ˇmîa_game
.
up
 = 
ˇmîa_t›_y
;

1901 
ˇmîa_game
.
down
 = 
ˇmîa_bŸtom_y
;

1902 
ˇmîa_game
.
˛o£Poöt
 = -20;

1903 
ˇmîa_game
.
ÁrPoöt
 = 20.0f;

1905 
ˇmîa_võwp‹t
.
À·
 = 0;

1906 
ˇmîa_võwp‹t
.
right
 = 
s¸ìn_width
;

1907 
ˇmîa_võwp‹t
.
down
 = 0;

1908 
ˇmîa_võwp‹t
.
up
 = 
s¸ìn_height
;

1911 
ˇmîa
 = 
	`ˇmîa_make_m©rix
(
ˇmîa_game
);

1913 #¥agm®
ídªgi⁄


1914 #¥agm®
ªgi⁄
 
TTF
 
f⁄t
 
£tup


1916 
FT_Libøry
 
·
;

1917 if(
	`FT_Inô_FªeTy≥
(&
·
))

1918 
°d
::
cout
 << "ERROR - fªëy≥ÜibøryÜﬂd faûed.áœs." << std::
ídl
;

1920 
°d
::
cout
 << "suc˚ssfuŒyÜﬂded fªëy≥Üibøry" << std::
ídl
;

1921 
FT_Fa˚
 
Á˚
;

1922 i‡(
	`FT_New_Fa˚
(
·
, "as£ts/¨ül.âf", 0, &
Á˚
))

1923 
°d
::
cout
 << "ERROR - fªëy≥ faûedÅÿlﬂd f⁄t." << std::
ídl
;

1925 
°d
::
cout
 << "suc˚ssfuŒyÜﬂded fªëy≥ f⁄t." << std::
ídl
;

1926 
	`FT_Së_Pixñ_Sizes
(
Á˚
, 0, 
FONT_CHARACTER_HEIGHT
);

1928 
GLuöt
 
ãxt_VAO
;

1930 
	`glGíVîãxAºays
(1, &
ãxt_VAO
);

1931 
	`glBödVîãxAºay
(
ãxt_VAO
);

1933 
	`glBödBuf„r
(
GL_ARRAY_BUFFER
, 
vîti˚s_VBO
);

1934 
	`glBödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vîti˚s_EBO
);

1936 
GLöt
 
posôi⁄
 = 
	`glGëAâribLoˇti⁄
(
ãxtShadî
, "pos");

1937 
	`glVîãxAâribPoöãr
(
posôi⁄
, 3, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)0);

1938 
	`glE«bÀVîãxAâribAºay
(
posôi⁄
);

1940 
GLöt
 
ãxCo‹d
 = 
	`glGëAâribLoˇti⁄
(
ãxtShadî
, "texCoords");

1941 
	`glVîãxAâribPoöãr
(
ãxCo‹d
, 2, 
GL_FLOAT
, 
GL_FALSE
, 5 * (), (*)(3 * ()));

1942 
	`glE«bÀVîãxAâribAºay
(
ãxCo‹d
);

1945 
°rög_ãxtuª
;

1946 
ãxt_døw_öfo
.
ãxt_posôi⁄s
 = (
AABB
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (AABBË* 
FONT_NUM_CHARACTERS
);

1947 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
 = (
AABB
*Ë
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (AABBË* 
FONT_NUM_CHARACTERS
);

1948 * 
ch¨_ãxtuª
 = (*)
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (Ë* 
FONT_NUM_CHARACTERS
);

1949 
ãxt_døw_öfo
.
åue_f⁄t_ª„ªn˚
 = (
TTF_Ch¨a˘î
*)
	`mem‹y_Æloc
(
≥rm™ít_mem‹y
, (TTF_Ch¨a˘îË* 
FONT_NUM_CHARACTERS
);

1951 
cuºít_width_wrôãn
 = 0;

1952 
cuºít_height_wrôãn
 = 0;

1953 
ãxt_FBO
;

1954 
	`glGíFømebuf„rs
(1, &
ãxt_FBO
);

1955 
	`glBödFømebuf„r
(
GL_FRAMEBUFFER
, 
ãxt_FBO
);

1957 
	`glGíTextuªs
(1,&
°rög_ãxtuª
);

1958 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
°rög_ãxtuª
);

1959 
	`glTexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGB
, 
FONT_ATLAS_WIDTH
, 
FONT_ATLAS_HEIGHT
, 0, GL_RGB, 
GL_UNSIGNED_BYTE
, 
NULL
);

1960 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
);

1961 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
);

1963 
	`glFømebuf„rTextuª2D
(
GL_FRAMEBUFFER
, 
GL_COLOR_ATTACHMENT0
, 
GL_TEXTURE_2D
, 
°rög_ãxtuª
, 0);

1965 
	`glGíTextuªs
(
FONT_NUM_CHARACTERS
, 
ch¨_ãxtuª
);

1966 
	`glBödVîãxAºay
(
ãxt_VAO
);

1967 
	`glU£Progøm
(
ãxtShadî
);

1969 
	`FT_Së_Pixñ_Sizes
(
Á˚
, 0, 
FONT_CHARACTER_HEIGHT
);

1970 
	`glPixñSt‹ei
(
GL_UNPACK_ALIGNMENT
, 1);

1972 
	`glVõwp‹t
(0, 0, 
FONT_ATLAS_WIDTH
, 
FONT_ATLAS_HEIGHT
);

1973 i‡(
	`glCheckFømebuf„rSètus
(
GL_FRAMEBUFFER
Ë!
GL_FRAMEBUFFER_COMPLETE
)

1974 
°d
::
cout
 << "ERROR - Fømebuf„∏i†nŸ com∂ëe!" << std::
ídl
;

1976 
°d
::
cout
 << "‰amebuf„∏com∂ëe!" << std::
ídl
;

1978 
c
 = 0; c < 
FONT_NUM_CHARACTERS
; c++)

1980 i‡(
	`FT_Lﬂd_Ch¨
(
Á˚
, 
c
, 
FT_LOAD_RENDER
))

1982 
°d
::
cout
 << "ERROR - uh oh, faûedÅÿlﬂd ch¨a˘î glyph" << std::
ídl
;

1987 
Á˚_width
 = 
Á˚
->
glyph
->
bôm≠
.
width
;

1988 
Á˚_height
 = 
Á˚
->
glyph
->
bôm≠
.
rows
;

1990 
ãxtuªID
 = 
ch¨_ãxtuª
[
c
];

1991 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ch¨_ãxtuª
[
c
]);

1992 
	`glTexImage2D
(

1993 
GL_TEXTURE_2D
,

1995 
GL_R8
,

1996 
Á˚
->
glyph
->
bôm≠
.
width
,

1997 
Á˚
->
glyph
->
bôm≠
.
rows
,

1999 
GL_RED
,

2000 
GL_UNSIGNED_BYTE
,

2001 
Á˚
->
glyph
->
bôm≠
.
buf„r
);

2002 
°d
::
cout
 << 
	`glGëEº‹
(Ë<< std::
ídl
;

2003 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

2004 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

2005 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_LINEAR
);

2006 
	`glTexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_LINEAR
);

2011 
wrôe_width
 = 
Á˚_width
 + 2;

2012 
boﬁ
 
room_to_wrôe
 = 
wrôe_width
 + 
cuºít_width_wrôãn
 < 
FONT_ATLAS_WIDTH
;

2013 i‡(!
room_to_wrôe
)

2015 
cuºít_width_wrôãn
 = 0;

2016 
cuºít_height_wrôãn
 +
FONT_CHARACTER_HEIGHT
 + 2;

2020 
AABB
 
ãmp
 = 
	`m©h_AABB_¸óã
((Ë(
cuºít_width_wrôãn
 + 1), (Ë(
cuºít_height_wrôãn
 + 1), (Ë
Á˚_width
, (Ë
Á˚_height
);

2021 
ãxt_døw_öfo
.
ãxt_posôi⁄s
[
c
] = 
ãmp
;

2022 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
[
c
] =Åext_døw_öfo.
ãxt_posôi⁄s
[c];

2023 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
[
c
].
x
 =Åext_døw_öfo.
ãxt_posôi⁄s
[c].x / 
FONT_ATLAS_WIDTH
;

2024 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
[
c
].
y
 =Åext_døw_öfo.
ãxt_posôi⁄s
[c].y / 
FONT_ATLAS_HEIGHT
;

2025 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
[
c
].
w
 =Åext_døw_öfo.
ãxt_posôi⁄s
[c].w / 
FONT_ATLAS_WIDTH
;

2026 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
[
c
].
h
 =Åext_døw_öfo.
ãxt_posôi⁄s
[c].h / 
FONT_ATLAS_HEIGHT
;

2029 
AABB
 
ãmp2
 = 
ãxt_døw_öfo
.
ãxt_posôi⁄s_n‹mÆized
[
c
];

2030 
glm
::
vec4
 
ãmp3
 = *(glm::vec4*Ë& 
ãmp2
;

2031 
	`shadî_£t_unif‹m_vec4
(
ãxtShadî
, "off£t", 
ãmp3
);

2032 
cuºít_width_wrôãn
 +
wrôe_width
;

2033 
	`glDøwEÀmíts
(
GL_TRIANGLES
, 6, 
GL_UNSIGNED_INT
, 0);

2035 
ãxt_døw_öfo
.
åue_f⁄t_ª„ªn˚
[
c
].
Size
 = 
glm
::
	`ivec2
(
Á˚
->
glyph
->
bôm≠
.
width
, fa˚->glyph->bôm≠.
rows
);

2036 
ãxt_døw_öfo
.
åue_f⁄t_ª„ªn˚
[
c
].
Bórög
 = 
glm
::
	`ivec2
(
Á˚
->
glyph
->
bôm≠_À·
, fa˚->glyph->
bôm≠_t›
);

2037 
ãxt_døw_öfo
.
åue_f⁄t_ª„ªn˚
[
c
].
adv™˚
 = (
Á˚
->
glyph
->adv™˚.
x
);

2039 
	`glBödTextuª
(
GL_TEXTURE_2D
, 0);

2043 
	`glDñëeFømebuf„rs
(1,&
ãxt_FBO
);

2044 
	`glBödFømebuf„r
(
GL_FRAMEBUFFER
, 0);

2045 
	`glVõwp‹t
(0, 0, 
s¸ìn_width
, 
s¸ìn_height
);

2047 #¥agm®
ídªgi⁄


2049 #¥agm®
ídªgi⁄


2050 #¥agm®
ªgi⁄
 
MAIN_LOOP_INIT


2051 
s˚√
 = 
ST_MENU
;

2052 
míu_s˚√_°©e
 = 
	`£tup_maö_míu
(
míu_mem‹y
, 
míu_a˘i⁄_√w_game
, 
míu_a˘i⁄_c⁄töue_game
, 
míu_a˘i⁄_Àvñ_edô‹
);

2054 
ui_°©e
 = 
	`˛ick_ui_öô
(
≥rm™ít_mem‹y
);

2055 #¥agm®
ídªgi⁄


2057 #ifde‡
EMSCRIPTEN


2059 
	`ems¸ùãn_£t_maö_lo›
(
maölo›fun˘i⁄
, 0, 0);

2061 
åue
)

2063 
	`maölo›fun˘i⁄
();

2064 i‡(!
kìp_ru¬ög_öföôe_lo›
)

2069 
	`¥ötf
("%s\n", 
	`glGëSåög
(
GL_VERSION
));

2070 
	`SDL_De°royWödow
(
wödow
);

2071 
	`SDL_Quô
();

2075 
	}
}

2077 
	$èke_∂ayî_a˘i⁄
(
Game°©eTimeMachöe
* 
maybe_time_machöe
, 
I¡Paú
 
døw_posôi⁄
, 
Edô‹UISèã
* 
ui_°©e
, 
Dúe˘i⁄
 
a˘i⁄
, 
Mem‹y
* 
Àvñ_mem‹y
, Mem‹y* 
‰ame_mem‹y
, Mem‹y* 
™im©i⁄_mem‹y
)

2079 
GameA˘i⁄Jou∫Æ
* 
jou∫Æ
 = 
	`game°©e_timemachöe_èke_a˘i⁄
(
maybe_time_machöe
, 
a˘i⁄
, 
Àvñ_mem‹y
, 
‰ame_mem‹y
);

2080 
GameSèãAnim©i⁄
* 
™im©i⁄
 = 
jou∫Æ
->
maybe_™im©i⁄
;

2081 
ui_°©e
->
time_tûl_∂ayî_ˇn_move
 = 
WAIT_BETWEEN_PLAYER_MOVE_REPEAT
;

2082 
ui_°©e
->
time_sö˚_œ°_∂ayî_a˘i⁄
 = 0;

2083 
	}
}

2135 
AABB
 
	$ˇlcuœã_ouéöe_‰om_¸óã_öfo
(
Mem‹y
* 
‰ame_mem‹y
, 
TimeMachöeEdô‹
* 
timeMachöe
, 
Edô‹UISèã
 
ui_°©e
)

2137 
I¡Paú
 
cuºít_posôi⁄
 = 
	`m©h_öçaú_¸óã
((Ë
	`Êo‹
(
ui_°©e
.
mou£GamePos
.
x
), (ËÊo‹(ui_°©e.mou£GamePos.
y
));

2138 
I¡Paú
 
bŸtom_À·
 = 
	`m©h_öçaú_¸óã
(
	`möi
(
cuºít_posôi⁄
.
x
, 
ui_°©e
.
un
.
¸óã
.
gamew‹ld_°¨t_pos
.x),

2139 
	`möi
(
cuºít_posôi⁄
.
y
, 
ui_°©e
.
un
.
¸óã
.
gamew‹ld_°¨t_pos
.y));

2140 
I¡Paú
 
t›_right
 = 
	`m©h_öçaú_¸óã
(
	`maxi
(
cuºít_posôi⁄
.
x
, 
ui_°©e
.
un
.
¸óã
.
gamew‹ld_°¨t_pos
.x),

2141 
	`maxi
(
cuºít_posôi⁄
.
y
, 
ui_°©e
.
un
.
¸óã
.
gamew‹ld_°¨t_pos
.y));

2142 
w
 = 
t›_right
.
x
 - 
bŸtom_À·
.x + 1;

2143 
h
 = 
t›_right
.
y
 - 
bŸtom_À·
.y + 1;

2144 
AABB
 
√xt_size
 = 
	`m©h_AABB_¸óã
((Ë
bŸtom_À·
.
x
, (ËbŸtom_À·.
y
, (Ë
w
, (Ë
h
);

2145  
√xt_size
;

2146 
	}
}

2147 
AABB
 
	$ˇlcuœã_ouéöe_‰om_move_öfo
(
Mem‹y
* 
‰ame_mem‹y
, 
TimeMachöeEdô‹
* 
timeMachöe
, 
Edô‹UISèã
 
ui_°©e
)

2150 
glm
::
vec2
 
di°™˚
 = 
ui_°©e
.
mou£GamePos
 - ui_°©e.
un
.
move
.
move_°¨t_posôi⁄
;

2152 
I¡Paú
 
off£t
 = 
	`m©h_öçaú_¸óã
(()
di°™˚
.
x
, ()di°™˚.
y
);

2153 
game°©e_ödex
 = 
ui_°©e
.
un
.
move
.
movög_game°©e_ödex
;

2154 
GameSèã
* 
cuºít_game°©e
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
game°©e_ödex
];

2155 
I¡Paú
 
°¨tPosôi⁄
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
game°©e_ödex
];

2156 
AABB
 
ouéöe
 = 
	`m©h_AABB_¸óã
((Ë(
°¨tPosôi⁄
.
x
 + 
off£t
.x), (Ë(°¨tPosôi⁄.
y
 + off£t.y), (Ë
cuºít_game°©e
->
w
, (Ëcuºít_game°©e->
h
);

2157  
ouéöe
;

2158 
	}
}

2159 
AABB
 
	$ˇlcuœã_ouéöe_posôi⁄_‰om_døg_öfo
(
Mem‹y
* 
‰ame_mem‹y
,

2160 
TimeMachöeEdô‹
* 
timeMachöe
,

2161 
Edô‹UISèã
 
ui_°©e
,

2162 
glm
::
vec2
 
døggög_°¨t_posôi⁄_ö_game•a˚
)

2165 
glm
::
vec2
 
off£t
 = 
ui_°©e
.
mou£GamePos
 - 
døggög_°¨t_posôi⁄_ö_game•a˚
;

2167 
I¡Paú
 
èrgëãd_game°©e_posôi⁄
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
];

2168 
GameSèã
* 
èrgëãd_game°©e
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
ui_°©e
.
un
.
ªsize
.
døggög_game°©e_ödex
];

2169 
èrgëãd_game°©e_width
 = 
èrgëãd_game°©e
->
w
;

2170 
èrgëãd_game°©e_height
 = 
èrgëãd_game°©e
->
h
;

2172 
AABB
 
ﬁd
 = 
	`m©h_AABB_¸óã_öt
(
èrgëãd_game°©e_posôi⁄
.
x
,

2173 
èrgëãd_game°©e_posôi⁄
.
y
,

2174 
èrgëãd_game°©e_width
,

2175 
èrgëãd_game°©e_height
);

2176 
AABB
 
√xt
 = 
ﬁd
;

2178 
off£t_x
 = 
	`sign
(
off£t
.
x
) * 0.5f;

2179 
off£t_y
 = 
	`sign
(
off£t
.
y
) * 0.5f;

2180 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_À·
)

2182 
À·_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
x
 - (()
√xt
.xË+ 
off£t_x
);

2183 i‡(
À·_movemít
 != 0)

2185 
√xt
.
x
 +
À·_movemít
;

2186 
√xt
.
w
 -
À·_movemít
;

2189 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_right
)

2191 
right_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
x
 - (()
√xt
.x +Çext.
w
Ë+ 
off£t_x
);

2192 i‡(
right_movemít
 != 0)

2193 
√xt
.
w
 +
right_movemít
;

2195 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_down
)

2197 
down_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
y
 - (()
√xt
.yË+ 
off£t_y
);

2198 i‡(
down_movemít
 != 0)

2200 
√xt
.
y
 +
down_movemít
;

2201 
√xt
.
h
 -
down_movemít
;

2204 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_up
)

2206 
up_movemít
 = ()(
ui_°©e
.
mou£GamePos
.
y
 - (()
√xt
.y +Çext.
h
Ë+ 
off£t_y
);

2207 i‡(
up_movemít
 != 0)

2208 
√xt
.
h
 +
up_movemít
;

2211 
boﬁ
 
ch™geOccuªd
 = 
√xt
.
x
 !
èrgëãd_game°©e_posôi⁄
.x

2212 || 
√xt
.
y
 !
èrgëãd_game°©e_posôi⁄
.y

2213 || 
√xt
.
w
 !
èrgëãd_game°©e
->w

2214 || 
√xt
.
h
 !
èrgëãd_game°©e
->h;

2217 i‡(
√xt
.
w
 <= 0)

2219 
go_back
 = (Ë
√xt
.
w
 - 1;

2220 
√xt
.
w
 = 1;

2221 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_À·
)

2223 
√xt
.
x
 +
go_back
;

2227 i‡(
√xt
.
h
 <= 0)

2229 
go_back
 = (Ë
√xt
.
h
 - 1;

2230 
√xt
.
h
 = 1;

2231 i‡(
ui_°©e
.
un
.
ªsize
.
døggög_down
)

2233 
√xt
.
y
 +
go_back
;

2236  
√xt
;

2237 
	}
}

2240 
boﬁ
 
	$MaybeAµlyBrush
(
Game°©eBrush
* 
∑Àã
,
cuºítBrush
, 
Edô‹UISèã
* 
ui_°©e
, 
TimeMachöeEdô‹
* 
timeMachöe
,
glm
::
vec2
 
mou£GamePos
)

2242 
i
 = 0; i < 
timeMachöe
->
w‹ld_°©e
.
num_Àvñ
; i++)

2244 
GameSèã
* 
cuºítSèã
 = 
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
i
];

2245 
À·
 = (Ë
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
;

2246 
right
 = (Ë(
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
x
 + 
cuºítSèã
->
w
);

2247 
down
 = (Ë
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
;

2248 
up
 = (Ë(
timeMachöe
->
w‹ld_°©e
.
Àvñ_posôi⁄
[
i
].
y
 + 
cuºítSèã
->
h
);

2249 
boﬁ
 
˛ickedFlo‹
 = 
	`m©h_˛ick_is_öside_AABB
(
À·
, 
down
, 
right
, 
up
, 
mou£GamePos
.
x
, mou£GamePos.
y
);

2250 i‡(
˛ickedFlo‹
)

2253 
≥r˚¡ageX
 = 
	`≥r˚¡_bëwìn_two_poöts
(
mou£GamePos
.
x
, 
À·
, 
right
);

2254 
≥r˚¡ageY
 = 
	`≥r˚¡_bëwìn_two_poöts
(
mou£GamePos
.
y
, 
down
, 
up
);

2255 
x_Êo‹_˚Œ_˛icked
 = ()(
≥r˚¡ageX
 * 
cuºítSèã
->
w
);

2256 
y_Êo‹_˚Œ_˛icked
 = ()(
≥r˚¡ageY
 * 
cuºítSèã
->
h
);

2258 
I¡Paú
 
èrgë_squ¨e
 = 
	`m©h_öçaú_¸óã
(
x_Êo‹_˚Œ_˛icked
, 
y_Êo‹_˚Œ_˛icked
);

2259 
èrgë_squ¨e_1d
 = 
	`f2D
(
èrgë_squ¨e
.
x
,Å¨gë_squ¨e.
y
, 
timeMachöe
->
w‹ld_°©e
.
Àvñ_°©e
[
i
]->
w
,ÅimeMachöe->w‹ld_°©e.Àvñ_°©e[i]->
h
);

2260 
TimeMachöeEdô‹A˘i⁄
 
a˘i⁄
 = 
	`game°©e_timemachöó˘i⁄_¸óã_≠∂y_brush
(
∑Àã
[
cuºítBrush
], 
i
, 
èrgë_squ¨e
);

2262 
	`game°©e_timemachöe_edô‹_èke_a˘i⁄
(
timeMachöe
, 
NULL
, 
a˘i⁄
);

2263 
ui_°©e
->
ty≥
 = 
ECS_BRUSH
;

2264  
åue
;

2267  
Ál£
;

2268 
	}
}

2270 
GameS∑˚Camîa
 
	$m©h_ˇmîa_buûd_f‹_game°©e
(
GameSèã
* 
game°©e
, 
I¡Paú
 
posôi⁄
, 
VõwP‹tCamîa
 
võwp‹t
, 
x_∑ddög
, 
y_∑ddög
)

2272 
øtio
 = 
	`ˇmîa_øtio
(
võwp‹t
);

2273 
°¨t_x
 = (Ë
posôi⁄
.
x
;

2274 
°¨t_y
 = (Ë
posôi⁄
.
y
;

2275 
˚¡î_x
 = 
°¨t_x
 + ((
game°©e
->
w
) / 2.0f);

2276 
˚¡î_y
 = 
°¨t_y
 + ((
game°©e
->
h
) / 2.0f);

2277 
x_ªquúe
 = (
game°©e
->
w
 + 
x_∑ddög
Ë/ 
øtio
;

2278 
y_ªquúe
 = 
game°©e
->
h
 + 
y_∑ddög
;

2279 
ˇmîa_height
 = 
	`maxf
(
x_ªquúe
, 
y_ªquúe
);

2280  
	`m©h_ˇmîa_buûd
(
ˇmîa_height
, 
˚¡î_x
, 
˚¡î_y
, 
võwp‹t
);

2281 
	}
}

2282 
boﬁ
 
	$MaybeAµlyBrushInPœyMode
(
Mem‹y
* 
mem‹y
, 
Game°©eBrush
* 
∑Àã
,
cuºít_brush
, 
Edô‹UISèã
* 
ui_°©e
, 
Game°©eTimeMachöe
* 
time_machöe
, 
I¡Paú
 
cuºít_°©e_pos
, 
glm
::
vec2
 
mou£GamePos
)

2284 
GameSèã
* 
cuºít_°©e
 = &
time_machöe
->
°©e_¨øy
[time_machöe->
num_game°©es_°‹ed
 - 1];

2285 
GameSèã
* 
√xt_°©e
 = &
time_machöe
->
°©e_¨øy
[time_machöe->
num_game°©es_°‹ed
];

2286 
À·
 = (Ë
cuºít_°©e_pos
.
x
;

2287 
right
 = (Ë(
cuºít_°©e_pos
.
x
 + 
cuºít_°©e
->
w
);

2288 
down
 = (Ë
cuºít_°©e_pos
.
y
;

2289 
up
 = (Ë(
cuºít_°©e_pos
.
y
 + 
cuºít_°©e
->
h
);

2290 
boﬁ
 
˛ickedFlo‹
 = 
	`m©h_˛ick_is_öside_AABB
(
À·
, 
down
, 
right
, 
up
, 
mou£GamePos
.
x
, mou£GamePos.
y
);

2291 i‡(
˛ickedFlo‹
)

2294 
≥r˚¡ageX
 = 
	`≥r˚¡_bëwìn_two_poöts
(
mou£GamePos
.
x
, 
À·
, 
right
);

2295 
≥r˚¡ageY
 = 
	`≥r˚¡_bëwìn_two_poöts
(
mou£GamePos
.
y
, 
down
, 
up
);

2296 
x_Êo‹_˚Œ_˛icked
 = ()(
≥r˚¡ageX
 * 
cuºít_°©e
->
w
);

2297 
y_Êo‹_˚Œ_˛icked
 = ()(
≥r˚¡ageY
 * 
cuºít_°©e
->
h
);

2299 
I¡Paú
 
èrgë_squ¨e
 = 
	`m©h_öçaú_¸óã
(
x_Êo‹_˚Œ_˛icked
, 
y_Êo‹_˚Œ_˛icked
);

2301 
	`game°©e_˛⁄e_to_unôülized
(
cuºít_°©e
, 
√xt_°©e
,
mem‹y
);

2302 
	`game°©e_≠∂y_brush
(
√xt_°©e
, 
∑Àã
[
cuºít_brush
], 
x_Êo‹_˚Œ_˛icked
, 
y_Êo‹_˚Œ_˛icked
);

2303 
time_machöe
->
num_game°©es_°‹ed
++;

2304 
ui_°©e
->
ty≥
 = 
ECS_BRUSH
;

2305  
åue
;

2307  
Ál£
;

2308 
	}
}

	@
1
.
0
149
3152
AABB.cpp
Animation.cpp
Animation.h
Camera.cpp
Click.cpp
Click.h
Clock.h
Constants.cpp
Constants.h
Editor.h
EditorScene.h
EditorThree.h
EditorTimeMachine.cpp
Fonts.h
GameState.cpp
GameState.h
GamestateAI.h
GenericUtil.h
Grid.cpp
HelperGL.cpp
HelperGL.h
IntPair.cpp
MainHelpers.h
Math.h
Maths.h
Memory.cpp
Memory.h
MenuScene.h
Parse.cpp
Parse.h
ParticleSystem.h
PreludeIncludes.h
Regex.cpp
Regex.h
Resource.h
ResourceLoadText.cpp
SDL2/include/SDL.h
SDL2/include/SDL_assert.h
SDL2/include/SDL_atomic.h
SDL2/include/SDL_audio.h
SDL2/include/SDL_bits.h
SDL2/include/SDL_blendmode.h
SDL2/include/SDL_clipboard.h
SDL2/include/SDL_config.h
SDL2/include/SDL_config_android.h
SDL2/include/SDL_config_iphoneos.h
SDL2/include/SDL_config_macosx.h
SDL2/include/SDL_config_minimal.h
SDL2/include/SDL_config_pandora.h
SDL2/include/SDL_config_psp.h
SDL2/include/SDL_config_windows.h
SDL2/include/SDL_config_winrt.h
SDL2/include/SDL_config_wiz.h
SDL2/include/SDL_copying.h
SDL2/include/SDL_cpuinfo.h
SDL2/include/SDL_egl.h
SDL2/include/SDL_endian.h
SDL2/include/SDL_error.h
SDL2/include/SDL_events.h
SDL2/include/SDL_filesystem.h
SDL2/include/SDL_gamecontroller.h
SDL2/include/SDL_gesture.h
SDL2/include/SDL_haptic.h
SDL2/include/SDL_hints.h
SDL2/include/SDL_joystick.h
SDL2/include/SDL_keyboard.h
SDL2/include/SDL_keycode.h
SDL2/include/SDL_loadso.h
SDL2/include/SDL_log.h
SDL2/include/SDL_main.h
SDL2/include/SDL_messagebox.h
SDL2/include/SDL_metal.h
SDL2/include/SDL_mouse.h
SDL2/include/SDL_mutex.h
SDL2/include/SDL_name.h
SDL2/include/SDL_opengl.h
SDL2/include/SDL_opengl_glext.h
SDL2/include/SDL_opengles.h
SDL2/include/SDL_opengles2.h
SDL2/include/SDL_opengles2_gl2.h
SDL2/include/SDL_opengles2_gl2ext.h
SDL2/include/SDL_opengles2_gl2platform.h
SDL2/include/SDL_opengles2_khrplatform.h
SDL2/include/SDL_pixels.h
SDL2/include/SDL_platform.h
SDL2/include/SDL_power.h
SDL2/include/SDL_quit.h
SDL2/include/SDL_rect.h
SDL2/include/SDL_render.h
SDL2/include/SDL_revision.h
SDL2/include/SDL_rwops.h
SDL2/include/SDL_scancode.h
SDL2/include/SDL_sensor.h
SDL2/include/SDL_shape.h
SDL2/include/SDL_stdinc.h
SDL2/include/SDL_surface.h
SDL2/include/SDL_system.h
SDL2/include/SDL_syswm.h
SDL2/include/SDL_test.h
SDL2/include/SDL_test_assert.h
SDL2/include/SDL_test_common.h
SDL2/include/SDL_test_compare.h
SDL2/include/SDL_test_crc32.h
SDL2/include/SDL_test_font.h
SDL2/include/SDL_test_fuzzer.h
SDL2/include/SDL_test_harness.h
SDL2/include/SDL_test_images.h
SDL2/include/SDL_test_log.h
SDL2/include/SDL_test_md5.h
SDL2/include/SDL_test_memory.h
SDL2/include/SDL_test_random.h
SDL2/include/SDL_thread.h
SDL2/include/SDL_timer.h
SDL2/include/SDL_touch.h
SDL2/include/SDL_types.h
SDL2/include/SDL_version.h
SDL2/include/SDL_video.h
SDL2/include/SDL_vulkan.h
SDL2/include/begin_code.h
SDL2/include/close_code.h
SaveLoad.cpp
SaveLoad.h
Scratch.h
Shader.cpp
Shader.h
Side.h
Source.cpp
Sprites.cpp
Sprites.h
TextDraw.cpp
TextDraw.h
TextScene.h
TrueFontCharacter.h
Walk.cpp
World.cpp
World.h
assets/textureAssets.cpp
assets/textureAssets.h
draw.cpp
draw.h
gui.h
sprite.cpp
sprite.h
stb_image.h
textureAssets.cpp
textureAssets.h
tinyfiledialogs.c
tinyfiledialogs.h
win32_platform.cpp
